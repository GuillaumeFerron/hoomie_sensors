
bin/msp_rx.elf:     file format elf32-msp430

SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
0000aff0 l    d  .rodata	00000000 .rodata
00000200 l    d  .bss	00000000 .bss
000002aa l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 msp_rx.c
00000200 l     O .bss	00000002 node_id
00000202 l     O .bss	0000000e timer
00000210 l     O .bss	00000002 led_green_duration
00000212 l     O .bss	00000002 led_green_flag
00000214 l     O .bss	00000002 led_red_duration
00000216 l     O .bss	00000002 led_red_flag
00000218 l     O .bss	00000002 periodic_write_flag
0000021a l     O .bss	00000002 periodic_temp_flag
0000021c l     O .bss	00000002 current_buffer_pt
0000021e l     O .bss	00000002 uart_flag
00000220 l     O .bss	00000002 uart_data
00000222 l     O .bss	00000002 room_flag
00000224 l     O .bss	00000001 room
0000818a l     F .text	0000004c printhex
000081d6 l     F .text	00000076 set_node_id
0000824c l     F .text	00000278 converter
000084c4 l     F .text	0000001c led_green_blink
000084e0 l     F .text	0000001c led_red_blink
000084fc l     F .text	00000086 thread_led_green
00008582 l     F .text	000000b4 thread_led_red
000086fa l     F .text	0000007a thread_uart
00000226 l     O .bss	0000001c radio_tx_buffer
00000242 l     O .bss	0000001c radio_rx_buffer
0000025e l     O .bss	0000001c own_buffer
0000027a l     O .bss	00000002 radio_rx_flag
000088cc l     F .text	00000064 thread_rx
00008930 l     F .text	00000050 init_message
00008980 l     F .text	00000028 write_message
000089a8 l     F .text	0000008e thread_periodic_writeTemp
00008a36 l     F .text	0000004c register_temperature
00008a82 l     F .text	0000008a thread_periodic_temperature
0000027c l     O .bss	0000000a pt
00008116 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 adc10.c
00000286 l     O .bss	00000002 coeff_1
00000288 l     O .bss	00000002 coeff_2
00000000 l    df *ABS*	00000000 cc2500.c
00008d0a l     F .text	00000016 CC2500_HW_GDO0_IRQ_ON_ASSERT
00008d20 l     F .text	00000016 CC2500_HW_GDO2_IRQ_ON_ASSERT
00008d36 l     F .text	00000016 CC2500_HW_GDO0_DINT
00008d4c l     F .text	00000016 CC2500_HW_GDO2_DINT
00008d62 l     F .text	00000016 CC2500_HW_GDO0_EINT
00008d78 l     F .text	00000016 CC2500_HW_GDO0_CLEAR_FLAG
00008d8e l     F .text	00000016 CC2500_HW_GDO2_CLEAR_FLAG
00008da4 l     F .text	00000016 CONFIG_GDO0_PIN_AS_INPUT
00008dba l     F .text	00000052 CC2500_HW_INIT
000090f2 l     F .text	00000048 cc2500_check_tx_underflow
0000913a l     F .text	0000004a cc2500_check_rx_overflow
00000000 l    df *ABS*	00000000 clock.c
0000028e l     O .bss	00000002 mclk_freq_mhz
000099ac l     F .text	000000c0 set_mcu_speed
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 spi.c
00000000 l    df *ABS*	00000000 timer.c
00000290 l     O .bss	00000002 timerA_cb
00000292 l     O .bss	00000002 timerA_wakeup
00000294 l     O .bss	00000002 timerB_cb
00000296 l     O .bss	00000002 timerB_wakeup
00000000 l    df *ABS*	00000000 uart.c
00000298 l     O .bss	00000002 uart_cb
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 watchdog.c
0000029a l     O .bss	00000002 watchdog_backup
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sprintf.c
0000a5a0 l     F .text	00000022 append
0000029e l     O .bss	00000002 available_
0000029c l     O .bss	00000002 destination_
0000a5c2 l     F .text	0000003c call_vuprintf
00000000 l    df *ABS*	00000000 vuprintf.c
0000a65c l     F .text	00000198 print_field
00000000 l    df *ABS*	00000000 puts.c
0000a164 g     F .text	00000032 putchar
00000057 g       *ABS*	00000000 __BCSCTL1
00009b16 g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_16MHz
000002a0 g     O .bss	00000001 cc2500_gdo2_cfg
00000174 g       *ABS*	00000000 __TACCR1
00009766 g     F .text	00000024 cc2500_idle
00000000 g       *ABS*	00000000 __data_size
00008116  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
000097da g     F .text	0000001a cc2500_variables_bootstrap
00009aee g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_3MHz
00000024 g       *ABS*	00000000 __P1IES
00008b7a g     F .text	000000ce adc10_sample_temp
0000004b g       *ABS*	00000000 __ADC10AE1
00009904 g     F .text	0000009a port2_irq_handler
0000a582 g     F .text	00000010 printf
00000069 g       *ABS*	00000000 __UCB0CTL1
0000a634 g     F .text	00000016 vsprintf
0000a42c g       .text	00000000 __ext_divmod16
00008116  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00009ed8 g     F .text	00000016 spi_select_radio
00000060 g       *ABS*	00000000 __UCA0CTL0
000094e2 g     F .text	0000006a cc2500_utx
0000a2a6 g     F .text	00000064 flash_write_byte
00009a90 g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_4MHz
0000a034 g     F .text	00000018 timerB_register_cb
0000012e g       *ABS*	00000000 __TAIV
00009e2e g     F .text	00000012 spi_check_miso_high
0000a61a g     F .text	0000001a snprintf
0000a15a g     F .text	0000000a uart_stop
00008e4e g     F .text	0000002e CC2500_SPI_WREG
0000028c g     O .bss	00000001 cc2500_rx_length
00000000 g       .vectors	00000000 _efartext
00009df4 g     F .text	0000003a spi_tx_rx
0000a466 g     F .text	00000000 __udivhi3
00000001 g       *ABS*	00000000 __IE2
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
00009004 g     F .text	0000001e CC2500_SPI_RX_FIFO_BYTE
0000b162 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
00009f02 g     F .text	00000038 Timer_A
00009806 g     F .text	000000dc cc2500_init
000010f8 g       *ABS*	00000000 __CALDCO_16MHZ
000096e2 g     F .text	00000018 cc2500_rx_register_cb
0000a3ac g     F .text	00000022 flash_erase_info_memory
0000001d g       *ABS*	00000000 __P4OUT
000000aa g       *ABS*	00000000 __bss_size
000010fd g       *ABS*	00000000 __CALBC1_8MHZ
00009b66 g     F .text	00000010 loop_4_cycles
00008000  w      .text	00000000 __watchdog_support
00009096 g     F .text	00000030 cc2500_gdo2_set_signal
00008110  w      .text	00000000 __stop_progExec__
0000a488 g     F .text	000000fa memcpy
0000002d g       *ABS*	00000000 __P2IE
0000ae92 g     F .text	0000002c puts
0000a1b4 g     F .text	00000014 uart_eint
00008fa2 g     F .text	00000062 CC2500_SPI_RX_BURST
00000192 g       *ABS*	00000000 __TBCCR0
00008116  w      .text	00000000 __isr_11
00009eee g     F .text	00000014 spi_deselect_radio
00000186 g       *ABS*	00000000 __TBCCTL2
00009ada g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_6MHz
0000aebe g     F .text	00000000 __udivsi3
00000025 g       *ABS*	00000000 __P1IE
0000006b g       *ABS*	00000000 __UCB0BR1
00009d84 g     F .text	00000062 spi_init
0000a0bc g     F .text	0000000e timerB_stop
0000a64a g     F .text	00000012 vsnprintf
00000049 g       *ABS*	00000000 __ADC10DTC1
00008f4c g     F .text	00000056 CC2500_SPI_TX_BURST
0000028a g     O .bss	00000001 cc2500_rx_offset
00000066 g       *ABS*	00000000 __UCA0RXBUF
00000061 g       *ABS*	00000000 __UCA0CTL1
00008b6a g     F .text	00000010 adc10irq
00009ab4 g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_1MHz
0000afb0 g       .text	00000000 __udivmoddi4
000094c6 g     F .text	0000001c cc2500_calibrate
00009b3e g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_4MHz
000090c6 g     F .text	0000002c cc2500_set_fifo_threshold
00008e0c g     F .text	00000020 CC2500_SPI_TX
00000182 g       *ABS*	00000000 __TBCCTL0
00009022 g     F .text	00000044 cc2500_wait_status
000095aa g     F .text	00000138 cc2500_rx_pkt_eop
0000006d g       *ABS*	00000000 __UCB0STAT
00008b6a g       .text	00000000 __isr_5
00008e7c g     F .text	00000036 CC2500_SPI_RREG
00008b22 g     F .text	00000032 adc10_calibrate
00000063 g       *ABS*	00000000 __UCA0BR1
0000af82 g     F .text	00000000 __umoddi3
0000b162 g       *ABS*	00000000 __data_load_start
00009d3c g     F .text	00000016 leds_on
00008116 g       .text	00000000 __dtors_end
00000053 g       *ABS*	00000000 __BCSCTL3
000096fa g     F .text	0000001e cc2500_packet_status
00009cd4 g     F .text	00000014 led_green_switch
0000a36e g     F .text	0000003e flash_erase_segment
000001bc g       *ABS*	00000000 __ADC10SA
0000a25a g     F .text	0000004c flash_init
00000166 g       *ABS*	00000000 __TACCTL2
00008168 g     F .text	00000022 timer_reached
0000af5c g     F .text	00000000 __udivdi3
00000065 g       *ABS*	00000000 __UCA0STAT
00009caa g     F .text	00000016 led_green_off
0000978a g     F .text	00000012 cc2500_sleep
00009718 g     F .text	00000030 cc2500_cca
00008116  w      .text	00000000 __isr_2
00000160 g       *ABS*	00000000 __TACTL
0000a45e g     F .text	00000000 __modhi3
0000012c g       *ABS*	00000000 __FCTL3
00009f50 g     F .text	00000018 timerA_register_cb
00008116  w      .text	00000000 __isr_10
000002a2 g     O .bss	00000002 radio_rx_cb
0000999e g     F .text	0000000e get_mclk_freq_mhz
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
00009fb4 g     F .text	00000024 timerA_start_milliseconds
00009aa2 g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_2MHz
00008f16 g     F .text	00000036 CC2500_SPI_RX_BYTE
000010f9 g       *ABS*	00000000 __CALBC1_16MHZ
000000c3 g       *ABS*	00000000 __OA1CTL1
00000023 g       *ABS*	00000000 __P1IFG
00009e40 g     F .text	0000004a spi_tx_burst
000010fb g       *ABS*	00000000 __CALBC1_12MHZ
0000004a g       *ABS*	00000000 __ADC10AE0
0000011a g       *ABS*	00000000 __UCB0I2CSA
00009cfe g     F .text	00000014 led_red_on
00000172 g       *ABS*	00000000 __TACCR0
00009d26 g     F .text	00000016 leds_off
00000056 g       *ABS*	00000000 __DCOCTL
00000003 g       *ABS*	00000000 __IFG2
000002aa g     O .noinit	00000002 __wdt_clear_value
00008774 g     F .text	00000050 radio_cb
0000a196 g     F .text	0000001e uart_getchar
0000001b g       *ABS*	00000000 __P3SEL
00009fd8 g     F .text	0000000e timerA_stop
000097b4 g     F .text	00000026 cc2500_wakeup
0000a206 g       .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
0000006c g       *ABS*	00000000 __UCB0I2CIE
0000006a g       *ABS*	00000000 __UCB0BR0
0000aef4 g     F .text	00000000 __umodsi3
000097f4 g     F .text	00000012 CC_ASSERT
0000a592 g     F .text	0000000e vprintf
00000028 g       *ABS*	00000000 __P2IN
00009f68 g     F .text	00000018 timerA_set_wakeup
00000118 g       *ABS*	00000000 __UCB0I2COA
00000184 g       *ABS*	00000000 __TBCCTL1
000001b4 g       *ABS*	00000000 __ADC10MEM
000002a4 g     O .bss	00000001 cc2500_gdo0_cfg
00009ce8 g     F .text	00000016 led_red_off
0000a480 g     F .text	00000000 __umodhi3
000087c4 g     F .text	00000108 ezdisplay
00008116  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00000064 g       *ABS*	00000000 __UCA0MCTL
00009e8a g     F .text	0000004e spi_rx_burst
0000a0ca g     F .text	00000090 uart_init
00008028  w      .text	00000000 __do_clear_bss
0000a1c8 g     F .text	00000016 uart_dint
00008636 g     F .text	000000c4 uart_cb
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
00000026 g       *ABS*	00000000 __P1SEL
00009b2a g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_8MHz
0000a3ce g     F .text	0000001c watchdog_stop
00009a6c g     F .text	00000012 set_mcu_speed_dco_mclk_1MHz_smclk_1MHz
00009b02 g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_1_5MHz
00008b54 g     F .text	00000016 adc10_stop
0000aebe g       .text	00000000 __ext_udivmod32
0000a01e g     F .text	00000016 timerB_init
00009066 g     F .text	00000030 cc2500_gdo0_set_signal
00000027 g       *ABS*	00000000 __P1REN
0000a400 g       .text	00000000 __mulsi3
0000a1de g     F .text	00000028 uart_register_cb
000000c0 g       *ABS*	00000000 __OA0CTL0
0000957a g     F .text	00000030 cc2500_rx_enter
00009b52 g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_2MHz
0000afee  w      .text	00000000 _unexpected_
00008116  w      .text	00000000 __isr_8
00009904 g       .text	00000000 __isr_3
0000a7f4 g     F .text	0000069e vuprintf
00009d12 g     F .text	00000014 led_red_switch
000010fc g       *ABS*	00000000 __CALDCO_8MHZ
0000a42c g     F .text	00000000 __divhi3
0000a466 g       .text	00000000 __ext_udivmod16
00008000  w      .text	00000000 _reset_vector__
00008116 g       .text	00000000 __ctors_start
0000aefe g       .text	00000000 __xabi_udivmod64
00008116  w      .text	00000000 __isr_12
000010fa g       *ABS*	00000000 __CALDCO_12MHZ
00000018 g       *ABS*	00000000 __P3IN
00008010  w      .text	00000000 __do_copy_data
00000200 g       .bss	00000000 __bss_start
0000803e g     F .text	000000d2 main
00000176 g       *ABS*	00000000 __TACCR2
00009c1c g     F .text	0000008e delay_ms
000000c2 g       *ABS*	00000000 __OA1CTL0
00009fe6 g       .text	00000000 __isr_13
00009b76 g     F .text	000000a6 delay_usec
00000170 g       *ABS*	00000000 __TAR
0000001e g       *ABS*	00000000 __P4DIR
00009f3a g     F .text	00000016 timerA_init
0000a206 g     F .text	00000054 usart0irq
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
0000a04c g     F .text	00000018 timerB_set_wakeup
0000002a g       *ABS*	00000000 __P2DIR
00000068 g       *ABS*	00000000 __UCB0CTL0
0000002f g       *ABS*	00000000 __P2REN
00008c48 g     F .text	000000c2 adc10_sample_avcc
0000a5fe g     F .text	0000001c sprintf
00009fe6 g     F .text	00000038 Timer_B
00009748 g     F .text	0000001e cc2500_get_rssi
0000979c g     F .text	00000018 cc2500_reset
0000006e g       *ABS*	00000000 __UCB0RXBUF
000001b0 g       *ABS*	00000000 __ADC10CTL0
00008eb2 g     F .text	00000036 CC2500_SPI_ROREG
0000b136 g     O .rodata	00000024 rfSettings_default_config
00009f02 g       .text	00000000 __isr_9
0000005e g       *ABS*	00000000 __UCA0IRTCTL
000010fe g       *ABS*	00000000 __CALDCO_1MHZ
00000067 g       *ABS*	00000000 __UCA0TXBUF
0000800c  w      .text	00000000 __init_stack
0000005d g       *ABS*	00000000 __UCA0ABCTL
00009f80 g     F .text	00000034 timerA_start_ticks
00000019 g       *ABS*	00000000 __P3OUT
000000c1 g       *ABS*	00000000 __OA0CTL1
00009ac6 g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_12MHz
00008e2c g     F .text	00000022 CC2500_SPI_STROBE
00008116 g       .text	00000000 __dtors_start
00008116  w      .text	00000000 __isr_6
00008116 g       .text	00000000 __ctors_end
00000062 g       *ABS*	00000000 __UCA0BR0
00000600 g       *ABS*	00000000 __stack
00009a7e g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_8MHz
00008116  w      .text	00000000 __isr_1
00000200 g       .rodata	00000000 _edata
000002ac g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
000002a6 g     O .bss	00000002 cc2500_rx_packet
00000048 g       *ABS*	00000000 __ADC10DTC0
0000011e g       *ABS*	00000000 __TBIV
000001b2 g       *ABS*	00000000 __ADC10CTL1
000002a8 g     O .bss	00000001 cc2500_status_register
00009cc0 g     F .text	00000014 led_green_on
000091ae g     F .text	000002f8 cc2500_configure
0000811a g     F .text	0000004e timer_tick_cb
0000a3ea g     F .text	00000016 watchdog_restore
00000058 g       *ABS*	00000000 __BCSCTL2
00008110  w      .text	00000000 _endless_loop__
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
000094a6 g     F .text	00000020 cc2500_set_channel
0000954c g     F .text	0000002e cc2500_rx_register_buffer
0000005f g       *ABS*	00000000 __UCA0IRRCTL
00000010 g       *ABS*	00000000 __P3REN
00000164 g       *ABS*	00000000 __TACCTL1
0000006f g       *ABS*	00000000 __UCB0TXBUF
0000a064 g     F .text	00000034 timerB_start_ticks
000010ff g       *ABS*	00000000 __CALBC1_1MHZ
00008010  w      .text	00000000 __low_level_init
00000011 g       *ABS*	00000000 __P4REN
00008b0c g     F .text	00000016 adc10_start
00000200 g       .rodata	00000000 __data_start
0000a098 g     F .text	00000024 timerB_start_milliseconds
000098e2 g     F .text	00000022 cc2500_gdox_signal_handler
00000120 g       *ABS*	00000000 __WDTCTL
00000000 g       *ABS*	00000000 __IE1
00008ee8 g     F .text	0000002e CC2500_SPI_TX_BYTE
00009184 g     F .text	0000002a cc2500_check_fifo_xflow_flush
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
00009de6 g     F .text	0000000e spi_clear_rx_IFG
0000a30a g     F .text	00000064 flash_write_word
00009d52 g     F .text	00000032 leds_init



Disassembly of section .text:

00008000 <__watchdog_support>:
    8000:	55 42 20 01 	mov.b	&0x0120,r5	
    8004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    8008:	82 45 aa 02 	mov	r5,	&0x02aa	

0000800c <__init_stack>:
    800c:	31 40 00 06 	mov	#1536,	r1	;#0x0600

00008010 <__do_copy_data>:
    8010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    8014:	0f 93       	tst	r15		
    8016:	08 24       	jz	$+18     	;abs 0x8028
    8018:	92 42 aa 02 	mov	&0x02aa,&0x0120	
    801c:	20 01 
    801e:	2f 83       	decd	r15		
    8020:	9f 4f 62 b1 	mov	-20126(r15),512(r15);0xb162(r15), 0x0200(r15)
    8024:	00 02 
    8026:	f8 23       	jnz	$-14     	;abs 0x8018

00008028 <__do_clear_bss>:
    8028:	3f 40 aa 00 	mov	#170,	r15	;#0x00aa
    802c:	0f 93       	tst	r15		
    802e:	07 24       	jz	$+16     	;abs 0x803e
    8030:	92 42 aa 02 	mov	&0x02aa,&0x0120	
    8034:	20 01 
    8036:	1f 83       	dec	r15		
    8038:	cf 43 00 02 	mov.b	#0,	512(r15);r3 As==00, 0x0200(r15)
    803c:	f9 23       	jnz	$-12     	;abs 0x8030

0000803e <main>:

#define NUM_PT 5
static struct pt pt[NUM_PT];

int main(void)
{
    803e:	04 41       	mov	r1,	r4	
    8040:	24 53       	incd	r4		
    8042:	21 83       	decd	r1		
    watchdog_stop();
    8044:	b0 12 ce a3 	call	#0xa3ce	

    /* protothreads init */
    int i;
    for(i = 0; i < NUM_PT; i++)
    8048:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc(r4)
    804c:	09 3c       	jmp	$+20     	;abs 0x8060
    {
        PT_INIT(&pt[i]);
    804e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8052:	0f 5f       	rla	r15		
    8054:	3f 50 7c 02 	add	#636,	r15	;#0x027c
    8058:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
{
    watchdog_stop();

    /* protothreads init */
    int i;
    for(i = 0; i < NUM_PT; i++)
    805c:	94 53 fc ff 	inc	-4(r4)		;0xfffc(r4)
    8060:	b4 90 05 00 	cmp	#5,	-4(r4)	;#0x0005, 0xfffc(r4)
    8064:	fc ff 
    8066:	f3 3b       	jl	$-24     	;abs 0x804e
    {
        PT_INIT(&pt[i]);
    }

    /* clock init */
    set_mcu_speed_dco_mclk_16MHz_smclk_8MHz();
    8068:	b0 12 2a 9b 	call	#0x9b2a	

    /* LEDs init */
    leds_init();
    806c:	b0 12 52 9d 	call	#0x9d52	
    led_green_flag = 0;
    8070:	82 43 12 02 	mov	#0,	&0x0212	;r3 As==00
    led_red_flag = 0;
    8074:	82 43 16 02 	mov	#0,	&0x0216	;r3 As==00

    /* timer init */
    timerA_init();
    8078:	b0 12 3a 9f 	call	#0x9f3a	
    timerA_register_cb(&timer_tick_cb);
    807c:	3f 40 1a 81 	mov	#-32486,r15	;#0x811a
    8080:	b0 12 50 9f 	call	#0x9f50	
    timerA_start_milliseconds(TIMER_PERIOD_MS);
    8084:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    8088:	b0 12 b4 9f 	call	#0x9fb4	

    /* UART init (serial link) */
    uart_init(UART_9600_SMCLK_8MHZ);
    808c:	3f 42       	mov	#8,	r15	;r2 As==11
    808e:	b0 12 ca a0 	call	#0xa0ca	
    uart_register_cb(uart_cb);
    8092:	3f 40 36 86 	mov	#-31178,r15	;#0x8636
    8096:	b0 12 de a1 	call	#0xa1de	
    uart_flag = 0;
    809a:	82 43 1e 02 	mov	#0,	&0x021e	;r3 As==00
    uart_data = 0x0000;
    809e:	82 43 20 02 	mov	#0,	&0x0220	;r3 As==00
    room = 0;
    80a2:	c2 43 24 02 	mov.b	#0,	&0x0224	;r3 As==00
    room_flag = 0;
    80a6:	82 43 22 02 	mov	#0,	&0x0222	;r3 As==00

    /* ADC10 init (temperature) */
    adc10_start();
    80aa:	b0 12 0c 8b 	call	#0x8b0c	

    /* radio init */
    
    spi_init();
    80ae:	b0 12 84 9d 	call	#0x9d84	
    cc2500_init();
    80b2:	b0 12 06 98 	call	#0x9806	
    cc2500_rx_register_buffer(radio_tx_buffer, PKTLEN);
    80b6:	7e 40 1c 00 	mov.b	#28,	r14	;#0x001c
    80ba:	3f 40 26 02 	mov	#550,	r15	;#0x0226
    80be:	b0 12 4c 95 	call	#0x954c	
    cc2500_rx_register_cb(radio_cb);
    80c2:	3f 40 74 87 	mov	#-30860,r15	;#0x8774
    80c6:	b0 12 e2 96 	call	#0x96e2	
    cc2500_rx_enter();
    80ca:	b0 12 7a 95 	call	#0x957a	
    radio_rx_flag = 0;
    80ce:	82 43 7a 02 	mov	#0,	&0x027a	;r3 As==00
    
    __enable_interrupt();
    80d2:	32 d2       	eint			


    //Connection init
    uart_flag = 0;
    80d4:	82 43 1e 02 	mov	#0,	&0x021e	;r3 As==00
    periodic_write_flag=1;
    80d8:	92 43 18 02 	mov	#1,	&0x0218	;r3 As==01
    periodic_temp_flag=1;
    80dc:	92 43 1a 02 	mov	#1,	&0x021a	;r3 As==01
    set_node_id(0);
    80e0:	0f 43       	clr	r15		
    80e2:	b0 12 d6 81 	call	#0x81d6	

    /* simple cycle scheduling */
    while(1) {
      thread_led_red(&pt[0]);
    80e6:	3f 40 7c 02 	mov	#636,	r15	;#0x027c
    80ea:	b0 12 82 85 	call	#0x8582	
      thread_uart(&pt[1]);//for setting node ID
    80ee:	3f 40 7e 02 	mov	#638,	r15	;#0x027e
    80f2:	b0 12 fa 86 	call	#0x86fa	
      thread_rx(&pt[2]); //for writing on ezconsole reception temp
    80f6:	3f 40 80 02 	mov	#640,	r15	;#0x0280
    80fa:	b0 12 cc 88 	call	#0x88cc	
      thread_periodic_temperature(&pt[3]);//for sampling temp
    80fe:	3f 40 82 02 	mov	#642,	r15	;#0x0282
    8102:	b0 12 82 8a 	call	#0x8a82	
      thread_periodic_writeTemp(&pt[4]);//for writing own temp on ezconsole
    8106:	3f 40 84 02 	mov	#644,	r15	;#0x0284
    810a:	b0 12 a8 89 	call	#0x89a8	
    }
    810e:	eb 3f       	jmp	$-40     	;abs 0x80e6

00008110 <__stop_progExec__>:
    8110:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    8114:	fd 3f       	jmp	$-4      	;abs 0x8110

00008116 <__ctors_end>:
    8116:	30 40 ee af 	br	#0xafee	

0000811a <timer_tick_cb>:
 * Timer
 */

/* timer interrupt handler: increases timer's counter */
/* approximately every 10ms                           */ 
void timer_tick_cb() {
    811a:	04 12       	push	r4		
    811c:	04 41       	mov	r1,	r4	
    811e:	24 53       	incd	r4		
    8120:	21 83       	decd	r1		
    int i;
    for(i = 0; i < NUM_TIMERS; i++)
    8122:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc(r4)
    8126:	19 3c       	jmp	$+52     	;abs 0x815a
    {
        if(timer[i] != UINT_MAX) {
    8128:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    812c:	0f 5f       	rla	r15		
    812e:	3f 50 02 02 	add	#514,	r15	;#0x0202
    8132:	2f 4f       	mov	@r15,	r15	
    8134:	3f 93       	cmp	#-1,	r15	;r3 As==11
    8136:	0f 24       	jz	$+32     	;abs 0x8156
            timer[i]++;
    8138:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    813c:	0f 5f       	rla	r15		
    813e:	3f 50 02 02 	add	#514,	r15	;#0x0202
    8142:	2f 4f       	mov	@r15,	r15	
    8144:	0e 4f       	mov	r15,	r14	
    8146:	1e 53       	inc	r14		
    8148:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    814c:	0f 5f       	rla	r15		
    814e:	3f 50 02 02 	add	#514,	r15	;#0x0202
    8152:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)

/* timer interrupt handler: increases timer's counter */
/* approximately every 10ms                           */ 
void timer_tick_cb() {
    int i;
    for(i = 0; i < NUM_TIMERS; i++)
    8156:	94 53 fc ff 	inc	-4(r4)		;0xfffc(r4)
    815a:	b4 90 07 00 	cmp	#7,	-4(r4)	;#0x0007, 0xfffc(r4)
    815e:	fc ff 
    8160:	e3 3b       	jl	$-56     	;abs 0x8128
    {
        if(timer[i] != UINT_MAX) {
            timer[i]++;
        }
    }
}
    8162:	21 53       	incd	r1		
    8164:	34 41       	pop	r4		
    8166:	30 41       	ret			

00008168 <timer_reached>:

int timer_reached(uint16_t timer, uint16_t count) {
    8168:	04 12       	push	r4		
    816a:	04 41       	mov	r1,	r4	
    816c:	24 53       	incd	r4		
    816e:	21 82       	sub	#4,	r1	;r2 As==10
    8170:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8174:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    return (timer >= count);
    8178:	1f 43       	mov	#1,	r15	;r3 As==01
    817a:	94 94 fc ff 	cmp	-4(r4),	-6(r4)	;0xfffc(r4), 0xfffa(r4)
    817e:	fa ff 
    8180:	01 2c       	jc	$+4      	;abs 0x8184
    8182:	0f 43       	clr	r15		
}
    8184:	21 52       	add	#4,	r1	;r2 As==10
    8186:	34 41       	pop	r4		
    8188:	30 41       	ret			

0000818a <printhex>:

static void printhex(char *buffer, unsigned int len)
{
    818a:	04 12       	push	r4		
    818c:	04 41       	mov	r1,	r4	
    818e:	24 53       	incd	r4		
    8190:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    8194:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8198:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    unsigned int i;
    for(i = 0; i < len; i++)
    819c:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    81a0:	0e 3c       	jmp	$+30     	;abs 0x81be
    {
        printf("%02X ", buffer[i]);
    81a2:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    81a6:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    81aa:	6f 4f       	mov.b	@r15,	r15	
    81ac:	8f 11       	sxt	r15		
    81ae:	0f 12       	push	r15		
    81b0:	30 12 f0 af 	push	#-20496	;#0xaff0
    81b4:	b0 12 82 a5 	call	#0xa582	
    81b8:	21 52       	add	#4,	r1	;r2 As==10
}

static void printhex(char *buffer, unsigned int len)
{
    unsigned int i;
    for(i = 0; i < len; i++)
    81ba:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    81be:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    81c2:	f8 ff 
    81c4:	ee 2b       	jnc	$-34     	;abs 0x81a2
    {
        printf("%02X ", buffer[i]);
    }
    printf("\n");
    81c6:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    81ca:	b0 12 64 a1 	call	#0xa164	
}
    81ce:	31 50 06 00 	add	#6,	r1	;#0x0006
    81d2:	34 41       	pop	r4		
    81d4:	30 41       	ret			

000081d6 <set_node_id>:

/* returns 1 if the id was expected and set, 0 otherwise */
static void set_node_id(unsigned int id)
{
    81d6:	04 12       	push	r4		
    81d8:	04 41       	mov	r1,	r4	
    81da:	24 53       	incd	r4		
    81dc:	21 83       	decd	r1		
    81de:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    TIMER_ID_INPUT = UINT_MAX;
    81e2:	b2 43 06 02 	mov	#-1,	&0x0206	;r3 As==11
    if(id!=0){
    81e6:	84 93 fc ff 	tst	-4(r4)		;0xfffc(r4)
    81ea:	20 24       	jz	$+66     	;abs 0x822c
        if(flash_write_byte((unsigned char *) NODE_ID_LOCATION, id) != 0)
    81ec:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    81f0:	4f 4f       	mov.b	r15,	r15	
    81f2:	4e 4f       	mov.b	r15,	r14	
    81f4:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    81f8:	b0 12 a6 a2 	call	#0xa2a6	
    81fc:	0f 93       	tst	r15		
    81fe:	23 24       	jz	$+72     	;abs 0x8246
        {
            flash_erase_segment((unsigned int *) NODE_ID_LOCATION);
    8200:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    8204:	b0 12 6e a3 	call	#0xa36e	
            flash_write_word((unsigned int *) NODE_ID_LOCATION, id);
    8208:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    820c:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    8210:	b0 12 0a a3 	call	#0xa30a	
            node_id = id;
    8214:	92 44 fc ff 	mov	-4(r4),	&0x0200	;0xfffc(r4)
    8218:	00 02 
            printf("node id set to: %x\n", node_id);
    821a:	1f 42 00 02 	mov	&0x0200,r15	
    821e:	0f 12       	push	r15		
    8220:	30 12 f6 af 	push	#-20490	;#0xaff6
    8224:	b0 12 82 a5 	call	#0xa582	
    8228:	21 52       	add	#4,	r1	;r2 As==10
    822a:	0d 3c       	jmp	$+28     	;abs 0x8246
        }
    } 
    else{
        /* retrieve node id from flash */
        node_id = *((unsigned int *) NODE_ID_LOCATION);
    822c:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    8230:	2f 4f       	mov	@r15,	r15	
    8232:	82 4f 00 02 	mov	r15,	&0x0200	
        printf("node id retrieved from flash:  %x\n", node_id);
    8236:	1f 42 00 02 	mov	&0x0200,r15	
    823a:	0f 12       	push	r15		
    823c:	30 12 0a b0 	push	#-20470	;#0xb00a
    8240:	b0 12 82 a5 	call	#0xa582	
    8244:	21 52       	add	#4,	r1	;r2 As==10
    }
}
    8246:	21 53       	incd	r1		
    8248:	34 41       	pop	r4		
    824a:	30 41       	ret			

0000824c <converter>:


static int converter(char a, char b){
    824c:	04 12       	push	r4		
    824e:	04 41       	mov	r1,	r4	
    8250:	24 53       	incd	r4		
    8252:	31 50 f0 ff 	add	#-16,	r1	;#0xfff0
    8256:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    825a:	c4 4e fd ff 	mov.b	r14,	-3(r4)	;0xfffd(r4)
    char s[4];
    sprintf(s,"%02X%02X \n",a,b);
    825e:	5e 44 fd ff 	mov.b	-3(r4),	r14	;0xfffd(r4)
    8262:	8e 11       	sxt	r14		
    8264:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    8268:	8f 11       	sxt	r15		
    826a:	0e 12       	push	r14		
    826c:	0f 12       	push	r15		
    826e:	30 12 2d b0 	push	#-20435	;#0xb02d
    8272:	0f 44       	mov	r4,	r15	
    8274:	3f 50 f0 ff 	add	#-16,	r15	;#0xfff0
    8278:	0f 12       	push	r15		
    827a:	b0 12 fe a5 	call	#0xa5fe	
    827e:	31 52       	add	#8,	r1	;r2 As==11
    int number[4]; 
    int i;
    for(i=0;i<4;i++){
    8280:	84 43 ee ff 	mov	#0,	-18(r4)	;r3 As==00, 0xffee(r4)
    8284:	30 40 84 84 	br	#0x8484	
        switch(s[i]){
    8288:	0f 44       	mov	r4,	r15	
    828a:	3f 50 f0 ff 	add	#-16,	r15	;#0xfff0
    828e:	1f 54 ee ff 	add	-18(r4),r15	;0xffee(r4)
    8292:	6f 4f       	mov.b	@r15,	r15	
    8294:	8f 11       	sxt	r15		
    8296:	3f 50 d0 ff 	add	#-48,	r15	;#0xffd0
    829a:	3f 90 17 00 	cmp	#23,	r15	;#0x0017
    829e:	f0 2c       	jc	$+482    	;abs 0x8480
    82a0:	0f 5f       	rla	r15		
    82a2:	3f 50 38 b0 	add	#-20424,r15	;#0xb038
    82a6:	2f 4f       	mov	@r15,	r15	
    82a8:	00 4f       	br	r15		
            case '0':
                number[3-i]=0;break;
    82aa:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    82ae:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    82b2:	0f 5f       	rla	r15		
    82b4:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    82b8:	0e 54       	add	r4,	r14	
    82ba:	0f 5e       	add	r14,	r15	
    82bc:	3f 50 06 00 	add	#6,	r15	;#0x0006
    82c0:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    82c4:	dd 3c       	jmp	$+444    	;abs 0x8480
            case '1':
                number[3-i]=1;break;
    82c6:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    82ca:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    82ce:	0f 5f       	rla	r15		
    82d0:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    82d4:	0e 54       	add	r4,	r14	
    82d6:	0f 5e       	add	r14,	r15	
    82d8:	3f 50 06 00 	add	#6,	r15	;#0x0006
    82dc:	9f 43 00 00 	mov	#1,	0(r15)	;r3 As==01, 0x0000(r15)
    82e0:	cf 3c       	jmp	$+416    	;abs 0x8480
            case '2':
                number[3-i]=2;break;
    82e2:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    82e6:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    82ea:	0f 5f       	rla	r15		
    82ec:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    82f0:	0e 54       	add	r4,	r14	
    82f2:	0f 5e       	add	r14,	r15	
    82f4:	3f 50 06 00 	add	#6,	r15	;#0x0006
    82f8:	af 43 00 00 	mov	#2,	0(r15)	;r3 As==10, 0x0000(r15)
    82fc:	c1 3c       	jmp	$+388    	;abs 0x8480
            case '3':
                number[3-i]=3;break;
    82fe:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8302:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    8306:	0f 5f       	rla	r15		
    8308:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    830c:	0e 54       	add	r4,	r14	
    830e:	0f 5e       	add	r14,	r15	
    8310:	3f 50 06 00 	add	#6,	r15	;#0x0006
    8314:	bf 40 03 00 	mov	#3,	0(r15)	;#0x0003, 0x0000(r15)
    8318:	00 00 
    831a:	b2 3c       	jmp	$+358    	;abs 0x8480
            case '4':
                number[3-i]=4;break;
    831c:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8320:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    8324:	0f 5f       	rla	r15		
    8326:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    832a:	0e 54       	add	r4,	r14	
    832c:	0f 5e       	add	r14,	r15	
    832e:	3f 50 06 00 	add	#6,	r15	;#0x0006
    8332:	af 42 00 00 	mov	#4,	0(r15)	;r2 As==10, 0x0000(r15)
    8336:	a4 3c       	jmp	$+330    	;abs 0x8480
            case '5':
                number[3-i]=5;break;
    8338:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    833c:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    8340:	0f 5f       	rla	r15		
    8342:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8346:	0e 54       	add	r4,	r14	
    8348:	0f 5e       	add	r14,	r15	
    834a:	3f 50 06 00 	add	#6,	r15	;#0x0006
    834e:	bf 40 05 00 	mov	#5,	0(r15)	;#0x0005, 0x0000(r15)
    8352:	00 00 
    8354:	95 3c       	jmp	$+300    	;abs 0x8480
            case '6':
                number[3-i]=6;break;
    8356:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    835a:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    835e:	0f 5f       	rla	r15		
    8360:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8364:	0e 54       	add	r4,	r14	
    8366:	0f 5e       	add	r14,	r15	
    8368:	3f 50 06 00 	add	#6,	r15	;#0x0006
    836c:	bf 40 06 00 	mov	#6,	0(r15)	;#0x0006, 0x0000(r15)
    8370:	00 00 
    8372:	86 3c       	jmp	$+270    	;abs 0x8480
            case '7':
                number[3-i]=7;break;
    8374:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8378:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    837c:	0f 5f       	rla	r15		
    837e:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8382:	0e 54       	add	r4,	r14	
    8384:	0f 5e       	add	r14,	r15	
    8386:	3f 50 06 00 	add	#6,	r15	;#0x0006
    838a:	bf 40 07 00 	mov	#7,	0(r15)	;#0x0007, 0x0000(r15)
    838e:	00 00 
    8390:	77 3c       	jmp	$+240    	;abs 0x8480
            case '8':
                number[3-i]=8;break;
    8392:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8396:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    839a:	0f 5f       	rla	r15		
    839c:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    83a0:	0e 54       	add	r4,	r14	
    83a2:	0f 5e       	add	r14,	r15	
    83a4:	3f 50 06 00 	add	#6,	r15	;#0x0006
    83a8:	bf 42 00 00 	mov	#8,	0(r15)	;r2 As==11, 0x0000(r15)
    83ac:	69 3c       	jmp	$+212    	;abs 0x8480
            case '9':
                number[3-i]=9;break;
    83ae:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    83b2:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    83b6:	0f 5f       	rla	r15		
    83b8:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    83bc:	0e 54       	add	r4,	r14	
    83be:	0f 5e       	add	r14,	r15	
    83c0:	3f 50 06 00 	add	#6,	r15	;#0x0006
    83c4:	bf 40 09 00 	mov	#9,	0(r15)	;#0x0009, 0x0000(r15)
    83c8:	00 00 
    83ca:	5a 3c       	jmp	$+182    	;abs 0x8480
            case 'A':
                number[3-i]=10;break;
    83cc:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    83d0:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    83d4:	0f 5f       	rla	r15		
    83d6:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    83da:	0e 54       	add	r4,	r14	
    83dc:	0f 5e       	add	r14,	r15	
    83de:	3f 50 06 00 	add	#6,	r15	;#0x0006
    83e2:	bf 40 0a 00 	mov	#10,	0(r15)	;#0x000a, 0x0000(r15)
    83e6:	00 00 
    83e8:	4b 3c       	jmp	$+152    	;abs 0x8480
            case 'B':
                number[3-i]=11;break;
    83ea:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    83ee:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    83f2:	0f 5f       	rla	r15		
    83f4:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    83f8:	0e 54       	add	r4,	r14	
    83fa:	0f 5e       	add	r14,	r15	
    83fc:	3f 50 06 00 	add	#6,	r15	;#0x0006
    8400:	bf 40 0b 00 	mov	#11,	0(r15)	;#0x000b, 0x0000(r15)
    8404:	00 00 
    8406:	3c 3c       	jmp	$+122    	;abs 0x8480
            case 'C':
                number[3-i]=12;break;
    8408:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    840c:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    8410:	0f 5f       	rla	r15		
    8412:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8416:	0e 54       	add	r4,	r14	
    8418:	0f 5e       	add	r14,	r15	
    841a:	3f 50 06 00 	add	#6,	r15	;#0x0006
    841e:	bf 40 0c 00 	mov	#12,	0(r15)	;#0x000c, 0x0000(r15)
    8422:	00 00 
    8424:	2d 3c       	jmp	$+92     	;abs 0x8480
            case 'D':
                number[3-i]=13;break;
    8426:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    842a:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    842e:	0f 5f       	rla	r15		
    8430:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8434:	0e 54       	add	r4,	r14	
    8436:	0f 5e       	add	r14,	r15	
    8438:	3f 50 06 00 	add	#6,	r15	;#0x0006
    843c:	bf 40 0d 00 	mov	#13,	0(r15)	;#0x000d, 0x0000(r15)
    8440:	00 00 
    8442:	1e 3c       	jmp	$+62     	;abs 0x8480
            case 'E':        
                number[3-i]=14;break;
    8444:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8448:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    844c:	0f 5f       	rla	r15		
    844e:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8452:	0e 54       	add	r4,	r14	
    8454:	0f 5e       	add	r14,	r15	
    8456:	3f 50 06 00 	add	#6,	r15	;#0x0006
    845a:	bf 40 0e 00 	mov	#14,	0(r15)	;#0x000e, 0x0000(r15)
    845e:	00 00 
    8460:	0f 3c       	jmp	$+32     	;abs 0x8480
            case 'F':        
                number[3-i]=15;break;
    8462:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8466:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    846a:	0f 5f       	rla	r15		
    846c:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8470:	0e 54       	add	r4,	r14	
    8472:	0f 5e       	add	r14,	r15	
    8474:	3f 50 06 00 	add	#6,	r15	;#0x0006
    8478:	bf 40 0f 00 	mov	#15,	0(r15)	;#0x000f, 0x0000(r15)
    847c:	00 00 
    847e:	03 43       	nop			
static int converter(char a, char b){
    char s[4];
    sprintf(s,"%02X%02X \n",a,b);
    int number[4]; 
    int i;
    for(i=0;i<4;i++){
    8480:	94 53 ee ff 	inc	-18(r4)	;0xffee(r4)
    8484:	a4 92 ee ff 	cmp	#4,	-18(r4)	;r2 As==10, 0xffee(r4)
    8488:	02 34       	jge	$+6      	;abs 0x848e
    848a:	30 40 88 82 	br	#0x8288	
                number[3-i]=14;break;
            case 'F':        
                number[3-i]=15;break;
        }
    }
    return number[0]+number[1]*16+number[2]*16*16+number[3]*16*16*16;
    848e:	1e 44 f4 ff 	mov	-12(r4),r14	;0xfff4(r4)
    8492:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    8496:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    849a:	0f 5f       	rla	r15		
    849c:	0f 5f       	rla	r15		
    849e:	0f 5f       	rla	r15		
    84a0:	0f 5f       	rla	r15		
    84a2:	0f 5d       	add	r13,	r15	
    84a4:	0f 5f       	rla	r15		
    84a6:	0f 5f       	rla	r15		
    84a8:	0f 5f       	rla	r15		
    84aa:	0f 5f       	rla	r15		
    84ac:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfff6(r4)
    84b0:	0f 5d       	add	r13,	r15	
    84b2:	0f 5f       	rla	r15		
    84b4:	0f 5f       	rla	r15		
    84b6:	0f 5f       	rla	r15		
    84b8:	0f 5f       	rla	r15		
    84ba:	0f 5e       	add	r14,	r15	
    
}
    84bc:	31 50 10 00 	add	#16,	r1	;#0x0010
    84c0:	34 41       	pop	r4		
    84c2:	30 41       	ret			

000084c4 <led_green_blink>:

static int led_green_flag;


static void led_green_blink(int duration)
{
    84c4:	04 12       	push	r4		
    84c6:	04 41       	mov	r1,	r4	
    84c8:	24 53       	incd	r4		
    84ca:	21 83       	decd	r1		
    84cc:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    led_green_duration = duration;
    84d0:	92 44 fc ff 	mov	-4(r4),	&0x0210	;0xfffc(r4)
    84d4:	10 02 
    led_green_flag = 1;
    84d6:	92 43 12 02 	mov	#1,	&0x0212	;r3 As==01
}
    84da:	21 53       	incd	r1		
    84dc:	34 41       	pop	r4		
    84de:	30 41       	ret			

000084e0 <led_red_blink>:

static void led_red_blink(int duration)
{
    84e0:	04 12       	push	r4		
    84e2:	04 41       	mov	r1,	r4	
    84e4:	24 53       	incd	r4		
    84e6:	21 83       	decd	r1		
    84e8:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    led_red_duration = duration;
    84ec:	92 44 fc ff 	mov	-4(r4),	&0x0214	;0xfffc(r4)
    84f0:	14 02 
    led_red_flag = 1;
    84f2:	92 43 16 02 	mov	#1,	&0x0216	;r3 As==01
}
    84f6:	21 53       	incd	r1		
    84f8:	34 41       	pop	r4		
    84fa:	30 41       	ret			

000084fc <thread_led_green>:

static PT_THREAD(thread_led_green(struct pt *pt))
{
    84fc:	04 12       	push	r4		
    84fe:	04 41       	mov	r1,	r4	
    8500:	24 53       	incd	r4		
    8502:	21 82       	sub	#4,	r1	;r2 As==10
    8504:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    8508:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    850c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8510:	2f 4f       	mov	@r15,	r15	
    8512:	3f 90 de 00 	cmp	#222,	r15	;#0x00de
    8516:	0c 24       	jz	$+26     	;abs 0x8530
    8518:	3f 90 e1 00 	cmp	#225,	r15	;#0x00e1
    851c:	18 24       	jz	$+50     	;abs 0x854e
    851e:	0f 93       	tst	r15		
    8520:	25 20       	jnz	$+76     	;abs 0x856c

    led_green_flag=0;
    8522:	82 43 12 02 	mov	#0,	&0x0212	;r3 As==00
    
    while(1)
      {
        PT_WAIT_UNTIL(pt, led_green_flag);
    8526:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    852a:	bf 40 de 00 	mov	#222,	0(r15)	;#0x00de, 0x0000(r15)
    852e:	00 00 
    8530:	1f 42 12 02 	mov	&0x0212,r15	
    8534:	0f 93       	tst	r15		
    8536:	02 20       	jnz	$+6      	;abs 0x853c
    8538:	4f 43       	clr.b	r15		
    853a:	20 3c       	jmp	$+66     	;abs 0x857c
        led_green_on();
    853c:	b0 12 c0 9c 	call	#0x9cc0	
        TIMER_LED_GREEN_ON = 0;
    8540:	82 43 04 02 	mov	#0,	&0x0204	;r3 As==00
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_GREEN_ON, DELAY_LED_GREEN));
    8544:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8548:	bf 40 e1 00 	mov	#225,	0(r15)	;#0x00e1, 0x0000(r15)
    854c:	00 00 
    854e:	1f 42 04 02 	mov	&0x0204,r15	
    8552:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    8556:	b0 12 68 81 	call	#0x8168	
    855a:	0f 93       	tst	r15		
    855c:	02 20       	jnz	$+6      	;abs 0x8562
    855e:	4f 43       	clr.b	r15		
    8560:	0d 3c       	jmp	$+28     	;abs 0x857c
        led_green_off();
    8562:	b0 12 aa 9c 	call	#0x9caa	
	led_green_flag=0;	
    8566:	82 43 12 02 	mov	#0,	&0x0212	;r3 As==00
    }
    856a:	dd 3f       	jmp	$-68     	;abs 0x8526

    PT_END(pt);
    856c:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8570:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8574:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    8578:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    857c:	21 52       	add	#4,	r1	;r2 As==10
    857e:	34 41       	pop	r4		
    8580:	30 41       	ret			

00008582 <thread_led_red>:

static PT_THREAD(thread_led_red(struct pt *pt))
{
    8582:	04 12       	push	r4		
    8584:	04 41       	mov	r1,	r4	
    8586:	24 53       	incd	r4		
    8588:	21 82       	sub	#4,	r1	;r2 As==10
    858a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    858e:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    8592:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8596:	2f 4f       	mov	@r15,	r15	
    8598:	3f 90 ee 00 	cmp	#238,	r15	;#0x00ee
    859c:	13 24       	jz	$+40     	;abs 0x85c4
    859e:	3f 90 ef 00 	cmp	#239,	r15	;#0x00ef
    85a2:	03 2c       	jc	$+8      	;abs 0x85aa
    85a4:	0f 93       	tst	r15		
    85a6:	09 24       	jz	$+20     	;abs 0x85ba
    85a8:	3b 3c       	jmp	$+120    	;abs 0x8620
    85aa:	3f 90 f2 00 	cmp	#242,	r15	;#0x00f2
    85ae:	19 24       	jz	$+52     	;abs 0x85e2
    85b0:	3f 90 f6 00 	cmp	#246,	r15	;#0x00f6
    85b4:	2a 24       	jz	$+86     	;abs 0x860a
    85b6:	34 3c       	jmp	$+106    	;abs 0x8620
          led_red_duration));
        led_red_off();
        TIMER_LED_RED_ON = 0;
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_RED_ON,
          led_red_duration));
    }
    85b8:	03 43       	nop			
static PT_THREAD(thread_led_red(struct pt *pt))
{
    PT_BEGIN(pt);
    while(1)
    {
        PT_WAIT_UNTIL(pt, led_red_flag);
    85ba:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    85be:	bf 40 ee 00 	mov	#238,	0(r15)	;#0x00ee, 0x0000(r15)
    85c2:	00 00 
    85c4:	1f 42 16 02 	mov	&0x0216,r15	
    85c8:	0f 93       	tst	r15		
    85ca:	02 20       	jnz	$+6      	;abs 0x85d0
    85cc:	4f 43       	clr.b	r15		
    85ce:	30 3c       	jmp	$+98     	;abs 0x8630
        led_red_on();
    85d0:	b0 12 fe 9c 	call	#0x9cfe	
        TIMER_LED_RED_ON = 0;
    85d4:	82 43 02 02 	mov	#0,	&0x0202	;r3 As==00
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_RED_ON,
    85d8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    85dc:	bf 40 f2 00 	mov	#242,	0(r15)	;#0x00f2, 0x0000(r15)
    85e0:	00 00 
    85e2:	1f 42 14 02 	mov	&0x0214,r15	
    85e6:	0e 4f       	mov	r15,	r14	
    85e8:	1f 42 02 02 	mov	&0x0202,r15	
    85ec:	b0 12 68 81 	call	#0x8168	
    85f0:	0f 93       	tst	r15		
    85f2:	02 20       	jnz	$+6      	;abs 0x85f8
    85f4:	4f 43       	clr.b	r15		
    85f6:	1c 3c       	jmp	$+58     	;abs 0x8630
          led_red_duration));
        led_red_off();
    85f8:	b0 12 e8 9c 	call	#0x9ce8	
        TIMER_LED_RED_ON = 0;
    85fc:	82 43 02 02 	mov	#0,	&0x0202	;r3 As==00
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_RED_ON,
    8600:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8604:	bf 40 f6 00 	mov	#246,	0(r15)	;#0x00f6, 0x0000(r15)
    8608:	00 00 
    860a:	1f 42 14 02 	mov	&0x0214,r15	
    860e:	0e 4f       	mov	r15,	r14	
    8610:	1f 42 02 02 	mov	&0x0202,r15	
    8614:	b0 12 68 81 	call	#0x8168	
    8618:	0f 93       	tst	r15		
    861a:	ce 23       	jnz	$-98     	;abs 0x85b8
    861c:	4f 43       	clr.b	r15		
    861e:	08 3c       	jmp	$+18     	;abs 0x8630
          led_red_duration));
    }

    PT_END(pt);
    8620:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8624:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8628:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    862c:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    8630:	21 52       	add	#4,	r1	;r2 As==10
    8632:	34 41       	pop	r4		
    8634:	30 41       	ret			

00008636 <uart_cb>:
/*
 * UART
 */

int uart_cb(uint8_t data)
{
    8636:	04 12       	push	r4		
    8638:	04 41       	mov	r1,	r4	
    863a:	24 53       	incd	r4		
    863c:	21 83       	decd	r1		
    863e:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    
    if(data == 27 && uart_flag==0){ //27 is ESC ascii code (decimal) 
    8642:	f4 90 1b 00 	cmp.b	#27,	-4(r4)	;#0x001b, 0xfffc(r4)
    8646:	fc ff 
    8648:	13 20       	jnz	$+40     	;abs 0x8670
    864a:	1f 42 1e 02 	mov	&0x021e,r15	
    864e:	0f 93       	tst	r15		
    8650:	0f 20       	jnz	$+32     	;abs 0x8670
        printf("Enter new id starting with the room number and then the sensor number. Press enter to accept\n");
    8652:	3f 40 66 b0 	mov	#-20378,r15	;#0xb066
    8656:	b0 12 92 ae 	call	#0xae92	
        room_flag = 0;
    865a:	82 43 22 02 	mov	#0,	&0x0222	;r3 As==00
        uart_data = 0;
    865e:	82 43 20 02 	mov	#0,	&0x0220	;r3 As==00
        uart_flag=1;
    8662:	92 43 1e 02 	mov	#1,	&0x021e	;r3 As==01
        periodic_write_flag=0;
    8666:	82 43 18 02 	mov	#0,	&0x0218	;r3 As==00
        periodic_temp_flag=0;
    866a:	82 43 1a 02 	mov	#0,	&0x021a	;r3 As==00
    866e:	41 3c       	jmp	$+132    	;abs 0x86f2
    }
    else if(data == 13 && uart_flag==1){ //13 is return/enter ascii code
    8670:	f4 90 0d 00 	cmp.b	#13,	-4(r4)	;#0x000d, 0xfffc(r4)
    8674:	fc ff 
    8676:	0b 20       	jnz	$+24     	;abs 0x868e
    8678:	1f 42 1e 02 	mov	&0x021e,r15	
    867c:	1f 93       	cmp	#1,	r15	;r3 As==01
    867e:	07 20       	jnz	$+16     	;abs 0x868e
        uart_flag=0;
    8680:	82 43 1e 02 	mov	#0,	&0x021e	;r3 As==00
        periodic_write_flag=1;
    8684:	92 43 18 02 	mov	#1,	&0x0218	;r3 As==01
        periodic_temp_flag=1;
    8688:	92 43 1a 02 	mov	#1,	&0x021a	;r3 As==01
    868c:	32 3c       	jmp	$+102    	;abs 0x86f2
    }
    else {
    	if(room_flag == 0){
    868e:	1f 42 22 02 	mov	&0x0222,r15	
    8692:	0f 93       	tst	r15		
    8694:	12 20       	jnz	$+38     	;abs 0x86ba
    		printf("room : %c (hex code : %x)\n",data, data);
    8696:	5e 44 fc ff 	mov.b	-4(r4),	r14	;0xfffc(r4)
    869a:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    869e:	0e 12       	push	r14		
    86a0:	0f 12       	push	r15		
    86a2:	30 12 c3 b0 	push	#-20285	;#0xb0c3
    86a6:	b0 12 82 a5 	call	#0xa582	
    86aa:	31 50 06 00 	add	#6,	r1	;#0x0006
    		room = data;
    86ae:	d2 44 fc ff 	mov.b	-4(r4),	&0x0224	;0xfffc(r4)
    86b2:	24 02 
    		room_flag=1;
    86b4:	92 43 22 02 	mov	#1,	&0x0222	;r3 As==01
    86b8:	1c 3c       	jmp	$+58     	;abs 0x86f2
    		
    	}
        else if (room_flag == 1){
    86ba:	1f 42 22 02 	mov	&0x0222,r15	
    86be:	1f 93       	cmp	#1,	r15	;r3 As==01
    86c0:	18 20       	jnz	$+50     	;abs 0x86f2
        	printf("sensor: %c (hex code : %x)\n",data,data);
    86c2:	5e 44 fc ff 	mov.b	-4(r4),	r14	;0xfffc(r4)
    86c6:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    86ca:	0e 12       	push	r14		
    86cc:	0f 12       	push	r15		
    86ce:	30 12 de b0 	push	#-20258	;#0xb0de
    86d2:	b0 12 82 a5 	call	#0xa582	
    86d6:	31 50 06 00 	add	#6,	r1	;#0x0006
        	uart_data = ((room & 0xFF) <<8) | (data & 0xFF) ;
    86da:	5f 42 24 02 	mov.b	&0x0224,r15	
    86de:	4f 4f       	mov.b	r15,	r15	
    86e0:	4f 4f       	mov.b	r15,	r15	
    86e2:	8f 10       	swpb	r15		
    86e4:	5e 44 fc ff 	mov.b	-4(r4),	r14	;0xfffc(r4)
    86e8:	0f de       	bis	r14,	r15	
    86ea:	82 4f 20 02 	mov	r15,	&0x0220	
        	//printf("uart_data : %x \n",uart_data);
        	room_flag = 0;
    86ee:	82 43 22 02 	mov	#0,	&0x0222	;r3 As==00
        }      
    }
        
    return 0;
    86f2:	0f 43       	clr	r15		
}
    86f4:	21 53       	incd	r1		
    86f6:	34 41       	pop	r4		
    86f8:	30 41       	ret			

000086fa <thread_uart>:

static PT_THREAD(thread_uart(struct pt *pt))
{
    86fa:	04 12       	push	r4		
    86fc:	04 41       	mov	r1,	r4	
    86fe:	24 53       	incd	r4		
    8700:	21 82       	sub	#4,	r1	;r2 As==10
    8702:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    8706:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    870a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    870e:	2f 4f       	mov	@r15,	r15	
    8710:	3f 90 29 01 	cmp	#297,	r15	;#0x0129
    8714:	0a 24       	jz	$+22     	;abs 0x872a
    8716:	3f 90 2b 01 	cmp	#299,	r15	;#0x012b
    871a:	14 24       	jz	$+42     	;abs 0x8744
    871c:	0f 93       	tst	r15		
    871e:	1f 20       	jnz	$+64     	;abs 0x875e

    while(1)
    {
        PT_WAIT_UNTIL(pt, uart_flag==1);
    8720:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8724:	bf 40 29 01 	mov	#297,	0(r15)	;#0x0129, 0x0000(r15)
    8728:	00 00 
    872a:	1f 42 1e 02 	mov	&0x021e,r15	
    872e:	1f 93       	cmp	#1,	r15	;r3 As==01
    8730:	02 24       	jz	$+6      	;abs 0x8736
    8732:	4f 43       	clr.b	r15		
    8734:	1c 3c       	jmp	$+58     	;abs 0x876e
        led_red_on();
    8736:	b0 12 fe 9c 	call	#0x9cfe	
        PT_WAIT_UNTIL(pt,uart_flag==0);
    873a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    873e:	bf 40 2b 01 	mov	#299,	0(r15)	;#0x012b, 0x0000(r15)
    8742:	00 00 
    8744:	1f 42 1e 02 	mov	&0x021e,r15	
    8748:	0f 93       	tst	r15		
    874a:	02 24       	jz	$+6      	;abs 0x8750
    874c:	4f 43       	clr.b	r15		
    874e:	0f 3c       	jmp	$+32     	;abs 0x876e
        set_node_id(uart_data);
    8750:	1f 42 20 02 	mov	&0x0220,r15	
    8754:	b0 12 d6 81 	call	#0x81d6	
        led_red_off();
    8758:	b0 12 e8 9c 	call	#0x9ce8	
    }
    875c:	e1 3f       	jmp	$-60     	;abs 0x8720

    PT_END(pt);
    875e:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8762:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8766:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    876a:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    876e:	21 52       	add	#4,	r1	;r2 As==10
    8770:	34 41       	pop	r4		
    8772:	30 41       	ret			

00008774 <radio_cb>:
static char radio_rx_buffer[PKTLEN];
static char own_buffer[PKTLEN];
static int radio_rx_flag;

void radio_cb(uint8_t *buffer, int size, int8_t rssi)
{
    8774:	04 12       	push	r4		
    8776:	04 41       	mov	r1,	r4	
    8778:	24 53       	incd	r4		
    877a:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    877e:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    8782:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    8786:	c4 4d fc ff 	mov.b	r13,	-4(r4)	;0xfffc(r4)
        if (size > 0 && periodic_write_flag ==1)
    878a:	94 93 fa ff 	cmp	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    878e:	14 38       	jl	$+42     	;abs 0x87b8
    8790:	1f 42 18 02 	mov	&0x0218,r15	
    8794:	1f 93       	cmp	#1,	r15	;r3 As==01
    8796:	10 20       	jnz	$+34     	;abs 0x87b8
        {
            memcpy(radio_rx_buffer, buffer, PKTLEN);
    8798:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    879c:	3f 40 42 02 	mov	#578,	r15	;#0x0242
    87a0:	3d 40 1c 00 	mov	#28,	r13	;#0x001c
    87a4:	b0 12 88 a4 	call	#0xa488	
            printhex(radio_rx_buffer,PKTLEN);
    87a8:	3e 40 1c 00 	mov	#28,	r14	;#0x001c
    87ac:	3f 40 42 02 	mov	#578,	r15	;#0x0242
    87b0:	b0 12 8a 81 	call	#0x818a	
            radio_rx_flag = 1;
    87b4:	92 43 7a 02 	mov	#1,	&0x027a	;r3 As==01
        {
            //DBG_PRINTF("msg packet error size=%d\r\n",size);
            //J'ai commenté la ligne supérieure pour la démo
        }

    cc2500_rx_enter();
    87b8:	b0 12 7a 95 	call	#0x957a	
}
    87bc:	31 50 06 00 	add	#6,	r1	;#0x0006
    87c0:	34 41       	pop	r4		
    87c2:	30 41       	ret			

000087c4 <ezdisplay>:

void ezdisplay( char message[])
{
    87c4:	0b 12       	push	r11		
    87c6:	0a 12       	push	r10		
    87c8:	04 12       	push	r4		
    87ca:	04 41       	mov	r1,	r4	
    87cc:	34 50 06 00 	add	#6,	r4	;#0x0006
    87d0:	31 50 f4 ff 	add	#-12,	r1	;#0xfff4
    87d4:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    char msproom=message[0]&0xFF;
    87d8:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    87dc:	e4 4f f2 ff 	mov.b	@r15,	-14(r4)	;0xfff2(r4)
    char mspsensor=message[1]&0xFF;
    87e0:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    87e4:	1f 53       	inc	r15		
    87e6:	e4 4f f3 ff 	mov.b	@r15,	-13(r4)	;0xfff3(r4)
    int time=0;
    87ea:	84 43 ee ff 	mov	#0,	-18(r4)	;r3 As==00, 0xffee(r4)
    
    printf("{\"id\" : \"%c%c\"}\n",msproom,mspsensor);
    87ee:	5e 44 f3 ff 	mov.b	-13(r4),r14	;0xfff3(r4)
    87f2:	8e 11       	sxt	r14		
    87f4:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    87f8:	8f 11       	sxt	r15		
    87fa:	0e 12       	push	r14		
    87fc:	0f 12       	push	r15		
    87fe:	30 12 fa b0 	push	#-20230	;#0xb0fa
    8802:	b0 12 82 a5 	call	#0xa582	
    8806:	31 50 06 00 	add	#6,	r1	;#0x0006
    int i=3; //index 2 is the space charactere
    880a:	b4 40 03 00 	mov	#3,	-16(r4)	;#0x0003, 0xfff0(r4)
    880e:	f0 ff 
    while( i < PKTLEN-1)
    8810:	53 3c       	jmp	$+168    	;abs 0x88b8
    {
    	char msptemperature1=message[i++];
    8812:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    8816:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    881a:	e4 4f f4 ff 	mov.b	@r15,	-12(r4)	;0xfff4(r4)
    881e:	94 53 f0 ff 	inc	-16(r4)	;0xfff0(r4)
   	char msptemperature2=message[i++];
    8822:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    8826:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    882a:	e4 4f f5 ff 	mov.b	@r15,	-11(r4)	;0xfff5(r4)
    882e:	94 53 f0 ff 	inc	-16(r4)	;0xfff0(r4)
   	if ((message[i-1]&0xFF) == 0x2E || (message[i-2]&0xFF) == 0x2E )
    8832:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    8836:	3f 53       	add	#-1,	r15	;r3 As==11
    8838:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    883c:	6f 4f       	mov.b	@r15,	r15	
    883e:	8f 11       	sxt	r15		
    8840:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    8844:	3f 90 2e 00 	cmp	#46,	r15	;#0x002e
    8848:	3b 24       	jz	$+120    	;abs 0x88c0
    884a:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    884e:	2f 83       	decd	r15		
    8850:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    8854:	6f 4f       	mov.b	@r15,	r15	
    8856:	8f 11       	sxt	r15		
    8858:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    885c:	3f 90 2e 00 	cmp	#46,	r15	;#0x002e
    8860:	2f 24       	jz	$+96     	;abs 0x88c0
   	{
   		break;
   	}
    	int temperature=converter(msptemperature1, msptemperature2);
    8862:	5e 44 f5 ff 	mov.b	-11(r4),r14	;0xfff5(r4)
    8866:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    886a:	b0 12 4c 82 	call	#0x824c	
    886e:	84 4f f6 ff 	mov	r15,	-10(r4)	;0xfff6(r4)
    	time += TIMER_SENSING_TEMP;
    8872:	b4 50 64 00 	add	#100,	-18(r4)	;#0x0064, 0xffee(r4)
    8876:	ee ff 
    	printf("{\"temperature\" : \"%d,%d\", \"time\" : \"%d\"}\n",temperature/10, temperature%10, time*10);
    8878:	1f 44 ee ff 	mov	-18(r4),r15	;0xffee(r4)
    887c:	0e 4f       	mov	r15,	r14	
    887e:	0f 4e       	mov	r14,	r15	
    8880:	0f 5f       	rla	r15		
    8882:	0e 4f       	mov	r15,	r14	
    8884:	0f 4e       	mov	r14,	r15	
    8886:	0f 5f       	rla	r15		
    8888:	0f 5f       	rla	r15		
    888a:	0a 4e       	mov	r14,	r10	
    888c:	0a 5f       	add	r15,	r10	
    888e:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    8892:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    8896:	b0 12 5e a4 	call	#0xa45e	
    889a:	0b 4f       	mov	r15,	r11	
    889c:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    88a0:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    88a4:	b0 12 2c a4 	call	#0xa42c	
    88a8:	0a 12       	push	r10		
    88aa:	0b 12       	push	r11		
    88ac:	0f 12       	push	r15		
    88ae:	30 12 0b b1 	push	#-20213	;#0xb10b
    88b2:	b0 12 82 a5 	call	#0xa582	
    88b6:	31 52       	add	#8,	r1	;r2 As==11
    char mspsensor=message[1]&0xFF;
    int time=0;
    
    printf("{\"id\" : \"%c%c\"}\n",msproom,mspsensor);
    int i=3; //index 2 is the space charactere
    while( i < PKTLEN-1)
    88b8:	b4 90 1b 00 	cmp	#27,	-16(r4)	;#0x001b, 0xfff0(r4)
    88bc:	f0 ff 
    88be:	a9 3b       	jl	$-172    	;abs 0x8812
   	}
    	int temperature=converter(msptemperature1, msptemperature2);
    	time += TIMER_SENSING_TEMP;
    	printf("{\"temperature\" : \"%d,%d\", \"time\" : \"%d\"}\n",temperature/10, temperature%10, time*10);
    }
}
    88c0:	31 50 0c 00 	add	#12,	r1	;#0x000c
    88c4:	34 41       	pop	r4		
    88c6:	3a 41       	pop	r10		
    88c8:	3b 41       	pop	r11		
    88ca:	30 41       	ret			

000088cc <thread_rx>:

static PT_THREAD(thread_rx(struct pt *pt))
{
    88cc:	04 12       	push	r4		
    88ce:	04 41       	mov	r1,	r4	
    88d0:	24 53       	incd	r4		
    88d2:	21 82       	sub	#4,	r1	;r2 As==10
    88d4:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    88d8:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    88dc:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    88e0:	2f 4f       	mov	@r15,	r15	
    88e2:	0f 93       	tst	r15		
    88e4:	04 24       	jz	$+10     	;abs 0x88ee
    88e6:	3f 90 67 01 	cmp	#359,	r15	;#0x0167
    88ea:	06 24       	jz	$+14     	;abs 0x88f8
    88ec:	16 3c       	jmp	$+46     	;abs 0x891a

    while(1)
    {
        PT_WAIT_UNTIL(pt, radio_rx_flag == 1);
    88ee:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    88f2:	bf 40 67 01 	mov	#359,	0(r15)	;#0x0167, 0x0000(r15)
    88f6:	00 00 
    88f8:	1f 42 7a 02 	mov	&0x027a,r15	
    88fc:	1f 93       	cmp	#1,	r15	;r3 As==01
    88fe:	02 24       	jz	$+6      	;abs 0x8904
    8900:	4f 43       	clr.b	r15		
    8902:	13 3c       	jmp	$+40     	;abs 0x892a
        led_green_on();
    8904:	b0 12 c0 9c 	call	#0x9cc0	
        ezdisplay(radio_rx_buffer);
    8908:	3f 40 42 02 	mov	#578,	r15	;#0x0242
    890c:	b0 12 c4 87 	call	#0x87c4	
        radio_rx_flag = 0;
    8910:	82 43 7a 02 	mov	#0,	&0x027a	;r3 As==00
        led_green_off();
    8914:	b0 12 aa 9c 	call	#0x9caa	
    }
    8918:	ea 3f       	jmp	$-42     	;abs 0x88ee

    PT_END(pt);
    891a:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    891e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8922:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    8926:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    892a:	21 52       	add	#4,	r1	;r2 As==10
    892c:	34 41       	pop	r4		
    892e:	30 41       	ret			

00008930 <init_message>:




static void init_message()
{
    8930:	04 12       	push	r4		
    8932:	04 41       	mov	r1,	r4	
    8934:	24 53       	incd	r4		
    8936:	21 83       	decd	r1		
    unsigned int i;
    for(i = 0; i < PKTLEN; i++)
    8938:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc(r4)
    893c:	08 3c       	jmp	$+18     	;abs 0x894e
    {
        own_buffer[i] = 0x00;
    893e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8942:	3f 50 5e 02 	add	#606,	r15	;#0x025e
    8946:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)


static void init_message()
{
    unsigned int i;
    for(i = 0; i < PKTLEN; i++)
    894a:	94 53 fc ff 	inc	-4(r4)		;0xfffc(r4)
    894e:	b4 90 1c 00 	cmp	#28,	-4(r4)	;#0x001c, 0xfffc(r4)
    8952:	fc ff 
    8954:	f4 2b       	jnc	$-22     	;abs 0x893e
    {
        own_buffer[i] = 0x00;
    }
    own_buffer[0] = (node_id>>8) &0xFF;
    8956:	1f 42 00 02 	mov	&0x0200,r15	
    895a:	8f 10       	swpb	r15		
    895c:	4f 4f       	mov.b	r15,	r15	
    895e:	4f 4f       	mov.b	r15,	r15	
    8960:	c2 4f 5e 02 	mov.b	r15,	&0x025e	
    own_buffer[1] = node_id & 0xFF;
    8964:	1f 42 00 02 	mov	&0x0200,r15	
    8968:	4f 4f       	mov.b	r15,	r15	
    896a:	c2 4f 5f 02 	mov.b	r15,	&0x025f	
    own_buffer[2] = 0x20;//hex code for SPACE char
    896e:	f2 40 20 00 	mov.b	#32,	&0x0260	;#0x0020
    8972:	60 02 
    current_buffer_pt = 3;
    8974:	b2 40 03 00 	mov	#3,	&0x021c	;#0x0003
    8978:	1c 02 
    
}
    897a:	21 53       	incd	r1		
    897c:	34 41       	pop	r4		
    897e:	30 41       	ret			

00008980 <write_message>:


static void write_message()
{
    8980:	04 12       	push	r4		
    8982:	04 41       	mov	r1,	r4	
    8984:	24 53       	incd	r4		
    //finish the sending buffer with a dot 
    own_buffer[current_buffer_pt] = 0x2E; //dot hex code
    8986:	1f 42 1c 02 	mov	&0x021c,r15	
    898a:	ff 40 2e 00 	mov.b	#46,	606(r15);#0x002e, 0x025e(r15)
    898e:	5e 02 
    current_buffer_pt = 0;
    8990:	82 43 1c 02 	mov	#0,	&0x021c	;r3 As==00
    led_green_on();
    8994:	b0 12 c0 9c 	call	#0x9cc0	
    ezdisplay(own_buffer);
    8998:	3f 40 5e 02 	mov	#606,	r15	;#0x025e
    899c:	b0 12 c4 87 	call	#0x87c4	
    led_green_off();
    89a0:	b0 12 aa 9c 	call	#0x9caa	
   
}
    89a4:	34 41       	pop	r4		
    89a6:	30 41       	ret			

000089a8 <thread_periodic_writeTemp>:



static PT_THREAD(thread_periodic_writeTemp(struct pt *pt))
{
    89a8:	04 12       	push	r4		
    89aa:	04 41       	mov	r1,	r4	
    89ac:	24 53       	incd	r4		
    89ae:	21 82       	sub	#4,	r1	;r2 As==10
    89b0:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    89b4:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    89b8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    89bc:	2f 4f       	mov	@r15,	r15	
    89be:	3f 90 96 01 	cmp	#406,	r15	;#0x0196
    89c2:	0a 24       	jz	$+22     	;abs 0x89d8
    89c4:	3f 90 99 01 	cmp	#409,	r15	;#0x0199
    89c8:	16 24       	jz	$+46     	;abs 0x89f6
    89ca:	0f 93       	tst	r15		
    89cc:	29 20       	jnz	$+84     	;abs 0x8a20

    while(1)
    {
        PT_WAIT_UNTIL(pt,periodic_write_flag==1);
    89ce:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    89d2:	bf 40 96 01 	mov	#406,	0(r15)	;#0x0196, 0x0000(r15)
    89d6:	00 00 
    89d8:	1f 42 18 02 	mov	&0x0218,r15	
    89dc:	1f 93       	cmp	#1,	r15	;r3 As==01
    89de:	02 24       	jz	$+6      	;abs 0x89e4
    89e0:	4f 43       	clr.b	r15		
    89e2:	26 3c       	jmp	$+78     	;abs 0x8a30
        TIMER_WRITE = 0;
    89e4:	82 43 0e 02 	mov	#0,	&0x020e	;r3 As==00
        init_message();
    89e8:	b0 12 30 89 	call	#0x8930	
        PT_WAIT_UNTIL(pt, node_id != NODE_ID_UNDEFINED && timer_reached( TIMER_WRITE, TIMER_SEND) && periodic_write_flag==1);
    89ec:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    89f0:	bf 40 99 01 	mov	#409,	0(r15)	;#0x0199, 0x0000(r15)
    89f4:	00 00 
    89f6:	1f 42 00 02 	mov	&0x0200,r15	
    89fa:	0f 93       	tst	r15		
    89fc:	0c 24       	jz	$+26     	;abs 0x8a16
    89fe:	1f 42 0e 02 	mov	&0x020e,r15	
    8a02:	3e 40 1a 04 	mov	#1050,	r14	;#0x041a
    8a06:	b0 12 68 81 	call	#0x8168	
    8a0a:	0f 93       	tst	r15		
    8a0c:	04 24       	jz	$+10     	;abs 0x8a16
    8a0e:	1f 42 18 02 	mov	&0x0218,r15	
    8a12:	1f 93       	cmp	#1,	r15	;r3 As==01
    8a14:	02 24       	jz	$+6      	;abs 0x8a1a
    8a16:	4f 43       	clr.b	r15		
    8a18:	0b 3c       	jmp	$+24     	;abs 0x8a30
        write_message();
    8a1a:	b0 12 80 89 	call	#0x8980	
    }
    8a1e:	d7 3f       	jmp	$-80     	;abs 0x89ce

    PT_END(pt);
    8a20:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8a24:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8a28:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    8a2c:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    8a30:	21 52       	add	#4,	r1	;r2 As==10
    8a32:	34 41       	pop	r4		
    8a34:	30 41       	ret			

00008a36 <register_temperature>:
 * TEMP SENSOR
 */
 
 /* to be called from within a protothread */
static void register_temperature()
{
    8a36:	04 12       	push	r4		
    8a38:	04 41       	mov	r1,	r4	
    8a3a:	24 53       	incd	r4		
    8a3c:	21 82       	sub	#4,	r1	;r2 As==10
    
    int temperature = adc10_sample_temp();
    8a3e:	b0 12 7a 8b 	call	#0x8b7a	
    8a42:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    /* msp430 is little endian, convert temperature to network order */
    char *pt = (char *) &temperature;    
    8a46:	3f 40 fa ff 	mov	#-6,	r15	;#0xfffa
    8a4a:	0f 54       	add	r4,	r15	
    8a4c:	2f 53       	incd	r15		
    8a4e:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    own_buffer[current_buffer_pt++] = pt[1];
    8a52:	1f 42 1c 02 	mov	&0x021c,r15	
    8a56:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    8a5a:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    8a5e:	cf 4e 5e 02 	mov.b	r14,	606(r15);0x025e(r15)
    8a62:	1f 53       	inc	r15		
    8a64:	82 4f 1c 02 	mov	r15,	&0x021c	
    own_buffer[current_buffer_pt++] = pt[0];
    8a68:	1f 42 1c 02 	mov	&0x021c,r15	
    8a6c:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    8a70:	6e 4e       	mov.b	@r14,	r14	
    8a72:	cf 4e 5e 02 	mov.b	r14,	606(r15);0x025e(r15)
    8a76:	1f 53       	inc	r15		
    8a78:	82 4f 1c 02 	mov	r15,	&0x021c	
    
}
    8a7c:	21 52       	add	#4,	r1	;r2 As==10
    8a7e:	34 41       	pop	r4		
    8a80:	30 41       	ret			

00008a82 <thread_periodic_temperature>:

static PT_THREAD(thread_periodic_temperature(struct pt *pt))
{
    8a82:	04 12       	push	r4		
    8a84:	04 41       	mov	r1,	r4	
    8a86:	24 53       	incd	r4		
    8a88:	21 82       	sub	#4,	r1	;r2 As==10
    8a8a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    8a8e:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    8a92:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8a96:	2f 4f       	mov	@r15,	r15	
    8a98:	3f 90 b7 01 	cmp	#439,	r15	;#0x01b7
    8a9c:	0a 24       	jz	$+22     	;abs 0x8ab2
    8a9e:	3f 90 b9 01 	cmp	#441,	r15	;#0x01b9
    8aa2:	14 24       	jz	$+42     	;abs 0x8acc
    8aa4:	0f 93       	tst	r15		
    8aa6:	27 20       	jnz	$+80     	;abs 0x8af6

    while(1)
    {
        PT_WAIT_UNTIL(pt,periodic_temp_flag==1);
    8aa8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8aac:	bf 40 b7 01 	mov	#439,	0(r15)	;#0x01b7, 0x0000(r15)
    8ab0:	00 00 
    8ab2:	1f 42 1a 02 	mov	&0x021a,r15	
    8ab6:	1f 93       	cmp	#1,	r15	;r3 As==01
    8ab8:	02 24       	jz	$+6      	;abs 0x8abe
    8aba:	4f 43       	clr.b	r15		
    8abc:	24 3c       	jmp	$+74     	;abs 0x8b06
        TIMER_TEMP = 0;
    8abe:	82 43 0c 02 	mov	#0,	&0x020c	;r3 As==00
        PT_WAIT_UNTIL(pt, node_id != NODE_ID_UNDEFINED && timer_reached( TIMER_TEMP, TIMER_SENSING_TEMP) && periodic_temp_flag==1);
    8ac2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8ac6:	bf 40 b9 01 	mov	#441,	0(r15)	;#0x01b9, 0x0000(r15)
    8aca:	00 00 
    8acc:	1f 42 00 02 	mov	&0x0200,r15	
    8ad0:	0f 93       	tst	r15		
    8ad2:	0c 24       	jz	$+26     	;abs 0x8aec
    8ad4:	1f 42 0c 02 	mov	&0x020c,r15	
    8ad8:	3e 40 64 00 	mov	#100,	r14	;#0x0064
    8adc:	b0 12 68 81 	call	#0x8168	
    8ae0:	0f 93       	tst	r15		
    8ae2:	04 24       	jz	$+10     	;abs 0x8aec
    8ae4:	1f 42 1a 02 	mov	&0x021a,r15	
    8ae8:	1f 93       	cmp	#1,	r15	;r3 As==01
    8aea:	02 24       	jz	$+6      	;abs 0x8af0
    8aec:	4f 43       	clr.b	r15		
    8aee:	0b 3c       	jmp	$+24     	;abs 0x8b06
        register_temperature();
    8af0:	b0 12 36 8a 	call	#0x8a36	
    }
    8af4:	d9 3f       	jmp	$-76     	;abs 0x8aa8

    PT_END(pt);
    8af6:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8afa:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8afe:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    8b02:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    8b06:	21 52       	add	#4,	r1	;r2 As==10
    8b08:	34 41       	pop	r4		
    8b0a:	30 41       	ret			

00008b0c <adc10_start>:
    8b0c:	04 12       	push	r4		
    8b0e:	04 41       	mov	r1,	r4	
    8b10:	24 53       	incd	r4		
    8b12:	b2 40 86 10 	mov	#4230,	&0x0286	;#0x1086
    8b16:	86 02 
    8b18:	b2 40 dc 0a 	mov	#2780,	&0x0288	;#0x0adc
    8b1c:	88 02 
    8b1e:	34 41       	pop	r4		
    8b20:	30 41       	ret			

00008b22 <adc10_calibrate>:
    8b22:	04 12       	push	r4		
    8b24:	04 41       	mov	r1,	r4	
    8b26:	24 53       	incd	r4		
    8b28:	21 82       	sub	#4,	r1	;r2 As==10
    8b2a:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8b2e:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    8b32:	84 93 fa ff 	tst	-6(r4)		;0xfffa(r4)
    8b36:	04 24       	jz	$+10     	;abs 0x8b40
    8b38:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    8b3c:	82 4f 86 02 	mov	r15,	&0x0286	
    8b40:	84 93 fc ff 	tst	-4(r4)		;0xfffc(r4)
    8b44:	04 24       	jz	$+10     	;abs 0x8b4e
    8b46:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8b4a:	82 4f 88 02 	mov	r15,	&0x0288	
    8b4e:	21 52       	add	#4,	r1	;r2 As==10
    8b50:	34 41       	pop	r4		
    8b52:	30 41       	ret			

00008b54 <adc10_stop>:
    8b54:	04 12       	push	r4		
    8b56:	04 41       	mov	r1,	r4	
    8b58:	24 53       	incd	r4		
    8b5a:	1f 42 b0 01 	mov	&0x01b0,r15	
    8b5e:	3f f0 cf ff 	and	#-49,	r15	;#0xffcf
    8b62:	82 4f b0 01 	mov	r15,	&0x01b0	
    8b66:	34 41       	pop	r4		
    8b68:	30 41       	ret			

00008b6a <adc10irq>:
    8b6a:	04 12       	push	r4		
    8b6c:	04 41       	mov	r1,	r4	
    8b6e:	24 53       	incd	r4		
    8b70:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    8b74:	00 00 
    8b76:	34 41       	pop	r4		
    8b78:	00 13       	reti			

00008b7a <adc10_sample_temp>:
    8b7a:	0b 12       	push	r11		
    8b7c:	0a 12       	push	r10		
    8b7e:	09 12       	push	r9		
    8b80:	08 12       	push	r8		
    8b82:	04 12       	push	r4		
    8b84:	04 41       	mov	r1,	r4	
    8b86:	34 50 0a 00 	add	#10,	r4	;#0x000a
    8b8a:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    8b8e:	b2 40 80 a0 	mov	#-24448,&0x01b2	;#0xa080
    8b92:	b2 01 
    8b94:	b2 40 38 3c 	mov	#15416,	&0x01b0	;#0x3c38
    8b98:	b0 01 
    8b9a:	3e 40 3c 00 	mov	#60,	r14	;#0x003c
    8b9e:	0f 43       	clr	r15		
    8ba0:	b0 12 66 9b 	call	#0x9b66	
    8ba4:	1f 42 b0 01 	mov	&0x01b0,r15	
    8ba8:	3f d0 03 00 	bis	#3,	r15	;#0x0003
    8bac:	82 4f b0 01 	mov	r15,	&0x01b0	
    8bb0:	32 d0 10 00 	bis	#16,	r2	;#0x0010
    8bb4:	1f 42 b4 01 	mov	&0x01b4,r15	
    8bb8:	08 4f       	mov	r15,	r8	
    8bba:	09 43       	clr	r9		
    8bbc:	84 48 f2 ff 	mov	r8,	-14(r4)	;0xfff2(r4)
    8bc0:	84 49 f4 ff 	mov	r9,	-12(r4)	;0xfff4(r4)
    8bc4:	1f 42 b0 01 	mov	&0x01b0,r15	
    8bc8:	3f f0 fd ff 	and	#-3,	r15	;#0xfffd
    8bcc:	82 4f b0 01 	mov	r15,	&0x01b0	
    8bd0:	1f 42 b0 01 	mov	&0x01b0,r15	
    8bd4:	3f f0 cf ff 	and	#-49,	r15	;#0xffcf
    8bd8:	82 4f b0 01 	mov	r15,	&0x01b0	
    8bdc:	1f 42 86 02 	mov	&0x0286,r15	
    8be0:	0a 4f       	mov	r15,	r10	
    8be2:	0f 4a       	mov	r10,	r15	
    8be4:	8f 10       	swpb	r15		
    8be6:	8f 11       	sxt	r15		
    8be8:	8f 10       	swpb	r15		
    8bea:	8f 11       	sxt	r15		
    8bec:	0b 4f       	mov	r15,	r11	
    8bee:	1e 44 f2 ff 	mov	-14(r4),r14	;0xfff2(r4)
    8bf2:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    8bf6:	0c 4e       	mov	r14,	r12	
    8bf8:	0d 4f       	mov	r15,	r13	
    8bfa:	0e 4a       	mov	r10,	r14	
    8bfc:	0f 4b       	mov	r11,	r15	
    8bfe:	b0 12 00 a4 	call	#0xa400	
    8c02:	0f 93       	tst	r15		
    8c04:	04 38       	jl	$+10     	;abs 0x8c0e
    8c06:	1f 93       	cmp	#1,	r15	;r3 As==01
    8c08:	05 34       	jge	$+12     	;abs 0x8c14
    8c0a:	0e 93       	tst	r14		
    8c0c:	03 2c       	jc	$+8      	;abs 0x8c14
    8c0e:	3e 50 ff 03 	add	#1023,	r14	;#0x03ff
    8c12:	0f 63       	adc	r15		
    8c14:	8e 10       	swpb	r14		
    8c16:	8f 10       	swpb	r15		
    8c18:	4e ef       	xor.b	r15,	r14	
    8c1a:	0e ef       	xor	r15,	r14	
    8c1c:	8f 11       	sxt	r15		
    8c1e:	0f 11       	rra	r15		
    8c20:	0e 10       	rrc	r14		
    8c22:	0f 11       	rra	r15		
    8c24:	0e 10       	rrc	r14		
    8c26:	1f 42 88 02 	mov	&0x0288,r15	
    8c2a:	0d 4e       	mov	r14,	r13	
    8c2c:	0d 8f       	sub	r15,	r13	
    8c2e:	0f 4d       	mov	r13,	r15	
    8c30:	84 4f f0 ff 	mov	r15,	-16(r4)	;0xfff0(r4)
    8c34:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    8c38:	31 50 06 00 	add	#6,	r1	;#0x0006
    8c3c:	34 41       	pop	r4		
    8c3e:	38 41       	pop	r8		
    8c40:	39 41       	pop	r9		
    8c42:	3a 41       	pop	r10		
    8c44:	3b 41       	pop	r11		
    8c46:	30 41       	ret			

00008c48 <adc10_sample_avcc>:
    8c48:	0b 12       	push	r11		
    8c4a:	0a 12       	push	r10		
    8c4c:	04 12       	push	r4		
    8c4e:	04 41       	mov	r1,	r4	
    8c50:	34 50 06 00 	add	#6,	r4	;#0x0006
    8c54:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    8c58:	b2 40 00 b0 	mov	#-20480,&0x01b2	;#0xb000
    8c5c:	b2 01 
    8c5e:	b2 40 78 30 	mov	#12408,	&0x01b0	;#0x3078
    8c62:	b0 01 
    8c64:	3e 40 3c 00 	mov	#60,	r14	;#0x003c
    8c68:	0f 43       	clr	r15		
    8c6a:	b0 12 66 9b 	call	#0x9b66	
    8c6e:	1f 42 b0 01 	mov	&0x01b0,r15	
    8c72:	3f d0 03 00 	bis	#3,	r15	;#0x0003
    8c76:	82 4f b0 01 	mov	r15,	&0x01b0	
    8c7a:	32 d0 10 00 	bis	#16,	r2	;#0x0010
    8c7e:	1f 42 b4 01 	mov	&0x01b4,r15	
    8c82:	0a 4f       	mov	r15,	r10	
    8c84:	0b 43       	clr	r11		
    8c86:	84 4a f6 ff 	mov	r10,	-10(r4)	;0xfff6(r4)
    8c8a:	84 4b f8 ff 	mov	r11,	-8(r4)	;0xfff8(r4)
    8c8e:	1f 42 b0 01 	mov	&0x01b0,r15	
    8c92:	3f f0 fd ff 	and	#-3,	r15	;#0xfffd
    8c96:	82 4f b0 01 	mov	r15,	&0x01b0	
    8c9a:	1f 42 b0 01 	mov	&0x01b0,r15	
    8c9e:	3f f0 cf ff 	and	#-49,	r15	;#0xffcf
    8ca2:	82 4f b0 01 	mov	r15,	&0x01b0	
    8ca6:	1a 44 f6 ff 	mov	-10(r4),r10	;0xfff6(r4)
    8caa:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    8cae:	0c 4a       	mov	r10,	r12	
    8cb0:	0d 4b       	mov	r11,	r13	
    8cb2:	0e 4c       	mov	r12,	r14	
    8cb4:	0f 4d       	mov	r13,	r15	
    8cb6:	0e 5e       	rla	r14		
    8cb8:	0f 6f       	rlc	r15		
    8cba:	0e 5e       	rla	r14		
    8cbc:	0f 6f       	rlc	r15		
    8cbe:	0c 4e       	mov	r14,	r12	
    8cc0:	0d 4f       	mov	r15,	r13	
    8cc2:	0c 5a       	add	r10,	r12	
    8cc4:	0d 6b       	addc	r11,	r13	
    8cc6:	0e 4c       	mov	r12,	r14	
    8cc8:	0f 4d       	mov	r13,	r15	
    8cca:	0e 5e       	rla	r14		
    8ccc:	0f 6f       	rlc	r15		
    8cce:	0e 5e       	rla	r14		
    8cd0:	0f 6f       	rlc	r15		
    8cd2:	0e 5c       	add	r12,	r14	
    8cd4:	0f 6d       	addc	r13,	r15	
    8cd6:	0f 93       	tst	r15		
    8cd8:	04 38       	jl	$+10     	;abs 0x8ce2
    8cda:	1f 93       	cmp	#1,	r15	;r3 As==01
    8cdc:	05 34       	jge	$+12     	;abs 0x8ce8
    8cde:	0e 93       	tst	r14		
    8ce0:	03 2c       	jc	$+8      	;abs 0x8ce8
    8ce2:	3e 50 ff 01 	add	#511,	r14	;#0x01ff
    8ce6:	0f 63       	adc	r15		
    8ce8:	8e 10       	swpb	r14		
    8cea:	8f 10       	swpb	r15		
    8cec:	4e ef       	xor.b	r15,	r14	
    8cee:	0e ef       	xor	r15,	r14	
    8cf0:	8f 11       	sxt	r15		
    8cf2:	0f 11       	rra	r15		
    8cf4:	0e 10       	rrc	r14		
    8cf6:	84 4e f4 ff 	mov	r14,	-12(r4)	;0xfff4(r4)
    8cfa:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    8cfe:	31 50 06 00 	add	#6,	r1	;#0x0006
    8d02:	34 41       	pop	r4		
    8d04:	3a 41       	pop	r10		
    8d06:	3b 41       	pop	r11		
    8d08:	30 41       	ret			

00008d0a <CC2500_HW_GDO0_IRQ_ON_ASSERT>:
    8d0a:	04 12       	push	r4		
    8d0c:	04 41       	mov	r1,	r4	
    8d0e:	24 53       	incd	r4		
    8d10:	5f 42 2c 00 	mov.b	&0x002c,r15	
    8d14:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8d18:	c2 4f 2c 00 	mov.b	r15,	&0x002c	
    8d1c:	34 41       	pop	r4		
    8d1e:	30 41       	ret			

00008d20 <CC2500_HW_GDO2_IRQ_ON_ASSERT>:
    8d20:	04 12       	push	r4		
    8d22:	04 41       	mov	r1,	r4	
    8d24:	24 53       	incd	r4		
    8d26:	5f 42 2c 00 	mov.b	&0x002c,r15	
    8d2a:	7f f0 7f 00 	and.b	#127,	r15	;#0x007f
    8d2e:	c2 4f 2c 00 	mov.b	r15,	&0x002c	
    8d32:	34 41       	pop	r4		
    8d34:	30 41       	ret			

00008d36 <CC2500_HW_GDO0_DINT>:
    8d36:	04 12       	push	r4		
    8d38:	04 41       	mov	r1,	r4	
    8d3a:	24 53       	incd	r4		
    8d3c:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8d40:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8d44:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
    8d48:	34 41       	pop	r4		
    8d4a:	30 41       	ret			

00008d4c <CC2500_HW_GDO2_DINT>:
    8d4c:	04 12       	push	r4		
    8d4e:	04 41       	mov	r1,	r4	
    8d50:	24 53       	incd	r4		
    8d52:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8d56:	7f f0 7f 00 	and.b	#127,	r15	;#0x007f
    8d5a:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
    8d5e:	34 41       	pop	r4		
    8d60:	30 41       	ret			

00008d62 <CC2500_HW_GDO0_EINT>:
    8d62:	04 12       	push	r4		
    8d64:	04 41       	mov	r1,	r4	
    8d66:	24 53       	incd	r4		
    8d68:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8d6c:	7f d0 40 00 	bis.b	#64,	r15	;#0x0040
    8d70:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
    8d74:	34 41       	pop	r4		
    8d76:	30 41       	ret			

00008d78 <CC2500_HW_GDO0_CLEAR_FLAG>:
    8d78:	04 12       	push	r4		
    8d7a:	04 41       	mov	r1,	r4	
    8d7c:	24 53       	incd	r4		
    8d7e:	5f 42 2b 00 	mov.b	&0x002b,r15	
    8d82:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8d86:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
    8d8a:	34 41       	pop	r4		
    8d8c:	30 41       	ret			

00008d8e <CC2500_HW_GDO2_CLEAR_FLAG>:
    8d8e:	04 12       	push	r4		
    8d90:	04 41       	mov	r1,	r4	
    8d92:	24 53       	incd	r4		
    8d94:	5f 42 2b 00 	mov.b	&0x002b,r15	
    8d98:	7f f0 7f 00 	and.b	#127,	r15	;#0x007f
    8d9c:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
    8da0:	34 41       	pop	r4		
    8da2:	30 41       	ret			

00008da4 <CONFIG_GDO0_PIN_AS_INPUT>:
    8da4:	04 12       	push	r4		
    8da6:	04 41       	mov	r1,	r4	
    8da8:	24 53       	incd	r4		
    8daa:	5f 42 2e 00 	mov.b	&0x002e,r15	
    8dae:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8db2:	c2 4f 2e 00 	mov.b	r15,	&0x002e	
    8db6:	34 41       	pop	r4		
    8db8:	30 41       	ret			

00008dba <CC2500_HW_INIT>:
    8dba:	04 12       	push	r4		
    8dbc:	04 41       	mov	r1,	r4	
    8dbe:	24 53       	incd	r4		
    8dc0:	5f 42 2e 00 	mov.b	&0x002e,r15	
    8dc4:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8dc8:	c2 4f 2e 00 	mov.b	r15,	&0x002e	
    8dcc:	5f 42 2a 00 	mov.b	&0x002a,r15	
    8dd0:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8dd4:	c2 4f 2a 00 	mov.b	r15,	&0x002a	
    8dd8:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8ddc:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8de0:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
    8de4:	5f 42 2c 00 	mov.b	&0x002c,r15	
    8de8:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8dec:	c2 4f 2c 00 	mov.b	r15,	&0x002c	
    8df0:	5f 42 2b 00 	mov.b	&0x002b,r15	
    8df4:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8df8:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
    8dfc:	5f 42 2f 00 	mov.b	&0x002f,r15	
    8e00:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    8e04:	c2 4f 2f 00 	mov.b	r15,	&0x002f	
    8e08:	34 41       	pop	r4		
    8e0a:	30 41       	ret			

00008e0c <CC2500_SPI_TX>:
    8e0c:	04 12       	push	r4		
    8e0e:	04 41       	mov	r1,	r4	
    8e10:	24 53       	incd	r4		
    8e12:	21 83       	decd	r1		
    8e14:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8e18:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8e1c:	b0 12 f4 9d 	call	#0x9df4	
    8e20:	4f 4f       	mov.b	r15,	r15	
    8e22:	c2 4f a8 02 	mov.b	r15,	&0x02a8	
    8e26:	21 53       	incd	r1		
    8e28:	34 41       	pop	r4		
    8e2a:	30 41       	ret			

00008e2c <CC2500_SPI_STROBE>:
    8e2c:	04 12       	push	r4		
    8e2e:	04 41       	mov	r1,	r4	
    8e30:	24 53       	incd	r4		
    8e32:	21 83       	decd	r1		
    8e34:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8e38:	b0 12 d8 9e 	call	#0x9ed8	
    8e3c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8e40:	b0 12 0c 8e 	call	#0x8e0c	
    8e44:	b0 12 ee 9e 	call	#0x9eee	
    8e48:	21 53       	incd	r1		
    8e4a:	34 41       	pop	r4		
    8e4c:	30 41       	ret			

00008e4e <CC2500_SPI_WREG>:
    8e4e:	04 12       	push	r4		
    8e50:	04 41       	mov	r1,	r4	
    8e52:	24 53       	incd	r4		
    8e54:	21 82       	sub	#4,	r1	;r2 As==10
    8e56:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8e5a:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    8e5e:	b0 12 d8 9e 	call	#0x9ed8	
    8e62:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    8e66:	b0 12 0c 8e 	call	#0x8e0c	
    8e6a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8e6e:	b0 12 0c 8e 	call	#0x8e0c	
    8e72:	b0 12 ee 9e 	call	#0x9eee	
    8e76:	21 52       	add	#4,	r1	;r2 As==10
    8e78:	34 41       	pop	r4		
    8e7a:	30 41       	ret			

00008e7c <CC2500_SPI_RREG>:
    8e7c:	04 12       	push	r4		
    8e7e:	04 41       	mov	r1,	r4	
    8e80:	24 53       	incd	r4		
    8e82:	21 82       	sub	#4,	r1	;r2 As==10
    8e84:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8e88:	b0 12 d8 9e 	call	#0x9ed8	
    8e8c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8e90:	3f d0 80 00 	bis	#128,	r15	;#0x0080
    8e94:	b0 12 0c 8e 	call	#0x8e0c	
    8e98:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8e9c:	b0 12 f4 9d 	call	#0x9df4	
    8ea0:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    8ea4:	b0 12 ee 9e 	call	#0x9eee	
    8ea8:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    8eac:	21 52       	add	#4,	r1	;r2 As==10
    8eae:	34 41       	pop	r4		
    8eb0:	30 41       	ret			

00008eb2 <CC2500_SPI_ROREG>:
    8eb2:	04 12       	push	r4		
    8eb4:	04 41       	mov	r1,	r4	
    8eb6:	24 53       	incd	r4		
    8eb8:	21 82       	sub	#4,	r1	;r2 As==10
    8eba:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8ebe:	b0 12 d8 9e 	call	#0x9ed8	
    8ec2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8ec6:	3f d0 c0 00 	bis	#192,	r15	;#0x00c0
    8eca:	b0 12 0c 8e 	call	#0x8e0c	
    8ece:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8ed2:	b0 12 f4 9d 	call	#0x9df4	
    8ed6:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    8eda:	b0 12 ee 9e 	call	#0x9eee	
    8ede:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    8ee2:	21 52       	add	#4,	r1	;r2 As==10
    8ee4:	34 41       	pop	r4		
    8ee6:	30 41       	ret			

00008ee8 <CC2500_SPI_TX_BYTE>:
    8ee8:	04 12       	push	r4		
    8eea:	04 41       	mov	r1,	r4	
    8eec:	24 53       	incd	r4		
    8eee:	21 82       	sub	#4,	r1	;r2 As==10
    8ef0:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8ef4:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    8ef8:	b0 12 d8 9e 	call	#0x9ed8	
    8efc:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    8f00:	b0 12 0c 8e 	call	#0x8e0c	
    8f04:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f08:	b0 12 0c 8e 	call	#0x8e0c	
    8f0c:	b0 12 ee 9e 	call	#0x9eee	
    8f10:	21 52       	add	#4,	r1	;r2 As==10
    8f12:	34 41       	pop	r4		
    8f14:	30 41       	ret			

00008f16 <CC2500_SPI_RX_BYTE>:
    8f16:	04 12       	push	r4		
    8f18:	04 41       	mov	r1,	r4	
    8f1a:	24 53       	incd	r4		
    8f1c:	21 82       	sub	#4,	r1	;r2 As==10
    8f1e:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8f22:	b0 12 d8 9e 	call	#0x9ed8	
    8f26:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f2a:	3f d0 80 00 	bis	#128,	r15	;#0x0080
    8f2e:	b0 12 0c 8e 	call	#0x8e0c	
    8f32:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8f36:	b0 12 f4 9d 	call	#0x9df4	
    8f3a:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    8f3e:	b0 12 ee 9e 	call	#0x9eee	
    8f42:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    8f46:	21 52       	add	#4,	r1	;r2 As==10
    8f48:	34 41       	pop	r4		
    8f4a:	30 41       	ret			

00008f4c <CC2500_SPI_TX_BURST>:
    8f4c:	04 12       	push	r4		
    8f4e:	04 41       	mov	r1,	r4	
    8f50:	24 53       	incd	r4		
    8f52:	31 82       	sub	#8,	r1	;r2 As==11
    8f54:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    8f58:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    8f5c:	84 4d fc ff 	mov	r13,	-4(r4)	;0xfffc(r4)
    8f60:	c4 43 f6 ff 	mov.b	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    8f64:	b0 12 d8 9e 	call	#0x9ed8	
    8f68:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    8f6c:	3f d0 40 00 	bis	#64,	r15	;#0x0040
    8f70:	b0 12 0c 8e 	call	#0x8e0c	
    8f74:	c4 43 f6 ff 	mov.b	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    8f78:	0a 3c       	jmp	$+22     	;abs 0x8f8e
    8f7a:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    8f7e:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    8f82:	6f 4f       	mov.b	@r15,	r15	
    8f84:	8f 11       	sxt	r15		
    8f86:	b0 12 0c 8e 	call	#0x8e0c	
    8f8a:	d4 53 f6 ff 	inc.b	-10(r4)	;0xfff6(r4)
    8f8e:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    8f92:	1f 94 fc ff 	cmp	-4(r4),	r15	;0xfffc(r4)
    8f96:	f1 3b       	jl	$-28     	;abs 0x8f7a
    8f98:	b0 12 ee 9e 	call	#0x9eee	
    8f9c:	31 52       	add	#8,	r1	;r2 As==11
    8f9e:	34 41       	pop	r4		
    8fa0:	30 41       	ret			

00008fa2 <CC2500_SPI_RX_BURST>:
    8fa2:	0b 12       	push	r11		
    8fa4:	04 12       	push	r4		
    8fa6:	04 41       	mov	r1,	r4	
    8fa8:	24 52       	add	#4,	r4	;r2 As==10
    8faa:	31 82       	sub	#8,	r1	;r2 As==11
    8fac:	84 4f f6 ff 	mov	r15,	-10(r4)	;0xfff6(r4)
    8fb0:	84 4e f8 ff 	mov	r14,	-8(r4)	;0xfff8(r4)
    8fb4:	84 4d fa ff 	mov	r13,	-6(r4)	;0xfffa(r4)
    8fb8:	c4 43 f4 ff 	mov.b	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    8fbc:	b0 12 d8 9e 	call	#0x9ed8	
    8fc0:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    8fc4:	3f d0 c0 00 	bis	#192,	r15	;#0x00c0
    8fc8:	b0 12 0c 8e 	call	#0x8e0c	
    8fcc:	c4 43 f4 ff 	mov.b	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    8fd0:	0e 3c       	jmp	$+30     	;abs 0x8fee
    8fd2:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    8fd6:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    8fda:	0b 5f       	add	r15,	r11	
    8fdc:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8fe0:	b0 12 f4 9d 	call	#0x9df4	
    8fe4:	4f 4f       	mov.b	r15,	r15	
    8fe6:	cb 4f 00 00 	mov.b	r15,	0(r11)	;0x0000(r11)
    8fea:	d4 53 f4 ff 	inc.b	-12(r4)	;0xfff4(r4)
    8fee:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    8ff2:	1f 94 fa ff 	cmp	-6(r4),	r15	;0xfffa(r4)
    8ff6:	ed 3b       	jl	$-36     	;abs 0x8fd2
    8ff8:	b0 12 ee 9e 	call	#0x9eee	
    8ffc:	31 52       	add	#8,	r1	;r2 As==11
    8ffe:	34 41       	pop	r4		
    9000:	3b 41       	pop	r11		
    9002:	30 41       	ret			

00009004 <CC2500_SPI_RX_FIFO_BYTE>:
    9004:	04 12       	push	r4		
    9006:	04 41       	mov	r1,	r4	
    9008:	24 53       	incd	r4		
    900a:	21 83       	decd	r1		
    900c:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    9010:	b0 12 16 8f 	call	#0x8f16	
    9014:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9018:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    901c:	21 53       	incd	r1		
    901e:	34 41       	pop	r4		
    9020:	30 41       	ret			

00009022 <cc2500_wait_status>:
    9022:	04 12       	push	r4		
    9024:	04 41       	mov	r1,	r4	
    9026:	24 53       	incd	r4		
    9028:	21 82       	sub	#4,	r1	;r2 As==10
    902a:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    902e:	3f 40 3d 00 	mov	#61,	r15	;#0x003d
    9032:	b0 12 2c 8e 	call	#0x8e2c	
    9036:	5f 42 a8 02 	mov.b	&0x02a8,r15	
    903a:	4f 4f       	mov.b	r15,	r15	
    903c:	4f 4f       	mov.b	r15,	r15	
    903e:	12 c3       	clrc			
    9040:	4f 10       	rrc.b	r15		
    9042:	12 c3       	clrc			
    9044:	4f 10       	rrc.b	r15		
    9046:	12 c3       	clrc			
    9048:	4f 10       	rrc.b	r15		
    904a:	12 c3       	clrc			
    904c:	4f 10       	rrc.b	r15		
    904e:	4e 4f       	mov.b	r15,	r14	
    9050:	7e f0 07 00 	and.b	#7,	r14	;#0x0007
    9054:	c4 4e fa ff 	mov.b	r14,	-6(r4)	;0xfffa(r4)
    9058:	d4 94 fa ff 	cmp.b	-6(r4),	-4(r4)	;0xfffa(r4), 0xfffc(r4)
    905c:	fc ff 
    905e:	e7 23       	jnz	$-48     	;abs 0x902e
    9060:	21 52       	add	#4,	r1	;r2 As==10
    9062:	34 41       	pop	r4		
    9064:	30 41       	ret			

00009066 <cc2500_gdo0_set_signal>:
    9066:	04 12       	push	r4		
    9068:	04 41       	mov	r1,	r4	
    906a:	24 53       	incd	r4		
    906c:	21 82       	sub	#4,	r1	;r2 As==10
    906e:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9072:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9076:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    907a:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    907e:	d2 44 fa ff 	mov.b	-6(r4),	&0x02a4	;0xfffa(r4)
    9082:	a4 02 
    9084:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    9088:	0e 4f       	mov	r15,	r14	
    908a:	2f 43       	mov	#2,	r15	;r3 As==10
    908c:	b0 12 4e 8e 	call	#0x8e4e	
    9090:	21 52       	add	#4,	r1	;r2 As==10
    9092:	34 41       	pop	r4		
    9094:	30 41       	ret			

00009096 <cc2500_gdo2_set_signal>:
    9096:	04 12       	push	r4		
    9098:	04 41       	mov	r1,	r4	
    909a:	24 53       	incd	r4		
    909c:	21 82       	sub	#4,	r1	;r2 As==10
    909e:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    90a2:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    90a6:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    90aa:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    90ae:	d2 44 fa ff 	mov.b	-6(r4),	&0x02a0	;0xfffa(r4)
    90b2:	a0 02 
    90b4:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    90b8:	0e 4f       	mov	r15,	r14	
    90ba:	0f 43       	clr	r15		
    90bc:	b0 12 4e 8e 	call	#0x8e4e	
    90c0:	21 52       	add	#4,	r1	;r2 As==10
    90c2:	34 41       	pop	r4		
    90c4:	30 41       	ret			

000090c6 <cc2500_set_fifo_threshold>:
    90c6:	04 12       	push	r4		
    90c8:	04 41       	mov	r1,	r4	
    90ca:	24 53       	incd	r4		
    90cc:	21 82       	sub	#4,	r1	;r2 As==10
    90ce:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    90d2:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    90d6:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f
    90da:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    90de:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    90e2:	0e 4f       	mov	r15,	r14	
    90e4:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    90e8:	b0 12 4e 8e 	call	#0x8e4e	
    90ec:	21 52       	add	#4,	r1	;r2 As==10
    90ee:	34 41       	pop	r4		
    90f0:	30 41       	ret			

000090f2 <cc2500_check_tx_underflow>:
    90f2:	04 12       	push	r4		
    90f4:	04 41       	mov	r1,	r4	
    90f6:	24 53       	incd	r4		
    90f8:	21 83       	decd	r1		
    90fa:	3f 40 3d 00 	mov	#61,	r15	;#0x003d
    90fe:	b0 12 2c 8e 	call	#0x8e2c	
    9102:	5f 42 a8 02 	mov.b	&0x02a8,r15	
    9106:	4f 4f       	mov.b	r15,	r15	
    9108:	4f 4f       	mov.b	r15,	r15	
    910a:	12 c3       	clrc			
    910c:	4f 10       	rrc.b	r15		
    910e:	12 c3       	clrc			
    9110:	4f 10       	rrc.b	r15		
    9112:	12 c3       	clrc			
    9114:	4f 10       	rrc.b	r15		
    9116:	12 c3       	clrc			
    9118:	4f 10       	rrc.b	r15		
    911a:	4f 4f       	mov.b	r15,	r15	
    911c:	0e 4f       	mov	r15,	r14	
    911e:	3e f0 07 00 	and	#7,	r14	;#0x0007
    9122:	1f 43       	mov	#1,	r15	;r3 As==01
    9124:	3e 90 07 00 	cmp	#7,	r14	;#0x0007
    9128:	01 24       	jz	$+4      	;abs 0x912c
    912a:	0f 43       	clr	r15		
    912c:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9130:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9134:	21 53       	incd	r1		
    9136:	34 41       	pop	r4		
    9138:	30 41       	ret			

0000913a <cc2500_check_rx_overflow>:
    913a:	04 12       	push	r4		
    913c:	04 41       	mov	r1,	r4	
    913e:	24 53       	incd	r4		
    9140:	21 83       	decd	r1		
    9142:	3f 40 3d 00 	mov	#61,	r15	;#0x003d
    9146:	b0 12 2c 8e 	call	#0x8e2c	
    914a:	5f 42 a8 02 	mov.b	&0x02a8,r15	
    914e:	4f 4f       	mov.b	r15,	r15	
    9150:	4f 4f       	mov.b	r15,	r15	
    9152:	12 c3       	clrc			
    9154:	4f 10       	rrc.b	r15		
    9156:	12 c3       	clrc			
    9158:	4f 10       	rrc.b	r15		
    915a:	12 c3       	clrc			
    915c:	4f 10       	rrc.b	r15		
    915e:	12 c3       	clrc			
    9160:	4f 10       	rrc.b	r15		
    9162:	4f 4f       	mov.b	r15,	r15	
    9164:	0e 4f       	mov	r15,	r14	
    9166:	3e f0 07 00 	and	#7,	r14	;#0x0007
    916a:	5f 43       	mov.b	#1,	r15	;r3 As==01
    916c:	3e 90 06 00 	cmp	#6,	r14	;#0x0006
    9170:	01 24       	jz	$+4      	;abs 0x9174
    9172:	4f 43       	clr.b	r15		
    9174:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9178:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    917c:	8f 11       	sxt	r15		
    917e:	21 53       	incd	r1		
    9180:	34 41       	pop	r4		
    9182:	30 41       	ret			

00009184 <cc2500_check_fifo_xflow_flush>:
    9184:	04 12       	push	r4		
    9186:	04 41       	mov	r1,	r4	
    9188:	24 53       	incd	r4		
    918a:	b0 12 f2 90 	call	#0x90f2	
    918e:	0f 93       	tst	r15		
    9190:	04 24       	jz	$+10     	;abs 0x919a
    9192:	3f 40 3b 00 	mov	#59,	r15	;#0x003b
    9196:	b0 12 2c 8e 	call	#0x8e2c	
    919a:	b0 12 3a 91 	call	#0x913a	
    919e:	0f 93       	tst	r15		
    91a0:	04 24       	jz	$+10     	;abs 0x91aa
    91a2:	3f 40 3a 00 	mov	#58,	r15	;#0x003a
    91a6:	b0 12 2c 8e 	call	#0x8e2c	
    91aa:	34 41       	pop	r4		
    91ac:	30 41       	ret			

000091ae <cc2500_configure>:
    91ae:	04 12       	push	r4		
    91b0:	04 41       	mov	r1,	r4	
    91b2:	24 53       	incd	r4		
    91b4:	21 83       	decd	r1		
    91b6:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    91ba:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    91be:	6f 4f       	mov.b	@r15,	r15	
    91c0:	4f 4f       	mov.b	r15,	r15	
    91c2:	0e 4f       	mov	r15,	r14	
    91c4:	3f 40 0b 00 	mov	#11,	r15	;#0x000b
    91c8:	b0 12 4e 8e 	call	#0x8e4e	
    91cc:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    91d0:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    91d4:	4f 4f       	mov.b	r15,	r15	
    91d6:	0e 4f       	mov	r15,	r14	
    91d8:	3f 40 0c 00 	mov	#12,	r15	;#0x000c
    91dc:	b0 12 4e 8e 	call	#0x8e4e	
    91e0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    91e4:	5f 4f 02 00 	mov.b	2(r15),	r15	;0x0002(r15)
    91e8:	4f 4f       	mov.b	r15,	r15	
    91ea:	0e 4f       	mov	r15,	r14	
    91ec:	3f 40 0d 00 	mov	#13,	r15	;#0x000d
    91f0:	b0 12 4e 8e 	call	#0x8e4e	
    91f4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    91f8:	5f 4f 03 00 	mov.b	3(r15),	r15	;0x0003(r15)
    91fc:	4f 4f       	mov.b	r15,	r15	
    91fe:	0e 4f       	mov	r15,	r14	
    9200:	3f 40 0e 00 	mov	#14,	r15	;#0x000e
    9204:	b0 12 4e 8e 	call	#0x8e4e	
    9208:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    920c:	5f 4f 04 00 	mov.b	4(r15),	r15	;0x0004(r15)
    9210:	4f 4f       	mov.b	r15,	r15	
    9212:	0e 4f       	mov	r15,	r14	
    9214:	3f 40 0f 00 	mov	#15,	r15	;#0x000f
    9218:	b0 12 4e 8e 	call	#0x8e4e	
    921c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9220:	5f 4f 05 00 	mov.b	5(r15),	r15	;0x0005(r15)
    9224:	4f 4f       	mov.b	r15,	r15	
    9226:	0e 4f       	mov	r15,	r14	
    9228:	3f 40 10 00 	mov	#16,	r15	;#0x0010
    922c:	b0 12 4e 8e 	call	#0x8e4e	
    9230:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9234:	5f 4f 06 00 	mov.b	6(r15),	r15	;0x0006(r15)
    9238:	4f 4f       	mov.b	r15,	r15	
    923a:	0e 4f       	mov	r15,	r14	
    923c:	3f 40 11 00 	mov	#17,	r15	;#0x0011
    9240:	b0 12 4e 8e 	call	#0x8e4e	
    9244:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9248:	5f 4f 07 00 	mov.b	7(r15),	r15	;0x0007(r15)
    924c:	4f 4f       	mov.b	r15,	r15	
    924e:	0e 4f       	mov	r15,	r14	
    9250:	3f 40 12 00 	mov	#18,	r15	;#0x0012
    9254:	b0 12 4e 8e 	call	#0x8e4e	
    9258:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    925c:	5f 4f 08 00 	mov.b	8(r15),	r15	;0x0008(r15)
    9260:	4f 4f       	mov.b	r15,	r15	
    9262:	0e 4f       	mov	r15,	r14	
    9264:	3f 40 13 00 	mov	#19,	r15	;#0x0013
    9268:	b0 12 4e 8e 	call	#0x8e4e	
    926c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9270:	5f 4f 09 00 	mov.b	9(r15),	r15	;0x0009(r15)
    9274:	4f 4f       	mov.b	r15,	r15	
    9276:	0e 4f       	mov	r15,	r14	
    9278:	3f 40 14 00 	mov	#20,	r15	;#0x0014
    927c:	b0 12 4e 8e 	call	#0x8e4e	
    9280:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9284:	5f 4f 0a 00 	mov.b	10(r15),r15	;0x000a(r15)
    9288:	4f 4f       	mov.b	r15,	r15	
    928a:	0e 4f       	mov	r15,	r14	
    928c:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    9290:	b0 12 4e 8e 	call	#0x8e4e	
    9294:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9298:	5f 4f 0b 00 	mov.b	11(r15),r15	;0x000b(r15)
    929c:	4f 4f       	mov.b	r15,	r15	
    929e:	0e 4f       	mov	r15,	r14	
    92a0:	3f 40 15 00 	mov	#21,	r15	;#0x0015
    92a4:	b0 12 4e 8e 	call	#0x8e4e	
    92a8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    92ac:	5f 4f 0c 00 	mov.b	12(r15),r15	;0x000c(r15)
    92b0:	4f 4f       	mov.b	r15,	r15	
    92b2:	0e 4f       	mov	r15,	r14	
    92b4:	3f 40 21 00 	mov	#33,	r15	;#0x0021
    92b8:	b0 12 4e 8e 	call	#0x8e4e	
    92bc:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    92c0:	5f 4f 0d 00 	mov.b	13(r15),r15	;0x000d(r15)
    92c4:	4f 4f       	mov.b	r15,	r15	
    92c6:	0e 4f       	mov	r15,	r14	
    92c8:	3f 40 22 00 	mov	#34,	r15	;#0x0022
    92cc:	b0 12 4e 8e 	call	#0x8e4e	
    92d0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    92d4:	5f 4f 0e 00 	mov.b	14(r15),r15	;0x000e(r15)
    92d8:	4f 4f       	mov.b	r15,	r15	
    92da:	0e 4f       	mov	r15,	r14	
    92dc:	3f 40 18 00 	mov	#24,	r15	;#0x0018
    92e0:	b0 12 4e 8e 	call	#0x8e4e	
    92e4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    92e8:	5f 4f 0f 00 	mov.b	15(r15),r15	;0x000f(r15)
    92ec:	4f 4f       	mov.b	r15,	r15	
    92ee:	0e 4f       	mov	r15,	r14	
    92f0:	3f 40 19 00 	mov	#25,	r15	;#0x0019
    92f4:	b0 12 4e 8e 	call	#0x8e4e	
    92f8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    92fc:	5f 4f 10 00 	mov.b	16(r15),r15	;0x0010(r15)
    9300:	4f 4f       	mov.b	r15,	r15	
    9302:	0e 4f       	mov	r15,	r14	
    9304:	3f 40 1a 00 	mov	#26,	r15	;#0x001a
    9308:	b0 12 4e 8e 	call	#0x8e4e	
    930c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9310:	5f 4f 11 00 	mov.b	17(r15),r15	;0x0011(r15)
    9314:	4f 4f       	mov.b	r15,	r15	
    9316:	0e 4f       	mov	r15,	r14	
    9318:	3f 40 1b 00 	mov	#27,	r15	;#0x001b
    931c:	b0 12 4e 8e 	call	#0x8e4e	
    9320:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9324:	5f 4f 12 00 	mov.b	18(r15),r15	;0x0012(r15)
    9328:	4f 4f       	mov.b	r15,	r15	
    932a:	0e 4f       	mov	r15,	r14	
    932c:	3f 40 1c 00 	mov	#28,	r15	;#0x001c
    9330:	b0 12 4e 8e 	call	#0x8e4e	
    9334:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9338:	5f 4f 13 00 	mov.b	19(r15),r15	;0x0013(r15)
    933c:	4f 4f       	mov.b	r15,	r15	
    933e:	0e 4f       	mov	r15,	r14	
    9340:	3f 40 1d 00 	mov	#29,	r15	;#0x001d
    9344:	b0 12 4e 8e 	call	#0x8e4e	
    9348:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    934c:	5f 4f 14 00 	mov.b	20(r15),r15	;0x0014(r15)
    9350:	4f 4f       	mov.b	r15,	r15	
    9352:	0e 4f       	mov	r15,	r14	
    9354:	3f 40 23 00 	mov	#35,	r15	;#0x0023
    9358:	b0 12 4e 8e 	call	#0x8e4e	
    935c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9360:	5f 4f 15 00 	mov.b	21(r15),r15	;0x0015(r15)
    9364:	4f 4f       	mov.b	r15,	r15	
    9366:	0e 4f       	mov	r15,	r14	
    9368:	3f 40 24 00 	mov	#36,	r15	;#0x0024
    936c:	b0 12 4e 8e 	call	#0x8e4e	
    9370:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9374:	5f 4f 16 00 	mov.b	22(r15),r15	;0x0016(r15)
    9378:	4f 4f       	mov.b	r15,	r15	
    937a:	0e 4f       	mov	r15,	r14	
    937c:	3f 40 25 00 	mov	#37,	r15	;#0x0025
    9380:	b0 12 4e 8e 	call	#0x8e4e	
    9384:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9388:	5f 4f 17 00 	mov.b	23(r15),r15	;0x0017(r15)
    938c:	4f 4f       	mov.b	r15,	r15	
    938e:	0e 4f       	mov	r15,	r14	
    9390:	3f 40 26 00 	mov	#38,	r15	;#0x0026
    9394:	b0 12 4e 8e 	call	#0x8e4e	
    9398:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    939c:	5f 4f 18 00 	mov.b	24(r15),r15	;0x0018(r15)
    93a0:	4f 4f       	mov.b	r15,	r15	
    93a2:	0e 4f       	mov	r15,	r14	
    93a4:	3f 40 29 00 	mov	#41,	r15	;#0x0029
    93a8:	b0 12 4e 8e 	call	#0x8e4e	
    93ac:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    93b0:	5f 4f 19 00 	mov.b	25(r15),r15	;0x0019(r15)
    93b4:	4f 4f       	mov.b	r15,	r15	
    93b6:	0e 4f       	mov	r15,	r14	
    93b8:	3f 40 2c 00 	mov	#44,	r15	;#0x002c
    93bc:	b0 12 4e 8e 	call	#0x8e4e	
    93c0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    93c4:	5f 4f 1a 00 	mov.b	26(r15),r15	;0x001a(r15)
    93c8:	4f 4f       	mov.b	r15,	r15	
    93ca:	0e 4f       	mov	r15,	r14	
    93cc:	3f 40 2d 00 	mov	#45,	r15	;#0x002d
    93d0:	b0 12 4e 8e 	call	#0x8e4e	
    93d4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    93d8:	5f 4f 1b 00 	mov.b	27(r15),r15	;0x001b(r15)
    93dc:	4f 4f       	mov.b	r15,	r15	
    93de:	0e 4f       	mov	r15,	r14	
    93e0:	3f 40 2e 00 	mov	#46,	r15	;#0x002e
    93e4:	b0 12 4e 8e 	call	#0x8e4e	
    93e8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    93ec:	5f 4f 1c 00 	mov.b	28(r15),r15	;0x001c(r15)
    93f0:	4f 4f       	mov.b	r15,	r15	
    93f2:	0e 4f       	mov	r15,	r14	
    93f4:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    93f8:	b0 12 4e 8e 	call	#0x8e4e	
    93fc:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9400:	5f 4f 1d 00 	mov.b	29(r15),r15	;0x001d(r15)
    9404:	4f 4f       	mov.b	r15,	r15	
    9406:	0e 4f       	mov	r15,	r14	
    9408:	0f 43       	clr	r15		
    940a:	b0 12 4e 8e 	call	#0x8e4e	
    940e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9412:	5f 4f 1e 00 	mov.b	30(r15),r15	;0x001e(r15)
    9416:	4f 4f       	mov.b	r15,	r15	
    9418:	0e 4f       	mov	r15,	r14	
    941a:	2f 43       	mov	#2,	r15	;r3 As==10
    941c:	b0 12 4e 8e 	call	#0x8e4e	
    9420:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9424:	5f 4f 1f 00 	mov.b	31(r15),r15	;0x001f(r15)
    9428:	4f 4f       	mov.b	r15,	r15	
    942a:	0e 4f       	mov	r15,	r14	
    942c:	3f 40 07 00 	mov	#7,	r15	;#0x0007
    9430:	b0 12 4e 8e 	call	#0x8e4e	
    9434:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9438:	5f 4f 20 00 	mov.b	32(r15),r15	;0x0020(r15)
    943c:	4f 4f       	mov.b	r15,	r15	
    943e:	0e 4f       	mov	r15,	r14	
    9440:	3f 42       	mov	#8,	r15	;r2 As==11
    9442:	b0 12 4e 8e 	call	#0x8e4e	
    9446:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    944a:	5f 4f 21 00 	mov.b	33(r15),r15	;0x0021(r15)
    944e:	4f 4f       	mov.b	r15,	r15	
    9450:	0e 4f       	mov	r15,	r14	
    9452:	3f 40 09 00 	mov	#9,	r15	;#0x0009
    9456:	b0 12 4e 8e 	call	#0x8e4e	
    945a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    945e:	5f 4f 22 00 	mov.b	34(r15),r15	;0x0022(r15)
    9462:	4f 4f       	mov.b	r15,	r15	
    9464:	0e 4f       	mov	r15,	r14	
    9466:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    946a:	b0 12 4e 8e 	call	#0x8e4e	
    946e:	3e 40 fe 00 	mov	#254,	r14	;#0x00fe
    9472:	3f 40 3e 00 	mov	#62,	r15	;#0x003e
    9476:	b0 12 4e 8e 	call	#0x8e4e	
    947a:	7f 40 0f 00 	mov.b	#15,	r15	;#0x000f
    947e:	b0 12 c6 90 	call	#0x90c6	
    9482:	5f 43       	mov.b	#1,	r15	;r3 As==01
    9484:	b0 12 66 90 	call	#0x9066	
    9488:	b0 12 0a 8d 	call	#0x8d0a	
    948c:	b0 12 36 8d 	call	#0x8d36	
    9490:	7f 40 06 00 	mov.b	#6,	r15	;#0x0006
    9494:	b0 12 96 90 	call	#0x9096	
    9498:	b0 12 20 8d 	call	#0x8d20	
    949c:	b0 12 4c 8d 	call	#0x8d4c	
    94a0:	21 53       	incd	r1		
    94a2:	34 41       	pop	r4		
    94a4:	30 41       	ret			

000094a6 <cc2500_set_channel>:
    94a6:	04 12       	push	r4		
    94a8:	04 41       	mov	r1,	r4	
    94aa:	24 53       	incd	r4		
    94ac:	21 83       	decd	r1		
    94ae:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    94b2:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    94b6:	0e 4f       	mov	r15,	r14	
    94b8:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    94bc:	b0 12 4e 8e 	call	#0x8e4e	
    94c0:	21 53       	incd	r1		
    94c2:	34 41       	pop	r4		
    94c4:	30 41       	ret			

000094c6 <cc2500_calibrate>:
    94c6:	04 12       	push	r4		
    94c8:	04 41       	mov	r1,	r4	
    94ca:	24 53       	incd	r4		
    94cc:	b0 12 66 97 	call	#0x9766	
    94d0:	3f 40 33 00 	mov	#51,	r15	;#0x0033
    94d4:	b0 12 2c 8e 	call	#0x8e2c	
    94d8:	4f 43       	clr.b	r15		
    94da:	b0 12 22 90 	call	#0x9022	
    94de:	34 41       	pop	r4		
    94e0:	30 41       	ret			

000094e2 <cc2500_utx>:
    94e2:	04 12       	push	r4		
    94e4:	04 41       	mov	r1,	r4	
    94e6:	24 53       	incd	r4		
    94e8:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    94ec:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    94f0:	c4 4e fc ff 	mov.b	r14,	-4(r4)	;0xfffc(r4)
    94f4:	b0 12 66 97 	call	#0x9766	
    94f8:	b0 12 4c 8d 	call	#0x8d4c	
    94fc:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9500:	0e 4f       	mov	r15,	r14	
    9502:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    9506:	b0 12 e8 8e 	call	#0x8ee8	
    950a:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    950e:	0d 4f       	mov	r15,	r13	
    9510:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    9514:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    9518:	b0 12 4c 8f 	call	#0x8f4c	
    951c:	3f 40 35 00 	mov	#53,	r15	;#0x0035
    9520:	b0 12 2c 8e 	call	#0x8e2c	
    9524:	3f 40 3a 00 	mov	#58,	r15	;#0x003a
    9528:	b0 12 b2 8e 	call	#0x8eb2	
    952c:	c4 4f f8 ff 	mov.b	r15,	-8(r4)	;0xfff8(r4)
    9530:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    9534:	3f f0 7f 00 	and	#127,	r15	;#0x007f
    9538:	1f 93       	cmp	#1,	r15	;r3 As==01
    953a:	f4 37       	jge	$-22     	;abs 0x9524
    953c:	b0 12 78 8d 	call	#0x8d78	
    9540:	b0 12 8e 8d 	call	#0x8d8e	
    9544:	31 50 06 00 	add	#6,	r1	;#0x0006
    9548:	34 41       	pop	r4		
    954a:	30 41       	ret			

0000954c <cc2500_rx_register_buffer>:
    954c:	04 12       	push	r4		
    954e:	04 41       	mov	r1,	r4	
    9550:	24 53       	incd	r4		
    9552:	21 82       	sub	#4,	r1	;r2 As==10
    9554:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    9558:	c4 4e fc ff 	mov.b	r14,	-4(r4)	;0xfffc(r4)
    955c:	92 44 fa ff 	mov	-6(r4),	&0x02a6	;0xfffa(r4)
    9560:	a6 02 
    9562:	c2 43 8a 02 	mov.b	#0,	&0x028a	;r3 As==00
    9566:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    956a:	0e 4f       	mov	r15,	r14	
    956c:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    9570:	b0 12 4e 8e 	call	#0x8e4e	
    9574:	21 52       	add	#4,	r1	;r2 As==10
    9576:	34 41       	pop	r4		
    9578:	30 41       	ret			

0000957a <cc2500_rx_enter>:
    957a:	04 12       	push	r4		
    957c:	04 41       	mov	r1,	r4	
    957e:	24 53       	incd	r4		
    9580:	b0 12 66 97 	call	#0x9766	
    9584:	c2 43 8a 02 	mov.b	#0,	&0x028a	;r3 As==00
    9588:	b0 12 78 8d 	call	#0x8d78	
    958c:	b0 12 8e 8d 	call	#0x8d8e	
    9590:	b0 12 62 8d 	call	#0x8d62	
    9594:	b0 12 4c 8d 	call	#0x8d4c	
    9598:	3f 40 34 00 	mov	#52,	r15	;#0x0034
    959c:	b0 12 2c 8e 	call	#0x8e2c	
    95a0:	5f 43       	mov.b	#1,	r15	;r3 As==01
    95a2:	b0 12 22 90 	call	#0x9022	
    95a6:	34 41       	pop	r4		
    95a8:	30 41       	ret			

000095aa <cc2500_rx_pkt_eop>:
    95aa:	0b 12       	push	r11		
    95ac:	04 12       	push	r4		
    95ae:	04 41       	mov	r1,	r4	
    95b0:	24 52       	add	#4,	r4	;r2 As==10
    95b2:	31 50 f6 ff 	add	#-10,	r1	;#0xfff6
    95b6:	3f 40 3b 00 	mov	#59,	r15	;#0x003b
    95ba:	b0 12 b2 8e 	call	#0x8eb2	
    95be:	c4 4f f2 ff 	mov.b	r15,	-14(r4)	;0xfff2(r4)
    95c2:	d4 44 f2 ff 	mov.b	-14(r4),-10(r4)	;0xfff2(r4), 0xfff6(r4)
    95c6:	f6 ff 
    95c8:	c4 43 f7 ff 	mov.b	#0,	-9(r4)	;r3 As==00, 0xfff7(r4)
    95cc:	3f 40 3b 00 	mov	#59,	r15	;#0x003b
    95d0:	b0 12 b2 8e 	call	#0x8eb2	
    95d4:	c4 4f f2 ff 	mov.b	r15,	-14(r4)	;0xfff2(r4)
    95d8:	e4 93 f2 ff 	cmp.b	#2,	-14(r4)	;r3 As==10, 0xfff2(r4)
    95dc:	05 2c       	jc	$+12     	;abs 0x95e8
    95de:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    95e2:	1f 94 f6 ff 	cmp	-10(r4),r15	;0xfff6(r4)
    95e6:	ed 23       	jnz	$-36     	;abs 0x95c2
    95e8:	c4 93 f2 ff 	tst.b	-14(r4)	;0xfff2(r4)
    95ec:	68 24       	jz	$+210    	;abs 0x96be
    95ee:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    95f2:	4f 93       	tst.b	r15		
    95f4:	59 38       	jl	$+180    	;abs 0x96a8
    95f6:	b0 12 04 90 	call	#0x9004	
    95fa:	c4 4f f8 ff 	mov.b	r15,	-8(r4)	;0xfff8(r4)
    95fe:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    9602:	0e 4f       	mov	r15,	r14	
    9604:	3e 53       	add	#-1,	r14	;r3 As==11
    9606:	1f 42 a6 02 	mov	&0x02a6,r15	
    960a:	0d 4e       	mov	r14,	r13	
    960c:	0e 4f       	mov	r15,	r14	
    960e:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    9612:	b0 12 a2 8f 	call	#0x8fa2	
    9616:	1e 42 a6 02 	mov	&0x02a6,r14	
    961a:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    961e:	0f 5e       	add	r14,	r15	
    9620:	6f 4f       	mov.b	@r15,	r15	
    9622:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    9626:	c4 43 fb ff 	mov.b	#0,	-5(r4)	;r3 As==00, 0xfffb(r4)
    962a:	b4 90 80 00 	cmp	#128,	-6(r4)	;#0x0080, 0xfffa(r4)
    962e:	fa ff 
    9630:	0e 38       	jl	$+30     	;abs 0x964e
    9632:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    9636:	3f 50 00 ff 	add	#-256,	r15	;#0xff00
    963a:	0f 93       	tst	r15		
    963c:	01 34       	jge	$+4      	;abs 0x9640
    963e:	1f 53       	inc	r15		
    9640:	0f 11       	rra	r15		
    9642:	0e 4f       	mov	r15,	r14	
    9644:	3e 50 b8 ff 	add	#-72,	r14	;#0xffb8
    9648:	84 4e f4 ff 	mov	r14,	-12(r4)	;0xfff4(r4)
    964c:	0b 3c       	jmp	$+24     	;abs 0x9664
    964e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    9652:	0f 93       	tst	r15		
    9654:	01 34       	jge	$+4      	;abs 0x9658
    9656:	1f 53       	inc	r15		
    9658:	0f 11       	rra	r15		
    965a:	0e 4f       	mov	r15,	r14	
    965c:	3e 50 b8 ff 	add	#-72,	r14	;#0xffb8
    9660:	84 4e f4 ff 	mov	r14,	-12(r4)	;0xfff4(r4)
    9664:	1e 42 a6 02 	mov	&0x02a6,r14	
    9668:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    966c:	1f 53       	inc	r15		
    966e:	0f 5e       	add	r14,	r15	
    9670:	6f 4f       	mov.b	@r15,	r15	
    9672:	4f 93       	tst.b	r15		
    9674:	0e 34       	jge	$+30     	;abs 0x9692
    9676:	1c 42 a2 02 	mov	&0x02a2,r12	
    967a:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    967e:	4e 4f       	mov.b	r15,	r14	
    9680:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    9684:	1b 42 a6 02 	mov	&0x02a6,r11	
    9688:	4d 4e       	mov.b	r14,	r13	
    968a:	0e 4f       	mov	r15,	r14	
    968c:	0f 4b       	mov	r11,	r15	
    968e:	8c 12       	call	r12		
    9690:	1f 3c       	jmp	$+64     	;abs 0x96d0
    9692:	b0 12 84 91 	call	#0x9184	
    9696:	1c 42 a2 02 	mov	&0x02a2,r12	
    969a:	1f 42 a6 02 	mov	&0x02a6,r15	
    969e:	4d 43       	clr.b	r13		
    96a0:	3e 40 fd ff 	mov	#-3,	r14	;#0xfffd
    96a4:	8c 12       	call	r12		
    96a6:	14 3c       	jmp	$+42     	;abs 0x96d0
    96a8:	b0 12 84 91 	call	#0x9184	
    96ac:	1c 42 a2 02 	mov	&0x02a2,r12	
    96b0:	1f 42 a6 02 	mov	&0x02a6,r15	
    96b4:	4d 43       	clr.b	r13		
    96b6:	3e 40 fe ff 	mov	#-2,	r14	;#0xfffe
    96ba:	8c 12       	call	r12		
    96bc:	09 3c       	jmp	$+20     	;abs 0x96d0
    96be:	b0 12 84 91 	call	#0x9184	
    96c2:	1c 42 a2 02 	mov	&0x02a2,r12	
    96c6:	1f 42 a6 02 	mov	&0x02a6,r15	
    96ca:	4d 43       	clr.b	r13		
    96cc:	3e 43       	mov	#-1,	r14	;r3 As==11
    96ce:	8c 12       	call	r12		
    96d0:	b0 12 78 8d 	call	#0x8d78	
    96d4:	b0 12 8e 8d 	call	#0x8d8e	
    96d8:	31 50 0a 00 	add	#10,	r1	;#0x000a
    96dc:	34 41       	pop	r4		
    96de:	3b 41       	pop	r11		
    96e0:	30 41       	ret			

000096e2 <cc2500_rx_register_cb>:
    96e2:	04 12       	push	r4		
    96e4:	04 41       	mov	r1,	r4	
    96e6:	24 53       	incd	r4		
    96e8:	21 83       	decd	r1		
    96ea:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    96ee:	92 44 fc ff 	mov	-4(r4),	&0x02a2	;0xfffc(r4)
    96f2:	a2 02 
    96f4:	21 53       	incd	r1		
    96f6:	34 41       	pop	r4		
    96f8:	30 41       	ret			

000096fa <cc2500_packet_status>:
    96fa:	04 12       	push	r4		
    96fc:	04 41       	mov	r1,	r4	
    96fe:	24 53       	incd	r4		
    9700:	21 83       	decd	r1		
    9702:	3f 40 38 00 	mov	#56,	r15	;#0x0038
    9706:	b0 12 b2 8e 	call	#0x8eb2	
    970a:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    970e:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9712:	21 53       	incd	r1		
    9714:	34 41       	pop	r4		
    9716:	30 41       	ret			

00009718 <cc2500_cca>:
    9718:	04 12       	push	r4		
    971a:	04 41       	mov	r1,	r4	
    971c:	24 53       	incd	r4		
    971e:	21 83       	decd	r1		
    9720:	b0 12 fa 96 	call	#0x96fa	
    9724:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9728:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    972c:	4f 4f       	mov.b	r15,	r15	
    972e:	12 c3       	clrc			
    9730:	4f 10       	rrc.b	r15		
    9732:	12 c3       	clrc			
    9734:	4f 10       	rrc.b	r15		
    9736:	12 c3       	clrc			
    9738:	4f 10       	rrc.b	r15		
    973a:	12 c3       	clrc			
    973c:	4f 10       	rrc.b	r15		
    973e:	4f 4f       	mov.b	r15,	r15	
    9740:	1f f3       	and	#1,	r15	;r3 As==01
    9742:	21 53       	incd	r1		
    9744:	34 41       	pop	r4		
    9746:	30 41       	ret			

00009748 <cc2500_get_rssi>:
    9748:	04 12       	push	r4		
    974a:	04 41       	mov	r1,	r4	
    974c:	24 53       	incd	r4		
    974e:	21 83       	decd	r1		
    9750:	3f 40 34 00 	mov	#52,	r15	;#0x0034
    9754:	b0 12 b2 8e 	call	#0x8eb2	
    9758:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    975c:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9760:	21 53       	incd	r1		
    9762:	34 41       	pop	r4		
    9764:	30 41       	ret			

00009766 <cc2500_idle>:
    9766:	04 12       	push	r4		
    9768:	04 41       	mov	r1,	r4	
    976a:	24 53       	incd	r4		
    976c:	b0 12 36 8d 	call	#0x8d36	
    9770:	b0 12 4c 8d 	call	#0x8d4c	
    9774:	b0 12 84 91 	call	#0x9184	
    9778:	3f 40 36 00 	mov	#54,	r15	;#0x0036
    977c:	b0 12 2c 8e 	call	#0x8e2c	
    9780:	4f 43       	clr.b	r15		
    9782:	b0 12 22 90 	call	#0x9022	
    9786:	34 41       	pop	r4		
    9788:	30 41       	ret			

0000978a <cc2500_sleep>:
    978a:	04 12       	push	r4		
    978c:	04 41       	mov	r1,	r4	
    978e:	24 53       	incd	r4		
    9790:	3f 40 39 00 	mov	#57,	r15	;#0x0039
    9794:	b0 12 2c 8e 	call	#0x8e2c	
    9798:	34 41       	pop	r4		
    979a:	30 41       	ret			

0000979c <cc2500_reset>:
    979c:	04 12       	push	r4		
    979e:	04 41       	mov	r1,	r4	
    97a0:	24 53       	incd	r4		
    97a2:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    97a6:	b0 12 2c 8e 	call	#0x8e2c	
    97aa:	4f 43       	clr.b	r15		
    97ac:	b0 12 22 90 	call	#0x9022	
    97b0:	34 41       	pop	r4		
    97b2:	30 41       	ret			

000097b4 <cc2500_wakeup>:
    97b4:	04 12       	push	r4		
    97b6:	04 41       	mov	r1,	r4	
    97b8:	24 53       	incd	r4		
    97ba:	b0 12 d8 9e 	call	#0x9ed8	
    97be:	03 43       	nop			
    97c0:	b0 12 2e 9e 	call	#0x9e2e	
    97c4:	0f 93       	tst	r15		
    97c6:	fc 23       	jnz	$-6      	;abs 0x97c0
    97c8:	b0 12 ee 9e 	call	#0x9eee	
    97cc:	b0 12 66 97 	call	#0x9766	
    97d0:	4f 43       	clr.b	r15		
    97d2:	b0 12 22 90 	call	#0x9022	
    97d6:	34 41       	pop	r4		
    97d8:	30 41       	ret			

000097da <cc2500_variables_bootstrap>:
    97da:	04 12       	push	r4		
    97dc:	04 41       	mov	r1,	r4	
    97de:	24 53       	incd	r4		
    97e0:	c2 43 a8 02 	mov.b	#0,	&0x02a8	;r3 As==00
    97e4:	82 43 a6 02 	mov	#0,	&0x02a6	;r3 As==00
    97e8:	c2 43 8a 02 	mov.b	#0,	&0x028a	;r3 As==00
    97ec:	c2 43 8c 02 	mov.b	#0,	&0x028c	;r3 As==00
    97f0:	34 41       	pop	r4		
    97f2:	30 41       	ret			

000097f4 <CC_ASSERT>:
    97f4:	04 12       	push	r4		
    97f6:	04 41       	mov	r1,	r4	
    97f8:	24 53       	incd	r4		
    97fa:	21 83       	decd	r1		
    97fc:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9800:	21 53       	incd	r1		
    9802:	34 41       	pop	r4		
    9804:	30 41       	ret			

00009806 <cc2500_init>:
    9806:	04 12       	push	r4		
    9808:	04 41       	mov	r1,	r4	
    980a:	24 53       	incd	r4		
    980c:	21 83       	decd	r1		
    980e:	b0 12 da 97 	call	#0x97da	
    9812:	b0 12 ba 8d 	call	#0x8dba	
    9816:	b0 12 a4 8d 	call	#0x8da4	
    981a:	b0 12 d8 9e 	call	#0x9ed8	
    981e:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    9822:	b0 12 76 9b 	call	#0x9b76	
    9826:	b0 12 ee 9e 	call	#0x9eee	
    982a:	3f 40 28 00 	mov	#40,	r15	;#0x0028
    982e:	b0 12 76 9b 	call	#0x9b76	
    9832:	b0 12 d8 9e 	call	#0x9ed8	
    9836:	03 43       	nop			
    9838:	b0 12 2e 9e 	call	#0x9e2e	
    983c:	0f 93       	tst	r15		
    983e:	fc 23       	jnz	$-6      	;abs 0x9838
    9840:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    9844:	b0 12 f4 9d 	call	#0x9df4	
    9848:	03 43       	nop			
    984a:	b0 12 2e 9e 	call	#0x9e2e	
    984e:	0f 93       	tst	r15		
    9850:	fc 23       	jnz	$-6      	;abs 0x984a
    9852:	b0 12 ee 9e 	call	#0x9eee	
    9856:	3e 40 a5 00 	mov	#165,	r14	;#0x00a5
    985a:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    985e:	b0 12 4e 8e 	call	#0x8e4e	
    9862:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    9866:	b0 12 7c 8e 	call	#0x8e7c	
    986a:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    986e:	94 11 fc ff 	sxt	-4(r4)		;0xfffc(r4)
    9872:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    9876:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    987a:	1f 43       	mov	#1,	r15	;r3 As==01
    987c:	3e 90 a5 00 	cmp	#165,	r14	;#0x00a5
    9880:	01 24       	jz	$+4      	;abs 0x9884
    9882:	0f 43       	clr	r15		
    9884:	b0 12 f4 97 	call	#0x97f4	
    9888:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    988c:	b0 12 b2 8e 	call	#0x8eb2	
    9890:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9894:	94 11 fc ff 	sxt	-4(r4)		;0xfffc(r4)
    9898:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    989c:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    98a0:	1f 43       	mov	#1,	r15	;r3 As==01
    98a2:	3e 90 80 00 	cmp	#128,	r14	;#0x0080
    98a6:	01 24       	jz	$+4      	;abs 0x98aa
    98a8:	0f 43       	clr	r15		
    98aa:	b0 12 f4 97 	call	#0x97f4	
    98ae:	3f 40 31 00 	mov	#49,	r15	;#0x0031
    98b2:	b0 12 b2 8e 	call	#0x8eb2	
    98b6:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    98ba:	94 11 fc ff 	sxt	-4(r4)		;0xfffc(r4)
    98be:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    98c2:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    98c6:	1f 43       	mov	#1,	r15	;r3 As==01
    98c8:	3e 90 03 00 	cmp	#3,	r14	;#0x0003
    98cc:	01 2c       	jc	$+4      	;abs 0x98d0
    98ce:	0f 43       	clr	r15		
    98d0:	b0 12 f4 97 	call	#0x97f4	
    98d4:	3f 40 36 b1 	mov	#-20170,r15	;#0xb136
    98d8:	b0 12 ae 91 	call	#0x91ae	
    98dc:	21 53       	incd	r1		
    98de:	34 41       	pop	r4		
    98e0:	30 41       	ret			

000098e2 <cc2500_gdox_signal_handler>:
    98e2:	04 12       	push	r4		
    98e4:	04 41       	mov	r1,	r4	
    98e6:	24 53       	incd	r4		
    98e8:	21 83       	decd	r1		
    98ea:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    98ee:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    98f2:	1f f3       	and	#1,	r15	;r3 As==01
    98f4:	4f 4f       	mov.b	r15,	r15	
    98f6:	4f 93       	tst.b	r15		
    98f8:	02 24       	jz	$+6      	;abs 0x98fe
    98fa:	b0 12 aa 95 	call	#0x95aa	
    98fe:	21 53       	incd	r1		
    9900:	34 41       	pop	r4		
    9902:	30 41       	ret			

00009904 <port2_irq_handler>:
    9904:	0f 12       	push	r15		
    9906:	0e 12       	push	r14		
    9908:	0d 12       	push	r13		
    990a:	0c 12       	push	r12		
    990c:	04 12       	push	r4		
    990e:	04 41       	mov	r1,	r4	
    9910:	34 50 0a 00 	add	#10,	r4	;#0x000a
    9914:	21 83       	decd	r1		
    9916:	c4 43 f4 ff 	mov.b	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    991a:	c4 43 f5 ff 	mov.b	#0,	-11(r4)	;r3 As==00, 0xfff5(r4)
    991e:	5f 42 2b 00 	mov.b	&0x002b,r15	
    9922:	4f 4f       	mov.b	r15,	r15	
    9924:	5e 42 2d 00 	mov.b	&0x002d,r14	
    9928:	4e 4e       	mov.b	r14,	r14	
    992a:	3e f0 40 00 	and	#64,	r14	;#0x0040
    992e:	0f fe       	and	r14,	r15	
    9930:	0f 93       	tst	r15		
    9932:	0a 24       	jz	$+22     	;abs 0x9948
    9934:	d4 d3 f4 ff 	bis.b	#1,	-12(r4)	;r3 As==01, 0xfff4(r4)
    9938:	d4 d3 f5 ff 	bis.b	#1,	-11(r4)	;r3 As==01, 0xfff5(r4)
    993c:	5f 42 2b 00 	mov.b	&0x002b,r15	
    9940:	7f f0 40 00 	and.b	#64,	r15	;#0x0040
    9944:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
    9948:	5f 42 2b 00 	mov.b	&0x002b,r15	
    994c:	4f 4f       	mov.b	r15,	r15	
    994e:	5e 42 2d 00 	mov.b	&0x002d,r14	
    9952:	4e 4e       	mov.b	r14,	r14	
    9954:	3e f0 80 00 	and	#128,	r14	;#0x0080
    9958:	0f fe       	and	r14,	r15	
    995a:	0f 93       	tst	r15		
    995c:	0a 24       	jz	$+22     	;abs 0x9972
    995e:	e4 d3 f4 ff 	bis.b	#2,	-12(r4)	;r3 As==10, 0xfff4(r4)
    9962:	d4 d3 f5 ff 	bis.b	#1,	-11(r4)	;r3 As==01, 0xfff5(r4)
    9966:	5f 42 2b 00 	mov.b	&0x002b,r15	
    996a:	7f f0 80 ff 	and.b	#-128,	r15	;#0xff80
    996e:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
    9972:	c4 93 f4 ff 	tst.b	-12(r4)	;0xfff4(r4)
    9976:	04 24       	jz	$+10     	;abs 0x9980
    9978:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    997c:	b0 12 e2 98 	call	#0x98e2	
    9980:	c4 93 f5 ff 	tst.b	-11(r4)	;0xfff5(r4)
    9984:	03 24       	jz	$+8      	;abs 0x998c
    9986:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    998a:	00 00 
    998c:	c2 43 2b 00 	mov.b	#0,	&0x002b	;r3 As==00
    9990:	21 53       	incd	r1		
    9992:	34 41       	pop	r4		
    9994:	3c 41       	pop	r12		
    9996:	3d 41       	pop	r13		
    9998:	3e 41       	pop	r14		
    999a:	3f 41       	pop	r15		
    999c:	00 13       	reti			

0000999e <get_mclk_freq_mhz>:
    999e:	04 12       	push	r4		
    99a0:	04 41       	mov	r1,	r4	
    99a2:	24 53       	incd	r4		
    99a4:	1f 42 8e 02 	mov	&0x028e,r15	
    99a8:	34 41       	pop	r4		
    99aa:	30 41       	ret			

000099ac <set_mcu_speed>:
    99ac:	04 12       	push	r4		
    99ae:	04 41       	mov	r1,	r4	
    99b0:	24 53       	incd	r4		
    99b2:	21 83       	decd	r1		
    99b4:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    99b8:	c4 4e fd ff 	mov.b	r14,	-3(r4)	;0xfffd(r4)
    99bc:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    99c0:	3f 92       	cmp	#8,	r15	;r2 As==11
    99c2:	16 24       	jz	$+46     	;abs 0x99f0
    99c4:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    99c8:	03 34       	jge	$+8      	;abs 0x99d0
    99ca:	1f 93       	cmp	#1,	r15	;r3 As==01
    99cc:	08 24       	jz	$+18     	;abs 0x99de
    99ce:	2b 3c       	jmp	$+88     	;abs 0x9a26
    99d0:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    99d4:	16 24       	jz	$+46     	;abs 0x9a02
    99d6:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    99da:	1c 24       	jz	$+58     	;abs 0x9a14
    99dc:	24 3c       	jmp	$+74     	;abs 0x9a26
    99de:	5f 42 ff 10 	mov.b	&0x10ff,r15	
    99e2:	c2 4f 57 00 	mov.b	r15,	&0x0057	
    99e6:	5f 42 fe 10 	mov.b	&0x10fe,r15	
    99ea:	c2 4f 56 00 	mov.b	r15,	&0x0056	
    99ee:	1b 3c       	jmp	$+56     	;abs 0x9a26
    99f0:	5f 42 fd 10 	mov.b	&0x10fd,r15	
    99f4:	c2 4f 57 00 	mov.b	r15,	&0x0057	
    99f8:	5f 42 fc 10 	mov.b	&0x10fc,r15	
    99fc:	c2 4f 56 00 	mov.b	r15,	&0x0056	
    9a00:	12 3c       	jmp	$+38     	;abs 0x9a26
    9a02:	5f 42 fb 10 	mov.b	&0x10fb,r15	
    9a06:	c2 4f 57 00 	mov.b	r15,	&0x0057	
    9a0a:	5f 42 fa 10 	mov.b	&0x10fa,r15	
    9a0e:	c2 4f 56 00 	mov.b	r15,	&0x0056	
    9a12:	09 3c       	jmp	$+20     	;abs 0x9a26
    9a14:	5f 42 f9 10 	mov.b	&0x10f9,r15	
    9a18:	c2 4f 57 00 	mov.b	r15,	&0x0057	
    9a1c:	5f 42 f8 10 	mov.b	&0x10f8,r15	
    9a20:	c2 4f 56 00 	mov.b	r15,	&0x0056	
    9a24:	03 43       	nop			
    9a26:	5f 44 fd ff 	mov.b	-3(r4),	r15	;0xfffd(r4)
    9a2a:	2f 93       	cmp	#2,	r15	;r3 As==10
    9a2c:	0e 24       	jz	$+30     	;abs 0x9a4a
    9a2e:	3f 90 03 00 	cmp	#3,	r15	;#0x0003
    9a32:	03 34       	jge	$+8      	;abs 0x9a3a
    9a34:	1f 93       	cmp	#1,	r15	;r3 As==01
    9a36:	06 24       	jz	$+14     	;abs 0x9a44
    9a38:	12 3c       	jmp	$+38     	;abs 0x9a5e
    9a3a:	2f 92       	cmp	#4,	r15	;r2 As==10
    9a3c:	09 24       	jz	$+20     	;abs 0x9a50
    9a3e:	3f 92       	cmp	#8,	r15	;r2 As==11
    9a40:	0a 24       	jz	$+22     	;abs 0x9a56
    9a42:	0d 3c       	jmp	$+28     	;abs 0x9a5e
    9a44:	c2 43 58 00 	mov.b	#0,	&0x0058	;r3 As==00
    9a48:	0a 3c       	jmp	$+22     	;abs 0x9a5e
    9a4a:	e2 43 58 00 	mov.b	#2,	&0x0058	;r3 As==10
    9a4e:	07 3c       	jmp	$+16     	;abs 0x9a5e
    9a50:	e2 42 58 00 	mov.b	#4,	&0x0058	;r2 As==10
    9a54:	04 3c       	jmp	$+10     	;abs 0x9a5e
    9a56:	f2 40 06 00 	mov.b	#6,	&0x0058	;#0x0006
    9a5a:	58 00 
    9a5c:	03 43       	nop			
    9a5e:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9a62:	82 4f 8e 02 	mov	r15,	&0x028e	
    9a66:	21 53       	incd	r1		
    9a68:	34 41       	pop	r4		
    9a6a:	30 41       	ret			

00009a6c <set_mcu_speed_dco_mclk_1MHz_smclk_1MHz>:
    9a6c:	04 12       	push	r4		
    9a6e:	04 41       	mov	r1,	r4	
    9a70:	24 53       	incd	r4		
    9a72:	5e 43       	mov.b	#1,	r14	;r3 As==01
    9a74:	5f 43       	mov.b	#1,	r15	;r3 As==01
    9a76:	b0 12 ac 99 	call	#0x99ac	
    9a7a:	34 41       	pop	r4		
    9a7c:	30 41       	ret			

00009a7e <set_mcu_speed_dco_mclk_8MHz_smclk_8MHz>:
    9a7e:	04 12       	push	r4		
    9a80:	04 41       	mov	r1,	r4	
    9a82:	24 53       	incd	r4		
    9a84:	5e 43       	mov.b	#1,	r14	;r3 As==01
    9a86:	7f 42       	mov.b	#8,	r15	;r2 As==11
    9a88:	b0 12 ac 99 	call	#0x99ac	
    9a8c:	34 41       	pop	r4		
    9a8e:	30 41       	ret			

00009a90 <set_mcu_speed_dco_mclk_8MHz_smclk_4MHz>:
    9a90:	04 12       	push	r4		
    9a92:	04 41       	mov	r1,	r4	
    9a94:	24 53       	incd	r4		
    9a96:	6e 43       	mov.b	#2,	r14	;r3 As==10
    9a98:	7f 42       	mov.b	#8,	r15	;r2 As==11
    9a9a:	b0 12 ac 99 	call	#0x99ac	
    9a9e:	34 41       	pop	r4		
    9aa0:	30 41       	ret			

00009aa2 <set_mcu_speed_dco_mclk_8MHz_smclk_2MHz>:
    9aa2:	04 12       	push	r4		
    9aa4:	04 41       	mov	r1,	r4	
    9aa6:	24 53       	incd	r4		
    9aa8:	6e 42       	mov.b	#4,	r14	;r2 As==10
    9aaa:	7f 42       	mov.b	#8,	r15	;r2 As==11
    9aac:	b0 12 ac 99 	call	#0x99ac	
    9ab0:	34 41       	pop	r4		
    9ab2:	30 41       	ret			

00009ab4 <set_mcu_speed_dco_mclk_8MHz_smclk_1MHz>:
    9ab4:	04 12       	push	r4		
    9ab6:	04 41       	mov	r1,	r4	
    9ab8:	24 53       	incd	r4		
    9aba:	7e 42       	mov.b	#8,	r14	;r2 As==11
    9abc:	7f 42       	mov.b	#8,	r15	;r2 As==11
    9abe:	b0 12 ac 99 	call	#0x99ac	
    9ac2:	34 41       	pop	r4		
    9ac4:	30 41       	ret			

00009ac6 <set_mcu_speed_dco_mclk_12MHz_smclk_12MHz>:
    9ac6:	04 12       	push	r4		
    9ac8:	04 41       	mov	r1,	r4	
    9aca:	24 53       	incd	r4		
    9acc:	5e 43       	mov.b	#1,	r14	;r3 As==01
    9ace:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    9ad2:	b0 12 ac 99 	call	#0x99ac	
    9ad6:	34 41       	pop	r4		
    9ad8:	30 41       	ret			

00009ada <set_mcu_speed_dco_mclk_12MHz_smclk_6MHz>:
    9ada:	04 12       	push	r4		
    9adc:	04 41       	mov	r1,	r4	
    9ade:	24 53       	incd	r4		
    9ae0:	6e 43       	mov.b	#2,	r14	;r3 As==10
    9ae2:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    9ae6:	b0 12 ac 99 	call	#0x99ac	
    9aea:	34 41       	pop	r4		
    9aec:	30 41       	ret			

00009aee <set_mcu_speed_dco_mclk_12MHz_smclk_3MHz>:
    9aee:	04 12       	push	r4		
    9af0:	04 41       	mov	r1,	r4	
    9af2:	24 53       	incd	r4		
    9af4:	6e 42       	mov.b	#4,	r14	;r2 As==10
    9af6:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    9afa:	b0 12 ac 99 	call	#0x99ac	
    9afe:	34 41       	pop	r4		
    9b00:	30 41       	ret			

00009b02 <set_mcu_speed_dco_mclk_12MHz_smclk_1_5MHz>:
    9b02:	04 12       	push	r4		
    9b04:	04 41       	mov	r1,	r4	
    9b06:	24 53       	incd	r4		
    9b08:	7e 42       	mov.b	#8,	r14	;r2 As==11
    9b0a:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    9b0e:	b0 12 ac 99 	call	#0x99ac	
    9b12:	34 41       	pop	r4		
    9b14:	30 41       	ret			

00009b16 <set_mcu_speed_dco_mclk_16MHz_smclk_16MHz>:
    9b16:	04 12       	push	r4		
    9b18:	04 41       	mov	r1,	r4	
    9b1a:	24 53       	incd	r4		
    9b1c:	5e 43       	mov.b	#1,	r14	;r3 As==01
    9b1e:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    9b22:	b0 12 ac 99 	call	#0x99ac	
    9b26:	34 41       	pop	r4		
    9b28:	30 41       	ret			

00009b2a <set_mcu_speed_dco_mclk_16MHz_smclk_8MHz>:
    9b2a:	04 12       	push	r4		
    9b2c:	04 41       	mov	r1,	r4	
    9b2e:	24 53       	incd	r4		
    9b30:	6e 43       	mov.b	#2,	r14	;r3 As==10
    9b32:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    9b36:	b0 12 ac 99 	call	#0x99ac	
    9b3a:	34 41       	pop	r4		
    9b3c:	30 41       	ret			

00009b3e <set_mcu_speed_dco_mclk_16MHz_smclk_4MHz>:
    9b3e:	04 12       	push	r4		
    9b40:	04 41       	mov	r1,	r4	
    9b42:	24 53       	incd	r4		
    9b44:	6e 42       	mov.b	#4,	r14	;r2 As==10
    9b46:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    9b4a:	b0 12 ac 99 	call	#0x99ac	
    9b4e:	34 41       	pop	r4		
    9b50:	30 41       	ret			

00009b52 <set_mcu_speed_dco_mclk_16MHz_smclk_2MHz>:
    9b52:	04 12       	push	r4		
    9b54:	04 41       	mov	r1,	r4	
    9b56:	24 53       	incd	r4		
    9b58:	7e 42       	mov.b	#8,	r14	;r2 As==11
    9b5a:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    9b5e:	b0 12 ac 99 	call	#0x99ac	
    9b62:	34 41       	pop	r4		
    9b64:	30 41       	ret			

00009b66 <loop_4_cycles>:
    9b66:	04 12       	push	r4		
    9b68:	04 41       	mov	r1,	r4	
    9b6a:	24 53       	incd	r4		
    9b6c:	3e 53       	add	#-1,	r14	;r3 As==11
    9b6e:	3f 63       	addc	#-1,	r15	;r3 As==11
    9b70:	fd 2f       	jc	$-4      	;abs 0x9b6c
    9b72:	34 41       	pop	r4		
    9b74:	30 41       	ret			

00009b76 <delay_usec>:
    9b76:	04 12       	push	r4		
    9b78:	04 41       	mov	r1,	r4	
    9b7a:	24 53       	incd	r4		
    9b7c:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    9b80:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9b84:	1f 42 8e 02 	mov	&0x028e,r15	
    9b88:	3f 92       	cmp	#8,	r15	;r2 As==11
    9b8a:	18 24       	jz	$+50     	;abs 0x9bbc
    9b8c:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    9b90:	03 2c       	jc	$+8      	;abs 0x9b98
    9b92:	1f 93       	cmp	#1,	r15	;r3 As==01
    9b94:	08 24       	jz	$+18     	;abs 0x9ba6
    9b96:	2d 3c       	jmp	$+92     	;abs 0x9bf2
    9b98:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    9b9c:	17 24       	jz	$+48     	;abs 0x9bcc
    9b9e:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    9ba2:	1e 24       	jz	$+62     	;abs 0x9be0
    9ba4:	26 3c       	jmp	$+78     	;abs 0x9bf2
    9ba6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9baa:	12 c3       	clrc			
    9bac:	0f 10       	rrc	r15		
    9bae:	12 c3       	clrc			
    9bb0:	0f 10       	rrc	r15		
    9bb2:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    9bb6:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9bba:	26 3c       	jmp	$+78     	;abs 0x9c08
    9bbc:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9bc0:	0f 5f       	rla	r15		
    9bc2:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    9bc6:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9bca:	1e 3c       	jmp	$+62     	;abs 0x9c08
    9bcc:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    9bd0:	0f 4e       	mov	r14,	r15	
    9bd2:	0f 5f       	rla	r15		
    9bd4:	0f 5e       	add	r14,	r15	
    9bd6:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    9bda:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9bde:	14 3c       	jmp	$+42     	;abs 0x9c08
    9be0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9be4:	0f 5f       	rla	r15		
    9be6:	0f 5f       	rla	r15		
    9be8:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    9bec:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9bf0:	0b 3c       	jmp	$+24     	;abs 0x9c08
    9bf2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9bf6:	12 c3       	clrc			
    9bf8:	0f 10       	rrc	r15		
    9bfa:	12 c3       	clrc			
    9bfc:	0f 10       	rrc	r15		
    9bfe:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    9c02:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9c06:	03 43       	nop			
    9c08:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    9c0c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    9c10:	b0 12 66 9b 	call	#0x9b66	
    9c14:	31 50 06 00 	add	#6,	r1	;#0x0006
    9c18:	34 41       	pop	r4		
    9c1a:	30 41       	ret			

00009c1c <delay_ms>:
    9c1c:	04 12       	push	r4		
    9c1e:	04 41       	mov	r1,	r4	
    9c20:	24 53       	incd	r4		
    9c22:	31 82       	sub	#8,	r1	;r2 As==11
    9c24:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9c28:	1f 42 8e 02 	mov	&0x028e,r15	
    9c2c:	3f 92       	cmp	#8,	r15	;r2 As==11
    9c2e:	13 24       	jz	$+40     	;abs 0x9c56
    9c30:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    9c34:	03 2c       	jc	$+8      	;abs 0x9c3c
    9c36:	1f 93       	cmp	#1,	r15	;r3 As==01
    9c38:	08 24       	jz	$+18     	;abs 0x9c4a
    9c3a:	1f 3c       	jmp	$+64     	;abs 0x9c7a
    9c3c:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    9c40:	10 24       	jz	$+34     	;abs 0x9c62
    9c42:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    9c46:	13 24       	jz	$+40     	;abs 0x9c6e
    9c48:	18 3c       	jmp	$+50     	;abs 0x9c7a
    9c4a:	b4 40 fa 00 	mov	#250,	-8(r4)	;#0x00fa, 0xfff8(r4)
    9c4e:	f8 ff 
    9c50:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9c54:	18 3c       	jmp	$+50     	;abs 0x9c86
    9c56:	b4 40 d0 07 	mov	#2000,	-8(r4)	;#0x07d0, 0xfff8(r4)
    9c5a:	f8 ff 
    9c5c:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9c60:	12 3c       	jmp	$+38     	;abs 0x9c86
    9c62:	b4 40 b8 0b 	mov	#3000,	-8(r4)	;#0x0bb8, 0xfff8(r4)
    9c66:	f8 ff 
    9c68:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9c6c:	0c 3c       	jmp	$+26     	;abs 0x9c86
    9c6e:	b4 40 a0 0f 	mov	#4000,	-8(r4)	;#0x0fa0, 0xfff8(r4)
    9c72:	f8 ff 
    9c74:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9c78:	06 3c       	jmp	$+14     	;abs 0x9c86
    9c7a:	b4 40 fa 00 	mov	#250,	-8(r4)	;#0x00fa, 0xfff8(r4)
    9c7e:	f8 ff 
    9c80:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9c84:	03 43       	nop			
    9c86:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    9c8a:	08 3c       	jmp	$+18     	;abs 0x9c9c
    9c8c:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    9c90:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    9c94:	b0 12 66 9b 	call	#0x9b66	
    9c98:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    9c9c:	94 94 fc ff 	cmp	-4(r4),	-10(r4)	;0xfffc(r4), 0xfff6(r4)
    9ca0:	f6 ff 
    9ca2:	f4 2b       	jnc	$-22     	;abs 0x9c8c
    9ca4:	31 52       	add	#8,	r1	;r2 As==11
    9ca6:	34 41       	pop	r4		
    9ca8:	30 41       	ret			

00009caa <led_green_off>:
    9caa:	04 12       	push	r4		
    9cac:	04 41       	mov	r1,	r4	
    9cae:	24 53       	incd	r4		
    9cb0:	5f 42 21 00 	mov.b	&0x0021,r15	
    9cb4:	7f f0 fd ff 	and.b	#-3,	r15	;#0xfffd
    9cb8:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9cbc:	34 41       	pop	r4		
    9cbe:	30 41       	ret			

00009cc0 <led_green_on>:
    9cc0:	04 12       	push	r4		
    9cc2:	04 41       	mov	r1,	r4	
    9cc4:	24 53       	incd	r4		
    9cc6:	5f 42 21 00 	mov.b	&0x0021,r15	
    9cca:	6f d3       	bis.b	#2,	r15	;r3 As==10
    9ccc:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9cd0:	34 41       	pop	r4		
    9cd2:	30 41       	ret			

00009cd4 <led_green_switch>:
    9cd4:	04 12       	push	r4		
    9cd6:	04 41       	mov	r1,	r4	
    9cd8:	24 53       	incd	r4		
    9cda:	5f 42 21 00 	mov.b	&0x0021,r15	
    9cde:	6f e3       	xor.b	#2,	r15	;r3 As==10
    9ce0:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9ce4:	34 41       	pop	r4		
    9ce6:	30 41       	ret			

00009ce8 <led_red_off>:
    9ce8:	04 12       	push	r4		
    9cea:	04 41       	mov	r1,	r4	
    9cec:	24 53       	incd	r4		
    9cee:	5f 42 21 00 	mov.b	&0x0021,r15	
    9cf2:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9cf6:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9cfa:	34 41       	pop	r4		
    9cfc:	30 41       	ret			

00009cfe <led_red_on>:
    9cfe:	04 12       	push	r4		
    9d00:	04 41       	mov	r1,	r4	
    9d02:	24 53       	incd	r4		
    9d04:	5f 42 21 00 	mov.b	&0x0021,r15	
    9d08:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9d0a:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9d0e:	34 41       	pop	r4		
    9d10:	30 41       	ret			

00009d12 <led_red_switch>:
    9d12:	04 12       	push	r4		
    9d14:	04 41       	mov	r1,	r4	
    9d16:	24 53       	incd	r4		
    9d18:	5f 42 21 00 	mov.b	&0x0021,r15	
    9d1c:	5f e3       	xor.b	#1,	r15	;r3 As==01
    9d1e:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9d22:	34 41       	pop	r4		
    9d24:	30 41       	ret			

00009d26 <leds_off>:
    9d26:	04 12       	push	r4		
    9d28:	04 41       	mov	r1,	r4	
    9d2a:	24 53       	incd	r4		
    9d2c:	5f 42 21 00 	mov.b	&0x0021,r15	
    9d30:	7f f0 fc ff 	and.b	#-4,	r15	;#0xfffc
    9d34:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9d38:	34 41       	pop	r4		
    9d3a:	30 41       	ret			

00009d3c <leds_on>:
    9d3c:	04 12       	push	r4		
    9d3e:	04 41       	mov	r1,	r4	
    9d40:	24 53       	incd	r4		
    9d42:	5f 42 21 00 	mov.b	&0x0021,r15	
    9d46:	7f d0 03 00 	bis.b	#3,	r15	;#0x0003
    9d4a:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9d4e:	34 41       	pop	r4		
    9d50:	30 41       	ret			

00009d52 <leds_init>:
    9d52:	04 12       	push	r4		
    9d54:	04 41       	mov	r1,	r4	
    9d56:	24 53       	incd	r4		
    9d58:	5f 42 21 00 	mov.b	&0x0021,r15	
    9d5c:	7f f0 fc ff 	and.b	#-4,	r15	;#0xfffc
    9d60:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9d64:	5f 42 22 00 	mov.b	&0x0022,r15	
    9d68:	7f d0 03 00 	bis.b	#3,	r15	;#0x0003
    9d6c:	c2 4f 22 00 	mov.b	r15,	&0x0022	
    9d70:	5f 42 26 00 	mov.b	&0x0026,r15	
    9d74:	7f f0 fc ff 	and.b	#-4,	r15	;#0xfffc
    9d78:	c2 4f 26 00 	mov.b	r15,	&0x0026	
    9d7c:	b0 12 26 9d 	call	#0x9d26	
    9d80:	34 41       	pop	r4		
    9d82:	30 41       	ret			

00009d84 <spi_init>:
    9d84:	04 12       	push	r4		
    9d86:	04 41       	mov	r1,	r4	
    9d88:	24 53       	incd	r4		
    9d8a:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9d8e:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9d90:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    9d94:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9d98:	7f d2       	bis.b	#8,	r15	;r2 As==11
    9d9a:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    9d9e:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9da2:	6f d3       	bis.b	#2,	r15	;r3 As==10
    9da4:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    9da8:	5f 42 19 00 	mov.b	&0x0019,r15	
    9dac:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9dae:	c2 4f 19 00 	mov.b	r15,	&0x0019	
    9db2:	d2 43 69 00 	mov.b	#1,	&0x0069	;r3 As==01
    9db6:	f2 40 81 ff 	mov.b	#-127,	&0x0069	;#0xff81
    9dba:	69 00 
    9dbc:	f2 40 a9 ff 	mov.b	#-87,	&0x0068	;#0xffa9
    9dc0:	68 00 
    9dc2:	e2 43 6a 00 	mov.b	#2,	&0x006a	;r3 As==10
    9dc6:	c2 43 6b 00 	mov.b	#0,	&0x006b	;r3 As==00
    9dca:	5f 42 1b 00 	mov.b	&0x001b,r15	
    9dce:	7f d0 0e 00 	bis.b	#14,	r15	;#0x000e
    9dd2:	c2 4f 1b 00 	mov.b	r15,	&0x001b	
    9dd6:	5f 42 69 00 	mov.b	&0x0069,r15	
    9dda:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9dde:	c2 4f 69 00 	mov.b	r15,	&0x0069	
    9de2:	34 41       	pop	r4		
    9de4:	30 41       	ret			

00009de6 <spi_clear_rx_IFG>:
    9de6:	04 12       	push	r4		
    9de8:	04 41       	mov	r1,	r4	
    9dea:	24 53       	incd	r4		
    9dec:	e2 c2 03 00 	bic.b	#4,	&0x0003	;r2 As==10
    9df0:	34 41       	pop	r4		
    9df2:	30 41       	ret			

00009df4 <spi_tx_rx>:
    9df4:	04 12       	push	r4		
    9df6:	04 41       	mov	r1,	r4	
    9df8:	24 53       	incd	r4		
    9dfa:	21 82       	sub	#4,	r1	;r2 As==10
    9dfc:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9e00:	b0 12 e6 9d 	call	#0x9de6	
    9e04:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9e08:	4f 4f       	mov.b	r15,	r15	
    9e0a:	c2 4f 6f 00 	mov.b	r15,	&0x006f	
    9e0e:	5f 42 03 00 	mov.b	&0x0003,r15	
    9e12:	4f 4f       	mov.b	r15,	r15	
    9e14:	2f f2       	and	#4,	r15	;r2 As==10
    9e16:	0f 93       	tst	r15		
    9e18:	fa 27       	jz	$-10     	;abs 0x9e0e
    9e1a:	5f 42 6e 00 	mov.b	&0x006e,r15	
    9e1e:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    9e22:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    9e26:	8f 11       	sxt	r15		
    9e28:	21 52       	add	#4,	r1	;r2 As==10
    9e2a:	34 41       	pop	r4		
    9e2c:	30 41       	ret			

00009e2e <spi_check_miso_high>:
    9e2e:	04 12       	push	r4		
    9e30:	04 41       	mov	r1,	r4	
    9e32:	24 53       	incd	r4		
    9e34:	5f 42 18 00 	mov.b	&0x0018,r15	
    9e38:	4f 4f       	mov.b	r15,	r15	
    9e3a:	2f f2       	and	#4,	r15	;r2 As==10
    9e3c:	34 41       	pop	r4		
    9e3e:	30 41       	ret			

00009e40 <spi_tx_burst>:
    9e40:	04 12       	push	r4		
    9e42:	04 41       	mov	r1,	r4	
    9e44:	24 53       	incd	r4		
    9e46:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    9e4a:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    9e4e:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    9e52:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    9e56:	11 3c       	jmp	$+36     	;abs 0x9e7a
    9e58:	b0 12 e6 9d 	call	#0x9de6	
    9e5c:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    9e60:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    9e64:	6f 4f       	mov.b	@r15,	r15	
    9e66:	c2 4f 6f 00 	mov.b	r15,	&0x006f	
    9e6a:	5f 42 03 00 	mov.b	&0x0003,r15	
    9e6e:	4f 4f       	mov.b	r15,	r15	
    9e70:	2f f2       	and	#4,	r15	;r2 As==10
    9e72:	0f 93       	tst	r15		
    9e74:	fa 27       	jz	$-10     	;abs 0x9e6a
    9e76:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    9e7a:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    9e7e:	f8 ff 
    9e80:	eb 3b       	jl	$-40     	;abs 0x9e58
    9e82:	31 50 06 00 	add	#6,	r1	;#0x0006
    9e86:	34 41       	pop	r4		
    9e88:	30 41       	ret			

00009e8a <spi_rx_burst>:
    9e8a:	04 12       	push	r4		
    9e8c:	04 41       	mov	r1,	r4	
    9e8e:	24 53       	incd	r4		
    9e90:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    9e94:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    9e98:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    9e9c:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    9ea0:	13 3c       	jmp	$+40     	;abs 0x9ec8
    9ea2:	f2 40 55 00 	mov.b	#85,	&0x006f	;#0x0055
    9ea6:	6f 00 
    9ea8:	5f 42 03 00 	mov.b	&0x0003,r15	
    9eac:	4f 4f       	mov.b	r15,	r15	
    9eae:	2f f2       	and	#4,	r15	;r2 As==10
    9eb0:	0f 93       	tst	r15		
    9eb2:	fa 27       	jz	$-10     	;abs 0x9ea8
    9eb4:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    9eb8:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    9ebc:	5e 42 6e 00 	mov.b	&0x006e,r14	
    9ec0:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    9ec4:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    9ec8:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    9ecc:	f8 ff 
    9ece:	e9 3b       	jl	$-44     	;abs 0x9ea2
    9ed0:	31 50 06 00 	add	#6,	r1	;#0x0006
    9ed4:	34 41       	pop	r4		
    9ed6:	30 41       	ret			

00009ed8 <spi_select_radio>:
    9ed8:	04 12       	push	r4		
    9eda:	04 41       	mov	r1,	r4	
    9edc:	24 53       	incd	r4		
    9ede:	5f 42 19 00 	mov.b	&0x0019,r15	
    9ee2:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9ee6:	c2 4f 19 00 	mov.b	r15,	&0x0019	
    9eea:	34 41       	pop	r4		
    9eec:	30 41       	ret			

00009eee <spi_deselect_radio>:
    9eee:	04 12       	push	r4		
    9ef0:	04 41       	mov	r1,	r4	
    9ef2:	24 53       	incd	r4		
    9ef4:	5f 42 19 00 	mov.b	&0x0019,r15	
    9ef8:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9efa:	c2 4f 19 00 	mov.b	r15,	&0x0019	
    9efe:	34 41       	pop	r4		
    9f00:	30 41       	ret			

00009f02 <Timer_A>:
    9f02:	0f 12       	push	r15		
    9f04:	0e 12       	push	r14		
    9f06:	0d 12       	push	r13		
    9f08:	0c 12       	push	r12		
    9f0a:	04 12       	push	r4		
    9f0c:	04 41       	mov	r1,	r4	
    9f0e:	34 50 0a 00 	add	#10,	r4	;#0x000a
    9f12:	1f 42 90 02 	mov	&0x0290,r15	
    9f16:	0f 93       	tst	r15		
    9f18:	03 24       	jz	$+8      	;abs 0x9f20
    9f1a:	1f 42 90 02 	mov	&0x0290,r15	
    9f1e:	8f 12       	call	r15		
    9f20:	1f 42 92 02 	mov	&0x0292,r15	
    9f24:	1f 93       	cmp	#1,	r15	;r3 As==01
    9f26:	03 20       	jnz	$+8      	;abs 0x9f2e
    9f28:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    9f2c:	00 00 
    9f2e:	34 41       	pop	r4		
    9f30:	3c 41       	pop	r12		
    9f32:	3d 41       	pop	r13		
    9f34:	3e 41       	pop	r14		
    9f36:	3f 41       	pop	r15		
    9f38:	00 13       	reti			

00009f3a <timerA_init>:
    9f3a:	04 12       	push	r4		
    9f3c:	04 41       	mov	r1,	r4	
    9f3e:	24 53       	incd	r4		
    9f40:	82 43 90 02 	mov	#0,	&0x0290	;r3 As==00
    9f44:	82 43 92 02 	mov	#0,	&0x0292	;r3 As==00
    9f48:	b0 12 d8 9f 	call	#0x9fd8	
    9f4c:	34 41       	pop	r4		
    9f4e:	30 41       	ret			

00009f50 <timerA_register_cb>:
    9f50:	04 12       	push	r4		
    9f52:	04 41       	mov	r1,	r4	
    9f54:	24 53       	incd	r4		
    9f56:	21 83       	decd	r1		
    9f58:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9f5c:	92 44 fc ff 	mov	-4(r4),	&0x0290	;0xfffc(r4)
    9f60:	90 02 
    9f62:	21 53       	incd	r1		
    9f64:	34 41       	pop	r4		
    9f66:	30 41       	ret			

00009f68 <timerA_set_wakeup>:
    9f68:	04 12       	push	r4		
    9f6a:	04 41       	mov	r1,	r4	
    9f6c:	24 53       	incd	r4		
    9f6e:	21 83       	decd	r1		
    9f70:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9f74:	92 44 fc ff 	mov	-4(r4),	&0x0292	;0xfffc(r4)
    9f78:	92 02 
    9f7a:	21 53       	incd	r1		
    9f7c:	34 41       	pop	r4		
    9f7e:	30 41       	ret			

00009f80 <timerA_start_ticks>:
    9f80:	04 12       	push	r4		
    9f82:	04 41       	mov	r1,	r4	
    9f84:	24 53       	incd	r4		
    9f86:	21 83       	decd	r1		
    9f88:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9f8c:	5f 42 53 00 	mov.b	&0x0053,r15	
    9f90:	7f d0 20 00 	bis.b	#32,	r15	;#0x0020
    9f94:	c2 4f 53 00 	mov.b	r15,	&0x0053	
    9f98:	b2 40 10 00 	mov	#16,	&0x0162	;#0x0010
    9f9c:	62 01 
    9f9e:	82 43 70 01 	mov	#0,	&0x0170	;r3 As==00
    9fa2:	92 44 fc ff 	mov	-4(r4),	&0x0172	;0xfffc(r4)
    9fa6:	72 01 
    9fa8:	b2 40 10 01 	mov	#272,	&0x0160	;#0x0110
    9fac:	60 01 
    9fae:	21 53       	incd	r1		
    9fb0:	34 41       	pop	r4		
    9fb2:	30 41       	ret			

00009fb4 <timerA_start_milliseconds>:
    9fb4:	04 12       	push	r4		
    9fb6:	04 41       	mov	r1,	r4	
    9fb8:	24 53       	incd	r4		
    9fba:	21 83       	decd	r1		
    9fbc:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9fc0:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    9fc4:	0f 4e       	mov	r14,	r15	
    9fc6:	0f 5f       	rla	r15		
    9fc8:	0f 5e       	add	r14,	r15	
    9fca:	0f 5f       	rla	r15		
    9fcc:	0f 5f       	rla	r15		
    9fce:	b0 12 80 9f 	call	#0x9f80	
    9fd2:	21 53       	incd	r1		
    9fd4:	34 41       	pop	r4		
    9fd6:	30 41       	ret			

00009fd8 <timerA_stop>:
    9fd8:	04 12       	push	r4		
    9fda:	04 41       	mov	r1,	r4	
    9fdc:	24 53       	incd	r4		
    9fde:	82 43 60 01 	mov	#0,	&0x0160	;r3 As==00
    9fe2:	34 41       	pop	r4		
    9fe4:	30 41       	ret			

00009fe6 <Timer_B>:
    9fe6:	0f 12       	push	r15		
    9fe8:	0e 12       	push	r14		
    9fea:	0d 12       	push	r13		
    9fec:	0c 12       	push	r12		
    9fee:	04 12       	push	r4		
    9ff0:	04 41       	mov	r1,	r4	
    9ff2:	34 50 0a 00 	add	#10,	r4	;#0x000a
    9ff6:	1f 42 94 02 	mov	&0x0294,r15	
    9ffa:	0f 93       	tst	r15		
    9ffc:	03 24       	jz	$+8      	;abs 0xa004
    9ffe:	1f 42 94 02 	mov	&0x0294,r15	
    a002:	8f 12       	call	r15		
    a004:	1f 42 96 02 	mov	&0x0296,r15	
    a008:	1f 93       	cmp	#1,	r15	;r3 As==01
    a00a:	03 20       	jnz	$+8      	;abs 0xa012
    a00c:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    a010:	00 00 
    a012:	34 41       	pop	r4		
    a014:	3c 41       	pop	r12		
    a016:	3d 41       	pop	r13		
    a018:	3e 41       	pop	r14		
    a01a:	3f 41       	pop	r15		
    a01c:	00 13       	reti			

0000a01e <timerB_init>:
    a01e:	04 12       	push	r4		
    a020:	04 41       	mov	r1,	r4	
    a022:	24 53       	incd	r4		
    a024:	82 43 94 02 	mov	#0,	&0x0294	;r3 As==00
    a028:	82 43 96 02 	mov	#0,	&0x0296	;r3 As==00
    a02c:	b0 12 bc a0 	call	#0xa0bc	
    a030:	34 41       	pop	r4		
    a032:	30 41       	ret			

0000a034 <timerB_register_cb>:
    a034:	04 12       	push	r4		
    a036:	04 41       	mov	r1,	r4	
    a038:	24 53       	incd	r4		
    a03a:	21 83       	decd	r1		
    a03c:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a040:	92 44 fc ff 	mov	-4(r4),	&0x0294	;0xfffc(r4)
    a044:	94 02 
    a046:	21 53       	incd	r1		
    a048:	34 41       	pop	r4		
    a04a:	30 41       	ret			

0000a04c <timerB_set_wakeup>:
    a04c:	04 12       	push	r4		
    a04e:	04 41       	mov	r1,	r4	
    a050:	24 53       	incd	r4		
    a052:	21 83       	decd	r1		
    a054:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a058:	92 44 fc ff 	mov	-4(r4),	&0x0296	;0xfffc(r4)
    a05c:	96 02 
    a05e:	21 53       	incd	r1		
    a060:	34 41       	pop	r4		
    a062:	30 41       	ret			

0000a064 <timerB_start_ticks>:
    a064:	04 12       	push	r4		
    a066:	04 41       	mov	r1,	r4	
    a068:	24 53       	incd	r4		
    a06a:	21 83       	decd	r1		
    a06c:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a070:	5f 42 53 00 	mov.b	&0x0053,r15	
    a074:	7f d0 20 00 	bis.b	#32,	r15	;#0x0020
    a078:	c2 4f 53 00 	mov.b	r15,	&0x0053	
    a07c:	b2 40 10 00 	mov	#16,	&0x0182	;#0x0010
    a080:	82 01 
    a082:	82 43 90 01 	mov	#0,	&0x0190	;r3 As==00
    a086:	92 44 fc ff 	mov	-4(r4),	&0x0192	;0xfffc(r4)
    a08a:	92 01 
    a08c:	b2 40 10 01 	mov	#272,	&0x0180	;#0x0110
    a090:	80 01 
    a092:	21 53       	incd	r1		
    a094:	34 41       	pop	r4		
    a096:	30 41       	ret			

0000a098 <timerB_start_milliseconds>:
    a098:	04 12       	push	r4		
    a09a:	04 41       	mov	r1,	r4	
    a09c:	24 53       	incd	r4		
    a09e:	21 83       	decd	r1		
    a0a0:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a0a4:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    a0a8:	0f 4e       	mov	r14,	r15	
    a0aa:	0f 5f       	rla	r15		
    a0ac:	0f 5e       	add	r14,	r15	
    a0ae:	0f 5f       	rla	r15		
    a0b0:	0f 5f       	rla	r15		
    a0b2:	b0 12 64 a0 	call	#0xa064	
    a0b6:	21 53       	incd	r1		
    a0b8:	34 41       	pop	r4		
    a0ba:	30 41       	ret			

0000a0bc <timerB_stop>:
    a0bc:	04 12       	push	r4		
    a0be:	04 41       	mov	r1,	r4	
    a0c0:	24 53       	incd	r4		
    a0c2:	82 43 80 01 	mov	#0,	&0x0180	;r3 As==00
    a0c6:	34 41       	pop	r4		
    a0c8:	30 41       	ret			

0000a0ca <uart_init>:
    a0ca:	04 12       	push	r4		
    a0cc:	04 41       	mov	r1,	r4	
    a0ce:	24 53       	incd	r4		
    a0d0:	21 83       	decd	r1		
    a0d2:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a0d6:	5f 42 1b 00 	mov.b	&0x001b,r15	
    a0da:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    a0de:	c2 4f 1b 00 	mov.b	r15,	&0x001b	
    a0e2:	5f 42 1a 00 	mov.b	&0x001a,r15	
    a0e6:	7f d0 10 00 	bis.b	#16,	r15	;#0x0010
    a0ea:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    a0ee:	5f 42 1a 00 	mov.b	&0x001a,r15	
    a0f2:	7f f0 df ff 	and.b	#-33,	r15	;#0xffdf
    a0f6:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    a0fa:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    a0fe:	1f 93       	cmp	#1,	r15	;r3 As==01
    a100:	03 24       	jz	$+8      	;abs 0xa108
    a102:	3f 92       	cmp	#8,	r15	;r2 As==11
    a104:	12 24       	jz	$+38     	;abs 0xa12a
    a106:	23 3c       	jmp	$+72     	;abs 0xa14e
    a108:	f2 40 80 ff 	mov.b	#-128,	&0x0061	;#0xff80
    a10c:	61 00 
    a10e:	f2 40 68 00 	mov.b	#104,	&0x0062	;#0x0068
    a112:	62 00 
    a114:	c2 43 63 00 	mov.b	#0,	&0x0063	;r3 As==00
    a118:	e2 42 64 00 	mov.b	#4,	&0x0064	;r2 As==10
    a11c:	5f 42 61 00 	mov.b	&0x0061,r15	
    a120:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    a124:	c2 4f 61 00 	mov.b	r15,	&0x0061	
    a128:	13 3c       	jmp	$+40     	;abs 0xa150
    a12a:	f2 40 80 ff 	mov.b	#-128,	&0x0061	;#0xff80
    a12e:	61 00 
    a130:	f2 40 41 00 	mov.b	#65,	&0x0062	;#0x0041
    a134:	62 00 
    a136:	f2 40 03 00 	mov.b	#3,	&0x0063	;#0x0003
    a13a:	63 00 
    a13c:	e2 42 64 00 	mov.b	#4,	&0x0064	;r2 As==10
    a140:	5f 42 61 00 	mov.b	&0x0061,r15	
    a144:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    a148:	c2 4f 61 00 	mov.b	r15,	&0x0061	
    a14c:	01 3c       	jmp	$+4      	;abs 0xa150
    a14e:	03 43       	nop			
    a150:	82 43 98 02 	mov	#0,	&0x0298	;r3 As==00
    a154:	21 53       	incd	r1		
    a156:	34 41       	pop	r4		
    a158:	30 41       	ret			

0000a15a <uart_stop>:
    a15a:	04 12       	push	r4		
    a15c:	04 41       	mov	r1,	r4	
    a15e:	24 53       	incd	r4		
    a160:	34 41       	pop	r4		
    a162:	30 41       	ret			

0000a164 <putchar>:
    a164:	04 12       	push	r4		
    a166:	04 41       	mov	r1,	r4	
    a168:	24 53       	incd	r4		
    a16a:	21 83       	decd	r1		
    a16c:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a170:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    a174:	4f 4f       	mov.b	r15,	r15	
    a176:	c2 4f 67 00 	mov.b	r15,	&0x0067	
    a17a:	03 43       	nop			
    a17c:	5f 42 03 00 	mov.b	&0x0003,r15	
    a180:	4f 4f       	mov.b	r15,	r15	
    a182:	2f f3       	and	#2,	r15	;r3 As==10
    a184:	0f 93       	tst	r15		
    a186:	fa 27       	jz	$-10     	;abs 0xa17c
    a188:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    a18c:	4f 4f       	mov.b	r15,	r15	
    a18e:	4f 4f       	mov.b	r15,	r15	
    a190:	21 53       	incd	r1		
    a192:	34 41       	pop	r4		
    a194:	30 41       	ret			

0000a196 <uart_getchar>:
    a196:	04 12       	push	r4		
    a198:	04 41       	mov	r1,	r4	
    a19a:	24 53       	incd	r4		
    a19c:	21 83       	decd	r1		
    a19e:	5f 42 66 00 	mov.b	&0x0066,r15	
    a1a2:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    a1a6:	c4 43 fd ff 	mov.b	#0,	-3(r4)	;r3 As==00, 0xfffd(r4)
    a1aa:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    a1ae:	21 53       	incd	r1		
    a1b0:	34 41       	pop	r4		
    a1b2:	30 41       	ret			

0000a1b4 <uart_eint>:
    a1b4:	04 12       	push	r4		
    a1b6:	04 41       	mov	r1,	r4	
    a1b8:	24 53       	incd	r4		
    a1ba:	5f 42 01 00 	mov.b	&0x0001,r15	
    a1be:	5f d3       	bis.b	#1,	r15	;r3 As==01
    a1c0:	c2 4f 01 00 	mov.b	r15,	&0x0001	
    a1c4:	34 41       	pop	r4		
    a1c6:	30 41       	ret			

0000a1c8 <uart_dint>:
    a1c8:	04 12       	push	r4		
    a1ca:	04 41       	mov	r1,	r4	
    a1cc:	24 53       	incd	r4		
    a1ce:	5f 42 01 00 	mov.b	&0x0001,r15	
    a1d2:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    a1d6:	c2 4f 01 00 	mov.b	r15,	&0x0001	
    a1da:	34 41       	pop	r4		
    a1dc:	30 41       	ret			

0000a1de <uart_register_cb>:
    a1de:	04 12       	push	r4		
    a1e0:	04 41       	mov	r1,	r4	
    a1e2:	24 53       	incd	r4		
    a1e4:	21 83       	decd	r1		
    a1e6:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a1ea:	92 44 fc ff 	mov	-4(r4),	&0x0298	;0xfffc(r4)
    a1ee:	98 02 
    a1f0:	84 93 fc ff 	tst	-4(r4)		;0xfffc(r4)
    a1f4:	03 20       	jnz	$+8      	;abs 0xa1fc
    a1f6:	b0 12 c8 a1 	call	#0xa1c8	
    a1fa:	02 3c       	jmp	$+6      	;abs 0xa200
    a1fc:	b0 12 b4 a1 	call	#0xa1b4	
    a200:	21 53       	incd	r1		
    a202:	34 41       	pop	r4		
    a204:	30 41       	ret			

0000a206 <usart0irq>:
    a206:	0f 12       	push	r15		
    a208:	0e 12       	push	r14		
    a20a:	0d 12       	push	r13		
    a20c:	0c 12       	push	r12		
    a20e:	04 12       	push	r4		
    a210:	04 41       	mov	r1,	r4	
    a212:	34 50 0a 00 	add	#10,	r4	;#0x000a
    a216:	21 83       	decd	r1		
    a218:	5f 42 65 00 	mov.b	&0x0065,r15	
    a21c:	4f 4f       	mov.b	r15,	r15	
    a21e:	2f f2       	and	#4,	r15	;r2 As==10
    a220:	0f 93       	tst	r15		
    a222:	0a 24       	jz	$+22     	;abs 0xa238
    a224:	5f 42 66 00 	mov.b	&0x0066,r15	
    a228:	c4 4f f4 ff 	mov.b	r15,	-12(r4)	;0xfff4(r4)
    a22c:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    a230:	5f 53       	inc.b	r15		
    a232:	c4 4f f4 ff 	mov.b	r15,	-12(r4)	;0xfff4(r4)
    a236:	0a 3c       	jmp	$+22     	;abs 0xa24c
    a238:	1e 42 98 02 	mov	&0x0298,r14	
    a23c:	5f 42 66 00 	mov.b	&0x0066,r15	
    a240:	8e 12       	call	r14		
    a242:	0f 93       	tst	r15		
    a244:	03 24       	jz	$+8      	;abs 0xa24c
    a246:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    a24a:	00 00 
    a24c:	21 53       	incd	r1		
    a24e:	34 41       	pop	r4		
    a250:	3c 41       	pop	r12		
    a252:	3d 41       	pop	r13		
    a254:	3e 41       	pop	r14		
    a256:	3f 41       	pop	r15		
    a258:	00 13       	reti			

0000a25a <flash_init>:
    a25a:	04 12       	push	r4		
    a25c:	04 41       	mov	r1,	r4	
    a25e:	24 53       	incd	r4		
    a260:	b0 12 9e 99 	call	#0x999e	
    a264:	3f 92       	cmp	#8,	r15	;r2 As==11
    a266:	11 24       	jz	$+36     	;abs 0xa28a
    a268:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    a26c:	03 34       	jge	$+8      	;abs 0xa274
    a26e:	1f 93       	cmp	#1,	r15	;r3 As==01
    a270:	08 24       	jz	$+18     	;abs 0xa282
    a272:	17 3c       	jmp	$+48     	;abs 0xa2a2
    a274:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    a278:	0c 24       	jz	$+26     	;abs 0xa292
    a27a:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    a27e:	0d 24       	jz	$+28     	;abs 0xa29a
    a280:	10 3c       	jmp	$+34     	;abs 0xa2a2
    a282:	b2 40 83 a5 	mov	#-23165,&0x012a	;#0xa583
    a286:	2a 01 
    a288:	0c 3c       	jmp	$+26     	;abs 0xa2a2
    a28a:	b2 40 96 a5 	mov	#-23146,&0x012a	;#0xa596
    a28e:	2a 01 
    a290:	08 3c       	jmp	$+18     	;abs 0xa2a2
    a292:	b2 40 a1 a5 	mov	#-23135,&0x012a	;#0xa5a1
    a296:	2a 01 
    a298:	04 3c       	jmp	$+10     	;abs 0xa2a2
    a29a:	b2 40 ac a5 	mov	#-23124,&0x012a	;#0xa5ac
    a29e:	2a 01 
    a2a0:	03 43       	nop			
    a2a2:	34 41       	pop	r4		
    a2a4:	30 41       	ret			

0000a2a6 <flash_write_byte>:
    a2a6:	04 12       	push	r4		
    a2a8:	04 41       	mov	r1,	r4	
    a2aa:	24 53       	incd	r4		
    a2ac:	21 82       	sub	#4,	r1	;r2 As==10
    a2ae:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    a2b2:	c4 4e fc ff 	mov.b	r14,	-4(r4)	;0xfffc(r4)
    a2b6:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a2ba:	6f 4f       	mov.b	@r15,	r15	
    a2bc:	5f 94 fc ff 	cmp.b	-4(r4),	r15	;0xfffc(r4)
    a2c0:	02 20       	jnz	$+6      	;abs 0xa2c6
    a2c2:	0f 43       	clr	r15		
    a2c4:	1f 3c       	jmp	$+64     	;abs 0xa304
    a2c6:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a2ca:	6f 4f       	mov.b	@r15,	r15	
    a2cc:	7f 93       	cmp.b	#-1,	r15	;r3 As==11
    a2ce:	02 24       	jz	$+6      	;abs 0xa2d4
    a2d0:	3f 43       	mov	#-1,	r15	;r3 As==11
    a2d2:	18 3c       	jmp	$+50     	;abs 0xa304
    a2d4:	b0 12 5a a2 	call	#0xa25a	
    a2d8:	b0 12 ce a3 	call	#0xa3ce	
    a2dc:	b2 40 00 a5 	mov	#-23296,&0x012c	;#0xa500
    a2e0:	2c 01 
    a2e2:	b2 40 40 a5 	mov	#-23232,&0x0128	;#0xa540
    a2e6:	28 01 
    a2e8:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a2ec:	df 44 fc ff 	mov.b	-4(r4),	0(r15)	;0xfffc(r4), 0x0000(r15)
    a2f0:	00 00 
    a2f2:	b2 40 00 a5 	mov	#-23296,&0x0128	;#0xa500
    a2f6:	28 01 
    a2f8:	b2 40 10 a5 	mov	#-23280,&0x012c	;#0xa510
    a2fc:	2c 01 
    a2fe:	b0 12 ea a3 	call	#0xa3ea	
    a302:	0f 43       	clr	r15		
    a304:	21 52       	add	#4,	r1	;r2 As==10
    a306:	34 41       	pop	r4		
    a308:	30 41       	ret			

0000a30a <flash_write_word>:
    a30a:	04 12       	push	r4		
    a30c:	04 41       	mov	r1,	r4	
    a30e:	24 53       	incd	r4		
    a310:	21 82       	sub	#4,	r1	;r2 As==10
    a312:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    a316:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    a31a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a31e:	2f 4f       	mov	@r15,	r15	
    a320:	1f 94 fc ff 	cmp	-4(r4),	r15	;0xfffc(r4)
    a324:	02 20       	jnz	$+6      	;abs 0xa32a
    a326:	0f 43       	clr	r15		
    a328:	1f 3c       	jmp	$+64     	;abs 0xa368
    a32a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a32e:	2f 4f       	mov	@r15,	r15	
    a330:	3f 93       	cmp	#-1,	r15	;r3 As==11
    a332:	02 24       	jz	$+6      	;abs 0xa338
    a334:	3f 43       	mov	#-1,	r15	;r3 As==11
    a336:	18 3c       	jmp	$+50     	;abs 0xa368
    a338:	b0 12 5a a2 	call	#0xa25a	
    a33c:	b0 12 ce a3 	call	#0xa3ce	
    a340:	b2 40 00 a5 	mov	#-23296,&0x012c	;#0xa500
    a344:	2c 01 
    a346:	b2 40 40 a5 	mov	#-23232,&0x0128	;#0xa540
    a34a:	28 01 
    a34c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a350:	9f 44 fc ff 	mov	-4(r4),	0(r15)	;0xfffc(r4), 0x0000(r15)
    a354:	00 00 
    a356:	b2 40 00 a5 	mov	#-23296,&0x0128	;#0xa500
    a35a:	28 01 
    a35c:	b2 40 10 a5 	mov	#-23280,&0x012c	;#0xa510
    a360:	2c 01 
    a362:	b0 12 ea a3 	call	#0xa3ea	
    a366:	0f 43       	clr	r15		
    a368:	21 52       	add	#4,	r1	;r2 As==10
    a36a:	34 41       	pop	r4		
    a36c:	30 41       	ret			

0000a36e <flash_erase_segment>:
    a36e:	04 12       	push	r4		
    a370:	04 41       	mov	r1,	r4	
    a372:	24 53       	incd	r4		
    a374:	21 83       	decd	r1		
    a376:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a37a:	b0 12 5a a2 	call	#0xa25a	
    a37e:	b0 12 ce a3 	call	#0xa3ce	
    a382:	b2 40 00 a5 	mov	#-23296,&0x012c	;#0xa500
    a386:	2c 01 
    a388:	b2 40 02 a5 	mov	#-23294,&0x0128	;#0xa502
    a38c:	28 01 
    a38e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    a392:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    a396:	b2 40 00 a5 	mov	#-23296,&0x0128	;#0xa500
    a39a:	28 01 
    a39c:	b2 40 10 a5 	mov	#-23280,&0x012c	;#0xa510
    a3a0:	2c 01 
    a3a2:	b0 12 ea a3 	call	#0xa3ea	
    a3a6:	21 53       	incd	r1		
    a3a8:	34 41       	pop	r4		
    a3aa:	30 41       	ret			

0000a3ac <flash_erase_info_memory>:
    a3ac:	04 12       	push	r4		
    a3ae:	04 41       	mov	r1,	r4	
    a3b0:	24 53       	incd	r4		
    a3b2:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    a3b6:	b0 12 6e a3 	call	#0xa36e	
    a3ba:	3f 40 40 10 	mov	#4160,	r15	;#0x1040
    a3be:	b0 12 6e a3 	call	#0xa36e	
    a3c2:	3f 40 80 10 	mov	#4224,	r15	;#0x1080
    a3c6:	b0 12 6e a3 	call	#0xa36e	
    a3ca:	34 41       	pop	r4		
    a3cc:	30 41       	ret			

0000a3ce <watchdog_stop>:
    a3ce:	04 12       	push	r4		
    a3d0:	04 41       	mov	r1,	r4	
    a3d2:	24 53       	incd	r4		
    a3d4:	1f 42 20 01 	mov	&0x0120,r15	
    a3d8:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    a3dc:	82 4f 9a 02 	mov	r15,	&0x029a	
    a3e0:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    a3e4:	20 01 
    a3e6:	34 41       	pop	r4		
    a3e8:	30 41       	ret			

0000a3ea <watchdog_restore>:
    a3ea:	04 12       	push	r4		
    a3ec:	04 41       	mov	r1,	r4	
    a3ee:	24 53       	incd	r4		
    a3f0:	1f 42 9a 02 	mov	&0x029a,r15	
    a3f4:	3f d0 00 5a 	bis	#23040,	r15	;#0x5a00
    a3f8:	82 4f 20 01 	mov	r15,	&0x0120	
    a3fc:	34 41       	pop	r4		
    a3fe:	30 41       	ret			

0000a400 <__mulsi3>:
    a400:	0b 12       	push	r11		
    a402:	0a 12       	push	r10		
    a404:	0b 43       	clr	r11		
    a406:	0a 43       	clr	r10		
    a408:	08 3c       	jmp	$+18     	;abs 0xa41a
    a40a:	12 c3       	clrc			
    a40c:	0d 10       	rrc	r13		
    a40e:	0c 10       	rrc	r12		
    a410:	02 28       	jnc	$+6      	;abs 0xa416
    a412:	0a 5e       	add	r14,	r10	
    a414:	0b 6f       	addc	r15,	r11	
    a416:	0e 5e       	rla	r14		
    a418:	0f 6f       	rlc	r15		
    a41a:	0c 93       	tst	r12		
    a41c:	f6 23       	jnz	$-18     	;abs 0xa40a
    a41e:	0d 93       	tst	r13		
    a420:	f4 23       	jnz	$-22     	;abs 0xa40a
    a422:	0e 4a       	mov	r10,	r14	
    a424:	0f 4b       	mov	r11,	r15	
    a426:	3a 41       	pop	r10		
    a428:	3b 41       	pop	r11		
    a42a:	30 41       	ret			

0000a42c <__divhi3>:
    a42c:	0d 43       	clr	r13		
    a42e:	0f 93       	tst	r15		
    a430:	04 34       	jge	$+10     	;abs 0xa43a
    a432:	3d 40 03 00 	mov	#3,	r13	;#0x0003
    a436:	3f e3       	inv	r15		
    a438:	1f 53       	inc	r15		
    a43a:	0e 93       	tst	r14		
    a43c:	03 34       	jge	$+8      	;abs 0xa444
    a43e:	5d e3       	xor.b	#1,	r13	;r3 As==01
    a440:	3e e3       	inv	r14		
    a442:	1e 53       	inc	r14		
    a444:	0d 12       	push	r13		
    a446:	b0 12 66 a4 	call	#0xa466	
    a44a:	3d 41       	pop	r13		
    a44c:	6d b3       	bit.b	#2,	r13	;r3 As==10
    a44e:	02 24       	jz	$+6      	;abs 0xa454
    a450:	3e e3       	inv	r14		
    a452:	1e 53       	inc	r14		
    a454:	5d b3       	bit.b	#1,	r13	;r3 As==01
    a456:	02 24       	jz	$+6      	;abs 0xa45c
    a458:	3f e3       	inv	r15		
    a45a:	1f 53       	inc	r15		
    a45c:	30 41       	ret			

0000a45e <__modhi3>:
    a45e:	b0 12 2c a4 	call	#0xa42c	
    a462:	0f 4e       	mov	r14,	r15	
    a464:	30 41       	ret			

0000a466 <__udivhi3>:
    a466:	7c 40 10 00 	mov.b	#16,	r12	;#0x0010
    a46a:	0d 4e       	mov	r14,	r13	
    a46c:	0e 43       	clr	r14		
    a46e:	0f 5f       	rla	r15		
    a470:	0e 6e       	rlc	r14		
    a472:	0e 9d       	cmp	r13,	r14	
    a474:	02 28       	jnc	$+6      	;abs 0xa47a
    a476:	0e 8d       	sub	r13,	r14	
    a478:	1f d3       	bis	#1,	r15	;r3 As==01
    a47a:	1c 83       	dec	r12		
    a47c:	f8 23       	jnz	$-14     	;abs 0xa46e
    a47e:	30 41       	ret			

0000a480 <__umodhi3>:
    a480:	b0 12 66 a4 	call	#0xa466	
    a484:	0f 4e       	mov	r14,	r15	
    a486:	30 41       	ret			

0000a488 <memcpy>:
    a488:	0b 12       	push	r11		
    a48a:	0a 12       	push	r10		
    a48c:	09 12       	push	r9		
    a48e:	08 12       	push	r8		
    a490:	07 12       	push	r7		
    a492:	0d 93       	tst	r13		
    a494:	70 24       	jz	$+226    	;abs 0xa576
    a496:	0f 9e       	cmp	r14,	r15	
    a498:	6e 24       	jz	$+222    	;abs 0xa576
    a49a:	34 2c       	jc	$+106    	;abs 0xa504
    a49c:	0c 4e       	mov	r14,	r12	
    a49e:	0c df       	bis	r15,	r12	
    a4a0:	1c f3       	and	#1,	r12	;r3 As==01
    a4a2:	1b 24       	jz	$+56     	;abs 0xa4da
    a4a4:	0c 4e       	mov	r14,	r12	
    a4a6:	0c ef       	xor	r15,	r12	
    a4a8:	1c f3       	and	#1,	r12	;r3 As==01
    a4aa:	07 20       	jnz	$+16     	;abs 0xa4ba
    a4ac:	2d 93       	cmp	#2,	r13	;r3 As==10
    a4ae:	07 28       	jnc	$+16     	;abs 0xa4be
    a4b0:	0b 4e       	mov	r14,	r11	
    a4b2:	1b f3       	and	#1,	r11	;r3 As==01
    a4b4:	2c 43       	mov	#2,	r12	;r3 As==10
    a4b6:	0c 8b       	sub	r11,	r12	
    a4b8:	03 3c       	jmp	$+8      	;abs 0xa4c0
    a4ba:	0c 4d       	mov	r13,	r12	
    a4bc:	01 3c       	jmp	$+4      	;abs 0xa4c0
    a4be:	1c 43       	mov	#1,	r12	;r3 As==01
    a4c0:	0d 8c       	sub	r12,	r13	
    a4c2:	0a 4c       	mov	r12,	r10	
    a4c4:	09 4e       	mov	r14,	r9	
    a4c6:	0b 4f       	mov	r15,	r11	
    a4c8:	fb 49 00 00 	mov.b	@r9+,	0(r11)	;0x0000(r11)
    a4cc:	1b 53       	inc	r11		
    a4ce:	3a 53       	add	#-1,	r10	;r3 As==11
    a4d0:	fb 23       	jnz	$-8      	;abs 0xa4c8
    a4d2:	0a 4f       	mov	r15,	r10	
    a4d4:	0a 5c       	add	r12,	r10	
    a4d6:	0e 5c       	add	r12,	r14	
    a4d8:	01 3c       	jmp	$+4      	;abs 0xa4dc
    a4da:	0a 4f       	mov	r15,	r10	
    a4dc:	0b 4d       	mov	r13,	r11	
    a4de:	12 c3       	clrc			
    a4e0:	0b 10       	rrc	r11		
    a4e2:	0b 24       	jz	$+24     	;abs 0xa4fa
    a4e4:	09 4b       	mov	r11,	r9	
    a4e6:	08 4e       	mov	r14,	r8	
    a4e8:	0c 4a       	mov	r10,	r12	
    a4ea:	bc 48 00 00 	mov	@r8+,	0(r12)	;0x0000(r12)
    a4ee:	2c 53       	incd	r12		
    a4f0:	39 53       	add	#-1,	r9	;r3 As==11
    a4f2:	fb 23       	jnz	$-8      	;abs 0xa4ea
    a4f4:	0b 5b       	rla	r11		
    a4f6:	0e 5b       	add	r11,	r14	
    a4f8:	0a 5b       	add	r11,	r10	
    a4fa:	1d f3       	and	#1,	r13	;r3 As==01
    a4fc:	3c 24       	jz	$+122    	;abs 0xa576
    a4fe:	ea 4e 00 00 	mov.b	@r14,	0(r10)	;0x0000(r10)
    a502:	39 3c       	jmp	$+116    	;abs 0xa576
    a504:	0e 5d       	add	r13,	r14	
    a506:	0c 4f       	mov	r15,	r12	
    a508:	0c 5d       	add	r13,	r12	
    a50a:	0b 4c       	mov	r12,	r11	
    a50c:	0b de       	bis	r14,	r11	
    a50e:	1b f3       	and	#1,	r11	;r3 As==01
    a510:	1b 24       	jz	$+56     	;abs 0xa548
    a512:	0b 4c       	mov	r12,	r11	
    a514:	0b ee       	xor	r14,	r11	
    a516:	1b f3       	and	#1,	r11	;r3 As==01
    a518:	06 20       	jnz	$+14     	;abs 0xa526
    a51a:	3d 90 03 00 	cmp	#3,	r13	;#0x0003
    a51e:	03 28       	jnc	$+8      	;abs 0xa526
    a520:	0b 4e       	mov	r14,	r11	
    a522:	1b f3       	and	#1,	r11	;r3 As==01
    a524:	01 3c       	jmp	$+4      	;abs 0xa528
    a526:	0b 4d       	mov	r13,	r11	
    a528:	0d 8b       	sub	r11,	r13	
    a52a:	09 4e       	mov	r14,	r9	
    a52c:	0a 4c       	mov	r12,	r10	
    a52e:	08 4b       	mov	r11,	r8	
    a530:	08 8c       	sub	r12,	r8	
    a532:	3a 53       	add	#-1,	r10	;r3 As==11
    a534:	39 53       	add	#-1,	r9	;r3 As==11
    a536:	ea 49 00 00 	mov.b	@r9,	0(r10)	;0x0000(r10)
    a53a:	07 4a       	mov	r10,	r7	
    a53c:	07 58       	add	r8,	r7	
    a53e:	f9 23       	jnz	$-12     	;abs 0xa532
    a540:	3b e3       	inv	r11		
    a542:	1b 53       	inc	r11		
    a544:	0c 5b       	add	r11,	r12	
    a546:	0e 5b       	add	r11,	r14	
    a548:	0b 4d       	mov	r13,	r11	
    a54a:	12 c3       	clrc			
    a54c:	0b 10       	rrc	r11		
    a54e:	0e 24       	jz	$+30     	;abs 0xa56c
    a550:	0a 4b       	mov	r11,	r10	
    a552:	08 4e       	mov	r14,	r8	
    a554:	09 4c       	mov	r12,	r9	
    a556:	28 83       	decd	r8		
    a558:	29 83       	decd	r9		
    a55a:	a9 48 00 00 	mov	@r8,	0(r9)	;0x0000(r9)
    a55e:	3a 53       	add	#-1,	r10	;r3 As==11
    a560:	fa 23       	jnz	$-10     	;abs 0xa556
    a562:	0a 8b       	sub	r11,	r10	
    a564:	0b 4a       	mov	r10,	r11	
    a566:	0b 5b       	rla	r11		
    a568:	0e 5b       	add	r11,	r14	
    a56a:	0c 5b       	add	r11,	r12	
    a56c:	1d f3       	and	#1,	r13	;r3 As==01
    a56e:	03 24       	jz	$+8      	;abs 0xa576
    a570:	dc 4e ff ff 	mov.b	-1(r14),-1(r12)	;0xffff(r14), 0xffff(r12)
    a574:	ff ff 
    a576:	37 41       	pop	r7		
    a578:	38 41       	pop	r8		
    a57a:	39 41       	pop	r9		
    a57c:	3a 41       	pop	r10		
    a57e:	3b 41       	pop	r11		
    a580:	30 41       	ret			

0000a582 <printf>:
    a582:	0d 41       	mov	r1,	r13	
    a584:	2d 53       	incd	r13		
    a586:	3e 4d       	mov	@r13+,	r14	
    a588:	3f 40 64 a1 	mov	#-24220,r15	;#0xa164
    a58c:	b0 12 f4 a7 	call	#0xa7f4	
    a590:	30 41       	ret			

0000a592 <vprintf>:
    a592:	0d 4e       	mov	r14,	r13	
    a594:	0e 4f       	mov	r15,	r14	
    a596:	3f 40 64 a1 	mov	#-24220,r15	;#0xa164
    a59a:	b0 12 f4 a7 	call	#0xa7f4	
    a59e:	30 41       	ret			

0000a5a0 <append>:
    a5a0:	1e 42 9e 02 	mov	&0x029e,r14	
    a5a4:	1e 93       	cmp	#1,	r14	;r3 As==01
    a5a6:	0b 38       	jl	$+24     	;abs 0xa5be
    a5a8:	1d 42 9c 02 	mov	&0x029c,r13	
    a5ac:	cd 4f 00 00 	mov.b	r15,	0(r13)	;0x0000(r13)
    a5b0:	1d 53       	inc	r13		
    a5b2:	82 4d 9c 02 	mov	r13,	&0x029c	
    a5b6:	3e 53       	add	#-1,	r14	;r3 As==11
    a5b8:	82 4e 9e 02 	mov	r14,	&0x029e	
    a5bc:	30 41       	ret			
    a5be:	3f 43       	mov	#-1,	r15	;r3 As==11
    a5c0:	30 41       	ret			

0000a5c2 <call_vuprintf>:
    a5c2:	0b 12       	push	r11		
    a5c4:	0a 12       	push	r10		
    a5c6:	21 83       	decd	r1		
    a5c8:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    a5cc:	1a 42 9c 02 	mov	&0x029c,r10	
    a5d0:	1b 42 9e 02 	mov	&0x029e,r11	
    a5d4:	0d 4e       	mov	r14,	r13	
    a5d6:	0e 4f       	mov	r15,	r14	
    a5d8:	3f 40 a0 a5 	mov	#-23136,r15	;#0xa5a0
    a5dc:	b0 12 f4 a7 	call	#0xa7f4	
    a5e0:	0f 9b       	cmp	r11,	r15	
    a5e2:	05 38       	jl	$+12     	;abs 0xa5ee
    a5e4:	0e 4a       	mov	r10,	r14	
    a5e6:	0e 5b       	add	r11,	r14	
    a5e8:	ce 43 ff ff 	mov.b	#0,	-1(r14)	;r3 As==00, 0xffff(r14)
    a5ec:	04 3c       	jmp	$+10     	;abs 0xa5f6
    a5ee:	1e 42 9c 02 	mov	&0x029c,r14	
    a5f2:	ce 43 00 00 	mov.b	#0,	0(r14)	;r3 As==00, 0x0000(r14)
    a5f6:	21 53       	incd	r1		
    a5f8:	3a 41       	pop	r10		
    a5fa:	3b 41       	pop	r11		
    a5fc:	30 41       	ret			

0000a5fe <sprintf>:
    a5fe:	92 41 02 00 	mov	2(r1),	&0x029c	;0x0002(r1)
    a602:	9c 02 
    a604:	b2 40 ff 7f 	mov	#32767,	&0x029e	;#0x7fff
    a608:	9e 02 
    a60a:	0e 41       	mov	r1,	r14	
    a60c:	3e 50 06 00 	add	#6,	r14	;#0x0006
    a610:	1f 41 04 00 	mov	4(r1),	r15	;0x0004(r1)
    a614:	b0 12 c2 a5 	call	#0xa5c2	
    a618:	30 41       	ret			

0000a61a <snprintf>:
    a61a:	92 41 02 00 	mov	2(r1),	&0x029c	;0x0002(r1)
    a61e:	9c 02 
    a620:	92 41 04 00 	mov	4(r1),	&0x029e	;0x0004(r1)
    a624:	9e 02 
    a626:	0e 41       	mov	r1,	r14	
    a628:	3e 52       	add	#8,	r14	;r2 As==11
    a62a:	1f 41 06 00 	mov	6(r1),	r15	;0x0006(r1)
    a62e:	b0 12 c2 a5 	call	#0xa5c2	
    a632:	30 41       	ret			

0000a634 <vsprintf>:
    a634:	0c 4e       	mov	r14,	r12	
    a636:	82 4f 9c 02 	mov	r15,	&0x029c	
    a63a:	b2 40 ff 7f 	mov	#32767,	&0x029e	;#0x7fff
    a63e:	9e 02 
    a640:	0e 4d       	mov	r13,	r14	
    a642:	0f 4c       	mov	r12,	r15	
    a644:	b0 12 c2 a5 	call	#0xa5c2	
    a648:	30 41       	ret			

0000a64a <vsnprintf>:
    a64a:	82 4f 9c 02 	mov	r15,	&0x029c	
    a64e:	82 4e 9e 02 	mov	r14,	&0x029e	
    a652:	0e 4c       	mov	r12,	r14	
    a654:	0f 4d       	mov	r13,	r15	
    a656:	b0 12 c2 a5 	call	#0xa5c2	
    a65a:	30 41       	ret			

0000a65c <print_field>:
    a65c:	0b 12       	push	r11		
    a65e:	0a 12       	push	r10		
    a660:	09 12       	push	r9		
    a662:	08 12       	push	r8		
    a664:	07 12       	push	r7		
    a666:	06 12       	push	r6		
    a668:	05 12       	push	r5		
    a66a:	04 12       	push	r4		
    a66c:	31 82       	sub	#8,	r1	;r2 As==11
    a66e:	08 4f       	mov	r15,	r8	
    a670:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    a674:	09 4d       	mov	r13,	r9	
    a676:	1f 41 1a 00 	mov	26(r1),	r15	;0x001a(r1)
    a67a:	1d 41 1c 00 	mov	28(r1),	r13	;0x001c(r1)
    a67e:	4c 4d       	mov.b	r13,	r12	
    a680:	04 4d       	mov	r13,	r4	
    a682:	84 10       	swpb	r4		
    a684:	45 44       	mov.b	r4,	r5	
    a686:	4e 4f       	mov.b	r15,	r14	
    a688:	7e b0 40 00 	bit.b	#64,	r14	;#0x0040
    a68c:	11 24       	jz	$+36     	;abs 0xa6b0
    a68e:	f1 40 30 00 	mov.b	#48,	0(r1)	;#0x0030, 0x0000(r1)
    a692:	00 00 
    a694:	0e 4f       	mov	r15,	r14	
    a696:	8e 10       	swpb	r14		
    a698:	5e f3       	and.b	#1,	r14	;r3 As==01
    a69a:	03 24       	jz	$+8      	;abs 0xa6a2
    a69c:	7e 40 58 00 	mov.b	#88,	r14	;#0x0058
    a6a0:	02 3c       	jmp	$+6      	;abs 0xa6a6
    a6a2:	7e 40 78 00 	mov.b	#120,	r14	;#0x0078
    a6a6:	c1 4e 01 00 	mov.b	r14,	1(r1)	;0x0001(r1)
    a6aa:	0c 41       	mov	r1,	r12	
    a6ac:	2c 53       	incd	r12		
    a6ae:	0f 3c       	jmp	$+32     	;abs 0xa6ce
    a6b0:	7e f0 20 00 	and.b	#32,	r14	;#0x0020
    a6b4:	04 24       	jz	$+10     	;abs 0xa6be
    a6b6:	f1 40 30 00 	mov.b	#48,	0(r1)	;#0x0030, 0x0000(r1)
    a6ba:	00 00 
    a6bc:	04 3c       	jmp	$+10     	;abs 0xa6c6
    a6be:	4c 93       	tst.b	r12		
    a6c0:	05 24       	jz	$+12     	;abs 0xa6cc
    a6c2:	c1 4d 00 00 	mov.b	r13,	0(r1)	;0x0000(r1)
    a6c6:	0c 41       	mov	r1,	r12	
    a6c8:	1c 53       	inc	r12		
    a6ca:	01 3c       	jmp	$+4      	;abs 0xa6ce
    a6cc:	0c 41       	mov	r1,	r12	
    a6ce:	0a 4c       	mov	r12,	r10	
    a6d0:	8c 10       	swpb	r12		
    a6d2:	8c 11       	sxt	r12		
    a6d4:	8c 10       	swpb	r12		
    a6d6:	8c 11       	sxt	r12		
    a6d8:	0b 4c       	mov	r12,	r11	
    a6da:	06 41       	mov	r1,	r6	
    a6dc:	0c 41       	mov	r1,	r12	
    a6de:	8c 10       	swpb	r12		
    a6e0:	8c 11       	sxt	r12		
    a6e2:	8c 10       	swpb	r12		
    a6e4:	8c 11       	sxt	r12		
    a6e6:	07 4c       	mov	r12,	r7	
    a6e8:	0a 86       	sub	r6,	r10	
    a6ea:	0b 77       	subc	r7,	r11	
    a6ec:	0e 4f       	mov	r15,	r14	
    a6ee:	8e 10       	swpb	r14		
    a6f0:	c1 4e 02 00 	mov.b	r14,	2(r1)	;0x0002(r1)
    a6f4:	6e f2       	and.b	#4,	r14	;r2 As==10
    a6f6:	02 24       	jz	$+6      	;abs 0xa6fc
    a6f8:	07 45       	mov	r5,	r7	
    a6fa:	01 3c       	jmp	$+4      	;abs 0xa6fe
    a6fc:	37 43       	mov	#-1,	r7	;r3 As==11
    a6fe:	4f 4f       	mov.b	r15,	r15	
    a700:	7f b0 10 00 	bit.b	#16,	r15	;#0x0010
    a704:	3c 20       	jnz	$+122    	;abs 0xa77e
    a706:	1d 41 04 00 	mov	4(r1),	r13	;0x0004(r1)
    a70a:	3d 53       	add	#-1,	r13	;r3 As==11
    a70c:	1d 53       	inc	r13		
    a70e:	cd 93 00 00 	tst.b	0(r13)		;0x0000(r13)
    a712:	fc 23       	jnz	$-6      	;abs 0xa70c
    a714:	1d 81 04 00 	sub	4(r1),	r13	;0x0004(r1)
    a718:	09 9a       	cmp	r10,	r9	
    a71a:	02 28       	jnc	$+6      	;abs 0xa720
    a71c:	09 8a       	sub	r10,	r9	
    a71e:	01 3c       	jmp	$+4      	;abs 0xa722
    a720:	09 43       	clr	r9		
    a722:	e1 b3 02 00 	bit.b	#2,	2(r1)	;r3 As==10, 0x0002(r1)
    a726:	05 24       	jz	$+12     	;abs 0xa732
    a728:	09 95       	cmp	r5,	r9	
    a72a:	02 28       	jnc	$+6      	;abs 0xa730
    a72c:	09 85       	sub	r5,	r9	
    a72e:	01 3c       	jmp	$+4      	;abs 0xa732
    a730:	09 43       	clr	r9		
    a732:	05 4d       	mov	r13,	r5	
    a734:	07 9d       	cmp	r13,	r7	
    a736:	01 2c       	jc	$+4      	;abs 0xa73a
    a738:	05 47       	mov	r7,	r5	
    a73a:	4f 93       	tst.b	r15		
    a73c:	0d 38       	jl	$+28     	;abs 0xa758
    a73e:	f1 40 20 00 	mov.b	#32,	6(r1)	;#0x0020, 0x0006(r1)
    a742:	06 00 
    a744:	06 43       	clr	r6		
    a746:	0b 43       	clr	r11		
    a748:	0e 3c       	jmp	$+30     	;abs 0xa766
    a74a:	0f 41       	mov	r1,	r15	
    a74c:	0f 56       	add	r6,	r15	
    a74e:	6f 4f       	mov.b	@r15,	r15	
    a750:	8f 11       	sxt	r15		
    a752:	16 53       	inc	r6		
    a754:	88 12       	call	r8		
    a756:	01 3c       	jmp	$+4      	;abs 0xa75a
    a758:	06 43       	clr	r6		
    a75a:	06 9a       	cmp	r10,	r6	
    a75c:	f6 3b       	jl	$-18     	;abs 0xa74a
    a75e:	0b 4a       	mov	r10,	r11	
    a760:	f1 40 30 00 	mov.b	#48,	6(r1)	;#0x0030, 0x0006(r1)
    a764:	06 00 
    a766:	05 8b       	sub	r11,	r5	
    a768:	05 3c       	jmp	$+12     	;abs 0xa774
    a76a:	5f 41 06 00 	mov.b	6(r1),	r15	;0x0006(r1)
    a76e:	8f 11       	sxt	r15		
    a770:	88 12       	call	r8		
    a772:	1b 53       	inc	r11		
    a774:	0f 45       	mov	r5,	r15	
    a776:	0f 5b       	add	r11,	r15	
    a778:	0f 99       	cmp	r9,	r15	
    a77a:	f7 2b       	jnc	$-16     	;abs 0xa76a
    a77c:	0a 3c       	jmp	$+22     	;abs 0xa792
    a77e:	06 43       	clr	r6		
    a780:	0b 43       	clr	r11		
    a782:	07 3c       	jmp	$+16     	;abs 0xa792
    a784:	1b 53       	inc	r11		
    a786:	0f 41       	mov	r1,	r15	
    a788:	0f 56       	add	r6,	r15	
    a78a:	6f 4f       	mov.b	@r15,	r15	
    a78c:	8f 11       	sxt	r15		
    a78e:	16 53       	inc	r6		
    a790:	88 12       	call	r8		
    a792:	06 9a       	cmp	r10,	r6	
    a794:	f7 3b       	jl	$-16     	;abs 0xa784
    a796:	e1 b3 02 00 	bit.b	#2,	2(r1)	;r3 As==10, 0x0002(r1)
    a79a:	02 24       	jz	$+6      	;abs 0xa7a0
    a79c:	4a 44       	mov.b	r4,	r10	
    a79e:	08 3c       	jmp	$+18     	;abs 0xa7b0
    a7a0:	1a 41 04 00 	mov	4(r1),	r10	;0x0004(r1)
    a7a4:	0a 8b       	sub	r11,	r10	
    a7a6:	0d 3c       	jmp	$+28     	;abs 0xa7c2
    a7a8:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    a7ac:	88 12       	call	r8		
    a7ae:	7a 53       	add.b	#-1,	r10	;r3 As==11
    a7b0:	4a 93       	tst.b	r10		
    a7b2:	fa 23       	jnz	$-10     	;abs 0xa7a8
    a7b4:	44 44       	mov.b	r4,	r4	
    a7b6:	0b 54       	add	r4,	r11	
    a7b8:	f3 3f       	jmp	$-24     	;abs 0xa7a0
    a7ba:	37 53       	add	#-1,	r7	;r3 As==11
    a7bc:	8f 11       	sxt	r15		
    a7be:	88 12       	call	r8		
    a7c0:	1b 53       	inc	r11		
    a7c2:	0f 4a       	mov	r10,	r15	
    a7c4:	0f 5b       	add	r11,	r15	
    a7c6:	6f 4f       	mov.b	@r15,	r15	
    a7c8:	4f 93       	tst.b	r15		
    a7ca:	07 24       	jz	$+16     	;abs 0xa7da
    a7cc:	07 93       	tst	r7		
    a7ce:	f5 23       	jnz	$-20     	;abs 0xa7ba
    a7d0:	04 3c       	jmp	$+10     	;abs 0xa7da
    a7d2:	3f 40 20 00 	mov	#32,	r15	;#0x0020
    a7d6:	88 12       	call	r8		
    a7d8:	1b 53       	inc	r11		
    a7da:	0b 99       	cmp	r9,	r11	
    a7dc:	fa 2b       	jnc	$-10     	;abs 0xa7d2
    a7de:	0f 4b       	mov	r11,	r15	
    a7e0:	31 52       	add	#8,	r1	;r2 As==11
    a7e2:	34 41       	pop	r4		
    a7e4:	35 41       	pop	r5		
    a7e6:	36 41       	pop	r6		
    a7e8:	37 41       	pop	r7		
    a7ea:	38 41       	pop	r8		
    a7ec:	39 41       	pop	r9		
    a7ee:	3a 41       	pop	r10		
    a7f0:	3b 41       	pop	r11		
    a7f2:	30 41       	ret			

0000a7f4 <vuprintf>:
    a7f4:	0b 12       	push	r11		
    a7f6:	0a 12       	push	r10		
    a7f8:	09 12       	push	r9		
    a7fa:	08 12       	push	r8		
    a7fc:	07 12       	push	r7		
    a7fe:	06 12       	push	r6		
    a800:	05 12       	push	r5		
    a802:	04 12       	push	r4		
    a804:	31 50 b6 ff 	add	#-74,	r1	;#0xffb6
    a808:	81 4f 3a 00 	mov	r15,	58(r1)	;0x003a(r1)
    a80c:	06 4e       	mov	r14,	r6	
    a80e:	05 4d       	mov	r13,	r5	
    a810:	81 4e 3e 00 	mov	r14,	62(r1)	;0x003e(r1)
    a814:	c1 43 2f 00 	mov.b	#0,	47(r1)	;r3 As==00, 0x002f(r1)
    a818:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    a81c:	c1 43 2e 00 	mov.b	#0,	46(r1)	;r3 As==00, 0x002e(r1)
    a820:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    a824:	81 43 30 00 	mov	#0,	48(r1)	;r3 As==00, 0x0030(r1)
    a828:	81 43 26 00 	mov	#0,	38(r1)	;r3 As==00, 0x0026(r1)
    a82c:	07 43       	clr	r7		
    a82e:	81 43 2c 00 	mov	#0,	44(r1)	;r3 As==00, 0x002c(r1)
    a832:	0e 41       	mov	r1,	r14	
    a834:	3e 50 1c 00 	add	#28,	r14	;#0x001c
    a838:	81 4e 1c 00 	mov	r14,	28(r1)	;0x001c(r1)
    a83c:	30 40 6e ae 	br	#0xae6e	
    a840:	0f 46       	mov	r6,	r15	
    a842:	1f 53       	inc	r15		
    a844:	81 4f 40 00 	mov	r15,	64(r1)	;0x0040(r1)
    a848:	07 93       	tst	r7		
    a84a:	1e 20       	jnz	$+62     	;abs 0xa888
    a84c:	7e 90 25 00 	cmp.b	#37,	r14	;#0x0025
    a850:	13 20       	jnz	$+40     	;abs 0xa878
    a852:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00, 0x0000(r1)
    a856:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00, 0x0002(r1)
    a85a:	81 46 3e 00 	mov	r6,	62(r1)	;0x003e(r1)
    a85e:	c1 43 2f 00 	mov.b	#0,	47(r1)	;r3 As==00, 0x002f(r1)
    a862:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    a866:	c1 43 2e 00 	mov.b	#0,	46(r1)	;r3 As==00, 0x002e(r1)
    a86a:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    a86e:	81 43 30 00 	mov	#0,	48(r1)	;r3 As==00, 0x0030(r1)
    a872:	30 40 64 ae 	br	#0xae64	
    a876:	05 47       	mov	r7,	r5	
    a878:	8e 11       	sxt	r14		
    a87a:	0f 4e       	mov	r14,	r15	
    a87c:	91 12 3c 00 	call	60(r1)		;0x003c(r1)
    a880:	91 53 2c 00 	inc	44(r1)		;0x002c(r1)
    a884:	30 40 4a ae 	br	#0xae4a	
    a888:	7e 90 63 00 	cmp.b	#99,	r14	;#0x0063
    a88c:	c5 24       	jz	$+396    	;abs 0xaa18
    a88e:	7e 90 64 00 	cmp.b	#100,	r14	;#0x0064
    a892:	27 34       	jge	$+80     	;abs 0xa8e2
    a894:	7e 90 30 00 	cmp.b	#48,	r14	;#0x0030
    a898:	94 24       	jz	$+298    	;abs 0xa9c2
    a89a:	7e 90 31 00 	cmp.b	#49,	r14	;#0x0031
    a89e:	1a 34       	jge	$+54     	;abs 0xa8d4
    a8a0:	7e 90 2a 00 	cmp.b	#42,	r14	;#0x002a
    a8a4:	77 24       	jz	$+240    	;abs 0xa994
    a8a6:	7e 90 2b 00 	cmp.b	#43,	r14	;#0x002b
    a8aa:	0a 34       	jge	$+22     	;abs 0xa8c0
    a8ac:	7e 90 23 00 	cmp.b	#35,	r14	;#0x0023
    a8b0:	42 24       	jz	$+134    	;abs 0xa936
    a8b2:	7e 90 25 00 	cmp.b	#37,	r14	;#0x0025
    a8b6:	e0 27       	jz	$-62     	;abs 0xa878
    a8b8:	7e 90 20 00 	cmp.b	#32,	r14	;#0x0020
    a8bc:	32 20       	jnz	$+102    	;abs 0xa922
    a8be:	56 3c       	jmp	$+174    	;abs 0xa96c
    a8c0:	7e 90 2d 00 	cmp.b	#45,	r14	;#0x002d
    a8c4:	49 24       	jz	$+148    	;abs 0xa958
    a8c6:	7e 90 2e 00 	cmp.b	#46,	r14	;#0x002e
    a8ca:	5b 24       	jz	$+184    	;abs 0xa982
    a8cc:	7e 90 2b 00 	cmp.b	#43,	r14	;#0x002b
    a8d0:	28 20       	jnz	$+82     	;abs 0xa922
    a8d2:	47 3c       	jmp	$+144    	;abs 0xa962
    a8d4:	7e 90 3a 00 	cmp.b	#58,	r14	;#0x003a
    a8d8:	8c 38       	jl	$+282    	;abs 0xa9f2
    a8da:	7e 90 58 00 	cmp.b	#88,	r14	;#0x0058
    a8de:	21 20       	jnz	$+68     	;abs 0xa922
    a8e0:	e9 3c       	jmp	$+468    	;abs 0xaab4
    a8e2:	7e 90 6f 00 	cmp.b	#111,	r14	;#0x006f
    a8e6:	24 24       	jz	$+74     	;abs 0xa930
    a8e8:	7e 90 70 00 	cmp.b	#112,	r14	;#0x0070
    a8ec:	0a 34       	jge	$+22     	;abs 0xa902
    a8ee:	7e 90 69 00 	cmp.b	#105,	r14	;#0x0069
    a8f2:	e3 24       	jz	$+456    	;abs 0xaaba
    a8f4:	7e 90 6c 00 	cmp.b	#108,	r14	;#0x006c
    a8f8:	22 24       	jz	$+70     	;abs 0xa93e
    a8fa:	7e 90 64 00 	cmp.b	#100,	r14	;#0x0064
    a8fe:	11 20       	jnz	$+36     	;abs 0xa922
    a900:	dc 3c       	jmp	$+442    	;abs 0xaaba
    a902:	7e 90 73 00 	cmp.b	#115,	r14	;#0x0073
    a906:	98 24       	jz	$+306    	;abs 0xaa38
    a908:	7e 90 74 00 	cmp.b	#116,	r14	;#0x0074
    a90c:	04 34       	jge	$+10     	;abs 0xa916
    a90e:	7e 90 70 00 	cmp.b	#112,	r14	;#0x0070
    a912:	07 20       	jnz	$+16     	;abs 0xa922
    a914:	b8 3c       	jmp	$+370    	;abs 0xaa86
    a916:	7e 90 75 00 	cmp.b	#117,	r14	;#0x0075
    a91a:	d1 24       	jz	$+420    	;abs 0xaabe
    a91c:	7e 90 78 00 	cmp.b	#120,	r14	;#0x0078
    a920:	d2 24       	jz	$+422    	;abs 0xaac6
    a922:	19 41 3e 00 	mov	62(r1),	r9	;0x003e(r1)
    a926:	18 41 2c 00 	mov	44(r1),	r8	;0x002c(r1)
    a92a:	08 89       	sub	r9,	r8	
    a92c:	30 40 38 ae 	br	#0xae38	
    a930:	b1 42 28 00 	mov	#8,	40(r1)	;r2 As==11, 0x0028(r1)
    a934:	cb 3c       	jmp	$+408    	;abs 0xaacc
    a936:	f1 d2 00 00 	bis.b	#8,	0(r1)	;r2 As==11, 0x0000(r1)
    a93a:	30 40 68 ae 	br	#0xae68	
    a93e:	69 41       	mov.b	@r1,	r9	
    a940:	59 f3       	and.b	#1,	r9	;r3 As==01
    a942:	6e 41       	mov.b	@r1,	r14	
    a944:	04 24       	jz	$+10     	;abs 0xa94e
    a946:	7e f0 fe ff 	and.b	#-2,	r14	;#0xfffe
    a94a:	6e d3       	bis.b	#2,	r14	;r3 As==10
    a94c:	01 3c       	jmp	$+4      	;abs 0xa950
    a94e:	5e d3       	bis.b	#1,	r14	;r3 As==01
    a950:	c1 4e 00 00 	mov.b	r14,	0(r1)	;0x0000(r1)
    a954:	30 40 68 ae 	br	#0xae68	
    a958:	f1 d0 10 00 	bis.b	#16,	0(r1)	;#0x0010, 0x0000(r1)
    a95c:	00 00 
    a95e:	30 40 68 ae 	br	#0xae68	
    a962:	f1 40 2b 00 	mov.b	#43,	2(r1)	;#0x002b, 0x0002(r1)
    a966:	02 00 
    a968:	30 40 68 ae 	br	#0xae68	
    a96c:	f1 90 2b 00 	cmp.b	#43,	2(r1)	;#0x002b, 0x0002(r1)
    a970:	02 00 
    a972:	02 20       	jnz	$+6      	;abs 0xa978
    a974:	30 40 68 ae 	br	#0xae68	
    a978:	f1 40 20 00 	mov.b	#32,	2(r1)	;#0x0020, 0x0002(r1)
    a97c:	02 00 
    a97e:	30 40 68 ae 	br	#0xae68	
    a982:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    a986:	02 24       	jz	$+6      	;abs 0xa98c
    a988:	30 40 4e ae 	br	#0xae4e	
    a98c:	d1 43 2e 00 	mov.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    a990:	30 40 68 ae 	br	#0xae68	
    a994:	0e 45       	mov	r5,	r14	
    a996:	2e 53       	incd	r14		
    a998:	2a 45       	mov	@r5,	r10	
    a99a:	0a 93       	tst	r10		
    a99c:	03 38       	jl	$+8      	;abs 0xa9a4
    a99e:	81 4a 26 00 	mov	r10,	38(r1)	;0x0026(r1)
    a9a2:	0d 3c       	jmp	$+28     	;abs 0xa9be
    a9a4:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    a9a8:	02 24       	jz	$+6      	;abs 0xa9ae
    a9aa:	30 40 5e ae 	br	#0xae5e	
    a9ae:	f1 d0 10 00 	bis.b	#16,	0(r1)	;#0x0010, 0x0000(r1)
    a9b2:	00 00 
    a9b4:	3a e3       	inv	r10		
    a9b6:	81 4a 26 00 	mov	r10,	38(r1)	;0x0026(r1)
    a9ba:	91 53 26 00 	inc	38(r1)		;0x0026(r1)
    a9be:	05 4e       	mov	r14,	r5	
    a9c0:	27 3c       	jmp	$+80     	;abs 0xaa10
    a9c2:	81 93 26 00 	tst	38(r1)		;0x0026(r1)
    a9c6:	15 20       	jnz	$+44     	;abs 0xa9f2
    a9c8:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    a9cc:	12 20       	jnz	$+38     	;abs 0xa9f2
    a9ce:	69 41       	mov.b	@r1,	r9	
    a9d0:	79 f0 10 00 	and.b	#16,	r9	;#0x0010
    a9d4:	5e 43       	mov.b	#1,	r14	;r3 As==01
    a9d6:	01 24       	jz	$+4      	;abs 0xa9da
    a9d8:	4e 43       	clr.b	r14		
    a9da:	4e 4e       	mov.b	r14,	r14	
    a9dc:	0e 11       	rra	r14		
    a9de:	0e 43       	clr	r14		
    a9e0:	4e 10       	rrc.b	r14		
    a9e2:	6a 41       	mov.b	@r1,	r10	
    a9e4:	7a f0 7f 00 	and.b	#127,	r10	;#0x007f
    a9e8:	4a de       	bis.b	r14,	r10	
    a9ea:	c1 4a 00 00 	mov.b	r10,	0(r1)	;0x0000(r1)
    a9ee:	30 40 68 ae 	br	#0xae68	
    a9f2:	1a 41 26 00 	mov	38(r1),	r10	;0x0026(r1)
    a9f6:	0a 5a       	rla	r10		
    a9f8:	0c 4a       	mov	r10,	r12	
    a9fa:	0c 5c       	rla	r12		
    a9fc:	0c 5c       	rla	r12		
    a9fe:	0a 5c       	add	r12,	r10	
    aa00:	81 4a 26 00 	mov	r10,	38(r1)	;0x0026(r1)
    aa04:	b1 50 d0 ff 	add	#-48,	38(r1)	;#0xffd0, 0x0026(r1)
    aa08:	26 00 
    aa0a:	8e 11       	sxt	r14		
    aa0c:	81 5e 26 00 	add	r14,	38(r1)	;0x0026(r1)
    aa10:	d1 43 2a 00 	mov.b	#1,	42(r1)	;r3 As==01, 0x002a(r1)
    aa14:	30 40 68 ae 	br	#0xae68	
    aa18:	07 45       	mov	r5,	r7	
    aa1a:	27 53       	incd	r7		
    aa1c:	6e 45       	mov.b	@r5,	r14	
    aa1e:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    aa22:	03 20       	jnz	$+8      	;abs 0xaa2a
    aa24:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    aa28:	26 27       	jz	$-434    	;abs 0xa876
    aa2a:	c1 4e 04 00 	mov.b	r14,	4(r1)	;0x0004(r1)
    aa2e:	c1 43 05 00 	mov.b	#0,	5(r1)	;r3 As==00, 0x0005(r1)
    aa32:	0e 41       	mov	r1,	r14	
    aa34:	2e 52       	add	#4,	r14	;r2 As==10
    aa36:	03 3c       	jmp	$+8      	;abs 0xaa3e
    aa38:	07 45       	mov	r5,	r7	
    aa3a:	27 53       	incd	r7		
    aa3c:	2e 45       	mov	@r5,	r14	
    aa3e:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    aa42:	07 24       	jz	$+16     	;abs 0xaa52
    aa44:	e1 d2 01 00 	bis.b	#4,	1(r1)	;r2 As==10, 0x0001(r1)
    aa48:	1f 41 26 00 	mov	38(r1),	r15	;0x0026(r1)
    aa4c:	c1 4f 03 00 	mov.b	r15,	3(r1)	;0x0003(r1)
    aa50:	06 3c       	jmp	$+14     	;abs 0xaa5e
    aa52:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    aa56:	03 24       	jz	$+8      	;abs 0xaa5e
    aa58:	91 41 26 00 	mov	38(r1),	48(r1)	;0x0026(r1), 0x0030(r1)
    aa5c:	30 00 
    aa5e:	0e 93       	tst	r14		
    aa60:	02 20       	jnz	$+6      	;abs 0xaa66
    aa62:	3e 40 5a b1 	mov	#-20134,r14	;#0xb15a
    aa66:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    aa6a:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    aa6e:	1d 41 34 00 	mov	52(r1),	r13	;0x0034(r1)
    aa72:	1f 41 3e 00 	mov	62(r1),	r15	;0x003e(r1)
    aa76:	b0 12 5c a6 	call	#0xa65c	
    aa7a:	21 52       	add	#4,	r1	;r2 As==10
    aa7c:	81 5f 2c 00 	add	r15,	44(r1)	;0x002c(r1)
    aa80:	05 47       	mov	r7,	r5	
    aa82:	30 40 4a ae 	br	#0xae4a	
    aa86:	07 45       	mov	r5,	r7	
    aa88:	27 53       	incd	r7		
    aa8a:	29 45       	mov	@r5,	r9	
    aa8c:	81 49 1e 00 	mov	r9,	30(r1)	;0x001e(r1)
    aa90:	5e 43       	mov.b	#1,	r14	;r3 As==01
    aa92:	09 93       	tst	r9		
    aa94:	01 20       	jnz	$+4      	;abs 0xaa98
    aa96:	4e 43       	clr.b	r14		
    aa98:	4e 5e       	rla.b	r14		
    aa9a:	4e 5e       	rla.b	r14		
    aa9c:	4e 5e       	rla.b	r14		
    aa9e:	6a 41       	mov.b	@r1,	r10	
    aaa0:	7a f0 f7 ff 	and.b	#-9,	r10	;#0xfff7
    aaa4:	4a de       	bis.b	r14,	r10	
    aaa6:	c1 4a 00 00 	mov.b	r10,	0(r1)	;0x0000(r1)
    aaaa:	05 47       	mov	r7,	r5	
    aaac:	b1 40 10 00 	mov	#16,	40(r1)	;#0x0010, 0x0028(r1)
    aab0:	28 00 
    aab2:	53 3c       	jmp	$+168    	;abs 0xab5a
    aab4:	d1 d3 01 00 	bis.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    aab8:	06 3c       	jmp	$+14     	;abs 0xaac6
    aaba:	e1 d2 00 00 	bis.b	#4,	0(r1)	;r2 As==10, 0x0000(r1)
    aabe:	b1 40 0a 00 	mov	#10,	40(r1)	;#0x000a, 0x0028(r1)
    aac2:	28 00 
    aac4:	03 3c       	jmp	$+8      	;abs 0xaacc
    aac6:	b1 40 10 00 	mov	#16,	40(r1)	;#0x0010, 0x0028(r1)
    aaca:	28 00 
    aacc:	6b 41       	mov.b	@r1,	r11	
    aace:	6b b3       	bit.b	#2,	r11	;r3 As==10
    aad0:	24 24       	jz	$+74     	;abs 0xab1a
    aad2:	0c 45       	mov	r5,	r12	
    aad4:	3c 52       	add	#8,	r12	;r2 As==11
    aad6:	28 45       	mov	@r5,	r8	
    aad8:	17 45 02 00 	mov	2(r5),	r7	;0x0002(r5)
    aadc:	16 45 04 00 	mov	4(r5),	r6	;0x0004(r5)
    aae0:	1b 45 06 00 	mov	6(r5),	r11	;0x0006(r5)
    aae4:	81 48 1e 00 	mov	r8,	30(r1)	;0x001e(r1)
    aae8:	81 47 20 00 	mov	r7,	32(r1)	;0x0020(r1)
    aaec:	81 46 22 00 	mov	r6,	34(r1)	;0x0022(r1)
    aaf0:	81 4b 24 00 	mov	r11,	36(r1)	;0x0024(r1)
    aaf4:	d1 43 2b 00 	mov.b	#1,	43(r1)	;r3 As==01, 0x002b(r1)
    aaf8:	08 93       	tst	r8		
    aafa:	06 20       	jnz	$+14     	;abs 0xab08
    aafc:	07 93       	tst	r7		
    aafe:	04 20       	jnz	$+10     	;abs 0xab08
    ab00:	06 93       	tst	r6		
    ab02:	02 20       	jnz	$+6      	;abs 0xab08
    ab04:	0b 93       	tst	r11		
    ab06:	02 24       	jz	$+6      	;abs 0xab0c
    ab08:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    ab0c:	0b 5b       	rla	r11		
    ab0e:	0b 43       	clr	r11		
    ab10:	0b 6b       	rlc	r11		
    ab12:	c1 4b 2f 00 	mov.b	r11,	47(r1)	;0x002f(r1)
    ab16:	05 4c       	mov	r12,	r5	
    ab18:	20 3c       	jmp	$+66     	;abs 0xab5a
    ab1a:	5b f3       	and.b	#1,	r11	;r3 As==01
    ab1c:	07 45       	mov	r5,	r7	
    ab1e:	0d 24       	jz	$+28     	;abs 0xab3a
    ab20:	27 52       	add	#4,	r7	;r2 As==10
    ab22:	28 45       	mov	@r5,	r8	
    ab24:	1b 45 02 00 	mov	2(r5),	r11	;0x0002(r5)
    ab28:	81 48 1e 00 	mov	r8,	30(r1)	;0x001e(r1)
    ab2c:	81 4b 20 00 	mov	r11,	32(r1)	;0x0020(r1)
    ab30:	d1 43 2b 00 	mov.b	#1,	43(r1)	;r3 As==01, 0x002b(r1)
    ab34:	08 93       	tst	r8		
    ab36:	09 20       	jnz	$+20     	;abs 0xab4a
    ab38:	06 3c       	jmp	$+14     	;abs 0xab46
    ab3a:	27 53       	incd	r7		
    ab3c:	2b 45       	mov	@r5,	r11	
    ab3e:	81 4b 1e 00 	mov	r11,	30(r1)	;0x001e(r1)
    ab42:	d1 43 2b 00 	mov.b	#1,	43(r1)	;r3 As==01, 0x002b(r1)
    ab46:	0b 93       	tst	r11		
    ab48:	02 24       	jz	$+6      	;abs 0xab4e
    ab4a:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    ab4e:	0b 5b       	rla	r11		
    ab50:	0b 43       	clr	r11		
    ab52:	0b 6b       	rlc	r11		
    ab54:	c1 4b 2f 00 	mov.b	r11,	47(r1)	;0x002f(r1)
    ab58:	05 47       	mov	r7,	r5	
    ab5a:	f1 b2 00 00 	bit.b	#8,	0(r1)	;r2 As==11, 0x0000(r1)
    ab5e:	12 24       	jz	$+38     	;abs 0xab84
    ab60:	c1 93 2b 00 	tst.b	43(r1)		;0x002b(r1)
    ab64:	0f 20       	jnz	$+32     	;abs 0xab84
    ab66:	68 41       	mov.b	@r1,	r8	
    ab68:	b1 90 10 00 	cmp	#16,	40(r1)	;#0x0010, 0x0028(r1)
    ab6c:	28 00 
    ab6e:	03 20       	jnz	$+8      	;abs 0xab76
    ab70:	78 d0 40 00 	bis.b	#64,	r8	;#0x0040
    ab74:	05 3c       	jmp	$+12     	;abs 0xab80
    ab76:	b1 92 28 00 	cmp	#8,	40(r1)	;r2 As==11, 0x0028(r1)
    ab7a:	04 20       	jnz	$+10     	;abs 0xab84
    ab7c:	78 d0 20 00 	bis.b	#32,	r8	;#0x0020
    ab80:	c1 48 00 00 	mov.b	r8,	0(r1)	;0x0000(r1)
    ab84:	68 41       	mov.b	@r1,	r8	
    ab86:	68 b2       	bit.b	#4,	r8	;r2 As==10
    ab88:	30 24       	jz	$+98     	;abs 0xabea
    ab8a:	c1 93 2f 00 	tst.b	47(r1)		;0x002f(r1)
    ab8e:	2d 24       	jz	$+92     	;abs 0xabea
    ab90:	f1 40 2d 00 	mov.b	#45,	2(r1)	;#0x002d, 0x0002(r1)
    ab94:	02 00 
    ab96:	68 b3       	bit.b	#2,	r8	;r3 As==10
    ab98:	11 24       	jz	$+36     	;abs 0xabbc
    ab9a:	b1 e3 1e 00 	xor	#-1,	30(r1)	;r3 As==11, 0x001e(r1)
    ab9e:	b1 e3 20 00 	xor	#-1,	32(r1)	;r3 As==11, 0x0020(r1)
    aba2:	b1 e3 22 00 	xor	#-1,	34(r1)	;r3 As==11, 0x0022(r1)
    aba6:	b1 e3 24 00 	xor	#-1,	36(r1)	;r3 As==11, 0x0024(r1)
    abaa:	91 53 1e 00 	inc	30(r1)		;0x001e(r1)
    abae:	81 63 20 00 	adc	32(r1)		;0x0020(r1)
    abb2:	81 63 22 00 	adc	34(r1)		;0x0022(r1)
    abb6:	81 63 24 00 	adc	36(r1)		;0x0024(r1)
    abba:	17 3c       	jmp	$+48     	;abs 0xabea
    abbc:	58 b3       	bit.b	#1,	r8	;r3 As==01
    abbe:	0f 24       	jz	$+32     	;abs 0xabde
    abc0:	1a 41 1e 00 	mov	30(r1),	r10	;0x001e(r1)
    abc4:	1b 41 20 00 	mov	32(r1),	r11	;0x0020(r1)
    abc8:	3a e3       	inv	r10		
    abca:	3b e3       	inv	r11		
    abcc:	0e 4a       	mov	r10,	r14	
    abce:	0f 4b       	mov	r11,	r15	
    abd0:	1e 53       	inc	r14		
    abd2:	0f 63       	adc	r15		
    abd4:	81 4e 1e 00 	mov	r14,	30(r1)	;0x001e(r1)
    abd8:	81 4f 20 00 	mov	r15,	32(r1)	;0x0020(r1)
    abdc:	06 3c       	jmp	$+14     	;abs 0xabea
    abde:	1a 41 1e 00 	mov	30(r1),	r10	;0x001e(r1)
    abe2:	3a e3       	inv	r10		
    abe4:	1a 53       	inc	r10		
    abe6:	81 4a 1e 00 	mov	r10,	30(r1)	;0x001e(r1)
    abea:	c1 43 1b 00 	mov.b	#0,	27(r1)	;r3 As==00, 0x001b(r1)
    abee:	68 b3       	bit.b	#2,	r8	;r3 As==10
    abf0:	6a 24       	jz	$+214    	;abs 0xacc6
    abf2:	16 41 1e 00 	mov	30(r1),	r6	;0x001e(r1)
    abf6:	91 41 20 00 	mov	32(r1),	60(r1)	;0x0020(r1), 0x003c(r1)
    abfa:	3c 00 
    abfc:	18 41 22 00 	mov	34(r1),	r8	;0x0022(r1)
    ac00:	14 41 24 00 	mov	36(r1),	r4	;0x0024(r1)
    ac04:	07 41       	mov	r1,	r7	
    ac06:	37 50 1a 00 	add	#26,	r7	;#0x001a
    ac0a:	09 46       	mov	r6,	r9	
    ac0c:	91 41 28 00 	mov	40(r1),	50(r1)	;0x0028(r1), 0x0032(r1)
    ac10:	32 00 
    ac12:	1b 41 28 00 	mov	40(r1),	r11	;0x0028(r1)
    ac16:	8b 10       	swpb	r11		
    ac18:	8b 11       	sxt	r11		
    ac1a:	8b 10       	swpb	r11		
    ac1c:	8b 11       	sxt	r11		
    ac1e:	81 4b 34 00 	mov	r11,	52(r1)	;0x0034(r1)
    ac22:	81 4b 36 00 	mov	r11,	54(r1)	;0x0036(r1)
    ac26:	81 4b 38 00 	mov	r11,	56(r1)	;0x0038(r1)
    ac2a:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac2e:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac32:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac36:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac3a:	0c 49       	mov	r9,	r12	
    ac3c:	1d 41 44 00 	mov	68(r1),	r13	;0x0044(r1)
    ac40:	0e 48       	mov	r8,	r14	
    ac42:	0f 44       	mov	r4,	r15	
    ac44:	b0 12 82 af 	call	#0xaf82	
    ac48:	31 52       	add	#8,	r1	;r2 As==11
    ac4a:	0b 4c       	mov	r12,	r11	
    ac4c:	3c 90 0a 00 	cmp	#10,	r12	;#0x000a
    ac50:	05 34       	jge	$+12     	;abs 0xac5c
    ac52:	7b 50 30 00 	add.b	#48,	r11	;#0x0030
    ac56:	c7 4b 00 00 	mov.b	r11,	0(r7)	;0x0000(r7)
    ac5a:	0c 3c       	jmp	$+26     	;abs 0xac74
    ac5c:	4b 4c       	mov.b	r12,	r11	
    ac5e:	d1 b3 01 00 	bit.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    ac62:	03 24       	jz	$+8      	;abs 0xac6a
    ac64:	7a 40 37 00 	mov.b	#55,	r10	;#0x0037
    ac68:	02 3c       	jmp	$+6      	;abs 0xac6e
    ac6a:	7a 40 57 00 	mov.b	#87,	r10	;#0x0057
    ac6e:	4a 5b       	add.b	r11,	r10	
    ac70:	c7 4a 00 00 	mov.b	r10,	0(r7)	;0x0000(r7)
    ac74:	06 47       	mov	r7,	r6	
    ac76:	36 53       	add	#-1,	r6	;r3 As==11
    ac78:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac7c:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac80:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac84:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac88:	0c 49       	mov	r9,	r12	
    ac8a:	1d 41 44 00 	mov	68(r1),	r13	;0x0044(r1)
    ac8e:	0e 48       	mov	r8,	r14	
    ac90:	0f 44       	mov	r4,	r15	
    ac92:	b0 12 5c af 	call	#0xaf5c	
    ac96:	31 52       	add	#8,	r1	;r2 As==11
    ac98:	09 4c       	mov	r12,	r9	
    ac9a:	81 4d 3c 00 	mov	r13,	60(r1)	;0x003c(r1)
    ac9e:	08 4e       	mov	r14,	r8	
    aca0:	04 4f       	mov	r15,	r4	
    aca2:	37 53       	add	#-1,	r7	;r3 As==11
    aca4:	0c 93       	tst	r12		
    aca6:	b2 23       	jnz	$-154    	;abs 0xac0c
    aca8:	0d 93       	tst	r13		
    acaa:	b0 23       	jnz	$-158    	;abs 0xac0c
    acac:	0e 93       	tst	r14		
    acae:	ae 23       	jnz	$-162    	;abs 0xac0c
    acb0:	0f 93       	tst	r15		
    acb2:	ac 23       	jnz	$-166    	;abs 0xac0c
    acb4:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e(r1)
    acb8:	81 43 20 00 	mov	#0,	32(r1)	;r3 As==00, 0x0020(r1)
    acbc:	81 43 22 00 	mov	#0,	34(r1)	;r3 As==00, 0x0022(r1)
    acc0:	81 43 24 00 	mov	#0,	36(r1)	;r3 As==00, 0x0024(r1)
    acc4:	6c 3c       	jmp	$+218    	;abs 0xad9e
    acc6:	58 b3       	bit.b	#1,	r8	;r3 As==01
    acc8:	3e 24       	jz	$+126    	;abs 0xad46
    acca:	14 41 1e 00 	mov	30(r1),	r4	;0x001e(r1)
    acce:	17 41 20 00 	mov	32(r1),	r7	;0x0020(r1)
    acd2:	08 41       	mov	r1,	r8	
    acd4:	38 50 1a 00 	add	#26,	r8	;#0x001a
    acd8:	19 41 28 00 	mov	40(r1),	r9	;0x0028(r1)
    acdc:	89 10       	swpb	r9		
    acde:	89 11       	sxt	r9		
    ace0:	89 10       	swpb	r9		
    ace2:	89 11       	sxt	r9		
    ace4:	1c 41 28 00 	mov	40(r1),	r12	;0x0028(r1)
    ace8:	0d 49       	mov	r9,	r13	
    acea:	0e 44       	mov	r4,	r14	
    acec:	0f 47       	mov	r7,	r15	
    acee:	b0 12 f4 ae 	call	#0xaef4	
    acf2:	0b 4e       	mov	r14,	r11	
    acf4:	3e 90 0a 00 	cmp	#10,	r14	;#0x000a
    acf8:	05 34       	jge	$+12     	;abs 0xad04
    acfa:	7b 50 30 00 	add.b	#48,	r11	;#0x0030
    acfe:	c8 4b 00 00 	mov.b	r11,	0(r8)	;0x0000(r8)
    ad02:	0c 3c       	jmp	$+26     	;abs 0xad1c
    ad04:	4b 4e       	mov.b	r14,	r11	
    ad06:	d1 b3 01 00 	bit.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    ad0a:	03 24       	jz	$+8      	;abs 0xad12
    ad0c:	7a 40 37 00 	mov.b	#55,	r10	;#0x0037
    ad10:	02 3c       	jmp	$+6      	;abs 0xad16
    ad12:	7a 40 57 00 	mov.b	#87,	r10	;#0x0057
    ad16:	4a 5b       	add.b	r11,	r10	
    ad18:	c8 4a 00 00 	mov.b	r10,	0(r8)	;0x0000(r8)
    ad1c:	06 48       	mov	r8,	r6	
    ad1e:	36 53       	add	#-1,	r6	;r3 As==11
    ad20:	1c 41 28 00 	mov	40(r1),	r12	;0x0028(r1)
    ad24:	0d 49       	mov	r9,	r13	
    ad26:	0e 44       	mov	r4,	r14	
    ad28:	0f 47       	mov	r7,	r15	
    ad2a:	b0 12 be ae 	call	#0xaebe	
    ad2e:	04 4e       	mov	r14,	r4	
    ad30:	07 4f       	mov	r15,	r7	
    ad32:	38 53       	add	#-1,	r8	;r3 As==11
    ad34:	0e 93       	tst	r14		
    ad36:	d0 23       	jnz	$-94     	;abs 0xacd8
    ad38:	0f 93       	tst	r15		
    ad3a:	ce 23       	jnz	$-98     	;abs 0xacd8
    ad3c:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e(r1)
    ad40:	81 43 20 00 	mov	#0,	32(r1)	;r3 As==00, 0x0020(r1)
    ad44:	2c 3c       	jmp	$+90     	;abs 0xad9e
    ad46:	17 41 1e 00 	mov	30(r1),	r7	;0x001e(r1)
    ad4a:	08 41       	mov	r1,	r8	
    ad4c:	38 50 1a 00 	add	#26,	r8	;#0x001a
    ad50:	1e 41 28 00 	mov	40(r1),	r14	;0x0028(r1)
    ad54:	0f 47       	mov	r7,	r15	
    ad56:	b0 12 80 a4 	call	#0xa480	
    ad5a:	0d 4f       	mov	r15,	r13	
    ad5c:	3f 90 0a 00 	cmp	#10,	r15	;#0x000a
    ad60:	05 34       	jge	$+12     	;abs 0xad6c
    ad62:	7d 50 30 00 	add.b	#48,	r13	;#0x0030
    ad66:	c8 4d 00 00 	mov.b	r13,	0(r8)	;0x0000(r8)
    ad6a:	0c 3c       	jmp	$+26     	;abs 0xad84
    ad6c:	4d 4f       	mov.b	r15,	r13	
    ad6e:	d1 b3 01 00 	bit.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    ad72:	03 24       	jz	$+8      	;abs 0xad7a
    ad74:	7c 40 37 00 	mov.b	#55,	r12	;#0x0037
    ad78:	02 3c       	jmp	$+6      	;abs 0xad7e
    ad7a:	7c 40 57 00 	mov.b	#87,	r12	;#0x0057
    ad7e:	4c 5d       	add.b	r13,	r12	
    ad80:	c8 4c 00 00 	mov.b	r12,	0(r8)	;0x0000(r8)
    ad84:	06 48       	mov	r8,	r6	
    ad86:	36 53       	add	#-1,	r6	;r3 As==11
    ad88:	1e 41 28 00 	mov	40(r1),	r14	;0x0028(r1)
    ad8c:	0f 47       	mov	r7,	r15	
    ad8e:	b0 12 66 a4 	call	#0xa466	
    ad92:	07 4f       	mov	r15,	r7	
    ad94:	38 53       	add	#-1,	r8	;r3 As==11
    ad96:	0f 93       	tst	r15		
    ad98:	db 23       	jnz	$-72     	;abs 0xad50
    ad9a:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e(r1)
    ad9e:	b1 90 0a 00 	cmp	#10,	40(r1)	;#0x000a, 0x0028(r1)
    ada2:	28 00 
    ada4:	02 24       	jz	$+6      	;abs 0xadaa
    ada6:	c1 43 02 00 	mov.b	#0,	2(r1)	;r3 As==00, 0x0002(r1)
    adaa:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    adae:	2a 24       	jz	$+86     	;abs 0xae04
    adb0:	0f 41       	mov	r1,	r15	
    adb2:	3f 50 1c 00 	add	#28,	r15	;#0x001c
    adb6:	81 4f 42 00 	mov	r15,	66(r1)	;0x0042(r1)
    adba:	1a 41 1c 00 	mov	28(r1),	r10	;0x001c(r1)
    adbe:	8a 10       	swpb	r10		
    adc0:	8a 11       	sxt	r10		
    adc2:	8a 10       	swpb	r10		
    adc4:	8a 11       	sxt	r10		
    adc6:	81 4a 44 00 	mov	r10,	68(r1)	;0x0044(r1)
    adca:	81 46 46 00 	mov	r6,	70(r1)	;0x0046(r1)
    adce:	0a 46       	mov	r6,	r10	
    add0:	8a 10       	swpb	r10		
    add2:	8a 11       	sxt	r10		
    add4:	8a 10       	swpb	r10		
    add6:	8a 11       	sxt	r10		
    add8:	81 4a 48 00 	mov	r10,	72(r1)	;0x0048(r1)
    addc:	1c 41 42 00 	mov	66(r1),	r12	;0x0042(r1)
    ade0:	1d 41 44 00 	mov	68(r1),	r13	;0x0044(r1)
    ade4:	1c 81 46 00 	sub	70(r1),	r12	;0x0046(r1)
    ade8:	1d 71 48 00 	subc	72(r1),	r13	;0x0048(r1)
    adec:	2c 83       	decd	r12		
    adee:	1c 91 26 00 	cmp	38(r1),	r12	;0x0026(r1)
    adf2:	0e 2c       	jc	$+30     	;abs 0xae10
    adf4:	e1 d3 01 00 	bis.b	#2,	1(r1)	;r3 As==10, 0x0001(r1)
    adf8:	5e 41 26 00 	mov.b	38(r1),	r14	;0x0026(r1)
    adfc:	4e 8c       	sub.b	r12,	r14	
    adfe:	c1 4e 03 00 	mov.b	r14,	3(r1)	;0x0003(r1)
    ae02:	06 3c       	jmp	$+14     	;abs 0xae10
    ae04:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    ae08:	03 24       	jz	$+8      	;abs 0xae10
    ae0a:	91 41 26 00 	mov	38(r1),	48(r1)	;0x0026(r1), 0x0030(r1)
    ae0e:	30 00 
    ae10:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    ae14:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    ae18:	1d 41 34 00 	mov	52(r1),	r13	;0x0034(r1)
    ae1c:	0e 46       	mov	r6,	r14	
    ae1e:	1e 53       	inc	r14		
    ae20:	1f 41 3e 00 	mov	62(r1),	r15	;0x003e(r1)
    ae24:	b0 12 5c a6 	call	#0xa65c	
    ae28:	21 52       	add	#4,	r1	;r2 As==10
    ae2a:	81 5f 2c 00 	add	r15,	44(r1)	;0x002c(r1)
    ae2e:	0d 3c       	jmp	$+28     	;abs 0xae4a
    ae30:	7f 49       	mov.b	@r9+,	r15	
    ae32:	8f 11       	sxt	r15		
    ae34:	91 12 3c 00 	call	60(r1)		;0x003c(r1)
    ae38:	0e 49       	mov	r9,	r14	
    ae3a:	0e 58       	add	r8,	r14	
    ae3c:	19 91 40 00 	cmp	64(r1),	r9	;0x0040(r1)
    ae40:	f7 2b       	jnc	$-16     	;abs 0xae30
    ae42:	81 49 3e 00 	mov	r9,	62(r1)	;0x003e(r1)
    ae46:	81 4e 2c 00 	mov	r14,	44(r1)	;0x002c(r1)
    ae4a:	07 43       	clr	r7		
    ae4c:	0e 3c       	jmp	$+30     	;abs 0xae6a
    ae4e:	91 41 26 00 	mov	38(r1),	48(r1)	;0x0026(r1), 0x0030(r1)
    ae52:	30 00 
    ae54:	d1 43 2e 00 	mov.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    ae58:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    ae5c:	03 3c       	jmp	$+8      	;abs 0xae64
    ae5e:	05 4e       	mov	r14,	r5	
    ae60:	d1 43 2a 00 	mov.b	#1,	42(r1)	;r3 As==01, 0x002a(r1)
    ae64:	81 43 26 00 	mov	#0,	38(r1)	;r3 As==00, 0x0026(r1)
    ae68:	17 43       	mov	#1,	r7	;r3 As==01
    ae6a:	16 41 40 00 	mov	64(r1),	r6	;0x0040(r1)
    ae6e:	6e 46       	mov.b	@r6,	r14	
    ae70:	4e 93       	tst.b	r14		
    ae72:	02 24       	jz	$+6      	;abs 0xae78
    ae74:	30 40 40 a8 	br	#0xa840	
    ae78:	1f 41 2c 00 	mov	44(r1),	r15	;0x002c(r1)
    ae7c:	31 50 4a 00 	add	#74,	r1	;#0x004a
    ae80:	34 41       	pop	r4		
    ae82:	35 41       	pop	r5		
    ae84:	36 41       	pop	r6		
    ae86:	37 41       	pop	r7		
    ae88:	38 41       	pop	r8		
    ae8a:	39 41       	pop	r9		
    ae8c:	3a 41       	pop	r10		
    ae8e:	3b 41       	pop	r11		
    ae90:	30 41       	ret			

0000ae92 <puts>:
    ae92:	0b 12       	push	r11		
    ae94:	0b 4f       	mov	r15,	r11	
    ae96:	6f 4b       	mov.b	@r11,	r15	
    ae98:	4f 93       	tst.b	r15		
    ae9a:	06 24       	jz	$+14     	;abs 0xaea8
    ae9c:	1b 53       	inc	r11		
    ae9e:	8f 11       	sxt	r15		
    aea0:	b0 12 64 a1 	call	#0xa164	
    aea4:	0f 93       	tst	r15		
    aea6:	f7 37       	jge	$-16     	;abs 0xae96
    aea8:	cb 93 00 00 	tst.b	0(r11)		;0x0000(r11)
    aeac:	05 20       	jnz	$+12     	;abs 0xaeb8
    aeae:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    aeb2:	b0 12 64 a1 	call	#0xa164	
    aeb6:	01 3c       	jmp	$+4      	;abs 0xaeba
    aeb8:	3f 43       	mov	#-1,	r15	;r3 As==11
    aeba:	3b 41       	pop	r11		
    aebc:	30 41       	ret			

0000aebe <__udivsi3>:
    aebe:	0b 12       	push	r11		
    aec0:	0a 12       	push	r10		
    aec2:	09 12       	push	r9		
    aec4:	79 40 20 00 	mov.b	#32,	r9	;#0x0020
    aec8:	0a 4c       	mov	r12,	r10	
    aeca:	0b 4d       	mov	r13,	r11	
    aecc:	0c 43       	clr	r12		
    aece:	0d 43       	clr	r13		
    aed0:	0e 5e       	rla	r14		
    aed2:	0f 6f       	rlc	r15		
    aed4:	0c 6c       	rlc	r12		
    aed6:	0d 6d       	rlc	r13		
    aed8:	0d 9b       	cmp	r11,	r13	
    aeda:	06 28       	jnc	$+14     	;abs 0xaee8
    aedc:	02 20       	jnz	$+6      	;abs 0xaee2
    aede:	0c 9a       	cmp	r10,	r12	
    aee0:	03 28       	jnc	$+8      	;abs 0xaee8
    aee2:	0c 8a       	sub	r10,	r12	
    aee4:	0d 7b       	subc	r11,	r13	
    aee6:	1e d3       	bis	#1,	r14	;r3 As==01
    aee8:	19 83       	dec	r9		
    aeea:	f2 23       	jnz	$-26     	;abs 0xaed0
    aeec:	39 41       	pop	r9		
    aeee:	3a 41       	pop	r10		
    aef0:	3b 41       	pop	r11		
    aef2:	30 41       	ret			

0000aef4 <__umodsi3>:
    aef4:	b0 12 be ae 	call	#0xaebe	
    aef8:	0e 4c       	mov	r12,	r14	
    aefa:	0f 4d       	mov	r13,	r15	
    aefc:	30 41       	ret			

0000aefe <__xabi_udivmod64>:
    aefe:	07 12       	push	r7		
    af00:	06 12       	push	r6		
    af02:	05 12       	push	r5		
    af04:	04 12       	push	r4		
    af06:	30 12 40 00 	push	#64		;#0x0040
    af0a:	04 48       	mov	r8,	r4	
    af0c:	05 49       	mov	r9,	r5	
    af0e:	06 4a       	mov	r10,	r6	
    af10:	07 4b       	mov	r11,	r7	
    af12:	08 43       	clr	r8		
    af14:	09 43       	clr	r9		
    af16:	0a 43       	clr	r10		
    af18:	0b 43       	clr	r11		
    af1a:	0c 5c       	rla	r12		
    af1c:	0d 6d       	rlc	r13		
    af1e:	0e 6e       	rlc	r14		
    af20:	0f 6f       	rlc	r15		
    af22:	08 68       	rlc	r8		
    af24:	09 69       	rlc	r9		
    af26:	0a 6a       	rlc	r10		
    af28:	0b 6b       	rlc	r11		
    af2a:	0b 97       	cmp	r7,	r11	
    af2c:	0e 28       	jnc	$+30     	;abs 0xaf4a
    af2e:	08 20       	jnz	$+18     	;abs 0xaf40
    af30:	0a 96       	cmp	r6,	r10	
    af32:	0b 28       	jnc	$+24     	;abs 0xaf4a
    af34:	05 20       	jnz	$+12     	;abs 0xaf40
    af36:	09 95       	cmp	r5,	r9	
    af38:	08 28       	jnc	$+18     	;abs 0xaf4a
    af3a:	02 20       	jnz	$+6      	;abs 0xaf40
    af3c:	08 94       	cmp	r4,	r8	
    af3e:	05 28       	jnc	$+12     	;abs 0xaf4a
    af40:	08 84       	sub	r4,	r8	
    af42:	09 75       	subc	r5,	r9	
    af44:	0a 76       	subc	r6,	r10	
    af46:	0b 77       	subc	r7,	r11	
    af48:	1c d3       	bis	#1,	r12	;r3 As==01
    af4a:	91 83 00 00 	dec	0(r1)		;0x0000(r1)
    af4e:	e5 23       	jnz	$-52     	;abs 0xaf1a
    af50:	21 53       	incd	r1		
    af52:	34 41       	pop	r4		
    af54:	35 41       	pop	r5		
    af56:	36 41       	pop	r6		
    af58:	37 41       	pop	r7		
    af5a:	30 41       	ret			

0000af5c <__udivdi3>:
    af5c:	0b 12       	push	r11		
    af5e:	0a 12       	push	r10		
    af60:	09 12       	push	r9		
    af62:	08 12       	push	r8		
    af64:	18 41 0a 00 	mov	10(r1),	r8	;0x000a(r1)
    af68:	19 41 0c 00 	mov	12(r1),	r9	;0x000c(r1)
    af6c:	1a 41 0e 00 	mov	14(r1),	r10	;0x000e(r1)
    af70:	1b 41 10 00 	mov	16(r1),	r11	;0x0010(r1)
    af74:	b0 12 fe ae 	call	#0xaefe	
    af78:	38 41       	pop	r8		
    af7a:	39 41       	pop	r9		
    af7c:	3a 41       	pop	r10		
    af7e:	3b 41       	pop	r11		
    af80:	30 41       	ret			

0000af82 <__umoddi3>:
    af82:	0b 12       	push	r11		
    af84:	0a 12       	push	r10		
    af86:	09 12       	push	r9		
    af88:	08 12       	push	r8		
    af8a:	18 41 0a 00 	mov	10(r1),	r8	;0x000a(r1)
    af8e:	19 41 0c 00 	mov	12(r1),	r9	;0x000c(r1)
    af92:	1a 41 0e 00 	mov	14(r1),	r10	;0x000e(r1)
    af96:	1b 41 10 00 	mov	16(r1),	r11	;0x0010(r1)
    af9a:	b0 12 fe ae 	call	#0xaefe	
    af9e:	0c 48       	mov	r8,	r12	
    afa0:	0d 49       	mov	r9,	r13	
    afa2:	0e 4a       	mov	r10,	r14	
    afa4:	0f 4b       	mov	r11,	r15	
    afa6:	38 41       	pop	r8		
    afa8:	39 41       	pop	r9		
    afaa:	3a 41       	pop	r10		
    afac:	3b 41       	pop	r11		
    afae:	30 41       	ret			

0000afb0 <__udivmoddi4>:
    afb0:	0b 12       	push	r11		
    afb2:	0a 12       	push	r10		
    afb4:	09 12       	push	r9		
    afb6:	08 12       	push	r8		
    afb8:	07 12       	push	r7		
    afba:	18 41 0c 00 	mov	12(r1),	r8	;0x000c(r1)
    afbe:	19 41 0e 00 	mov	14(r1),	r9	;0x000e(r1)
    afc2:	1a 41 10 00 	mov	16(r1),	r10	;0x0010(r1)
    afc6:	1b 41 12 00 	mov	18(r1),	r11	;0x0012(r1)
    afca:	b0 12 fe ae 	call	#0xaefe	
    afce:	17 41 14 00 	mov	20(r1),	r7	;0x0014(r1)
    afd2:	87 48 00 00 	mov	r8,	0(r7)	;0x0000(r7)
    afd6:	87 49 02 00 	mov	r9,	2(r7)	;0x0002(r7)
    afda:	87 4a 04 00 	mov	r10,	4(r7)	;0x0004(r7)
    afde:	87 4b 06 00 	mov	r11,	6(r7)	;0x0006(r7)
    afe2:	37 41       	pop	r7		
    afe4:	38 41       	pop	r8		
    afe6:	39 41       	pop	r9		
    afe8:	3a 41       	pop	r10		
    afea:	3b 41       	pop	r11		
    afec:	30 41       	ret			

0000afee <_unexpected_>:
    afee:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	16 81 16 81 16 81 04 99 16 81 6a 8b 16 81 06 a2     ..........j.....
    fff0:	16 81 02 9f 16 81 16 81 16 81 e6 9f 16 81 00 80     ................
