
bin/msp_rx.elf:     file format elf32-msp430

SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
0000afd6 l    d  .rodata	00000000 .rodata
00000200 l    d  .bss	00000000 .bss
000002aa l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 msp_rx.c
00000200 l     O .bss	00000002 node_id
00000202 l     O .bss	0000000e timer
00000210 l     O .bss	00000002 led_green_duration
00000212 l     O .bss	00000002 led_green_flag
00000214 l     O .bss	00000002 led_red_duration
00000216 l     O .bss	00000002 led_red_flag
00000218 l     O .bss	00000002 periodic_write_flag
0000021a l     O .bss	00000002 periodic_temp_flag
0000021c l     O .bss	00000002 current_buffer_pt
0000021e l     O .bss	00000002 uart_flag
00000220 l     O .bss	00000002 uart_data
00000222 l     O .bss	00000002 room_flag
00000224 l     O .bss	00000001 room
0000818a l     F .text	0000004c printhex
000081d6 l     F .text	00000076 set_node_id
0000824c l     F .text	00000278 converter
000084c4 l     F .text	0000001c led_green_blink
000084e0 l     F .text	0000001c led_red_blink
000084fc l     F .text	00000086 thread_led_green
00008582 l     F .text	000000b4 thread_led_red
000086fa l     F .text	0000007a thread_uart
00000226 l     O .bss	0000001c radio_tx_buffer
00000242 l     O .bss	0000001c radio_rx_buffer
0000025e l     O .bss	0000001c own_buffer
0000027a l     O .bss	00000002 radio_rx_flag
000088b2 l     F .text	00000064 thread_rx
00008916 l     F .text	00000050 init_message
00008966 l     F .text	00000028 write_message
0000898e l     F .text	0000008e thread_periodic_writeTemp
00008a1c l     F .text	0000004c register_temperature
00008a68 l     F .text	0000008a thread_periodic_temperature
0000027c l     O .bss	0000000a pt
00008116 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 adc10.c
00000286 l     O .bss	00000002 coeff_1
00000288 l     O .bss	00000002 coeff_2
00000000 l    df *ABS*	00000000 cc2500.c
00008cf0 l     F .text	00000016 CC2500_HW_GDO0_IRQ_ON_ASSERT
00008d06 l     F .text	00000016 CC2500_HW_GDO2_IRQ_ON_ASSERT
00008d1c l     F .text	00000016 CC2500_HW_GDO0_DINT
00008d32 l     F .text	00000016 CC2500_HW_GDO2_DINT
00008d48 l     F .text	00000016 CC2500_HW_GDO0_EINT
00008d5e l     F .text	00000016 CC2500_HW_GDO0_CLEAR_FLAG
00008d74 l     F .text	00000016 CC2500_HW_GDO2_CLEAR_FLAG
00008d8a l     F .text	00000016 CONFIG_GDO0_PIN_AS_INPUT
00008da0 l     F .text	00000052 CC2500_HW_INIT
000090d8 l     F .text	00000048 cc2500_check_tx_underflow
00009120 l     F .text	0000004a cc2500_check_rx_overflow
00000000 l    df *ABS*	00000000 clock.c
0000028e l     O .bss	00000002 mclk_freq_mhz
00009992 l     F .text	000000c0 set_mcu_speed
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 spi.c
00000000 l    df *ABS*	00000000 timer.c
00000290 l     O .bss	00000002 timerA_cb
00000292 l     O .bss	00000002 timerA_wakeup
00000294 l     O .bss	00000002 timerB_cb
00000296 l     O .bss	00000002 timerB_wakeup
00000000 l    df *ABS*	00000000 uart.c
00000298 l     O .bss	00000002 uart_cb
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 watchdog.c
0000029a l     O .bss	00000002 watchdog_backup
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sprintf.c
0000a586 l     F .text	00000022 append
0000029e l     O .bss	00000002 available_
0000029c l     O .bss	00000002 destination_
0000a5a8 l     F .text	0000003c call_vuprintf
00000000 l    df *ABS*	00000000 vuprintf.c
0000a642 l     F .text	00000198 print_field
00000000 l    df *ABS*	00000000 puts.c
0000a14a g     F .text	00000032 putchar
00000057 g       *ABS*	00000000 __BCSCTL1
00009afc g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_16MHz
000002a0 g     O .bss	00000001 cc2500_gdo2_cfg
00000174 g       *ABS*	00000000 __TACCR1
0000974c g     F .text	00000024 cc2500_idle
00000000 g       *ABS*	00000000 __data_size
00008116  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
000097c0 g     F .text	0000001a cc2500_variables_bootstrap
00009ad4 g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_3MHz
00000024 g       *ABS*	00000000 __P1IES
00008b60 g     F .text	000000ce adc10_sample_temp
0000004b g       *ABS*	00000000 __ADC10AE1
000098ea g     F .text	0000009a port2_irq_handler
0000a568 g     F .text	00000010 printf
00000069 g       *ABS*	00000000 __UCB0CTL1
0000a61a g     F .text	00000016 vsprintf
0000a412 g       .text	00000000 __ext_divmod16
00008116  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00009ebe g     F .text	00000016 spi_select_radio
00000060 g       *ABS*	00000000 __UCA0CTL0
000094c8 g     F .text	0000006a cc2500_utx
0000a28c g     F .text	00000064 flash_write_byte
00009a76 g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_4MHz
0000a01a g     F .text	00000018 timerB_register_cb
0000012e g       *ABS*	00000000 __TAIV
00009e14 g     F .text	00000012 spi_check_miso_high
0000a600 g     F .text	0000001a snprintf
0000a140 g     F .text	0000000a uart_stop
00008e34 g     F .text	0000002e CC2500_SPI_WREG
0000028c g     O .bss	00000001 cc2500_rx_length
00000000 g       .vectors	00000000 _efartext
00009dda g     F .text	0000003a spi_tx_rx
0000a44c g     F .text	00000000 __udivhi3
00000001 g       *ABS*	00000000 __IE2
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
00008fea g     F .text	0000001e CC2500_SPI_RX_FIFO_BYTE
0000b132 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
00009ee8 g     F .text	00000038 Timer_A
000097ec g     F .text	000000dc cc2500_init
000010f8 g       *ABS*	00000000 __CALDCO_16MHZ
000096c8 g     F .text	00000018 cc2500_rx_register_cb
0000a392 g     F .text	00000022 flash_erase_info_memory
0000001d g       *ABS*	00000000 __P4OUT
000000aa g       *ABS*	00000000 __bss_size
000010fd g       *ABS*	00000000 __CALBC1_8MHZ
00009b4c g     F .text	00000010 loop_4_cycles
00008000  w      .text	00000000 __watchdog_support
0000907c g     F .text	00000030 cc2500_gdo2_set_signal
00008110  w      .text	00000000 __stop_progExec__
0000a46e g     F .text	000000fa memcpy
0000002d g       *ABS*	00000000 __P2IE
0000ae78 g     F .text	0000002c puts
0000a19a g     F .text	00000014 uart_eint
00008f88 g     F .text	00000062 CC2500_SPI_RX_BURST
00000192 g       *ABS*	00000000 __TBCCR0
00008116  w      .text	00000000 __isr_11
00009ed4 g     F .text	00000014 spi_deselect_radio
00000186 g       *ABS*	00000000 __TBCCTL2
00009ac0 g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_6MHz
0000aea4 g     F .text	00000000 __udivsi3
00000025 g       *ABS*	00000000 __P1IE
0000006b g       *ABS*	00000000 __UCB0BR1
00009d6a g     F .text	00000062 spi_init
0000a0a2 g     F .text	0000000e timerB_stop
0000a630 g     F .text	00000012 vsnprintf
00000049 g       *ABS*	00000000 __ADC10DTC1
00008f32 g     F .text	00000056 CC2500_SPI_TX_BURST
0000028a g     O .bss	00000001 cc2500_rx_offset
00000066 g       *ABS*	00000000 __UCA0RXBUF
00000061 g       *ABS*	00000000 __UCA0CTL1
00008b50 g     F .text	00000010 adc10irq
00009a9a g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_1MHz
0000af96 g       .text	00000000 __udivmoddi4
000094ac g     F .text	0000001c cc2500_calibrate
00009b24 g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_4MHz
000090ac g     F .text	0000002c cc2500_set_fifo_threshold
00008df2 g     F .text	00000020 CC2500_SPI_TX
00000182 g       *ABS*	00000000 __TBCCTL0
00009008 g     F .text	00000044 cc2500_wait_status
00009590 g     F .text	00000138 cc2500_rx_pkt_eop
0000006d g       *ABS*	00000000 __UCB0STAT
00008b50 g       .text	00000000 __isr_5
00008e62 g     F .text	00000036 CC2500_SPI_RREG
00008b08 g     F .text	00000032 adc10_calibrate
00000063 g       *ABS*	00000000 __UCA0BR1
0000af68 g     F .text	00000000 __umoddi3
0000b132 g       *ABS*	00000000 __data_load_start
00009d22 g     F .text	00000016 leds_on
00008116 g       .text	00000000 __dtors_end
00000053 g       *ABS*	00000000 __BCSCTL3
000096e0 g     F .text	0000001e cc2500_packet_status
00009cba g     F .text	00000014 led_green_switch
0000a354 g     F .text	0000003e flash_erase_segment
000001bc g       *ABS*	00000000 __ADC10SA
0000a240 g     F .text	0000004c flash_init
00000166 g       *ABS*	00000000 __TACCTL2
00008168 g     F .text	00000022 timer_reached
0000af42 g     F .text	00000000 __udivdi3
00000065 g       *ABS*	00000000 __UCA0STAT
00009c90 g     F .text	00000016 led_green_off
00009770 g     F .text	00000012 cc2500_sleep
000096fe g     F .text	00000030 cc2500_cca
00008116  w      .text	00000000 __isr_2
00000160 g       *ABS*	00000000 __TACTL
0000a444 g     F .text	00000000 __modhi3
0000012c g       *ABS*	00000000 __FCTL3
00009f36 g     F .text	00000018 timerA_register_cb
00008116  w      .text	00000000 __isr_10
000002a2 g     O .bss	00000002 radio_rx_cb
00009984 g     F .text	0000000e get_mclk_freq_mhz
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
00009f9a g     F .text	00000024 timerA_start_milliseconds
00009a88 g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_2MHz
00008efc g     F .text	00000036 CC2500_SPI_RX_BYTE
000010f9 g       *ABS*	00000000 __CALBC1_16MHZ
000000c3 g       *ABS*	00000000 __OA1CTL1
00000023 g       *ABS*	00000000 __P1IFG
00009e26 g     F .text	0000004a spi_tx_burst
000010fb g       *ABS*	00000000 __CALBC1_12MHZ
0000004a g       *ABS*	00000000 __ADC10AE0
0000011a g       *ABS*	00000000 __UCB0I2CSA
00009ce4 g     F .text	00000014 led_red_on
00000172 g       *ABS*	00000000 __TACCR0
00009d0c g     F .text	00000016 leds_off
00000056 g       *ABS*	00000000 __DCOCTL
00000003 g       *ABS*	00000000 __IFG2
000002aa g     O .noinit	00000002 __wdt_clear_value
00008774 g     F .text	00000050 radio_cb
0000a17c g     F .text	0000001e uart_getchar
0000001b g       *ABS*	00000000 __P3SEL
00009fbe g     F .text	0000000e timerA_stop
0000979a g     F .text	00000026 cc2500_wakeup
0000a1ec g       .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
0000006c g       *ABS*	00000000 __UCB0I2CIE
0000006a g       *ABS*	00000000 __UCB0BR0
0000aeda g     F .text	00000000 __umodsi3
000097da g     F .text	00000012 CC_ASSERT
0000a578 g     F .text	0000000e vprintf
00000028 g       *ABS*	00000000 __P2IN
00009f4e g     F .text	00000018 timerA_set_wakeup
00000118 g       *ABS*	00000000 __UCB0I2COA
00000184 g       *ABS*	00000000 __TBCCTL1
000001b4 g       *ABS*	00000000 __ADC10MEM
000002a4 g     O .bss	00000001 cc2500_gdo0_cfg
00009cce g     F .text	00000016 led_red_off
0000a466 g     F .text	00000000 __umodhi3
000087c4 g     F .text	000000ee ezdisplay
00008116  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000012a g       *ABS*	00000000 __FCTL2
00000064 g       *ABS*	00000000 __UCA0MCTL
00009e70 g     F .text	0000004e spi_rx_burst
0000a0b0 g     F .text	00000090 uart_init
00008028  w      .text	00000000 __do_clear_bss
0000a1ae g     F .text	00000016 uart_dint
00008636 g     F .text	000000c4 uart_cb
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
00000026 g       *ABS*	00000000 __P1SEL
00009b10 g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_8MHz
0000a3b4 g     F .text	0000001c watchdog_stop
00009a52 g     F .text	00000012 set_mcu_speed_dco_mclk_1MHz_smclk_1MHz
00009ae8 g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_1_5MHz
00008b3a g     F .text	00000016 adc10_stop
0000aea4 g       .text	00000000 __ext_udivmod32
0000a004 g     F .text	00000016 timerB_init
0000904c g     F .text	00000030 cc2500_gdo0_set_signal
00000027 g       *ABS*	00000000 __P1REN
0000a3e6 g       .text	00000000 __mulsi3
0000a1c4 g     F .text	00000028 uart_register_cb
000000c0 g       *ABS*	00000000 __OA0CTL0
00009560 g     F .text	00000030 cc2500_rx_enter
00009b38 g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_2MHz
0000afd4  w      .text	00000000 _unexpected_
00008116  w      .text	00000000 __isr_8
000098ea g       .text	00000000 __isr_3
0000a7da g     F .text	0000069e vuprintf
00009cf8 g     F .text	00000014 led_red_switch
000010fc g       *ABS*	00000000 __CALDCO_8MHZ
0000a412 g     F .text	00000000 __divhi3
0000a44c g       .text	00000000 __ext_udivmod16
00008000  w      .text	00000000 _reset_vector__
00008116 g       .text	00000000 __ctors_start
0000aee4 g       .text	00000000 __xabi_udivmod64
00008116  w      .text	00000000 __isr_12
000010fa g       *ABS*	00000000 __CALDCO_12MHZ
00000018 g       *ABS*	00000000 __P3IN
00008010  w      .text	00000000 __do_copy_data
00000200 g       .bss	00000000 __bss_start
0000803e g     F .text	000000d2 main
00000176 g       *ABS*	00000000 __TACCR2
00009c02 g     F .text	0000008e delay_ms
000000c2 g       *ABS*	00000000 __OA1CTL0
00009fcc g       .text	00000000 __isr_13
00009b5c g     F .text	000000a6 delay_usec
00000170 g       *ABS*	00000000 __TAR
0000001e g       *ABS*	00000000 __P4DIR
00009f20 g     F .text	00000016 timerA_init
0000a1ec g     F .text	00000054 usart0irq
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
0000a032 g     F .text	00000018 timerB_set_wakeup
0000002a g       *ABS*	00000000 __P2DIR
00000068 g       *ABS*	00000000 __UCB0CTL0
0000002f g       *ABS*	00000000 __P2REN
00008c2e g     F .text	000000c2 adc10_sample_avcc
0000a5e4 g     F .text	0000001c sprintf
00009fcc g     F .text	00000038 Timer_B
0000972e g     F .text	0000001e cc2500_get_rssi
00009782 g     F .text	00000018 cc2500_reset
0000006e g       *ABS*	00000000 __UCB0RXBUF
000001b0 g       *ABS*	00000000 __ADC10CTL0
00008e98 g     F .text	00000036 CC2500_SPI_ROREG
0000b106 g     O .rodata	00000024 rfSettings_default_config
00009ee8 g       .text	00000000 __isr_9
0000005e g       *ABS*	00000000 __UCA0IRTCTL
000010fe g       *ABS*	00000000 __CALDCO_1MHZ
00000067 g       *ABS*	00000000 __UCA0TXBUF
0000800c  w      .text	00000000 __init_stack
0000005d g       *ABS*	00000000 __UCA0ABCTL
00009f66 g     F .text	00000034 timerA_start_ticks
00000019 g       *ABS*	00000000 __P3OUT
000000c1 g       *ABS*	00000000 __OA0CTL1
00009aac g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_12MHz
00008e12 g     F .text	00000022 CC2500_SPI_STROBE
00008116 g       .text	00000000 __dtors_start
00008116  w      .text	00000000 __isr_6
00008116 g       .text	00000000 __ctors_end
00000062 g       *ABS*	00000000 __UCA0BR0
00000600 g       *ABS*	00000000 __stack
00009a64 g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_8MHz
00008116  w      .text	00000000 __isr_1
00000200 g       .rodata	00000000 _edata
000002ac g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
000002a6 g     O .bss	00000002 cc2500_rx_packet
00000048 g       *ABS*	00000000 __ADC10DTC0
0000011e g       *ABS*	00000000 __TBIV
000001b2 g       *ABS*	00000000 __ADC10CTL1
000002a8 g     O .bss	00000001 cc2500_status_register
00009ca6 g     F .text	00000014 led_green_on
00009194 g     F .text	000002f8 cc2500_configure
0000811a g     F .text	0000004e timer_tick_cb
0000a3d0 g     F .text	00000016 watchdog_restore
00000058 g       *ABS*	00000000 __BCSCTL2
00008110  w      .text	00000000 _endless_loop__
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
0000948c g     F .text	00000020 cc2500_set_channel
00009532 g     F .text	0000002e cc2500_rx_register_buffer
0000005f g       *ABS*	00000000 __UCA0IRRCTL
00000010 g       *ABS*	00000000 __P3REN
00000164 g       *ABS*	00000000 __TACCTL1
0000006f g       *ABS*	00000000 __UCB0TXBUF
0000a04a g     F .text	00000034 timerB_start_ticks
000010ff g       *ABS*	00000000 __CALBC1_1MHZ
00008010  w      .text	00000000 __low_level_init
00000011 g       *ABS*	00000000 __P4REN
00008af2 g     F .text	00000016 adc10_start
00000200 g       .rodata	00000000 __data_start
0000a07e g     F .text	00000024 timerB_start_milliseconds
000098c8 g     F .text	00000022 cc2500_gdox_signal_handler
00000120 g       *ABS*	00000000 __WDTCTL
00000000 g       *ABS*	00000000 __IE1
00008ece g     F .text	0000002e CC2500_SPI_TX_BYTE
0000916a g     F .text	0000002a cc2500_check_fifo_xflow_flush
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
00009dcc g     F .text	0000000e spi_clear_rx_IFG
0000a2f0 g     F .text	00000064 flash_write_word
00009d38 g     F .text	00000032 leds_init



Disassembly of section .text:

00008000 <__watchdog_support>:
    8000:	55 42 20 01 	mov.b	&0x0120,r5	
    8004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    8008:	82 45 aa 02 	mov	r5,	&0x02aa	

0000800c <__init_stack>:
    800c:	31 40 00 06 	mov	#1536,	r1	;#0x0600

00008010 <__do_copy_data>:
    8010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    8014:	0f 93       	tst	r15		
    8016:	08 24       	jz	$+18     	;abs 0x8028
    8018:	92 42 aa 02 	mov	&0x02aa,&0x0120	
    801c:	20 01 
    801e:	2f 83       	decd	r15		
    8020:	9f 4f 32 b1 	mov	-20174(r15),512(r15);0xb132(r15), 0x0200(r15)
    8024:	00 02 
    8026:	f8 23       	jnz	$-14     	;abs 0x8018

00008028 <__do_clear_bss>:
    8028:	3f 40 aa 00 	mov	#170,	r15	;#0x00aa
    802c:	0f 93       	tst	r15		
    802e:	07 24       	jz	$+16     	;abs 0x803e
    8030:	92 42 aa 02 	mov	&0x02aa,&0x0120	
    8034:	20 01 
    8036:	1f 83       	dec	r15		
    8038:	cf 43 00 02 	mov.b	#0,	512(r15);r3 As==00, 0x0200(r15)
    803c:	f9 23       	jnz	$-12     	;abs 0x8030

0000803e <main>:

#define NUM_PT 5
static struct pt pt[NUM_PT];

int main(void)
{
    803e:	04 41       	mov	r1,	r4	
    8040:	24 53       	incd	r4		
    8042:	21 83       	decd	r1		
    watchdog_stop();
    8044:	b0 12 b4 a3 	call	#0xa3b4	

    /* protothreads init */
    int i;
    for(i = 0; i < NUM_PT; i++)
    8048:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc(r4)
    804c:	09 3c       	jmp	$+20     	;abs 0x8060
    {
        PT_INIT(&pt[i]);
    804e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8052:	0f 5f       	rla	r15		
    8054:	3f 50 7c 02 	add	#636,	r15	;#0x027c
    8058:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
{
    watchdog_stop();

    /* protothreads init */
    int i;
    for(i = 0; i < NUM_PT; i++)
    805c:	94 53 fc ff 	inc	-4(r4)		;0xfffc(r4)
    8060:	b4 90 05 00 	cmp	#5,	-4(r4)	;#0x0005, 0xfffc(r4)
    8064:	fc ff 
    8066:	f3 3b       	jl	$-24     	;abs 0x804e
    {
        PT_INIT(&pt[i]);
    }

    /* clock init */
    set_mcu_speed_dco_mclk_16MHz_smclk_8MHz();
    8068:	b0 12 10 9b 	call	#0x9b10	

    /* LEDs init */
    leds_init();
    806c:	b0 12 38 9d 	call	#0x9d38	
    led_green_flag = 0;
    8070:	82 43 12 02 	mov	#0,	&0x0212	;r3 As==00
    led_red_flag = 0;
    8074:	82 43 16 02 	mov	#0,	&0x0216	;r3 As==00

    /* timer init */
    timerA_init();
    8078:	b0 12 20 9f 	call	#0x9f20	
    timerA_register_cb(&timer_tick_cb);
    807c:	3f 40 1a 81 	mov	#-32486,r15	;#0x811a
    8080:	b0 12 36 9f 	call	#0x9f36	
    timerA_start_milliseconds(TIMER_PERIOD_MS);
    8084:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    8088:	b0 12 9a 9f 	call	#0x9f9a	

    /* UART init (serial link) */
    uart_init(UART_9600_SMCLK_8MHZ);
    808c:	3f 42       	mov	#8,	r15	;r2 As==11
    808e:	b0 12 b0 a0 	call	#0xa0b0	
    uart_register_cb(uart_cb);
    8092:	3f 40 36 86 	mov	#-31178,r15	;#0x8636
    8096:	b0 12 c4 a1 	call	#0xa1c4	
    uart_flag = 0;
    809a:	82 43 1e 02 	mov	#0,	&0x021e	;r3 As==00
    uart_data = 0x0000;
    809e:	82 43 20 02 	mov	#0,	&0x0220	;r3 As==00
    room = 0;
    80a2:	c2 43 24 02 	mov.b	#0,	&0x0224	;r3 As==00
    room_flag = 0;
    80a6:	82 43 22 02 	mov	#0,	&0x0222	;r3 As==00

    /* ADC10 init (temperature) */
    adc10_start();
    80aa:	b0 12 f2 8a 	call	#0x8af2	

    /* radio init */
    
    spi_init();
    80ae:	b0 12 6a 9d 	call	#0x9d6a	
    cc2500_init();
    80b2:	b0 12 ec 97 	call	#0x97ec	
    cc2500_rx_register_buffer(radio_tx_buffer, PKTLEN);
    80b6:	7e 40 1c 00 	mov.b	#28,	r14	;#0x001c
    80ba:	3f 40 26 02 	mov	#550,	r15	;#0x0226
    80be:	b0 12 32 95 	call	#0x9532	
    cc2500_rx_register_cb(radio_cb);
    80c2:	3f 40 74 87 	mov	#-30860,r15	;#0x8774
    80c6:	b0 12 c8 96 	call	#0x96c8	
    cc2500_rx_enter();
    80ca:	b0 12 60 95 	call	#0x9560	
    radio_rx_flag = 0;
    80ce:	82 43 7a 02 	mov	#0,	&0x027a	;r3 As==00
    
    __enable_interrupt();
    80d2:	32 d2       	eint			


    //Connection init
    uart_flag = 0;
    80d4:	82 43 1e 02 	mov	#0,	&0x021e	;r3 As==00
    periodic_write_flag=1;
    80d8:	92 43 18 02 	mov	#1,	&0x0218	;r3 As==01
    periodic_temp_flag=1;
    80dc:	92 43 1a 02 	mov	#1,	&0x021a	;r3 As==01
    set_node_id(0);
    80e0:	0f 43       	clr	r15		
    80e2:	b0 12 d6 81 	call	#0x81d6	

    /* simple cycle scheduling */
    while(1) {
      thread_led_red(&pt[0]);
    80e6:	3f 40 7c 02 	mov	#636,	r15	;#0x027c
    80ea:	b0 12 82 85 	call	#0x8582	
      thread_uart(&pt[1]);//for setting node ID
    80ee:	3f 40 7e 02 	mov	#638,	r15	;#0x027e
    80f2:	b0 12 fa 86 	call	#0x86fa	
      thread_rx(&pt[2]); //for writing on ezconsole reception temp
    80f6:	3f 40 80 02 	mov	#640,	r15	;#0x0280
    80fa:	b0 12 b2 88 	call	#0x88b2	
      thread_periodic_temperature(&pt[3]);//for sampling temp
    80fe:	3f 40 82 02 	mov	#642,	r15	;#0x0282
    8102:	b0 12 68 8a 	call	#0x8a68	
      thread_periodic_writeTemp(&pt[4]);//for writing own temp on ezconsole
    8106:	3f 40 84 02 	mov	#644,	r15	;#0x0284
    810a:	b0 12 8e 89 	call	#0x898e	
    }
    810e:	eb 3f       	jmp	$-40     	;abs 0x80e6

00008110 <__stop_progExec__>:
    8110:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    8114:	fd 3f       	jmp	$-4      	;abs 0x8110

00008116 <__ctors_end>:
    8116:	30 40 d4 af 	br	#0xafd4	

0000811a <timer_tick_cb>:
 * Timer
 */

/* timer interrupt handler: increases timer's counter */
/* approximately every 10ms                           */ 
void timer_tick_cb() {
    811a:	04 12       	push	r4		
    811c:	04 41       	mov	r1,	r4	
    811e:	24 53       	incd	r4		
    8120:	21 83       	decd	r1		
    int i;
    for(i = 0; i < NUM_TIMERS; i++)
    8122:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc(r4)
    8126:	19 3c       	jmp	$+52     	;abs 0x815a
    {
        if(timer[i] != UINT_MAX) {
    8128:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    812c:	0f 5f       	rla	r15		
    812e:	3f 50 02 02 	add	#514,	r15	;#0x0202
    8132:	2f 4f       	mov	@r15,	r15	
    8134:	3f 93       	cmp	#-1,	r15	;r3 As==11
    8136:	0f 24       	jz	$+32     	;abs 0x8156
            timer[i]++;
    8138:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    813c:	0f 5f       	rla	r15		
    813e:	3f 50 02 02 	add	#514,	r15	;#0x0202
    8142:	2f 4f       	mov	@r15,	r15	
    8144:	0e 4f       	mov	r15,	r14	
    8146:	1e 53       	inc	r14		
    8148:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    814c:	0f 5f       	rla	r15		
    814e:	3f 50 02 02 	add	#514,	r15	;#0x0202
    8152:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)

/* timer interrupt handler: increases timer's counter */
/* approximately every 10ms                           */ 
void timer_tick_cb() {
    int i;
    for(i = 0; i < NUM_TIMERS; i++)
    8156:	94 53 fc ff 	inc	-4(r4)		;0xfffc(r4)
    815a:	b4 90 07 00 	cmp	#7,	-4(r4)	;#0x0007, 0xfffc(r4)
    815e:	fc ff 
    8160:	e3 3b       	jl	$-56     	;abs 0x8128
    {
        if(timer[i] != UINT_MAX) {
            timer[i]++;
        }
    }
}
    8162:	21 53       	incd	r1		
    8164:	34 41       	pop	r4		
    8166:	30 41       	ret			

00008168 <timer_reached>:

int timer_reached(uint16_t timer, uint16_t count) {
    8168:	04 12       	push	r4		
    816a:	04 41       	mov	r1,	r4	
    816c:	24 53       	incd	r4		
    816e:	21 82       	sub	#4,	r1	;r2 As==10
    8170:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8174:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    return (timer >= count);
    8178:	1f 43       	mov	#1,	r15	;r3 As==01
    817a:	94 94 fc ff 	cmp	-4(r4),	-6(r4)	;0xfffc(r4), 0xfffa(r4)
    817e:	fa ff 
    8180:	01 2c       	jc	$+4      	;abs 0x8184
    8182:	0f 43       	clr	r15		
}
    8184:	21 52       	add	#4,	r1	;r2 As==10
    8186:	34 41       	pop	r4		
    8188:	30 41       	ret			

0000818a <printhex>:

static void printhex(char *buffer, unsigned int len)
{
    818a:	04 12       	push	r4		
    818c:	04 41       	mov	r1,	r4	
    818e:	24 53       	incd	r4		
    8190:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    8194:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8198:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    unsigned int i;
    for(i = 0; i < len; i++)
    819c:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    81a0:	0e 3c       	jmp	$+30     	;abs 0x81be
    {
        printf("%02X ", buffer[i]);
    81a2:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    81a6:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    81aa:	6f 4f       	mov.b	@r15,	r15	
    81ac:	8f 11       	sxt	r15		
    81ae:	0f 12       	push	r15		
    81b0:	30 12 d6 af 	push	#-20522	;#0xafd6
    81b4:	b0 12 68 a5 	call	#0xa568	
    81b8:	21 52       	add	#4,	r1	;r2 As==10
}

static void printhex(char *buffer, unsigned int len)
{
    unsigned int i;
    for(i = 0; i < len; i++)
    81ba:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    81be:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    81c2:	f8 ff 
    81c4:	ee 2b       	jnc	$-34     	;abs 0x81a2
    {
        printf("%02X ", buffer[i]);
    }
    printf("\n");
    81c6:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    81ca:	b0 12 4a a1 	call	#0xa14a	
}
    81ce:	31 50 06 00 	add	#6,	r1	;#0x0006
    81d2:	34 41       	pop	r4		
    81d4:	30 41       	ret			

000081d6 <set_node_id>:

/* returns 1 if the id was expected and set, 0 otherwise */
static void set_node_id(unsigned int id)
{
    81d6:	04 12       	push	r4		
    81d8:	04 41       	mov	r1,	r4	
    81da:	24 53       	incd	r4		
    81dc:	21 83       	decd	r1		
    81de:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    TIMER_ID_INPUT = UINT_MAX;
    81e2:	b2 43 06 02 	mov	#-1,	&0x0206	;r3 As==11
    if(id!=0){
    81e6:	84 93 fc ff 	tst	-4(r4)		;0xfffc(r4)
    81ea:	20 24       	jz	$+66     	;abs 0x822c
        if(flash_write_byte((unsigned char *) NODE_ID_LOCATION, id) != 0)
    81ec:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    81f0:	4f 4f       	mov.b	r15,	r15	
    81f2:	4e 4f       	mov.b	r15,	r14	
    81f4:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    81f8:	b0 12 8c a2 	call	#0xa28c	
    81fc:	0f 93       	tst	r15		
    81fe:	23 24       	jz	$+72     	;abs 0x8246
        {
            flash_erase_segment((unsigned int *) NODE_ID_LOCATION);
    8200:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    8204:	b0 12 54 a3 	call	#0xa354	
            flash_write_word((unsigned int *) NODE_ID_LOCATION, id);
    8208:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    820c:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    8210:	b0 12 f0 a2 	call	#0xa2f0	
            node_id = id;
    8214:	92 44 fc ff 	mov	-4(r4),	&0x0200	;0xfffc(r4)
    8218:	00 02 
            printf("node id set to: %x\n", node_id);
    821a:	1f 42 00 02 	mov	&0x0200,r15	
    821e:	0f 12       	push	r15		
    8220:	30 12 dc af 	push	#-20516	;#0xafdc
    8224:	b0 12 68 a5 	call	#0xa568	
    8228:	21 52       	add	#4,	r1	;r2 As==10
    822a:	0d 3c       	jmp	$+28     	;abs 0x8246
        }
    } 
    else{
        /* retrieve node id from flash */
        node_id = *((unsigned int *) NODE_ID_LOCATION);
    822c:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    8230:	2f 4f       	mov	@r15,	r15	
    8232:	82 4f 00 02 	mov	r15,	&0x0200	
        printf("node id retrieved from flash:  %x\n", node_id);
    8236:	1f 42 00 02 	mov	&0x0200,r15	
    823a:	0f 12       	push	r15		
    823c:	30 12 f0 af 	push	#-20496	;#0xaff0
    8240:	b0 12 68 a5 	call	#0xa568	
    8244:	21 52       	add	#4,	r1	;r2 As==10
    }
}
    8246:	21 53       	incd	r1		
    8248:	34 41       	pop	r4		
    824a:	30 41       	ret			

0000824c <converter>:


static int converter(char a, char b){
    824c:	04 12       	push	r4		
    824e:	04 41       	mov	r1,	r4	
    8250:	24 53       	incd	r4		
    8252:	31 50 f0 ff 	add	#-16,	r1	;#0xfff0
    8256:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    825a:	c4 4e fd ff 	mov.b	r14,	-3(r4)	;0xfffd(r4)
    char s[4];
    sprintf(s,"%02X%02X \n",a,b);
    825e:	5e 44 fd ff 	mov.b	-3(r4),	r14	;0xfffd(r4)
    8262:	8e 11       	sxt	r14		
    8264:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    8268:	8f 11       	sxt	r15		
    826a:	0e 12       	push	r14		
    826c:	0f 12       	push	r15		
    826e:	30 12 13 b0 	push	#-20461	;#0xb013
    8272:	0f 44       	mov	r4,	r15	
    8274:	3f 50 f0 ff 	add	#-16,	r15	;#0xfff0
    8278:	0f 12       	push	r15		
    827a:	b0 12 e4 a5 	call	#0xa5e4	
    827e:	31 52       	add	#8,	r1	;r2 As==11
    int number[4]; 
    int i;
    for(i=0;i<4;i++){
    8280:	84 43 ee ff 	mov	#0,	-18(r4)	;r3 As==00, 0xffee(r4)
    8284:	30 40 84 84 	br	#0x8484	
        switch(s[i]){
    8288:	0f 44       	mov	r4,	r15	
    828a:	3f 50 f0 ff 	add	#-16,	r15	;#0xfff0
    828e:	1f 54 ee ff 	add	-18(r4),r15	;0xffee(r4)
    8292:	6f 4f       	mov.b	@r15,	r15	
    8294:	8f 11       	sxt	r15		
    8296:	3f 50 d0 ff 	add	#-48,	r15	;#0xffd0
    829a:	3f 90 17 00 	cmp	#23,	r15	;#0x0017
    829e:	f0 2c       	jc	$+482    	;abs 0x8480
    82a0:	0f 5f       	rla	r15		
    82a2:	3f 50 1e b0 	add	#-20450,r15	;#0xb01e
    82a6:	2f 4f       	mov	@r15,	r15	
    82a8:	00 4f       	br	r15		
            case '0':
                number[3-i]=0;break;
    82aa:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    82ae:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    82b2:	0f 5f       	rla	r15		
    82b4:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    82b8:	0e 54       	add	r4,	r14	
    82ba:	0f 5e       	add	r14,	r15	
    82bc:	3f 50 06 00 	add	#6,	r15	;#0x0006
    82c0:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    82c4:	dd 3c       	jmp	$+444    	;abs 0x8480
            case '1':
                number[3-i]=1;break;
    82c6:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    82ca:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    82ce:	0f 5f       	rla	r15		
    82d0:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    82d4:	0e 54       	add	r4,	r14	
    82d6:	0f 5e       	add	r14,	r15	
    82d8:	3f 50 06 00 	add	#6,	r15	;#0x0006
    82dc:	9f 43 00 00 	mov	#1,	0(r15)	;r3 As==01, 0x0000(r15)
    82e0:	cf 3c       	jmp	$+416    	;abs 0x8480
            case '2':
                number[3-i]=2;break;
    82e2:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    82e6:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    82ea:	0f 5f       	rla	r15		
    82ec:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    82f0:	0e 54       	add	r4,	r14	
    82f2:	0f 5e       	add	r14,	r15	
    82f4:	3f 50 06 00 	add	#6,	r15	;#0x0006
    82f8:	af 43 00 00 	mov	#2,	0(r15)	;r3 As==10, 0x0000(r15)
    82fc:	c1 3c       	jmp	$+388    	;abs 0x8480
            case '3':
                number[3-i]=3;break;
    82fe:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8302:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    8306:	0f 5f       	rla	r15		
    8308:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    830c:	0e 54       	add	r4,	r14	
    830e:	0f 5e       	add	r14,	r15	
    8310:	3f 50 06 00 	add	#6,	r15	;#0x0006
    8314:	bf 40 03 00 	mov	#3,	0(r15)	;#0x0003, 0x0000(r15)
    8318:	00 00 
    831a:	b2 3c       	jmp	$+358    	;abs 0x8480
            case '4':
                number[3-i]=4;break;
    831c:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8320:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    8324:	0f 5f       	rla	r15		
    8326:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    832a:	0e 54       	add	r4,	r14	
    832c:	0f 5e       	add	r14,	r15	
    832e:	3f 50 06 00 	add	#6,	r15	;#0x0006
    8332:	af 42 00 00 	mov	#4,	0(r15)	;r2 As==10, 0x0000(r15)
    8336:	a4 3c       	jmp	$+330    	;abs 0x8480
            case '5':
                number[3-i]=5;break;
    8338:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    833c:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    8340:	0f 5f       	rla	r15		
    8342:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8346:	0e 54       	add	r4,	r14	
    8348:	0f 5e       	add	r14,	r15	
    834a:	3f 50 06 00 	add	#6,	r15	;#0x0006
    834e:	bf 40 05 00 	mov	#5,	0(r15)	;#0x0005, 0x0000(r15)
    8352:	00 00 
    8354:	95 3c       	jmp	$+300    	;abs 0x8480
            case '6':
                number[3-i]=6;break;
    8356:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    835a:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    835e:	0f 5f       	rla	r15		
    8360:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8364:	0e 54       	add	r4,	r14	
    8366:	0f 5e       	add	r14,	r15	
    8368:	3f 50 06 00 	add	#6,	r15	;#0x0006
    836c:	bf 40 06 00 	mov	#6,	0(r15)	;#0x0006, 0x0000(r15)
    8370:	00 00 
    8372:	86 3c       	jmp	$+270    	;abs 0x8480
            case '7':
                number[3-i]=7;break;
    8374:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8378:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    837c:	0f 5f       	rla	r15		
    837e:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8382:	0e 54       	add	r4,	r14	
    8384:	0f 5e       	add	r14,	r15	
    8386:	3f 50 06 00 	add	#6,	r15	;#0x0006
    838a:	bf 40 07 00 	mov	#7,	0(r15)	;#0x0007, 0x0000(r15)
    838e:	00 00 
    8390:	77 3c       	jmp	$+240    	;abs 0x8480
            case '8':
                number[3-i]=8;break;
    8392:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8396:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    839a:	0f 5f       	rla	r15		
    839c:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    83a0:	0e 54       	add	r4,	r14	
    83a2:	0f 5e       	add	r14,	r15	
    83a4:	3f 50 06 00 	add	#6,	r15	;#0x0006
    83a8:	bf 42 00 00 	mov	#8,	0(r15)	;r2 As==11, 0x0000(r15)
    83ac:	69 3c       	jmp	$+212    	;abs 0x8480
            case '9':
                number[3-i]=9;break;
    83ae:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    83b2:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    83b6:	0f 5f       	rla	r15		
    83b8:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    83bc:	0e 54       	add	r4,	r14	
    83be:	0f 5e       	add	r14,	r15	
    83c0:	3f 50 06 00 	add	#6,	r15	;#0x0006
    83c4:	bf 40 09 00 	mov	#9,	0(r15)	;#0x0009, 0x0000(r15)
    83c8:	00 00 
    83ca:	5a 3c       	jmp	$+182    	;abs 0x8480
            case 'A':
                number[3-i]=10;break;
    83cc:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    83d0:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    83d4:	0f 5f       	rla	r15		
    83d6:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    83da:	0e 54       	add	r4,	r14	
    83dc:	0f 5e       	add	r14,	r15	
    83de:	3f 50 06 00 	add	#6,	r15	;#0x0006
    83e2:	bf 40 0a 00 	mov	#10,	0(r15)	;#0x000a, 0x0000(r15)
    83e6:	00 00 
    83e8:	4b 3c       	jmp	$+152    	;abs 0x8480
            case 'B':
                number[3-i]=11;break;
    83ea:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    83ee:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    83f2:	0f 5f       	rla	r15		
    83f4:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    83f8:	0e 54       	add	r4,	r14	
    83fa:	0f 5e       	add	r14,	r15	
    83fc:	3f 50 06 00 	add	#6,	r15	;#0x0006
    8400:	bf 40 0b 00 	mov	#11,	0(r15)	;#0x000b, 0x0000(r15)
    8404:	00 00 
    8406:	3c 3c       	jmp	$+122    	;abs 0x8480
            case 'C':
                number[3-i]=12;break;
    8408:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    840c:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    8410:	0f 5f       	rla	r15		
    8412:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8416:	0e 54       	add	r4,	r14	
    8418:	0f 5e       	add	r14,	r15	
    841a:	3f 50 06 00 	add	#6,	r15	;#0x0006
    841e:	bf 40 0c 00 	mov	#12,	0(r15)	;#0x000c, 0x0000(r15)
    8422:	00 00 
    8424:	2d 3c       	jmp	$+92     	;abs 0x8480
            case 'D':
                number[3-i]=13;break;
    8426:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    842a:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    842e:	0f 5f       	rla	r15		
    8430:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8434:	0e 54       	add	r4,	r14	
    8436:	0f 5e       	add	r14,	r15	
    8438:	3f 50 06 00 	add	#6,	r15	;#0x0006
    843c:	bf 40 0d 00 	mov	#13,	0(r15)	;#0x000d, 0x0000(r15)
    8440:	00 00 
    8442:	1e 3c       	jmp	$+62     	;abs 0x8480
            case 'E':        
                number[3-i]=14;break;
    8444:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8448:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    844c:	0f 5f       	rla	r15		
    844e:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8452:	0e 54       	add	r4,	r14	
    8454:	0f 5e       	add	r14,	r15	
    8456:	3f 50 06 00 	add	#6,	r15	;#0x0006
    845a:	bf 40 0e 00 	mov	#14,	0(r15)	;#0x000e, 0x0000(r15)
    845e:	00 00 
    8460:	0f 3c       	jmp	$+32     	;abs 0x8480
            case 'F':        
                number[3-i]=15;break;
    8462:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8466:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    846a:	0f 5f       	rla	r15		
    846c:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8470:	0e 54       	add	r4,	r14	
    8472:	0f 5e       	add	r14,	r15	
    8474:	3f 50 06 00 	add	#6,	r15	;#0x0006
    8478:	bf 40 0f 00 	mov	#15,	0(r15)	;#0x000f, 0x0000(r15)
    847c:	00 00 
    847e:	03 43       	nop			
static int converter(char a, char b){
    char s[4];
    sprintf(s,"%02X%02X \n",a,b);
    int number[4]; 
    int i;
    for(i=0;i<4;i++){
    8480:	94 53 ee ff 	inc	-18(r4)	;0xffee(r4)
    8484:	a4 92 ee ff 	cmp	#4,	-18(r4)	;r2 As==10, 0xffee(r4)
    8488:	02 34       	jge	$+6      	;abs 0x848e
    848a:	30 40 88 82 	br	#0x8288	
                number[3-i]=14;break;
            case 'F':        
                number[3-i]=15;break;
        }
    }
    return number[0]+number[1]*16+number[2]*16*16+number[3]*16*16*16;
    848e:	1e 44 f4 ff 	mov	-12(r4),r14	;0xfff4(r4)
    8492:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    8496:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    849a:	0f 5f       	rla	r15		
    849c:	0f 5f       	rla	r15		
    849e:	0f 5f       	rla	r15		
    84a0:	0f 5f       	rla	r15		
    84a2:	0f 5d       	add	r13,	r15	
    84a4:	0f 5f       	rla	r15		
    84a6:	0f 5f       	rla	r15		
    84a8:	0f 5f       	rla	r15		
    84aa:	0f 5f       	rla	r15		
    84ac:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfff6(r4)
    84b0:	0f 5d       	add	r13,	r15	
    84b2:	0f 5f       	rla	r15		
    84b4:	0f 5f       	rla	r15		
    84b6:	0f 5f       	rla	r15		
    84b8:	0f 5f       	rla	r15		
    84ba:	0f 5e       	add	r14,	r15	
    
}
    84bc:	31 50 10 00 	add	#16,	r1	;#0x0010
    84c0:	34 41       	pop	r4		
    84c2:	30 41       	ret			

000084c4 <led_green_blink>:

static int led_green_flag;


static void led_green_blink(int duration)
{
    84c4:	04 12       	push	r4		
    84c6:	04 41       	mov	r1,	r4	
    84c8:	24 53       	incd	r4		
    84ca:	21 83       	decd	r1		
    84cc:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    led_green_duration = duration;
    84d0:	92 44 fc ff 	mov	-4(r4),	&0x0210	;0xfffc(r4)
    84d4:	10 02 
    led_green_flag = 1;
    84d6:	92 43 12 02 	mov	#1,	&0x0212	;r3 As==01
}
    84da:	21 53       	incd	r1		
    84dc:	34 41       	pop	r4		
    84de:	30 41       	ret			

000084e0 <led_red_blink>:

static void led_red_blink(int duration)
{
    84e0:	04 12       	push	r4		
    84e2:	04 41       	mov	r1,	r4	
    84e4:	24 53       	incd	r4		
    84e6:	21 83       	decd	r1		
    84e8:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    led_red_duration = duration;
    84ec:	92 44 fc ff 	mov	-4(r4),	&0x0214	;0xfffc(r4)
    84f0:	14 02 
    led_red_flag = 1;
    84f2:	92 43 16 02 	mov	#1,	&0x0216	;r3 As==01
}
    84f6:	21 53       	incd	r1		
    84f8:	34 41       	pop	r4		
    84fa:	30 41       	ret			

000084fc <thread_led_green>:

static PT_THREAD(thread_led_green(struct pt *pt))
{
    84fc:	04 12       	push	r4		
    84fe:	04 41       	mov	r1,	r4	
    8500:	24 53       	incd	r4		
    8502:	21 82       	sub	#4,	r1	;r2 As==10
    8504:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    8508:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    850c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8510:	2f 4f       	mov	@r15,	r15	
    8512:	3f 90 de 00 	cmp	#222,	r15	;#0x00de
    8516:	0c 24       	jz	$+26     	;abs 0x8530
    8518:	3f 90 e1 00 	cmp	#225,	r15	;#0x00e1
    851c:	18 24       	jz	$+50     	;abs 0x854e
    851e:	0f 93       	tst	r15		
    8520:	25 20       	jnz	$+76     	;abs 0x856c

    led_green_flag=0;
    8522:	82 43 12 02 	mov	#0,	&0x0212	;r3 As==00
    
    while(1)
      {
        PT_WAIT_UNTIL(pt, led_green_flag);
    8526:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    852a:	bf 40 de 00 	mov	#222,	0(r15)	;#0x00de, 0x0000(r15)
    852e:	00 00 
    8530:	1f 42 12 02 	mov	&0x0212,r15	
    8534:	0f 93       	tst	r15		
    8536:	02 20       	jnz	$+6      	;abs 0x853c
    8538:	4f 43       	clr.b	r15		
    853a:	20 3c       	jmp	$+66     	;abs 0x857c
        led_green_on();
    853c:	b0 12 a6 9c 	call	#0x9ca6	
        TIMER_LED_GREEN_ON = 0;
    8540:	82 43 04 02 	mov	#0,	&0x0204	;r3 As==00
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_GREEN_ON, DELAY_LED_GREEN));
    8544:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8548:	bf 40 e1 00 	mov	#225,	0(r15)	;#0x00e1, 0x0000(r15)
    854c:	00 00 
    854e:	1f 42 04 02 	mov	&0x0204,r15	
    8552:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    8556:	b0 12 68 81 	call	#0x8168	
    855a:	0f 93       	tst	r15		
    855c:	02 20       	jnz	$+6      	;abs 0x8562
    855e:	4f 43       	clr.b	r15		
    8560:	0d 3c       	jmp	$+28     	;abs 0x857c
        led_green_off();
    8562:	b0 12 90 9c 	call	#0x9c90	
	led_green_flag=0;	
    8566:	82 43 12 02 	mov	#0,	&0x0212	;r3 As==00
    }
    856a:	dd 3f       	jmp	$-68     	;abs 0x8526

    PT_END(pt);
    856c:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8570:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8574:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    8578:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    857c:	21 52       	add	#4,	r1	;r2 As==10
    857e:	34 41       	pop	r4		
    8580:	30 41       	ret			

00008582 <thread_led_red>:

static PT_THREAD(thread_led_red(struct pt *pt))
{
    8582:	04 12       	push	r4		
    8584:	04 41       	mov	r1,	r4	
    8586:	24 53       	incd	r4		
    8588:	21 82       	sub	#4,	r1	;r2 As==10
    858a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    858e:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    8592:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8596:	2f 4f       	mov	@r15,	r15	
    8598:	3f 90 ee 00 	cmp	#238,	r15	;#0x00ee
    859c:	13 24       	jz	$+40     	;abs 0x85c4
    859e:	3f 90 ef 00 	cmp	#239,	r15	;#0x00ef
    85a2:	03 2c       	jc	$+8      	;abs 0x85aa
    85a4:	0f 93       	tst	r15		
    85a6:	09 24       	jz	$+20     	;abs 0x85ba
    85a8:	3b 3c       	jmp	$+120    	;abs 0x8620
    85aa:	3f 90 f2 00 	cmp	#242,	r15	;#0x00f2
    85ae:	19 24       	jz	$+52     	;abs 0x85e2
    85b0:	3f 90 f6 00 	cmp	#246,	r15	;#0x00f6
    85b4:	2a 24       	jz	$+86     	;abs 0x860a
    85b6:	34 3c       	jmp	$+106    	;abs 0x8620
          led_red_duration));
        led_red_off();
        TIMER_LED_RED_ON = 0;
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_RED_ON,
          led_red_duration));
    }
    85b8:	03 43       	nop			
static PT_THREAD(thread_led_red(struct pt *pt))
{
    PT_BEGIN(pt);
    while(1)
    {
        PT_WAIT_UNTIL(pt, led_red_flag);
    85ba:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    85be:	bf 40 ee 00 	mov	#238,	0(r15)	;#0x00ee, 0x0000(r15)
    85c2:	00 00 
    85c4:	1f 42 16 02 	mov	&0x0216,r15	
    85c8:	0f 93       	tst	r15		
    85ca:	02 20       	jnz	$+6      	;abs 0x85d0
    85cc:	4f 43       	clr.b	r15		
    85ce:	30 3c       	jmp	$+98     	;abs 0x8630
        led_red_on();
    85d0:	b0 12 e4 9c 	call	#0x9ce4	
        TIMER_LED_RED_ON = 0;
    85d4:	82 43 02 02 	mov	#0,	&0x0202	;r3 As==00
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_RED_ON,
    85d8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    85dc:	bf 40 f2 00 	mov	#242,	0(r15)	;#0x00f2, 0x0000(r15)
    85e0:	00 00 
    85e2:	1f 42 14 02 	mov	&0x0214,r15	
    85e6:	0e 4f       	mov	r15,	r14	
    85e8:	1f 42 02 02 	mov	&0x0202,r15	
    85ec:	b0 12 68 81 	call	#0x8168	
    85f0:	0f 93       	tst	r15		
    85f2:	02 20       	jnz	$+6      	;abs 0x85f8
    85f4:	4f 43       	clr.b	r15		
    85f6:	1c 3c       	jmp	$+58     	;abs 0x8630
          led_red_duration));
        led_red_off();
    85f8:	b0 12 ce 9c 	call	#0x9cce	
        TIMER_LED_RED_ON = 0;
    85fc:	82 43 02 02 	mov	#0,	&0x0202	;r3 As==00
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_RED_ON,
    8600:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8604:	bf 40 f6 00 	mov	#246,	0(r15)	;#0x00f6, 0x0000(r15)
    8608:	00 00 
    860a:	1f 42 14 02 	mov	&0x0214,r15	
    860e:	0e 4f       	mov	r15,	r14	
    8610:	1f 42 02 02 	mov	&0x0202,r15	
    8614:	b0 12 68 81 	call	#0x8168	
    8618:	0f 93       	tst	r15		
    861a:	ce 23       	jnz	$-98     	;abs 0x85b8
    861c:	4f 43       	clr.b	r15		
    861e:	08 3c       	jmp	$+18     	;abs 0x8630
          led_red_duration));
    }

    PT_END(pt);
    8620:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8624:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8628:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    862c:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    8630:	21 52       	add	#4,	r1	;r2 As==10
    8632:	34 41       	pop	r4		
    8634:	30 41       	ret			

00008636 <uart_cb>:
/*
 * UART
 */

int uart_cb(uint8_t data)
{
    8636:	04 12       	push	r4		
    8638:	04 41       	mov	r1,	r4	
    863a:	24 53       	incd	r4		
    863c:	21 83       	decd	r1		
    863e:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    
    if(data == 27 && uart_flag==0){ //27 is ESC ascii code (decimal) 
    8642:	f4 90 1b 00 	cmp.b	#27,	-4(r4)	;#0x001b, 0xfffc(r4)
    8646:	fc ff 
    8648:	13 20       	jnz	$+40     	;abs 0x8670
    864a:	1f 42 1e 02 	mov	&0x021e,r15	
    864e:	0f 93       	tst	r15		
    8650:	0f 20       	jnz	$+32     	;abs 0x8670
        printf("Enter new id starting with the room number and then the sensor number. Press enter to accept\n");
    8652:	3f 40 4c b0 	mov	#-20404,r15	;#0xb04c
    8656:	b0 12 78 ae 	call	#0xae78	
        room_flag = 0;
    865a:	82 43 22 02 	mov	#0,	&0x0222	;r3 As==00
        uart_data = 0;
    865e:	82 43 20 02 	mov	#0,	&0x0220	;r3 As==00
        uart_flag=1;
    8662:	92 43 1e 02 	mov	#1,	&0x021e	;r3 As==01
        periodic_write_flag=0;
    8666:	82 43 18 02 	mov	#0,	&0x0218	;r3 As==00
        periodic_temp_flag=0;
    866a:	82 43 1a 02 	mov	#0,	&0x021a	;r3 As==00
    866e:	41 3c       	jmp	$+132    	;abs 0x86f2
    }
    else if(data == 13 && uart_flag==1){ //13 is return/enter ascii code
    8670:	f4 90 0d 00 	cmp.b	#13,	-4(r4)	;#0x000d, 0xfffc(r4)
    8674:	fc ff 
    8676:	0b 20       	jnz	$+24     	;abs 0x868e
    8678:	1f 42 1e 02 	mov	&0x021e,r15	
    867c:	1f 93       	cmp	#1,	r15	;r3 As==01
    867e:	07 20       	jnz	$+16     	;abs 0x868e
        uart_flag=0;
    8680:	82 43 1e 02 	mov	#0,	&0x021e	;r3 As==00
        periodic_write_flag=1;
    8684:	92 43 18 02 	mov	#1,	&0x0218	;r3 As==01
        periodic_temp_flag=1;
    8688:	92 43 1a 02 	mov	#1,	&0x021a	;r3 As==01
    868c:	32 3c       	jmp	$+102    	;abs 0x86f2
    }
    else {
    	if(room_flag == 0){
    868e:	1f 42 22 02 	mov	&0x0222,r15	
    8692:	0f 93       	tst	r15		
    8694:	12 20       	jnz	$+38     	;abs 0x86ba
    		printf("room : %c (hex code : %x)\n",data, data);
    8696:	5e 44 fc ff 	mov.b	-4(r4),	r14	;0xfffc(r4)
    869a:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    869e:	0e 12       	push	r14		
    86a0:	0f 12       	push	r15		
    86a2:	30 12 a9 b0 	push	#-20311	;#0xb0a9
    86a6:	b0 12 68 a5 	call	#0xa568	
    86aa:	31 50 06 00 	add	#6,	r1	;#0x0006
    		room = data;
    86ae:	d2 44 fc ff 	mov.b	-4(r4),	&0x0224	;0xfffc(r4)
    86b2:	24 02 
    		room_flag=1;
    86b4:	92 43 22 02 	mov	#1,	&0x0222	;r3 As==01
    86b8:	1c 3c       	jmp	$+58     	;abs 0x86f2
    		
    	}
        else if (room_flag == 1){
    86ba:	1f 42 22 02 	mov	&0x0222,r15	
    86be:	1f 93       	cmp	#1,	r15	;r3 As==01
    86c0:	18 20       	jnz	$+50     	;abs 0x86f2
        	printf("sensor: %c (hex code : %x)\n",data,data);
    86c2:	5e 44 fc ff 	mov.b	-4(r4),	r14	;0xfffc(r4)
    86c6:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    86ca:	0e 12       	push	r14		
    86cc:	0f 12       	push	r15		
    86ce:	30 12 c4 b0 	push	#-20284	;#0xb0c4
    86d2:	b0 12 68 a5 	call	#0xa568	
    86d6:	31 50 06 00 	add	#6,	r1	;#0x0006
        	uart_data = ((room & 0xFF) <<8) | (data & 0xFF) ;
    86da:	5f 42 24 02 	mov.b	&0x0224,r15	
    86de:	4f 4f       	mov.b	r15,	r15	
    86e0:	4f 4f       	mov.b	r15,	r15	
    86e2:	8f 10       	swpb	r15		
    86e4:	5e 44 fc ff 	mov.b	-4(r4),	r14	;0xfffc(r4)
    86e8:	0f de       	bis	r14,	r15	
    86ea:	82 4f 20 02 	mov	r15,	&0x0220	
        	//printf("uart_data : %x \n",uart_data);
        	room_flag = 0;
    86ee:	82 43 22 02 	mov	#0,	&0x0222	;r3 As==00
        }      
    }
        
    return 0;
    86f2:	0f 43       	clr	r15		
}
    86f4:	21 53       	incd	r1		
    86f6:	34 41       	pop	r4		
    86f8:	30 41       	ret			

000086fa <thread_uart>:

static PT_THREAD(thread_uart(struct pt *pt))
{
    86fa:	04 12       	push	r4		
    86fc:	04 41       	mov	r1,	r4	
    86fe:	24 53       	incd	r4		
    8700:	21 82       	sub	#4,	r1	;r2 As==10
    8702:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    8706:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    870a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    870e:	2f 4f       	mov	@r15,	r15	
    8710:	3f 90 29 01 	cmp	#297,	r15	;#0x0129
    8714:	0a 24       	jz	$+22     	;abs 0x872a
    8716:	3f 90 2b 01 	cmp	#299,	r15	;#0x012b
    871a:	14 24       	jz	$+42     	;abs 0x8744
    871c:	0f 93       	tst	r15		
    871e:	1f 20       	jnz	$+64     	;abs 0x875e

    while(1)
    {
        PT_WAIT_UNTIL(pt, uart_flag==1);
    8720:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8724:	bf 40 29 01 	mov	#297,	0(r15)	;#0x0129, 0x0000(r15)
    8728:	00 00 
    872a:	1f 42 1e 02 	mov	&0x021e,r15	
    872e:	1f 93       	cmp	#1,	r15	;r3 As==01
    8730:	02 24       	jz	$+6      	;abs 0x8736
    8732:	4f 43       	clr.b	r15		
    8734:	1c 3c       	jmp	$+58     	;abs 0x876e
        led_red_on();
    8736:	b0 12 e4 9c 	call	#0x9ce4	
        PT_WAIT_UNTIL(pt,uart_flag==0);
    873a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    873e:	bf 40 2b 01 	mov	#299,	0(r15)	;#0x012b, 0x0000(r15)
    8742:	00 00 
    8744:	1f 42 1e 02 	mov	&0x021e,r15	
    8748:	0f 93       	tst	r15		
    874a:	02 24       	jz	$+6      	;abs 0x8750
    874c:	4f 43       	clr.b	r15		
    874e:	0f 3c       	jmp	$+32     	;abs 0x876e
        set_node_id(uart_data);
    8750:	1f 42 20 02 	mov	&0x0220,r15	
    8754:	b0 12 d6 81 	call	#0x81d6	
        led_red_off();
    8758:	b0 12 ce 9c 	call	#0x9cce	
    }
    875c:	e1 3f       	jmp	$-60     	;abs 0x8720

    PT_END(pt);
    875e:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8762:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8766:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    876a:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    876e:	21 52       	add	#4,	r1	;r2 As==10
    8770:	34 41       	pop	r4		
    8772:	30 41       	ret			

00008774 <radio_cb>:
static char radio_rx_buffer[PKTLEN];
static char own_buffer[PKTLEN];
static int radio_rx_flag;

void radio_cb(uint8_t *buffer, int size, int8_t rssi)
{
    8774:	04 12       	push	r4		
    8776:	04 41       	mov	r1,	r4	
    8778:	24 53       	incd	r4		
    877a:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    877e:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    8782:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    8786:	c4 4d fc ff 	mov.b	r13,	-4(r4)	;0xfffc(r4)
        if (size > 0 && periodic_write_flag ==1)
    878a:	94 93 fa ff 	cmp	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    878e:	14 38       	jl	$+42     	;abs 0x87b8
    8790:	1f 42 18 02 	mov	&0x0218,r15	
    8794:	1f 93       	cmp	#1,	r15	;r3 As==01
    8796:	10 20       	jnz	$+34     	;abs 0x87b8
        {
            memcpy(radio_rx_buffer, buffer, PKTLEN);
    8798:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    879c:	3f 40 42 02 	mov	#578,	r15	;#0x0242
    87a0:	3d 40 1c 00 	mov	#28,	r13	;#0x001c
    87a4:	b0 12 6e a4 	call	#0xa46e	
            printhex(radio_rx_buffer,PKTLEN);
    87a8:	3e 40 1c 00 	mov	#28,	r14	;#0x001c
    87ac:	3f 40 42 02 	mov	#578,	r15	;#0x0242
    87b0:	b0 12 8a 81 	call	#0x818a	
            radio_rx_flag = 1;
    87b4:	92 43 7a 02 	mov	#1,	&0x027a	;r3 As==01
        {
            //DBG_PRINTF("msg packet error size=%d\r\n",size);
            //J'ai commenté la ligne supérieure pour la démo
        }

    cc2500_rx_enter();
    87b8:	b0 12 60 95 	call	#0x9560	
}
    87bc:	31 50 06 00 	add	#6,	r1	;#0x0006
    87c0:	34 41       	pop	r4		
    87c2:	30 41       	ret			

000087c4 <ezdisplay>:

void ezdisplay( char message[])
{
    87c4:	0b 12       	push	r11		
    87c6:	04 12       	push	r4		
    87c8:	04 41       	mov	r1,	r4	
    87ca:	24 52       	add	#4,	r4	;r2 As==10
    87cc:	31 50 f4 ff 	add	#-12,	r1	;#0xfff4
    87d0:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    char msproom=message[0]&0xFF;
    87d4:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    87d8:	e4 4f f4 ff 	mov.b	@r15,	-12(r4)	;0xfff4(r4)
    char mspsensor=message[1]&0xFF;
    87dc:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    87e0:	1f 53       	inc	r15		
    87e2:	e4 4f f5 ff 	mov.b	@r15,	-11(r4)	;0xfff5(r4)
    unsigned int time=0;
    87e6:	84 43 f0 ff 	mov	#0,	-16(r4)	;r3 As==00, 0xfff0(r4)
    
    printf("id:%c%c,",msproom,mspsensor);
    87ea:	5e 44 f5 ff 	mov.b	-11(r4),r14	;0xfff5(r4)
    87ee:	8e 11       	sxt	r14		
    87f0:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    87f4:	8f 11       	sxt	r15		
    87f6:	0e 12       	push	r14		
    87f8:	0f 12       	push	r15		
    87fa:	30 12 e0 b0 	push	#-20256	;#0xb0e0
    87fe:	b0 12 68 a5 	call	#0xa568	
    8802:	31 50 06 00 	add	#6,	r1	;#0x0006
    int i=3; //index 2 is the space charactere
    8806:	b4 40 03 00 	mov	#3,	-14(r4)	;#0x0003, 0xfff2(r4)
    880a:	f2 ff 
    while( i < PKTLEN-1)
    880c:	49 3c       	jmp	$+148    	;abs 0x88a0
    {
    	char msptemperature1=message[i++];
    880e:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    8812:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    8816:	e4 4f f6 ff 	mov.b	@r15,	-10(r4)	;0xfff6(r4)
    881a:	94 53 f2 ff 	inc	-14(r4)	;0xfff2(r4)
   	char msptemperature2=message[i++];
    881e:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    8822:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    8826:	e4 4f f7 ff 	mov.b	@r15,	-9(r4)	;0xfff7(r4)
    882a:	94 53 f2 ff 	inc	-14(r4)	;0xfff2(r4)
   	if ((message[i-1]&0xFF) == 0x2E || (message[i-2]&0xFF) == 0x2E )
    882e:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    8832:	3f 53       	add	#-1,	r15	;r3 As==11
    8834:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    8838:	6f 4f       	mov.b	@r15,	r15	
    883a:	8f 11       	sxt	r15		
    883c:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    8840:	3f 90 2e 00 	cmp	#46,	r15	;#0x002e
    8844:	31 24       	jz	$+100    	;abs 0x88a8
    8846:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    884a:	2f 83       	decd	r15		
    884c:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    8850:	6f 4f       	mov.b	@r15,	r15	
    8852:	8f 11       	sxt	r15		
    8854:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    8858:	3f 90 2e 00 	cmp	#46,	r15	;#0x002e
    885c:	25 24       	jz	$+76     	;abs 0x88a8
   	{
   		break;
   	}
    	int temperature=converter(msptemperature1, msptemperature2);
    885e:	5e 44 f7 ff 	mov.b	-9(r4),	r14	;0xfff7(r4)
    8862:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    8866:	b0 12 4c 82 	call	#0x824c	
    886a:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    	time += TIMER_SENSING_TEMP*TIMER_PERIOD_MS; //TIMER_SENSING_TEMP*TIMER_PERIOD_MS to get the time in ms (cf driver)
    886e:	b4 50 70 17 	add	#6000,	-16(r4)	;#0x1770, 0xfff0(r4)
    8872:	f0 ff 
    	printf("temperature: %d.%d,time:%u\n",temperature/10, temperature%10, time);
    8874:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    8878:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    887c:	b0 12 44 a4 	call	#0xa444	
    8880:	0b 4f       	mov	r15,	r11	
    8882:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    8886:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    888a:	b0 12 12 a4 	call	#0xa412	
    888e:	14 12 f0 ff 	push	-16(r4)	;0xfff0(r4)
    8892:	0b 12       	push	r11		
    8894:	0f 12       	push	r15		
    8896:	30 12 e9 b0 	push	#-20247	;#0xb0e9
    889a:	b0 12 68 a5 	call	#0xa568	
    889e:	31 52       	add	#8,	r1	;r2 As==11
    char mspsensor=message[1]&0xFF;
    unsigned int time=0;
    
    printf("id:%c%c,",msproom,mspsensor);
    int i=3; //index 2 is the space charactere
    while( i < PKTLEN-1)
    88a0:	b4 90 1b 00 	cmp	#27,	-14(r4)	;#0x001b, 0xfff2(r4)
    88a4:	f2 ff 
    88a6:	b3 3b       	jl	$-152    	;abs 0x880e
   	}
    	int temperature=converter(msptemperature1, msptemperature2);
    	time += TIMER_SENSING_TEMP*TIMER_PERIOD_MS; //TIMER_SENSING_TEMP*TIMER_PERIOD_MS to get the time in ms (cf driver)
    	printf("temperature: %d.%d,time:%u\n",temperature/10, temperature%10, time);
    }
}
    88a8:	31 50 0c 00 	add	#12,	r1	;#0x000c
    88ac:	34 41       	pop	r4		
    88ae:	3b 41       	pop	r11		
    88b0:	30 41       	ret			

000088b2 <thread_rx>:

static PT_THREAD(thread_rx(struct pt *pt))
{
    88b2:	04 12       	push	r4		
    88b4:	04 41       	mov	r1,	r4	
    88b6:	24 53       	incd	r4		
    88b8:	21 82       	sub	#4,	r1	;r2 As==10
    88ba:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    88be:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    88c2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    88c6:	2f 4f       	mov	@r15,	r15	
    88c8:	0f 93       	tst	r15		
    88ca:	04 24       	jz	$+10     	;abs 0x88d4
    88cc:	3f 90 67 01 	cmp	#359,	r15	;#0x0167
    88d0:	06 24       	jz	$+14     	;abs 0x88de
    88d2:	16 3c       	jmp	$+46     	;abs 0x8900

    while(1)
    {
        PT_WAIT_UNTIL(pt, radio_rx_flag == 1);
    88d4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    88d8:	bf 40 67 01 	mov	#359,	0(r15)	;#0x0167, 0x0000(r15)
    88dc:	00 00 
    88de:	1f 42 7a 02 	mov	&0x027a,r15	
    88e2:	1f 93       	cmp	#1,	r15	;r3 As==01
    88e4:	02 24       	jz	$+6      	;abs 0x88ea
    88e6:	4f 43       	clr.b	r15		
    88e8:	13 3c       	jmp	$+40     	;abs 0x8910
        led_green_on();
    88ea:	b0 12 a6 9c 	call	#0x9ca6	
        ezdisplay(radio_rx_buffer);
    88ee:	3f 40 42 02 	mov	#578,	r15	;#0x0242
    88f2:	b0 12 c4 87 	call	#0x87c4	
        radio_rx_flag = 0;
    88f6:	82 43 7a 02 	mov	#0,	&0x027a	;r3 As==00
        led_green_off();
    88fa:	b0 12 90 9c 	call	#0x9c90	
    }
    88fe:	ea 3f       	jmp	$-42     	;abs 0x88d4

    PT_END(pt);
    8900:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8904:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8908:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    890c:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    8910:	21 52       	add	#4,	r1	;r2 As==10
    8912:	34 41       	pop	r4		
    8914:	30 41       	ret			

00008916 <init_message>:




static void init_message()
{
    8916:	04 12       	push	r4		
    8918:	04 41       	mov	r1,	r4	
    891a:	24 53       	incd	r4		
    891c:	21 83       	decd	r1		
    unsigned int i;
    for(i = 0; i < PKTLEN; i++)
    891e:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc(r4)
    8922:	08 3c       	jmp	$+18     	;abs 0x8934
    {
        own_buffer[i] = 0x00;
    8924:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8928:	3f 50 5e 02 	add	#606,	r15	;#0x025e
    892c:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)


static void init_message()
{
    unsigned int i;
    for(i = 0; i < PKTLEN; i++)
    8930:	94 53 fc ff 	inc	-4(r4)		;0xfffc(r4)
    8934:	b4 90 1c 00 	cmp	#28,	-4(r4)	;#0x001c, 0xfffc(r4)
    8938:	fc ff 
    893a:	f4 2b       	jnc	$-22     	;abs 0x8924
    {
        own_buffer[i] = 0x00;
    }
    own_buffer[0] = (node_id>>8) &0xFF;
    893c:	1f 42 00 02 	mov	&0x0200,r15	
    8940:	8f 10       	swpb	r15		
    8942:	4f 4f       	mov.b	r15,	r15	
    8944:	4f 4f       	mov.b	r15,	r15	
    8946:	c2 4f 5e 02 	mov.b	r15,	&0x025e	
    own_buffer[1] = node_id & 0xFF;
    894a:	1f 42 00 02 	mov	&0x0200,r15	
    894e:	4f 4f       	mov.b	r15,	r15	
    8950:	c2 4f 5f 02 	mov.b	r15,	&0x025f	
    own_buffer[2] = 0x20;//hex code for SPACE char
    8954:	f2 40 20 00 	mov.b	#32,	&0x0260	;#0x0020
    8958:	60 02 
    current_buffer_pt = 3;
    895a:	b2 40 03 00 	mov	#3,	&0x021c	;#0x0003
    895e:	1c 02 
    
}
    8960:	21 53       	incd	r1		
    8962:	34 41       	pop	r4		
    8964:	30 41       	ret			

00008966 <write_message>:


static void write_message()
{
    8966:	04 12       	push	r4		
    8968:	04 41       	mov	r1,	r4	
    896a:	24 53       	incd	r4		
    //finish the sending buffer with a dot 
    own_buffer[current_buffer_pt] = 0x2E; //dot hex code
    896c:	1f 42 1c 02 	mov	&0x021c,r15	
    8970:	ff 40 2e 00 	mov.b	#46,	606(r15);#0x002e, 0x025e(r15)
    8974:	5e 02 
    current_buffer_pt = 0;
    8976:	82 43 1c 02 	mov	#0,	&0x021c	;r3 As==00
    led_green_on();
    897a:	b0 12 a6 9c 	call	#0x9ca6	
    ezdisplay(own_buffer);
    897e:	3f 40 5e 02 	mov	#606,	r15	;#0x025e
    8982:	b0 12 c4 87 	call	#0x87c4	
    led_green_off();
    8986:	b0 12 90 9c 	call	#0x9c90	
   
}
    898a:	34 41       	pop	r4		
    898c:	30 41       	ret			

0000898e <thread_periodic_writeTemp>:



static PT_THREAD(thread_periodic_writeTemp(struct pt *pt))
{
    898e:	04 12       	push	r4		
    8990:	04 41       	mov	r1,	r4	
    8992:	24 53       	incd	r4		
    8994:	21 82       	sub	#4,	r1	;r2 As==10
    8996:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    899a:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    899e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    89a2:	2f 4f       	mov	@r15,	r15	
    89a4:	3f 90 96 01 	cmp	#406,	r15	;#0x0196
    89a8:	0a 24       	jz	$+22     	;abs 0x89be
    89aa:	3f 90 99 01 	cmp	#409,	r15	;#0x0199
    89ae:	16 24       	jz	$+46     	;abs 0x89dc
    89b0:	0f 93       	tst	r15		
    89b2:	29 20       	jnz	$+84     	;abs 0x8a06

    while(1)
    {
        PT_WAIT_UNTIL(pt,periodic_write_flag==1);
    89b4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    89b8:	bf 40 96 01 	mov	#406,	0(r15)	;#0x0196, 0x0000(r15)
    89bc:	00 00 
    89be:	1f 42 18 02 	mov	&0x0218,r15	
    89c2:	1f 93       	cmp	#1,	r15	;r3 As==01
    89c4:	02 24       	jz	$+6      	;abs 0x89ca
    89c6:	4f 43       	clr.b	r15		
    89c8:	26 3c       	jmp	$+78     	;abs 0x8a16
        TIMER_WRITE = 0;
    89ca:	82 43 0e 02 	mov	#0,	&0x020e	;r3 As==00
        init_message();
    89ce:	b0 12 16 89 	call	#0x8916	
        PT_WAIT_UNTIL(pt, node_id != NODE_ID_UNDEFINED && timer_reached( TIMER_WRITE, TIMER_SEND) && periodic_write_flag==1);
    89d2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    89d6:	bf 40 99 01 	mov	#409,	0(r15)	;#0x0199, 0x0000(r15)
    89da:	00 00 
    89dc:	1f 42 00 02 	mov	&0x0200,r15	
    89e0:	0f 93       	tst	r15		
    89e2:	0c 24       	jz	$+26     	;abs 0x89fc
    89e4:	1f 42 0e 02 	mov	&0x020e,r15	
    89e8:	3e 40 71 17 	mov	#6001,	r14	;#0x1771
    89ec:	b0 12 68 81 	call	#0x8168	
    89f0:	0f 93       	tst	r15		
    89f2:	04 24       	jz	$+10     	;abs 0x89fc
    89f4:	1f 42 18 02 	mov	&0x0218,r15	
    89f8:	1f 93       	cmp	#1,	r15	;r3 As==01
    89fa:	02 24       	jz	$+6      	;abs 0x8a00
    89fc:	4f 43       	clr.b	r15		
    89fe:	0b 3c       	jmp	$+24     	;abs 0x8a16
        write_message();
    8a00:	b0 12 66 89 	call	#0x8966	
    }
    8a04:	d7 3f       	jmp	$-80     	;abs 0x89b4

    PT_END(pt);
    8a06:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8a0a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8a0e:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    8a12:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    8a16:	21 52       	add	#4,	r1	;r2 As==10
    8a18:	34 41       	pop	r4		
    8a1a:	30 41       	ret			

00008a1c <register_temperature>:
 * TEMP SENSOR
 */
 
 /* to be called from within a protothread */
static void register_temperature()
{
    8a1c:	04 12       	push	r4		
    8a1e:	04 41       	mov	r1,	r4	
    8a20:	24 53       	incd	r4		
    8a22:	21 82       	sub	#4,	r1	;r2 As==10
    
    int temperature = adc10_sample_temp();
    8a24:	b0 12 60 8b 	call	#0x8b60	
    8a28:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    /* msp430 is little endian, convert temperature to network order */
    char *pt = (char *) &temperature;    
    8a2c:	3f 40 fa ff 	mov	#-6,	r15	;#0xfffa
    8a30:	0f 54       	add	r4,	r15	
    8a32:	2f 53       	incd	r15		
    8a34:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    own_buffer[current_buffer_pt++] = pt[1];
    8a38:	1f 42 1c 02 	mov	&0x021c,r15	
    8a3c:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    8a40:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    8a44:	cf 4e 5e 02 	mov.b	r14,	606(r15);0x025e(r15)
    8a48:	1f 53       	inc	r15		
    8a4a:	82 4f 1c 02 	mov	r15,	&0x021c	
    own_buffer[current_buffer_pt++] = pt[0];
    8a4e:	1f 42 1c 02 	mov	&0x021c,r15	
    8a52:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    8a56:	6e 4e       	mov.b	@r14,	r14	
    8a58:	cf 4e 5e 02 	mov.b	r14,	606(r15);0x025e(r15)
    8a5c:	1f 53       	inc	r15		
    8a5e:	82 4f 1c 02 	mov	r15,	&0x021c	
    
}
    8a62:	21 52       	add	#4,	r1	;r2 As==10
    8a64:	34 41       	pop	r4		
    8a66:	30 41       	ret			

00008a68 <thread_periodic_temperature>:

static PT_THREAD(thread_periodic_temperature(struct pt *pt))
{
    8a68:	04 12       	push	r4		
    8a6a:	04 41       	mov	r1,	r4	
    8a6c:	24 53       	incd	r4		
    8a6e:	21 82       	sub	#4,	r1	;r2 As==10
    8a70:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    8a74:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    8a78:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8a7c:	2f 4f       	mov	@r15,	r15	
    8a7e:	3f 90 b7 01 	cmp	#439,	r15	;#0x01b7
    8a82:	0a 24       	jz	$+22     	;abs 0x8a98
    8a84:	3f 90 b9 01 	cmp	#441,	r15	;#0x01b9
    8a88:	14 24       	jz	$+42     	;abs 0x8ab2
    8a8a:	0f 93       	tst	r15		
    8a8c:	27 20       	jnz	$+80     	;abs 0x8adc

    while(1)
    {
        PT_WAIT_UNTIL(pt,periodic_temp_flag==1);
    8a8e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8a92:	bf 40 b7 01 	mov	#439,	0(r15)	;#0x01b7, 0x0000(r15)
    8a96:	00 00 
    8a98:	1f 42 1a 02 	mov	&0x021a,r15	
    8a9c:	1f 93       	cmp	#1,	r15	;r3 As==01
    8a9e:	02 24       	jz	$+6      	;abs 0x8aa4
    8aa0:	4f 43       	clr.b	r15		
    8aa2:	24 3c       	jmp	$+74     	;abs 0x8aec
        TIMER_TEMP = 0;
    8aa4:	82 43 0c 02 	mov	#0,	&0x020c	;r3 As==00
        PT_WAIT_UNTIL(pt, node_id != NODE_ID_UNDEFINED && timer_reached( TIMER_TEMP, TIMER_SENSING_TEMP) && periodic_temp_flag==1);
    8aa8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8aac:	bf 40 b9 01 	mov	#441,	0(r15)	;#0x01b9, 0x0000(r15)
    8ab0:	00 00 
    8ab2:	1f 42 00 02 	mov	&0x0200,r15	
    8ab6:	0f 93       	tst	r15		
    8ab8:	0c 24       	jz	$+26     	;abs 0x8ad2
    8aba:	1f 42 0c 02 	mov	&0x020c,r15	
    8abe:	3e 40 58 02 	mov	#600,	r14	;#0x0258
    8ac2:	b0 12 68 81 	call	#0x8168	
    8ac6:	0f 93       	tst	r15		
    8ac8:	04 24       	jz	$+10     	;abs 0x8ad2
    8aca:	1f 42 1a 02 	mov	&0x021a,r15	
    8ace:	1f 93       	cmp	#1,	r15	;r3 As==01
    8ad0:	02 24       	jz	$+6      	;abs 0x8ad6
    8ad2:	4f 43       	clr.b	r15		
    8ad4:	0b 3c       	jmp	$+24     	;abs 0x8aec
        register_temperature();
    8ad6:	b0 12 1c 8a 	call	#0x8a1c	
    }
    8ada:	d9 3f       	jmp	$-76     	;abs 0x8a8e

    PT_END(pt);
    8adc:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8ae0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8ae4:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    8ae8:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    8aec:	21 52       	add	#4,	r1	;r2 As==10
    8aee:	34 41       	pop	r4		
    8af0:	30 41       	ret			

00008af2 <adc10_start>:
    8af2:	04 12       	push	r4		
    8af4:	04 41       	mov	r1,	r4	
    8af6:	24 53       	incd	r4		
    8af8:	b2 40 86 10 	mov	#4230,	&0x0286	;#0x1086
    8afc:	86 02 
    8afe:	b2 40 dc 0a 	mov	#2780,	&0x0288	;#0x0adc
    8b02:	88 02 
    8b04:	34 41       	pop	r4		
    8b06:	30 41       	ret			

00008b08 <adc10_calibrate>:
    8b08:	04 12       	push	r4		
    8b0a:	04 41       	mov	r1,	r4	
    8b0c:	24 53       	incd	r4		
    8b0e:	21 82       	sub	#4,	r1	;r2 As==10
    8b10:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8b14:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    8b18:	84 93 fa ff 	tst	-6(r4)		;0xfffa(r4)
    8b1c:	04 24       	jz	$+10     	;abs 0x8b26
    8b1e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    8b22:	82 4f 86 02 	mov	r15,	&0x0286	
    8b26:	84 93 fc ff 	tst	-4(r4)		;0xfffc(r4)
    8b2a:	04 24       	jz	$+10     	;abs 0x8b34
    8b2c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8b30:	82 4f 88 02 	mov	r15,	&0x0288	
    8b34:	21 52       	add	#4,	r1	;r2 As==10
    8b36:	34 41       	pop	r4		
    8b38:	30 41       	ret			

00008b3a <adc10_stop>:
    8b3a:	04 12       	push	r4		
    8b3c:	04 41       	mov	r1,	r4	
    8b3e:	24 53       	incd	r4		
    8b40:	1f 42 b0 01 	mov	&0x01b0,r15	
    8b44:	3f f0 cf ff 	and	#-49,	r15	;#0xffcf
    8b48:	82 4f b0 01 	mov	r15,	&0x01b0	
    8b4c:	34 41       	pop	r4		
    8b4e:	30 41       	ret			

00008b50 <adc10irq>:
    8b50:	04 12       	push	r4		
    8b52:	04 41       	mov	r1,	r4	
    8b54:	24 53       	incd	r4		
    8b56:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    8b5a:	00 00 
    8b5c:	34 41       	pop	r4		
    8b5e:	00 13       	reti			

00008b60 <adc10_sample_temp>:
    8b60:	0b 12       	push	r11		
    8b62:	0a 12       	push	r10		
    8b64:	09 12       	push	r9		
    8b66:	08 12       	push	r8		
    8b68:	04 12       	push	r4		
    8b6a:	04 41       	mov	r1,	r4	
    8b6c:	34 50 0a 00 	add	#10,	r4	;#0x000a
    8b70:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    8b74:	b2 40 80 a0 	mov	#-24448,&0x01b2	;#0xa080
    8b78:	b2 01 
    8b7a:	b2 40 38 3c 	mov	#15416,	&0x01b0	;#0x3c38
    8b7e:	b0 01 
    8b80:	3e 40 3c 00 	mov	#60,	r14	;#0x003c
    8b84:	0f 43       	clr	r15		
    8b86:	b0 12 4c 9b 	call	#0x9b4c	
    8b8a:	1f 42 b0 01 	mov	&0x01b0,r15	
    8b8e:	3f d0 03 00 	bis	#3,	r15	;#0x0003
    8b92:	82 4f b0 01 	mov	r15,	&0x01b0	
    8b96:	32 d0 10 00 	bis	#16,	r2	;#0x0010
    8b9a:	1f 42 b4 01 	mov	&0x01b4,r15	
    8b9e:	08 4f       	mov	r15,	r8	
    8ba0:	09 43       	clr	r9		
    8ba2:	84 48 f2 ff 	mov	r8,	-14(r4)	;0xfff2(r4)
    8ba6:	84 49 f4 ff 	mov	r9,	-12(r4)	;0xfff4(r4)
    8baa:	1f 42 b0 01 	mov	&0x01b0,r15	
    8bae:	3f f0 fd ff 	and	#-3,	r15	;#0xfffd
    8bb2:	82 4f b0 01 	mov	r15,	&0x01b0	
    8bb6:	1f 42 b0 01 	mov	&0x01b0,r15	
    8bba:	3f f0 cf ff 	and	#-49,	r15	;#0xffcf
    8bbe:	82 4f b0 01 	mov	r15,	&0x01b0	
    8bc2:	1f 42 86 02 	mov	&0x0286,r15	
    8bc6:	0a 4f       	mov	r15,	r10	
    8bc8:	0f 4a       	mov	r10,	r15	
    8bca:	8f 10       	swpb	r15		
    8bcc:	8f 11       	sxt	r15		
    8bce:	8f 10       	swpb	r15		
    8bd0:	8f 11       	sxt	r15		
    8bd2:	0b 4f       	mov	r15,	r11	
    8bd4:	1e 44 f2 ff 	mov	-14(r4),r14	;0xfff2(r4)
    8bd8:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    8bdc:	0c 4e       	mov	r14,	r12	
    8bde:	0d 4f       	mov	r15,	r13	
    8be0:	0e 4a       	mov	r10,	r14	
    8be2:	0f 4b       	mov	r11,	r15	
    8be4:	b0 12 e6 a3 	call	#0xa3e6	
    8be8:	0f 93       	tst	r15		
    8bea:	04 38       	jl	$+10     	;abs 0x8bf4
    8bec:	1f 93       	cmp	#1,	r15	;r3 As==01
    8bee:	05 34       	jge	$+12     	;abs 0x8bfa
    8bf0:	0e 93       	tst	r14		
    8bf2:	03 2c       	jc	$+8      	;abs 0x8bfa
    8bf4:	3e 50 ff 03 	add	#1023,	r14	;#0x03ff
    8bf8:	0f 63       	adc	r15		
    8bfa:	8e 10       	swpb	r14		
    8bfc:	8f 10       	swpb	r15		
    8bfe:	4e ef       	xor.b	r15,	r14	
    8c00:	0e ef       	xor	r15,	r14	
    8c02:	8f 11       	sxt	r15		
    8c04:	0f 11       	rra	r15		
    8c06:	0e 10       	rrc	r14		
    8c08:	0f 11       	rra	r15		
    8c0a:	0e 10       	rrc	r14		
    8c0c:	1f 42 88 02 	mov	&0x0288,r15	
    8c10:	0d 4e       	mov	r14,	r13	
    8c12:	0d 8f       	sub	r15,	r13	
    8c14:	0f 4d       	mov	r13,	r15	
    8c16:	84 4f f0 ff 	mov	r15,	-16(r4)	;0xfff0(r4)
    8c1a:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    8c1e:	31 50 06 00 	add	#6,	r1	;#0x0006
    8c22:	34 41       	pop	r4		
    8c24:	38 41       	pop	r8		
    8c26:	39 41       	pop	r9		
    8c28:	3a 41       	pop	r10		
    8c2a:	3b 41       	pop	r11		
    8c2c:	30 41       	ret			

00008c2e <adc10_sample_avcc>:
    8c2e:	0b 12       	push	r11		
    8c30:	0a 12       	push	r10		
    8c32:	04 12       	push	r4		
    8c34:	04 41       	mov	r1,	r4	
    8c36:	34 50 06 00 	add	#6,	r4	;#0x0006
    8c3a:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    8c3e:	b2 40 00 b0 	mov	#-20480,&0x01b2	;#0xb000
    8c42:	b2 01 
    8c44:	b2 40 78 30 	mov	#12408,	&0x01b0	;#0x3078
    8c48:	b0 01 
    8c4a:	3e 40 3c 00 	mov	#60,	r14	;#0x003c
    8c4e:	0f 43       	clr	r15		
    8c50:	b0 12 4c 9b 	call	#0x9b4c	
    8c54:	1f 42 b0 01 	mov	&0x01b0,r15	
    8c58:	3f d0 03 00 	bis	#3,	r15	;#0x0003
    8c5c:	82 4f b0 01 	mov	r15,	&0x01b0	
    8c60:	32 d0 10 00 	bis	#16,	r2	;#0x0010
    8c64:	1f 42 b4 01 	mov	&0x01b4,r15	
    8c68:	0a 4f       	mov	r15,	r10	
    8c6a:	0b 43       	clr	r11		
    8c6c:	84 4a f6 ff 	mov	r10,	-10(r4)	;0xfff6(r4)
    8c70:	84 4b f8 ff 	mov	r11,	-8(r4)	;0xfff8(r4)
    8c74:	1f 42 b0 01 	mov	&0x01b0,r15	
    8c78:	3f f0 fd ff 	and	#-3,	r15	;#0xfffd
    8c7c:	82 4f b0 01 	mov	r15,	&0x01b0	
    8c80:	1f 42 b0 01 	mov	&0x01b0,r15	
    8c84:	3f f0 cf ff 	and	#-49,	r15	;#0xffcf
    8c88:	82 4f b0 01 	mov	r15,	&0x01b0	
    8c8c:	1a 44 f6 ff 	mov	-10(r4),r10	;0xfff6(r4)
    8c90:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    8c94:	0c 4a       	mov	r10,	r12	
    8c96:	0d 4b       	mov	r11,	r13	
    8c98:	0e 4c       	mov	r12,	r14	
    8c9a:	0f 4d       	mov	r13,	r15	
    8c9c:	0e 5e       	rla	r14		
    8c9e:	0f 6f       	rlc	r15		
    8ca0:	0e 5e       	rla	r14		
    8ca2:	0f 6f       	rlc	r15		
    8ca4:	0c 4e       	mov	r14,	r12	
    8ca6:	0d 4f       	mov	r15,	r13	
    8ca8:	0c 5a       	add	r10,	r12	
    8caa:	0d 6b       	addc	r11,	r13	
    8cac:	0e 4c       	mov	r12,	r14	
    8cae:	0f 4d       	mov	r13,	r15	
    8cb0:	0e 5e       	rla	r14		
    8cb2:	0f 6f       	rlc	r15		
    8cb4:	0e 5e       	rla	r14		
    8cb6:	0f 6f       	rlc	r15		
    8cb8:	0e 5c       	add	r12,	r14	
    8cba:	0f 6d       	addc	r13,	r15	
    8cbc:	0f 93       	tst	r15		
    8cbe:	04 38       	jl	$+10     	;abs 0x8cc8
    8cc0:	1f 93       	cmp	#1,	r15	;r3 As==01
    8cc2:	05 34       	jge	$+12     	;abs 0x8cce
    8cc4:	0e 93       	tst	r14		
    8cc6:	03 2c       	jc	$+8      	;abs 0x8cce
    8cc8:	3e 50 ff 01 	add	#511,	r14	;#0x01ff
    8ccc:	0f 63       	adc	r15		
    8cce:	8e 10       	swpb	r14		
    8cd0:	8f 10       	swpb	r15		
    8cd2:	4e ef       	xor.b	r15,	r14	
    8cd4:	0e ef       	xor	r15,	r14	
    8cd6:	8f 11       	sxt	r15		
    8cd8:	0f 11       	rra	r15		
    8cda:	0e 10       	rrc	r14		
    8cdc:	84 4e f4 ff 	mov	r14,	-12(r4)	;0xfff4(r4)
    8ce0:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    8ce4:	31 50 06 00 	add	#6,	r1	;#0x0006
    8ce8:	34 41       	pop	r4		
    8cea:	3a 41       	pop	r10		
    8cec:	3b 41       	pop	r11		
    8cee:	30 41       	ret			

00008cf0 <CC2500_HW_GDO0_IRQ_ON_ASSERT>:
    8cf0:	04 12       	push	r4		
    8cf2:	04 41       	mov	r1,	r4	
    8cf4:	24 53       	incd	r4		
    8cf6:	5f 42 2c 00 	mov.b	&0x002c,r15	
    8cfa:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8cfe:	c2 4f 2c 00 	mov.b	r15,	&0x002c	
    8d02:	34 41       	pop	r4		
    8d04:	30 41       	ret			

00008d06 <CC2500_HW_GDO2_IRQ_ON_ASSERT>:
    8d06:	04 12       	push	r4		
    8d08:	04 41       	mov	r1,	r4	
    8d0a:	24 53       	incd	r4		
    8d0c:	5f 42 2c 00 	mov.b	&0x002c,r15	
    8d10:	7f f0 7f 00 	and.b	#127,	r15	;#0x007f
    8d14:	c2 4f 2c 00 	mov.b	r15,	&0x002c	
    8d18:	34 41       	pop	r4		
    8d1a:	30 41       	ret			

00008d1c <CC2500_HW_GDO0_DINT>:
    8d1c:	04 12       	push	r4		
    8d1e:	04 41       	mov	r1,	r4	
    8d20:	24 53       	incd	r4		
    8d22:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8d26:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8d2a:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
    8d2e:	34 41       	pop	r4		
    8d30:	30 41       	ret			

00008d32 <CC2500_HW_GDO2_DINT>:
    8d32:	04 12       	push	r4		
    8d34:	04 41       	mov	r1,	r4	
    8d36:	24 53       	incd	r4		
    8d38:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8d3c:	7f f0 7f 00 	and.b	#127,	r15	;#0x007f
    8d40:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
    8d44:	34 41       	pop	r4		
    8d46:	30 41       	ret			

00008d48 <CC2500_HW_GDO0_EINT>:
    8d48:	04 12       	push	r4		
    8d4a:	04 41       	mov	r1,	r4	
    8d4c:	24 53       	incd	r4		
    8d4e:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8d52:	7f d0 40 00 	bis.b	#64,	r15	;#0x0040
    8d56:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
    8d5a:	34 41       	pop	r4		
    8d5c:	30 41       	ret			

00008d5e <CC2500_HW_GDO0_CLEAR_FLAG>:
    8d5e:	04 12       	push	r4		
    8d60:	04 41       	mov	r1,	r4	
    8d62:	24 53       	incd	r4		
    8d64:	5f 42 2b 00 	mov.b	&0x002b,r15	
    8d68:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8d6c:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
    8d70:	34 41       	pop	r4		
    8d72:	30 41       	ret			

00008d74 <CC2500_HW_GDO2_CLEAR_FLAG>:
    8d74:	04 12       	push	r4		
    8d76:	04 41       	mov	r1,	r4	
    8d78:	24 53       	incd	r4		
    8d7a:	5f 42 2b 00 	mov.b	&0x002b,r15	
    8d7e:	7f f0 7f 00 	and.b	#127,	r15	;#0x007f
    8d82:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
    8d86:	34 41       	pop	r4		
    8d88:	30 41       	ret			

00008d8a <CONFIG_GDO0_PIN_AS_INPUT>:
    8d8a:	04 12       	push	r4		
    8d8c:	04 41       	mov	r1,	r4	
    8d8e:	24 53       	incd	r4		
    8d90:	5f 42 2e 00 	mov.b	&0x002e,r15	
    8d94:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8d98:	c2 4f 2e 00 	mov.b	r15,	&0x002e	
    8d9c:	34 41       	pop	r4		
    8d9e:	30 41       	ret			

00008da0 <CC2500_HW_INIT>:
    8da0:	04 12       	push	r4		
    8da2:	04 41       	mov	r1,	r4	
    8da4:	24 53       	incd	r4		
    8da6:	5f 42 2e 00 	mov.b	&0x002e,r15	
    8daa:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8dae:	c2 4f 2e 00 	mov.b	r15,	&0x002e	
    8db2:	5f 42 2a 00 	mov.b	&0x002a,r15	
    8db6:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8dba:	c2 4f 2a 00 	mov.b	r15,	&0x002a	
    8dbe:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8dc2:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8dc6:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
    8dca:	5f 42 2c 00 	mov.b	&0x002c,r15	
    8dce:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8dd2:	c2 4f 2c 00 	mov.b	r15,	&0x002c	
    8dd6:	5f 42 2b 00 	mov.b	&0x002b,r15	
    8dda:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8dde:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
    8de2:	5f 42 2f 00 	mov.b	&0x002f,r15	
    8de6:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    8dea:	c2 4f 2f 00 	mov.b	r15,	&0x002f	
    8dee:	34 41       	pop	r4		
    8df0:	30 41       	ret			

00008df2 <CC2500_SPI_TX>:
    8df2:	04 12       	push	r4		
    8df4:	04 41       	mov	r1,	r4	
    8df6:	24 53       	incd	r4		
    8df8:	21 83       	decd	r1		
    8dfa:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8dfe:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8e02:	b0 12 da 9d 	call	#0x9dda	
    8e06:	4f 4f       	mov.b	r15,	r15	
    8e08:	c2 4f a8 02 	mov.b	r15,	&0x02a8	
    8e0c:	21 53       	incd	r1		
    8e0e:	34 41       	pop	r4		
    8e10:	30 41       	ret			

00008e12 <CC2500_SPI_STROBE>:
    8e12:	04 12       	push	r4		
    8e14:	04 41       	mov	r1,	r4	
    8e16:	24 53       	incd	r4		
    8e18:	21 83       	decd	r1		
    8e1a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8e1e:	b0 12 be 9e 	call	#0x9ebe	
    8e22:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8e26:	b0 12 f2 8d 	call	#0x8df2	
    8e2a:	b0 12 d4 9e 	call	#0x9ed4	
    8e2e:	21 53       	incd	r1		
    8e30:	34 41       	pop	r4		
    8e32:	30 41       	ret			

00008e34 <CC2500_SPI_WREG>:
    8e34:	04 12       	push	r4		
    8e36:	04 41       	mov	r1,	r4	
    8e38:	24 53       	incd	r4		
    8e3a:	21 82       	sub	#4,	r1	;r2 As==10
    8e3c:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8e40:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    8e44:	b0 12 be 9e 	call	#0x9ebe	
    8e48:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    8e4c:	b0 12 f2 8d 	call	#0x8df2	
    8e50:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8e54:	b0 12 f2 8d 	call	#0x8df2	
    8e58:	b0 12 d4 9e 	call	#0x9ed4	
    8e5c:	21 52       	add	#4,	r1	;r2 As==10
    8e5e:	34 41       	pop	r4		
    8e60:	30 41       	ret			

00008e62 <CC2500_SPI_RREG>:
    8e62:	04 12       	push	r4		
    8e64:	04 41       	mov	r1,	r4	
    8e66:	24 53       	incd	r4		
    8e68:	21 82       	sub	#4,	r1	;r2 As==10
    8e6a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8e6e:	b0 12 be 9e 	call	#0x9ebe	
    8e72:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8e76:	3f d0 80 00 	bis	#128,	r15	;#0x0080
    8e7a:	b0 12 f2 8d 	call	#0x8df2	
    8e7e:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8e82:	b0 12 da 9d 	call	#0x9dda	
    8e86:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    8e8a:	b0 12 d4 9e 	call	#0x9ed4	
    8e8e:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    8e92:	21 52       	add	#4,	r1	;r2 As==10
    8e94:	34 41       	pop	r4		
    8e96:	30 41       	ret			

00008e98 <CC2500_SPI_ROREG>:
    8e98:	04 12       	push	r4		
    8e9a:	04 41       	mov	r1,	r4	
    8e9c:	24 53       	incd	r4		
    8e9e:	21 82       	sub	#4,	r1	;r2 As==10
    8ea0:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8ea4:	b0 12 be 9e 	call	#0x9ebe	
    8ea8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8eac:	3f d0 c0 00 	bis	#192,	r15	;#0x00c0
    8eb0:	b0 12 f2 8d 	call	#0x8df2	
    8eb4:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8eb8:	b0 12 da 9d 	call	#0x9dda	
    8ebc:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    8ec0:	b0 12 d4 9e 	call	#0x9ed4	
    8ec4:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    8ec8:	21 52       	add	#4,	r1	;r2 As==10
    8eca:	34 41       	pop	r4		
    8ecc:	30 41       	ret			

00008ece <CC2500_SPI_TX_BYTE>:
    8ece:	04 12       	push	r4		
    8ed0:	04 41       	mov	r1,	r4	
    8ed2:	24 53       	incd	r4		
    8ed4:	21 82       	sub	#4,	r1	;r2 As==10
    8ed6:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8eda:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    8ede:	b0 12 be 9e 	call	#0x9ebe	
    8ee2:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    8ee6:	b0 12 f2 8d 	call	#0x8df2	
    8eea:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8eee:	b0 12 f2 8d 	call	#0x8df2	
    8ef2:	b0 12 d4 9e 	call	#0x9ed4	
    8ef6:	21 52       	add	#4,	r1	;r2 As==10
    8ef8:	34 41       	pop	r4		
    8efa:	30 41       	ret			

00008efc <CC2500_SPI_RX_BYTE>:
    8efc:	04 12       	push	r4		
    8efe:	04 41       	mov	r1,	r4	
    8f00:	24 53       	incd	r4		
    8f02:	21 82       	sub	#4,	r1	;r2 As==10
    8f04:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    8f08:	b0 12 be 9e 	call	#0x9ebe	
    8f0c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f10:	3f d0 80 00 	bis	#128,	r15	;#0x0080
    8f14:	b0 12 f2 8d 	call	#0x8df2	
    8f18:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8f1c:	b0 12 da 9d 	call	#0x9dda	
    8f20:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    8f24:	b0 12 d4 9e 	call	#0x9ed4	
    8f28:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    8f2c:	21 52       	add	#4,	r1	;r2 As==10
    8f2e:	34 41       	pop	r4		
    8f30:	30 41       	ret			

00008f32 <CC2500_SPI_TX_BURST>:
    8f32:	04 12       	push	r4		
    8f34:	04 41       	mov	r1,	r4	
    8f36:	24 53       	incd	r4		
    8f38:	31 82       	sub	#8,	r1	;r2 As==11
    8f3a:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    8f3e:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    8f42:	84 4d fc ff 	mov	r13,	-4(r4)	;0xfffc(r4)
    8f46:	c4 43 f6 ff 	mov.b	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    8f4a:	b0 12 be 9e 	call	#0x9ebe	
    8f4e:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    8f52:	3f d0 40 00 	bis	#64,	r15	;#0x0040
    8f56:	b0 12 f2 8d 	call	#0x8df2	
    8f5a:	c4 43 f6 ff 	mov.b	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    8f5e:	0a 3c       	jmp	$+22     	;abs 0x8f74
    8f60:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    8f64:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    8f68:	6f 4f       	mov.b	@r15,	r15	
    8f6a:	8f 11       	sxt	r15		
    8f6c:	b0 12 f2 8d 	call	#0x8df2	
    8f70:	d4 53 f6 ff 	inc.b	-10(r4)	;0xfff6(r4)
    8f74:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    8f78:	1f 94 fc ff 	cmp	-4(r4),	r15	;0xfffc(r4)
    8f7c:	f1 3b       	jl	$-28     	;abs 0x8f60
    8f7e:	b0 12 d4 9e 	call	#0x9ed4	
    8f82:	31 52       	add	#8,	r1	;r2 As==11
    8f84:	34 41       	pop	r4		
    8f86:	30 41       	ret			

00008f88 <CC2500_SPI_RX_BURST>:
    8f88:	0b 12       	push	r11		
    8f8a:	04 12       	push	r4		
    8f8c:	04 41       	mov	r1,	r4	
    8f8e:	24 52       	add	#4,	r4	;r2 As==10
    8f90:	31 82       	sub	#8,	r1	;r2 As==11
    8f92:	84 4f f6 ff 	mov	r15,	-10(r4)	;0xfff6(r4)
    8f96:	84 4e f8 ff 	mov	r14,	-8(r4)	;0xfff8(r4)
    8f9a:	84 4d fa ff 	mov	r13,	-6(r4)	;0xfffa(r4)
    8f9e:	c4 43 f4 ff 	mov.b	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    8fa2:	b0 12 be 9e 	call	#0x9ebe	
    8fa6:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    8faa:	3f d0 c0 00 	bis	#192,	r15	;#0x00c0
    8fae:	b0 12 f2 8d 	call	#0x8df2	
    8fb2:	c4 43 f4 ff 	mov.b	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    8fb6:	0e 3c       	jmp	$+30     	;abs 0x8fd4
    8fb8:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    8fbc:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    8fc0:	0b 5f       	add	r15,	r11	
    8fc2:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8fc6:	b0 12 da 9d 	call	#0x9dda	
    8fca:	4f 4f       	mov.b	r15,	r15	
    8fcc:	cb 4f 00 00 	mov.b	r15,	0(r11)	;0x0000(r11)
    8fd0:	d4 53 f4 ff 	inc.b	-12(r4)	;0xfff4(r4)
    8fd4:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    8fd8:	1f 94 fa ff 	cmp	-6(r4),	r15	;0xfffa(r4)
    8fdc:	ed 3b       	jl	$-36     	;abs 0x8fb8
    8fde:	b0 12 d4 9e 	call	#0x9ed4	
    8fe2:	31 52       	add	#8,	r1	;r2 As==11
    8fe4:	34 41       	pop	r4		
    8fe6:	3b 41       	pop	r11		
    8fe8:	30 41       	ret			

00008fea <CC2500_SPI_RX_FIFO_BYTE>:
    8fea:	04 12       	push	r4		
    8fec:	04 41       	mov	r1,	r4	
    8fee:	24 53       	incd	r4		
    8ff0:	21 83       	decd	r1		
    8ff2:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    8ff6:	b0 12 fc 8e 	call	#0x8efc	
    8ffa:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    8ffe:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9002:	21 53       	incd	r1		
    9004:	34 41       	pop	r4		
    9006:	30 41       	ret			

00009008 <cc2500_wait_status>:
    9008:	04 12       	push	r4		
    900a:	04 41       	mov	r1,	r4	
    900c:	24 53       	incd	r4		
    900e:	21 82       	sub	#4,	r1	;r2 As==10
    9010:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9014:	3f 40 3d 00 	mov	#61,	r15	;#0x003d
    9018:	b0 12 12 8e 	call	#0x8e12	
    901c:	5f 42 a8 02 	mov.b	&0x02a8,r15	
    9020:	4f 4f       	mov.b	r15,	r15	
    9022:	4f 4f       	mov.b	r15,	r15	
    9024:	12 c3       	clrc			
    9026:	4f 10       	rrc.b	r15		
    9028:	12 c3       	clrc			
    902a:	4f 10       	rrc.b	r15		
    902c:	12 c3       	clrc			
    902e:	4f 10       	rrc.b	r15		
    9030:	12 c3       	clrc			
    9032:	4f 10       	rrc.b	r15		
    9034:	4e 4f       	mov.b	r15,	r14	
    9036:	7e f0 07 00 	and.b	#7,	r14	;#0x0007
    903a:	c4 4e fa ff 	mov.b	r14,	-6(r4)	;0xfffa(r4)
    903e:	d4 94 fa ff 	cmp.b	-6(r4),	-4(r4)	;0xfffa(r4), 0xfffc(r4)
    9042:	fc ff 
    9044:	e7 23       	jnz	$-48     	;abs 0x9014
    9046:	21 52       	add	#4,	r1	;r2 As==10
    9048:	34 41       	pop	r4		
    904a:	30 41       	ret			

0000904c <cc2500_gdo0_set_signal>:
    904c:	04 12       	push	r4		
    904e:	04 41       	mov	r1,	r4	
    9050:	24 53       	incd	r4		
    9052:	21 82       	sub	#4,	r1	;r2 As==10
    9054:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9058:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    905c:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    9060:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    9064:	d2 44 fa ff 	mov.b	-6(r4),	&0x02a4	;0xfffa(r4)
    9068:	a4 02 
    906a:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    906e:	0e 4f       	mov	r15,	r14	
    9070:	2f 43       	mov	#2,	r15	;r3 As==10
    9072:	b0 12 34 8e 	call	#0x8e34	
    9076:	21 52       	add	#4,	r1	;r2 As==10
    9078:	34 41       	pop	r4		
    907a:	30 41       	ret			

0000907c <cc2500_gdo2_set_signal>:
    907c:	04 12       	push	r4		
    907e:	04 41       	mov	r1,	r4	
    9080:	24 53       	incd	r4		
    9082:	21 82       	sub	#4,	r1	;r2 As==10
    9084:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9088:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    908c:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    9090:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    9094:	d2 44 fa ff 	mov.b	-6(r4),	&0x02a0	;0xfffa(r4)
    9098:	a0 02 
    909a:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    909e:	0e 4f       	mov	r15,	r14	
    90a0:	0f 43       	clr	r15		
    90a2:	b0 12 34 8e 	call	#0x8e34	
    90a6:	21 52       	add	#4,	r1	;r2 As==10
    90a8:	34 41       	pop	r4		
    90aa:	30 41       	ret			

000090ac <cc2500_set_fifo_threshold>:
    90ac:	04 12       	push	r4		
    90ae:	04 41       	mov	r1,	r4	
    90b0:	24 53       	incd	r4		
    90b2:	21 82       	sub	#4,	r1	;r2 As==10
    90b4:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    90b8:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    90bc:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f
    90c0:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    90c4:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    90c8:	0e 4f       	mov	r15,	r14	
    90ca:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    90ce:	b0 12 34 8e 	call	#0x8e34	
    90d2:	21 52       	add	#4,	r1	;r2 As==10
    90d4:	34 41       	pop	r4		
    90d6:	30 41       	ret			

000090d8 <cc2500_check_tx_underflow>:
    90d8:	04 12       	push	r4		
    90da:	04 41       	mov	r1,	r4	
    90dc:	24 53       	incd	r4		
    90de:	21 83       	decd	r1		
    90e0:	3f 40 3d 00 	mov	#61,	r15	;#0x003d
    90e4:	b0 12 12 8e 	call	#0x8e12	
    90e8:	5f 42 a8 02 	mov.b	&0x02a8,r15	
    90ec:	4f 4f       	mov.b	r15,	r15	
    90ee:	4f 4f       	mov.b	r15,	r15	
    90f0:	12 c3       	clrc			
    90f2:	4f 10       	rrc.b	r15		
    90f4:	12 c3       	clrc			
    90f6:	4f 10       	rrc.b	r15		
    90f8:	12 c3       	clrc			
    90fa:	4f 10       	rrc.b	r15		
    90fc:	12 c3       	clrc			
    90fe:	4f 10       	rrc.b	r15		
    9100:	4f 4f       	mov.b	r15,	r15	
    9102:	0e 4f       	mov	r15,	r14	
    9104:	3e f0 07 00 	and	#7,	r14	;#0x0007
    9108:	1f 43       	mov	#1,	r15	;r3 As==01
    910a:	3e 90 07 00 	cmp	#7,	r14	;#0x0007
    910e:	01 24       	jz	$+4      	;abs 0x9112
    9110:	0f 43       	clr	r15		
    9112:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9116:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    911a:	21 53       	incd	r1		
    911c:	34 41       	pop	r4		
    911e:	30 41       	ret			

00009120 <cc2500_check_rx_overflow>:
    9120:	04 12       	push	r4		
    9122:	04 41       	mov	r1,	r4	
    9124:	24 53       	incd	r4		
    9126:	21 83       	decd	r1		
    9128:	3f 40 3d 00 	mov	#61,	r15	;#0x003d
    912c:	b0 12 12 8e 	call	#0x8e12	
    9130:	5f 42 a8 02 	mov.b	&0x02a8,r15	
    9134:	4f 4f       	mov.b	r15,	r15	
    9136:	4f 4f       	mov.b	r15,	r15	
    9138:	12 c3       	clrc			
    913a:	4f 10       	rrc.b	r15		
    913c:	12 c3       	clrc			
    913e:	4f 10       	rrc.b	r15		
    9140:	12 c3       	clrc			
    9142:	4f 10       	rrc.b	r15		
    9144:	12 c3       	clrc			
    9146:	4f 10       	rrc.b	r15		
    9148:	4f 4f       	mov.b	r15,	r15	
    914a:	0e 4f       	mov	r15,	r14	
    914c:	3e f0 07 00 	and	#7,	r14	;#0x0007
    9150:	5f 43       	mov.b	#1,	r15	;r3 As==01
    9152:	3e 90 06 00 	cmp	#6,	r14	;#0x0006
    9156:	01 24       	jz	$+4      	;abs 0x915a
    9158:	4f 43       	clr.b	r15		
    915a:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    915e:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9162:	8f 11       	sxt	r15		
    9164:	21 53       	incd	r1		
    9166:	34 41       	pop	r4		
    9168:	30 41       	ret			

0000916a <cc2500_check_fifo_xflow_flush>:
    916a:	04 12       	push	r4		
    916c:	04 41       	mov	r1,	r4	
    916e:	24 53       	incd	r4		
    9170:	b0 12 d8 90 	call	#0x90d8	
    9174:	0f 93       	tst	r15		
    9176:	04 24       	jz	$+10     	;abs 0x9180
    9178:	3f 40 3b 00 	mov	#59,	r15	;#0x003b
    917c:	b0 12 12 8e 	call	#0x8e12	
    9180:	b0 12 20 91 	call	#0x9120	
    9184:	0f 93       	tst	r15		
    9186:	04 24       	jz	$+10     	;abs 0x9190
    9188:	3f 40 3a 00 	mov	#58,	r15	;#0x003a
    918c:	b0 12 12 8e 	call	#0x8e12	
    9190:	34 41       	pop	r4		
    9192:	30 41       	ret			

00009194 <cc2500_configure>:
    9194:	04 12       	push	r4		
    9196:	04 41       	mov	r1,	r4	
    9198:	24 53       	incd	r4		
    919a:	21 83       	decd	r1		
    919c:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    91a0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    91a4:	6f 4f       	mov.b	@r15,	r15	
    91a6:	4f 4f       	mov.b	r15,	r15	
    91a8:	0e 4f       	mov	r15,	r14	
    91aa:	3f 40 0b 00 	mov	#11,	r15	;#0x000b
    91ae:	b0 12 34 8e 	call	#0x8e34	
    91b2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    91b6:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    91ba:	4f 4f       	mov.b	r15,	r15	
    91bc:	0e 4f       	mov	r15,	r14	
    91be:	3f 40 0c 00 	mov	#12,	r15	;#0x000c
    91c2:	b0 12 34 8e 	call	#0x8e34	
    91c6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    91ca:	5f 4f 02 00 	mov.b	2(r15),	r15	;0x0002(r15)
    91ce:	4f 4f       	mov.b	r15,	r15	
    91d0:	0e 4f       	mov	r15,	r14	
    91d2:	3f 40 0d 00 	mov	#13,	r15	;#0x000d
    91d6:	b0 12 34 8e 	call	#0x8e34	
    91da:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    91de:	5f 4f 03 00 	mov.b	3(r15),	r15	;0x0003(r15)
    91e2:	4f 4f       	mov.b	r15,	r15	
    91e4:	0e 4f       	mov	r15,	r14	
    91e6:	3f 40 0e 00 	mov	#14,	r15	;#0x000e
    91ea:	b0 12 34 8e 	call	#0x8e34	
    91ee:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    91f2:	5f 4f 04 00 	mov.b	4(r15),	r15	;0x0004(r15)
    91f6:	4f 4f       	mov.b	r15,	r15	
    91f8:	0e 4f       	mov	r15,	r14	
    91fa:	3f 40 0f 00 	mov	#15,	r15	;#0x000f
    91fe:	b0 12 34 8e 	call	#0x8e34	
    9202:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9206:	5f 4f 05 00 	mov.b	5(r15),	r15	;0x0005(r15)
    920a:	4f 4f       	mov.b	r15,	r15	
    920c:	0e 4f       	mov	r15,	r14	
    920e:	3f 40 10 00 	mov	#16,	r15	;#0x0010
    9212:	b0 12 34 8e 	call	#0x8e34	
    9216:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    921a:	5f 4f 06 00 	mov.b	6(r15),	r15	;0x0006(r15)
    921e:	4f 4f       	mov.b	r15,	r15	
    9220:	0e 4f       	mov	r15,	r14	
    9222:	3f 40 11 00 	mov	#17,	r15	;#0x0011
    9226:	b0 12 34 8e 	call	#0x8e34	
    922a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    922e:	5f 4f 07 00 	mov.b	7(r15),	r15	;0x0007(r15)
    9232:	4f 4f       	mov.b	r15,	r15	
    9234:	0e 4f       	mov	r15,	r14	
    9236:	3f 40 12 00 	mov	#18,	r15	;#0x0012
    923a:	b0 12 34 8e 	call	#0x8e34	
    923e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9242:	5f 4f 08 00 	mov.b	8(r15),	r15	;0x0008(r15)
    9246:	4f 4f       	mov.b	r15,	r15	
    9248:	0e 4f       	mov	r15,	r14	
    924a:	3f 40 13 00 	mov	#19,	r15	;#0x0013
    924e:	b0 12 34 8e 	call	#0x8e34	
    9252:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9256:	5f 4f 09 00 	mov.b	9(r15),	r15	;0x0009(r15)
    925a:	4f 4f       	mov.b	r15,	r15	
    925c:	0e 4f       	mov	r15,	r14	
    925e:	3f 40 14 00 	mov	#20,	r15	;#0x0014
    9262:	b0 12 34 8e 	call	#0x8e34	
    9266:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    926a:	5f 4f 0a 00 	mov.b	10(r15),r15	;0x000a(r15)
    926e:	4f 4f       	mov.b	r15,	r15	
    9270:	0e 4f       	mov	r15,	r14	
    9272:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    9276:	b0 12 34 8e 	call	#0x8e34	
    927a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    927e:	5f 4f 0b 00 	mov.b	11(r15),r15	;0x000b(r15)
    9282:	4f 4f       	mov.b	r15,	r15	
    9284:	0e 4f       	mov	r15,	r14	
    9286:	3f 40 15 00 	mov	#21,	r15	;#0x0015
    928a:	b0 12 34 8e 	call	#0x8e34	
    928e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9292:	5f 4f 0c 00 	mov.b	12(r15),r15	;0x000c(r15)
    9296:	4f 4f       	mov.b	r15,	r15	
    9298:	0e 4f       	mov	r15,	r14	
    929a:	3f 40 21 00 	mov	#33,	r15	;#0x0021
    929e:	b0 12 34 8e 	call	#0x8e34	
    92a2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    92a6:	5f 4f 0d 00 	mov.b	13(r15),r15	;0x000d(r15)
    92aa:	4f 4f       	mov.b	r15,	r15	
    92ac:	0e 4f       	mov	r15,	r14	
    92ae:	3f 40 22 00 	mov	#34,	r15	;#0x0022
    92b2:	b0 12 34 8e 	call	#0x8e34	
    92b6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    92ba:	5f 4f 0e 00 	mov.b	14(r15),r15	;0x000e(r15)
    92be:	4f 4f       	mov.b	r15,	r15	
    92c0:	0e 4f       	mov	r15,	r14	
    92c2:	3f 40 18 00 	mov	#24,	r15	;#0x0018
    92c6:	b0 12 34 8e 	call	#0x8e34	
    92ca:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    92ce:	5f 4f 0f 00 	mov.b	15(r15),r15	;0x000f(r15)
    92d2:	4f 4f       	mov.b	r15,	r15	
    92d4:	0e 4f       	mov	r15,	r14	
    92d6:	3f 40 19 00 	mov	#25,	r15	;#0x0019
    92da:	b0 12 34 8e 	call	#0x8e34	
    92de:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    92e2:	5f 4f 10 00 	mov.b	16(r15),r15	;0x0010(r15)
    92e6:	4f 4f       	mov.b	r15,	r15	
    92e8:	0e 4f       	mov	r15,	r14	
    92ea:	3f 40 1a 00 	mov	#26,	r15	;#0x001a
    92ee:	b0 12 34 8e 	call	#0x8e34	
    92f2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    92f6:	5f 4f 11 00 	mov.b	17(r15),r15	;0x0011(r15)
    92fa:	4f 4f       	mov.b	r15,	r15	
    92fc:	0e 4f       	mov	r15,	r14	
    92fe:	3f 40 1b 00 	mov	#27,	r15	;#0x001b
    9302:	b0 12 34 8e 	call	#0x8e34	
    9306:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    930a:	5f 4f 12 00 	mov.b	18(r15),r15	;0x0012(r15)
    930e:	4f 4f       	mov.b	r15,	r15	
    9310:	0e 4f       	mov	r15,	r14	
    9312:	3f 40 1c 00 	mov	#28,	r15	;#0x001c
    9316:	b0 12 34 8e 	call	#0x8e34	
    931a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    931e:	5f 4f 13 00 	mov.b	19(r15),r15	;0x0013(r15)
    9322:	4f 4f       	mov.b	r15,	r15	
    9324:	0e 4f       	mov	r15,	r14	
    9326:	3f 40 1d 00 	mov	#29,	r15	;#0x001d
    932a:	b0 12 34 8e 	call	#0x8e34	
    932e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9332:	5f 4f 14 00 	mov.b	20(r15),r15	;0x0014(r15)
    9336:	4f 4f       	mov.b	r15,	r15	
    9338:	0e 4f       	mov	r15,	r14	
    933a:	3f 40 23 00 	mov	#35,	r15	;#0x0023
    933e:	b0 12 34 8e 	call	#0x8e34	
    9342:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9346:	5f 4f 15 00 	mov.b	21(r15),r15	;0x0015(r15)
    934a:	4f 4f       	mov.b	r15,	r15	
    934c:	0e 4f       	mov	r15,	r14	
    934e:	3f 40 24 00 	mov	#36,	r15	;#0x0024
    9352:	b0 12 34 8e 	call	#0x8e34	
    9356:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    935a:	5f 4f 16 00 	mov.b	22(r15),r15	;0x0016(r15)
    935e:	4f 4f       	mov.b	r15,	r15	
    9360:	0e 4f       	mov	r15,	r14	
    9362:	3f 40 25 00 	mov	#37,	r15	;#0x0025
    9366:	b0 12 34 8e 	call	#0x8e34	
    936a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    936e:	5f 4f 17 00 	mov.b	23(r15),r15	;0x0017(r15)
    9372:	4f 4f       	mov.b	r15,	r15	
    9374:	0e 4f       	mov	r15,	r14	
    9376:	3f 40 26 00 	mov	#38,	r15	;#0x0026
    937a:	b0 12 34 8e 	call	#0x8e34	
    937e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9382:	5f 4f 18 00 	mov.b	24(r15),r15	;0x0018(r15)
    9386:	4f 4f       	mov.b	r15,	r15	
    9388:	0e 4f       	mov	r15,	r14	
    938a:	3f 40 29 00 	mov	#41,	r15	;#0x0029
    938e:	b0 12 34 8e 	call	#0x8e34	
    9392:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9396:	5f 4f 19 00 	mov.b	25(r15),r15	;0x0019(r15)
    939a:	4f 4f       	mov.b	r15,	r15	
    939c:	0e 4f       	mov	r15,	r14	
    939e:	3f 40 2c 00 	mov	#44,	r15	;#0x002c
    93a2:	b0 12 34 8e 	call	#0x8e34	
    93a6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    93aa:	5f 4f 1a 00 	mov.b	26(r15),r15	;0x001a(r15)
    93ae:	4f 4f       	mov.b	r15,	r15	
    93b0:	0e 4f       	mov	r15,	r14	
    93b2:	3f 40 2d 00 	mov	#45,	r15	;#0x002d
    93b6:	b0 12 34 8e 	call	#0x8e34	
    93ba:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    93be:	5f 4f 1b 00 	mov.b	27(r15),r15	;0x001b(r15)
    93c2:	4f 4f       	mov.b	r15,	r15	
    93c4:	0e 4f       	mov	r15,	r14	
    93c6:	3f 40 2e 00 	mov	#46,	r15	;#0x002e
    93ca:	b0 12 34 8e 	call	#0x8e34	
    93ce:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    93d2:	5f 4f 1c 00 	mov.b	28(r15),r15	;0x001c(r15)
    93d6:	4f 4f       	mov.b	r15,	r15	
    93d8:	0e 4f       	mov	r15,	r14	
    93da:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    93de:	b0 12 34 8e 	call	#0x8e34	
    93e2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    93e6:	5f 4f 1d 00 	mov.b	29(r15),r15	;0x001d(r15)
    93ea:	4f 4f       	mov.b	r15,	r15	
    93ec:	0e 4f       	mov	r15,	r14	
    93ee:	0f 43       	clr	r15		
    93f0:	b0 12 34 8e 	call	#0x8e34	
    93f4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    93f8:	5f 4f 1e 00 	mov.b	30(r15),r15	;0x001e(r15)
    93fc:	4f 4f       	mov.b	r15,	r15	
    93fe:	0e 4f       	mov	r15,	r14	
    9400:	2f 43       	mov	#2,	r15	;r3 As==10
    9402:	b0 12 34 8e 	call	#0x8e34	
    9406:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    940a:	5f 4f 1f 00 	mov.b	31(r15),r15	;0x001f(r15)
    940e:	4f 4f       	mov.b	r15,	r15	
    9410:	0e 4f       	mov	r15,	r14	
    9412:	3f 40 07 00 	mov	#7,	r15	;#0x0007
    9416:	b0 12 34 8e 	call	#0x8e34	
    941a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    941e:	5f 4f 20 00 	mov.b	32(r15),r15	;0x0020(r15)
    9422:	4f 4f       	mov.b	r15,	r15	
    9424:	0e 4f       	mov	r15,	r14	
    9426:	3f 42       	mov	#8,	r15	;r2 As==11
    9428:	b0 12 34 8e 	call	#0x8e34	
    942c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9430:	5f 4f 21 00 	mov.b	33(r15),r15	;0x0021(r15)
    9434:	4f 4f       	mov.b	r15,	r15	
    9436:	0e 4f       	mov	r15,	r14	
    9438:	3f 40 09 00 	mov	#9,	r15	;#0x0009
    943c:	b0 12 34 8e 	call	#0x8e34	
    9440:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9444:	5f 4f 22 00 	mov.b	34(r15),r15	;0x0022(r15)
    9448:	4f 4f       	mov.b	r15,	r15	
    944a:	0e 4f       	mov	r15,	r14	
    944c:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    9450:	b0 12 34 8e 	call	#0x8e34	
    9454:	3e 40 fe 00 	mov	#254,	r14	;#0x00fe
    9458:	3f 40 3e 00 	mov	#62,	r15	;#0x003e
    945c:	b0 12 34 8e 	call	#0x8e34	
    9460:	7f 40 0f 00 	mov.b	#15,	r15	;#0x000f
    9464:	b0 12 ac 90 	call	#0x90ac	
    9468:	5f 43       	mov.b	#1,	r15	;r3 As==01
    946a:	b0 12 4c 90 	call	#0x904c	
    946e:	b0 12 f0 8c 	call	#0x8cf0	
    9472:	b0 12 1c 8d 	call	#0x8d1c	
    9476:	7f 40 06 00 	mov.b	#6,	r15	;#0x0006
    947a:	b0 12 7c 90 	call	#0x907c	
    947e:	b0 12 06 8d 	call	#0x8d06	
    9482:	b0 12 32 8d 	call	#0x8d32	
    9486:	21 53       	incd	r1		
    9488:	34 41       	pop	r4		
    948a:	30 41       	ret			

0000948c <cc2500_set_channel>:
    948c:	04 12       	push	r4		
    948e:	04 41       	mov	r1,	r4	
    9490:	24 53       	incd	r4		
    9492:	21 83       	decd	r1		
    9494:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9498:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    949c:	0e 4f       	mov	r15,	r14	
    949e:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    94a2:	b0 12 34 8e 	call	#0x8e34	
    94a6:	21 53       	incd	r1		
    94a8:	34 41       	pop	r4		
    94aa:	30 41       	ret			

000094ac <cc2500_calibrate>:
    94ac:	04 12       	push	r4		
    94ae:	04 41       	mov	r1,	r4	
    94b0:	24 53       	incd	r4		
    94b2:	b0 12 4c 97 	call	#0x974c	
    94b6:	3f 40 33 00 	mov	#51,	r15	;#0x0033
    94ba:	b0 12 12 8e 	call	#0x8e12	
    94be:	4f 43       	clr.b	r15		
    94c0:	b0 12 08 90 	call	#0x9008	
    94c4:	34 41       	pop	r4		
    94c6:	30 41       	ret			

000094c8 <cc2500_utx>:
    94c8:	04 12       	push	r4		
    94ca:	04 41       	mov	r1,	r4	
    94cc:	24 53       	incd	r4		
    94ce:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    94d2:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    94d6:	c4 4e fc ff 	mov.b	r14,	-4(r4)	;0xfffc(r4)
    94da:	b0 12 4c 97 	call	#0x974c	
    94de:	b0 12 32 8d 	call	#0x8d32	
    94e2:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    94e6:	0e 4f       	mov	r15,	r14	
    94e8:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    94ec:	b0 12 ce 8e 	call	#0x8ece	
    94f0:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    94f4:	0d 4f       	mov	r15,	r13	
    94f6:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    94fa:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    94fe:	b0 12 32 8f 	call	#0x8f32	
    9502:	3f 40 35 00 	mov	#53,	r15	;#0x0035
    9506:	b0 12 12 8e 	call	#0x8e12	
    950a:	3f 40 3a 00 	mov	#58,	r15	;#0x003a
    950e:	b0 12 98 8e 	call	#0x8e98	
    9512:	c4 4f f8 ff 	mov.b	r15,	-8(r4)	;0xfff8(r4)
    9516:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    951a:	3f f0 7f 00 	and	#127,	r15	;#0x007f
    951e:	1f 93       	cmp	#1,	r15	;r3 As==01
    9520:	f4 37       	jge	$-22     	;abs 0x950a
    9522:	b0 12 5e 8d 	call	#0x8d5e	
    9526:	b0 12 74 8d 	call	#0x8d74	
    952a:	31 50 06 00 	add	#6,	r1	;#0x0006
    952e:	34 41       	pop	r4		
    9530:	30 41       	ret			

00009532 <cc2500_rx_register_buffer>:
    9532:	04 12       	push	r4		
    9534:	04 41       	mov	r1,	r4	
    9536:	24 53       	incd	r4		
    9538:	21 82       	sub	#4,	r1	;r2 As==10
    953a:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    953e:	c4 4e fc ff 	mov.b	r14,	-4(r4)	;0xfffc(r4)
    9542:	92 44 fa ff 	mov	-6(r4),	&0x02a6	;0xfffa(r4)
    9546:	a6 02 
    9548:	c2 43 8a 02 	mov.b	#0,	&0x028a	;r3 As==00
    954c:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9550:	0e 4f       	mov	r15,	r14	
    9552:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    9556:	b0 12 34 8e 	call	#0x8e34	
    955a:	21 52       	add	#4,	r1	;r2 As==10
    955c:	34 41       	pop	r4		
    955e:	30 41       	ret			

00009560 <cc2500_rx_enter>:
    9560:	04 12       	push	r4		
    9562:	04 41       	mov	r1,	r4	
    9564:	24 53       	incd	r4		
    9566:	b0 12 4c 97 	call	#0x974c	
    956a:	c2 43 8a 02 	mov.b	#0,	&0x028a	;r3 As==00
    956e:	b0 12 5e 8d 	call	#0x8d5e	
    9572:	b0 12 74 8d 	call	#0x8d74	
    9576:	b0 12 48 8d 	call	#0x8d48	
    957a:	b0 12 32 8d 	call	#0x8d32	
    957e:	3f 40 34 00 	mov	#52,	r15	;#0x0034
    9582:	b0 12 12 8e 	call	#0x8e12	
    9586:	5f 43       	mov.b	#1,	r15	;r3 As==01
    9588:	b0 12 08 90 	call	#0x9008	
    958c:	34 41       	pop	r4		
    958e:	30 41       	ret			

00009590 <cc2500_rx_pkt_eop>:
    9590:	0b 12       	push	r11		
    9592:	04 12       	push	r4		
    9594:	04 41       	mov	r1,	r4	
    9596:	24 52       	add	#4,	r4	;r2 As==10
    9598:	31 50 f6 ff 	add	#-10,	r1	;#0xfff6
    959c:	3f 40 3b 00 	mov	#59,	r15	;#0x003b
    95a0:	b0 12 98 8e 	call	#0x8e98	
    95a4:	c4 4f f2 ff 	mov.b	r15,	-14(r4)	;0xfff2(r4)
    95a8:	d4 44 f2 ff 	mov.b	-14(r4),-10(r4)	;0xfff2(r4), 0xfff6(r4)
    95ac:	f6 ff 
    95ae:	c4 43 f7 ff 	mov.b	#0,	-9(r4)	;r3 As==00, 0xfff7(r4)
    95b2:	3f 40 3b 00 	mov	#59,	r15	;#0x003b
    95b6:	b0 12 98 8e 	call	#0x8e98	
    95ba:	c4 4f f2 ff 	mov.b	r15,	-14(r4)	;0xfff2(r4)
    95be:	e4 93 f2 ff 	cmp.b	#2,	-14(r4)	;r3 As==10, 0xfff2(r4)
    95c2:	05 2c       	jc	$+12     	;abs 0x95ce
    95c4:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    95c8:	1f 94 f6 ff 	cmp	-10(r4),r15	;0xfff6(r4)
    95cc:	ed 23       	jnz	$-36     	;abs 0x95a8
    95ce:	c4 93 f2 ff 	tst.b	-14(r4)	;0xfff2(r4)
    95d2:	68 24       	jz	$+210    	;abs 0x96a4
    95d4:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    95d8:	4f 93       	tst.b	r15		
    95da:	59 38       	jl	$+180    	;abs 0x968e
    95dc:	b0 12 ea 8f 	call	#0x8fea	
    95e0:	c4 4f f8 ff 	mov.b	r15,	-8(r4)	;0xfff8(r4)
    95e4:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    95e8:	0e 4f       	mov	r15,	r14	
    95ea:	3e 53       	add	#-1,	r14	;r3 As==11
    95ec:	1f 42 a6 02 	mov	&0x02a6,r15	
    95f0:	0d 4e       	mov	r14,	r13	
    95f2:	0e 4f       	mov	r15,	r14	
    95f4:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    95f8:	b0 12 88 8f 	call	#0x8f88	
    95fc:	1e 42 a6 02 	mov	&0x02a6,r14	
    9600:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    9604:	0f 5e       	add	r14,	r15	
    9606:	6f 4f       	mov.b	@r15,	r15	
    9608:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    960c:	c4 43 fb ff 	mov.b	#0,	-5(r4)	;r3 As==00, 0xfffb(r4)
    9610:	b4 90 80 00 	cmp	#128,	-6(r4)	;#0x0080, 0xfffa(r4)
    9614:	fa ff 
    9616:	0e 38       	jl	$+30     	;abs 0x9634
    9618:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    961c:	3f 50 00 ff 	add	#-256,	r15	;#0xff00
    9620:	0f 93       	tst	r15		
    9622:	01 34       	jge	$+4      	;abs 0x9626
    9624:	1f 53       	inc	r15		
    9626:	0f 11       	rra	r15		
    9628:	0e 4f       	mov	r15,	r14	
    962a:	3e 50 b8 ff 	add	#-72,	r14	;#0xffb8
    962e:	84 4e f4 ff 	mov	r14,	-12(r4)	;0xfff4(r4)
    9632:	0b 3c       	jmp	$+24     	;abs 0x964a
    9634:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    9638:	0f 93       	tst	r15		
    963a:	01 34       	jge	$+4      	;abs 0x963e
    963c:	1f 53       	inc	r15		
    963e:	0f 11       	rra	r15		
    9640:	0e 4f       	mov	r15,	r14	
    9642:	3e 50 b8 ff 	add	#-72,	r14	;#0xffb8
    9646:	84 4e f4 ff 	mov	r14,	-12(r4)	;0xfff4(r4)
    964a:	1e 42 a6 02 	mov	&0x02a6,r14	
    964e:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    9652:	1f 53       	inc	r15		
    9654:	0f 5e       	add	r14,	r15	
    9656:	6f 4f       	mov.b	@r15,	r15	
    9658:	4f 93       	tst.b	r15		
    965a:	0e 34       	jge	$+30     	;abs 0x9678
    965c:	1c 42 a2 02 	mov	&0x02a2,r12	
    9660:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    9664:	4e 4f       	mov.b	r15,	r14	
    9666:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    966a:	1b 42 a6 02 	mov	&0x02a6,r11	
    966e:	4d 4e       	mov.b	r14,	r13	
    9670:	0e 4f       	mov	r15,	r14	
    9672:	0f 4b       	mov	r11,	r15	
    9674:	8c 12       	call	r12		
    9676:	1f 3c       	jmp	$+64     	;abs 0x96b6
    9678:	b0 12 6a 91 	call	#0x916a	
    967c:	1c 42 a2 02 	mov	&0x02a2,r12	
    9680:	1f 42 a6 02 	mov	&0x02a6,r15	
    9684:	4d 43       	clr.b	r13		
    9686:	3e 40 fd ff 	mov	#-3,	r14	;#0xfffd
    968a:	8c 12       	call	r12		
    968c:	14 3c       	jmp	$+42     	;abs 0x96b6
    968e:	b0 12 6a 91 	call	#0x916a	
    9692:	1c 42 a2 02 	mov	&0x02a2,r12	
    9696:	1f 42 a6 02 	mov	&0x02a6,r15	
    969a:	4d 43       	clr.b	r13		
    969c:	3e 40 fe ff 	mov	#-2,	r14	;#0xfffe
    96a0:	8c 12       	call	r12		
    96a2:	09 3c       	jmp	$+20     	;abs 0x96b6
    96a4:	b0 12 6a 91 	call	#0x916a	
    96a8:	1c 42 a2 02 	mov	&0x02a2,r12	
    96ac:	1f 42 a6 02 	mov	&0x02a6,r15	
    96b0:	4d 43       	clr.b	r13		
    96b2:	3e 43       	mov	#-1,	r14	;r3 As==11
    96b4:	8c 12       	call	r12		
    96b6:	b0 12 5e 8d 	call	#0x8d5e	
    96ba:	b0 12 74 8d 	call	#0x8d74	
    96be:	31 50 0a 00 	add	#10,	r1	;#0x000a
    96c2:	34 41       	pop	r4		
    96c4:	3b 41       	pop	r11		
    96c6:	30 41       	ret			

000096c8 <cc2500_rx_register_cb>:
    96c8:	04 12       	push	r4		
    96ca:	04 41       	mov	r1,	r4	
    96cc:	24 53       	incd	r4		
    96ce:	21 83       	decd	r1		
    96d0:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    96d4:	92 44 fc ff 	mov	-4(r4),	&0x02a2	;0xfffc(r4)
    96d8:	a2 02 
    96da:	21 53       	incd	r1		
    96dc:	34 41       	pop	r4		
    96de:	30 41       	ret			

000096e0 <cc2500_packet_status>:
    96e0:	04 12       	push	r4		
    96e2:	04 41       	mov	r1,	r4	
    96e4:	24 53       	incd	r4		
    96e6:	21 83       	decd	r1		
    96e8:	3f 40 38 00 	mov	#56,	r15	;#0x0038
    96ec:	b0 12 98 8e 	call	#0x8e98	
    96f0:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    96f4:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    96f8:	21 53       	incd	r1		
    96fa:	34 41       	pop	r4		
    96fc:	30 41       	ret			

000096fe <cc2500_cca>:
    96fe:	04 12       	push	r4		
    9700:	04 41       	mov	r1,	r4	
    9702:	24 53       	incd	r4		
    9704:	21 83       	decd	r1		
    9706:	b0 12 e0 96 	call	#0x96e0	
    970a:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    970e:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9712:	4f 4f       	mov.b	r15,	r15	
    9714:	12 c3       	clrc			
    9716:	4f 10       	rrc.b	r15		
    9718:	12 c3       	clrc			
    971a:	4f 10       	rrc.b	r15		
    971c:	12 c3       	clrc			
    971e:	4f 10       	rrc.b	r15		
    9720:	12 c3       	clrc			
    9722:	4f 10       	rrc.b	r15		
    9724:	4f 4f       	mov.b	r15,	r15	
    9726:	1f f3       	and	#1,	r15	;r3 As==01
    9728:	21 53       	incd	r1		
    972a:	34 41       	pop	r4		
    972c:	30 41       	ret			

0000972e <cc2500_get_rssi>:
    972e:	04 12       	push	r4		
    9730:	04 41       	mov	r1,	r4	
    9732:	24 53       	incd	r4		
    9734:	21 83       	decd	r1		
    9736:	3f 40 34 00 	mov	#52,	r15	;#0x0034
    973a:	b0 12 98 8e 	call	#0x8e98	
    973e:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9742:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9746:	21 53       	incd	r1		
    9748:	34 41       	pop	r4		
    974a:	30 41       	ret			

0000974c <cc2500_idle>:
    974c:	04 12       	push	r4		
    974e:	04 41       	mov	r1,	r4	
    9750:	24 53       	incd	r4		
    9752:	b0 12 1c 8d 	call	#0x8d1c	
    9756:	b0 12 32 8d 	call	#0x8d32	
    975a:	b0 12 6a 91 	call	#0x916a	
    975e:	3f 40 36 00 	mov	#54,	r15	;#0x0036
    9762:	b0 12 12 8e 	call	#0x8e12	
    9766:	4f 43       	clr.b	r15		
    9768:	b0 12 08 90 	call	#0x9008	
    976c:	34 41       	pop	r4		
    976e:	30 41       	ret			

00009770 <cc2500_sleep>:
    9770:	04 12       	push	r4		
    9772:	04 41       	mov	r1,	r4	
    9774:	24 53       	incd	r4		
    9776:	3f 40 39 00 	mov	#57,	r15	;#0x0039
    977a:	b0 12 12 8e 	call	#0x8e12	
    977e:	34 41       	pop	r4		
    9780:	30 41       	ret			

00009782 <cc2500_reset>:
    9782:	04 12       	push	r4		
    9784:	04 41       	mov	r1,	r4	
    9786:	24 53       	incd	r4		
    9788:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    978c:	b0 12 12 8e 	call	#0x8e12	
    9790:	4f 43       	clr.b	r15		
    9792:	b0 12 08 90 	call	#0x9008	
    9796:	34 41       	pop	r4		
    9798:	30 41       	ret			

0000979a <cc2500_wakeup>:
    979a:	04 12       	push	r4		
    979c:	04 41       	mov	r1,	r4	
    979e:	24 53       	incd	r4		
    97a0:	b0 12 be 9e 	call	#0x9ebe	
    97a4:	03 43       	nop			
    97a6:	b0 12 14 9e 	call	#0x9e14	
    97aa:	0f 93       	tst	r15		
    97ac:	fc 23       	jnz	$-6      	;abs 0x97a6
    97ae:	b0 12 d4 9e 	call	#0x9ed4	
    97b2:	b0 12 4c 97 	call	#0x974c	
    97b6:	4f 43       	clr.b	r15		
    97b8:	b0 12 08 90 	call	#0x9008	
    97bc:	34 41       	pop	r4		
    97be:	30 41       	ret			

000097c0 <cc2500_variables_bootstrap>:
    97c0:	04 12       	push	r4		
    97c2:	04 41       	mov	r1,	r4	
    97c4:	24 53       	incd	r4		
    97c6:	c2 43 a8 02 	mov.b	#0,	&0x02a8	;r3 As==00
    97ca:	82 43 a6 02 	mov	#0,	&0x02a6	;r3 As==00
    97ce:	c2 43 8a 02 	mov.b	#0,	&0x028a	;r3 As==00
    97d2:	c2 43 8c 02 	mov.b	#0,	&0x028c	;r3 As==00
    97d6:	34 41       	pop	r4		
    97d8:	30 41       	ret			

000097da <CC_ASSERT>:
    97da:	04 12       	push	r4		
    97dc:	04 41       	mov	r1,	r4	
    97de:	24 53       	incd	r4		
    97e0:	21 83       	decd	r1		
    97e2:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    97e6:	21 53       	incd	r1		
    97e8:	34 41       	pop	r4		
    97ea:	30 41       	ret			

000097ec <cc2500_init>:
    97ec:	04 12       	push	r4		
    97ee:	04 41       	mov	r1,	r4	
    97f0:	24 53       	incd	r4		
    97f2:	21 83       	decd	r1		
    97f4:	b0 12 c0 97 	call	#0x97c0	
    97f8:	b0 12 a0 8d 	call	#0x8da0	
    97fc:	b0 12 8a 8d 	call	#0x8d8a	
    9800:	b0 12 be 9e 	call	#0x9ebe	
    9804:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    9808:	b0 12 5c 9b 	call	#0x9b5c	
    980c:	b0 12 d4 9e 	call	#0x9ed4	
    9810:	3f 40 28 00 	mov	#40,	r15	;#0x0028
    9814:	b0 12 5c 9b 	call	#0x9b5c	
    9818:	b0 12 be 9e 	call	#0x9ebe	
    981c:	03 43       	nop			
    981e:	b0 12 14 9e 	call	#0x9e14	
    9822:	0f 93       	tst	r15		
    9824:	fc 23       	jnz	$-6      	;abs 0x981e
    9826:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    982a:	b0 12 da 9d 	call	#0x9dda	
    982e:	03 43       	nop			
    9830:	b0 12 14 9e 	call	#0x9e14	
    9834:	0f 93       	tst	r15		
    9836:	fc 23       	jnz	$-6      	;abs 0x9830
    9838:	b0 12 d4 9e 	call	#0x9ed4	
    983c:	3e 40 a5 00 	mov	#165,	r14	;#0x00a5
    9840:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    9844:	b0 12 34 8e 	call	#0x8e34	
    9848:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    984c:	b0 12 62 8e 	call	#0x8e62	
    9850:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9854:	94 11 fc ff 	sxt	-4(r4)		;0xfffc(r4)
    9858:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    985c:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    9860:	1f 43       	mov	#1,	r15	;r3 As==01
    9862:	3e 90 a5 00 	cmp	#165,	r14	;#0x00a5
    9866:	01 24       	jz	$+4      	;abs 0x986a
    9868:	0f 43       	clr	r15		
    986a:	b0 12 da 97 	call	#0x97da	
    986e:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    9872:	b0 12 98 8e 	call	#0x8e98	
    9876:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    987a:	94 11 fc ff 	sxt	-4(r4)		;0xfffc(r4)
    987e:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    9882:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    9886:	1f 43       	mov	#1,	r15	;r3 As==01
    9888:	3e 90 80 00 	cmp	#128,	r14	;#0x0080
    988c:	01 24       	jz	$+4      	;abs 0x9890
    988e:	0f 43       	clr	r15		
    9890:	b0 12 da 97 	call	#0x97da	
    9894:	3f 40 31 00 	mov	#49,	r15	;#0x0031
    9898:	b0 12 98 8e 	call	#0x8e98	
    989c:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    98a0:	94 11 fc ff 	sxt	-4(r4)		;0xfffc(r4)
    98a4:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    98a8:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    98ac:	1f 43       	mov	#1,	r15	;r3 As==01
    98ae:	3e 90 03 00 	cmp	#3,	r14	;#0x0003
    98b2:	01 2c       	jc	$+4      	;abs 0x98b6
    98b4:	0f 43       	clr	r15		
    98b6:	b0 12 da 97 	call	#0x97da	
    98ba:	3f 40 06 b1 	mov	#-20218,r15	;#0xb106
    98be:	b0 12 94 91 	call	#0x9194	
    98c2:	21 53       	incd	r1		
    98c4:	34 41       	pop	r4		
    98c6:	30 41       	ret			

000098c8 <cc2500_gdox_signal_handler>:
    98c8:	04 12       	push	r4		
    98ca:	04 41       	mov	r1,	r4	
    98cc:	24 53       	incd	r4		
    98ce:	21 83       	decd	r1		
    98d0:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    98d4:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    98d8:	1f f3       	and	#1,	r15	;r3 As==01
    98da:	4f 4f       	mov.b	r15,	r15	
    98dc:	4f 93       	tst.b	r15		
    98de:	02 24       	jz	$+6      	;abs 0x98e4
    98e0:	b0 12 90 95 	call	#0x9590	
    98e4:	21 53       	incd	r1		
    98e6:	34 41       	pop	r4		
    98e8:	30 41       	ret			

000098ea <port2_irq_handler>:
    98ea:	0f 12       	push	r15		
    98ec:	0e 12       	push	r14		
    98ee:	0d 12       	push	r13		
    98f0:	0c 12       	push	r12		
    98f2:	04 12       	push	r4		
    98f4:	04 41       	mov	r1,	r4	
    98f6:	34 50 0a 00 	add	#10,	r4	;#0x000a
    98fa:	21 83       	decd	r1		
    98fc:	c4 43 f4 ff 	mov.b	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    9900:	c4 43 f5 ff 	mov.b	#0,	-11(r4)	;r3 As==00, 0xfff5(r4)
    9904:	5f 42 2b 00 	mov.b	&0x002b,r15	
    9908:	4f 4f       	mov.b	r15,	r15	
    990a:	5e 42 2d 00 	mov.b	&0x002d,r14	
    990e:	4e 4e       	mov.b	r14,	r14	
    9910:	3e f0 40 00 	and	#64,	r14	;#0x0040
    9914:	0f fe       	and	r14,	r15	
    9916:	0f 93       	tst	r15		
    9918:	0a 24       	jz	$+22     	;abs 0x992e
    991a:	d4 d3 f4 ff 	bis.b	#1,	-12(r4)	;r3 As==01, 0xfff4(r4)
    991e:	d4 d3 f5 ff 	bis.b	#1,	-11(r4)	;r3 As==01, 0xfff5(r4)
    9922:	5f 42 2b 00 	mov.b	&0x002b,r15	
    9926:	7f f0 40 00 	and.b	#64,	r15	;#0x0040
    992a:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
    992e:	5f 42 2b 00 	mov.b	&0x002b,r15	
    9932:	4f 4f       	mov.b	r15,	r15	
    9934:	5e 42 2d 00 	mov.b	&0x002d,r14	
    9938:	4e 4e       	mov.b	r14,	r14	
    993a:	3e f0 80 00 	and	#128,	r14	;#0x0080
    993e:	0f fe       	and	r14,	r15	
    9940:	0f 93       	tst	r15		
    9942:	0a 24       	jz	$+22     	;abs 0x9958
    9944:	e4 d3 f4 ff 	bis.b	#2,	-12(r4)	;r3 As==10, 0xfff4(r4)
    9948:	d4 d3 f5 ff 	bis.b	#1,	-11(r4)	;r3 As==01, 0xfff5(r4)
    994c:	5f 42 2b 00 	mov.b	&0x002b,r15	
    9950:	7f f0 80 ff 	and.b	#-128,	r15	;#0xff80
    9954:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
    9958:	c4 93 f4 ff 	tst.b	-12(r4)	;0xfff4(r4)
    995c:	04 24       	jz	$+10     	;abs 0x9966
    995e:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    9962:	b0 12 c8 98 	call	#0x98c8	
    9966:	c4 93 f5 ff 	tst.b	-11(r4)	;0xfff5(r4)
    996a:	03 24       	jz	$+8      	;abs 0x9972
    996c:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    9970:	00 00 
    9972:	c2 43 2b 00 	mov.b	#0,	&0x002b	;r3 As==00
    9976:	21 53       	incd	r1		
    9978:	34 41       	pop	r4		
    997a:	3c 41       	pop	r12		
    997c:	3d 41       	pop	r13		
    997e:	3e 41       	pop	r14		
    9980:	3f 41       	pop	r15		
    9982:	00 13       	reti			

00009984 <get_mclk_freq_mhz>:
    9984:	04 12       	push	r4		
    9986:	04 41       	mov	r1,	r4	
    9988:	24 53       	incd	r4		
    998a:	1f 42 8e 02 	mov	&0x028e,r15	
    998e:	34 41       	pop	r4		
    9990:	30 41       	ret			

00009992 <set_mcu_speed>:
    9992:	04 12       	push	r4		
    9994:	04 41       	mov	r1,	r4	
    9996:	24 53       	incd	r4		
    9998:	21 83       	decd	r1		
    999a:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    999e:	c4 4e fd ff 	mov.b	r14,	-3(r4)	;0xfffd(r4)
    99a2:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    99a6:	3f 92       	cmp	#8,	r15	;r2 As==11
    99a8:	16 24       	jz	$+46     	;abs 0x99d6
    99aa:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    99ae:	03 34       	jge	$+8      	;abs 0x99b6
    99b0:	1f 93       	cmp	#1,	r15	;r3 As==01
    99b2:	08 24       	jz	$+18     	;abs 0x99c4
    99b4:	2b 3c       	jmp	$+88     	;abs 0x9a0c
    99b6:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    99ba:	16 24       	jz	$+46     	;abs 0x99e8
    99bc:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    99c0:	1c 24       	jz	$+58     	;abs 0x99fa
    99c2:	24 3c       	jmp	$+74     	;abs 0x9a0c
    99c4:	5f 42 ff 10 	mov.b	&0x10ff,r15	
    99c8:	c2 4f 57 00 	mov.b	r15,	&0x0057	
    99cc:	5f 42 fe 10 	mov.b	&0x10fe,r15	
    99d0:	c2 4f 56 00 	mov.b	r15,	&0x0056	
    99d4:	1b 3c       	jmp	$+56     	;abs 0x9a0c
    99d6:	5f 42 fd 10 	mov.b	&0x10fd,r15	
    99da:	c2 4f 57 00 	mov.b	r15,	&0x0057	
    99de:	5f 42 fc 10 	mov.b	&0x10fc,r15	
    99e2:	c2 4f 56 00 	mov.b	r15,	&0x0056	
    99e6:	12 3c       	jmp	$+38     	;abs 0x9a0c
    99e8:	5f 42 fb 10 	mov.b	&0x10fb,r15	
    99ec:	c2 4f 57 00 	mov.b	r15,	&0x0057	
    99f0:	5f 42 fa 10 	mov.b	&0x10fa,r15	
    99f4:	c2 4f 56 00 	mov.b	r15,	&0x0056	
    99f8:	09 3c       	jmp	$+20     	;abs 0x9a0c
    99fa:	5f 42 f9 10 	mov.b	&0x10f9,r15	
    99fe:	c2 4f 57 00 	mov.b	r15,	&0x0057	
    9a02:	5f 42 f8 10 	mov.b	&0x10f8,r15	
    9a06:	c2 4f 56 00 	mov.b	r15,	&0x0056	
    9a0a:	03 43       	nop			
    9a0c:	5f 44 fd ff 	mov.b	-3(r4),	r15	;0xfffd(r4)
    9a10:	2f 93       	cmp	#2,	r15	;r3 As==10
    9a12:	0e 24       	jz	$+30     	;abs 0x9a30
    9a14:	3f 90 03 00 	cmp	#3,	r15	;#0x0003
    9a18:	03 34       	jge	$+8      	;abs 0x9a20
    9a1a:	1f 93       	cmp	#1,	r15	;r3 As==01
    9a1c:	06 24       	jz	$+14     	;abs 0x9a2a
    9a1e:	12 3c       	jmp	$+38     	;abs 0x9a44
    9a20:	2f 92       	cmp	#4,	r15	;r2 As==10
    9a22:	09 24       	jz	$+20     	;abs 0x9a36
    9a24:	3f 92       	cmp	#8,	r15	;r2 As==11
    9a26:	0a 24       	jz	$+22     	;abs 0x9a3c
    9a28:	0d 3c       	jmp	$+28     	;abs 0x9a44
    9a2a:	c2 43 58 00 	mov.b	#0,	&0x0058	;r3 As==00
    9a2e:	0a 3c       	jmp	$+22     	;abs 0x9a44
    9a30:	e2 43 58 00 	mov.b	#2,	&0x0058	;r3 As==10
    9a34:	07 3c       	jmp	$+16     	;abs 0x9a44
    9a36:	e2 42 58 00 	mov.b	#4,	&0x0058	;r2 As==10
    9a3a:	04 3c       	jmp	$+10     	;abs 0x9a44
    9a3c:	f2 40 06 00 	mov.b	#6,	&0x0058	;#0x0006
    9a40:	58 00 
    9a42:	03 43       	nop			
    9a44:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9a48:	82 4f 8e 02 	mov	r15,	&0x028e	
    9a4c:	21 53       	incd	r1		
    9a4e:	34 41       	pop	r4		
    9a50:	30 41       	ret			

00009a52 <set_mcu_speed_dco_mclk_1MHz_smclk_1MHz>:
    9a52:	04 12       	push	r4		
    9a54:	04 41       	mov	r1,	r4	
    9a56:	24 53       	incd	r4		
    9a58:	5e 43       	mov.b	#1,	r14	;r3 As==01
    9a5a:	5f 43       	mov.b	#1,	r15	;r3 As==01
    9a5c:	b0 12 92 99 	call	#0x9992	
    9a60:	34 41       	pop	r4		
    9a62:	30 41       	ret			

00009a64 <set_mcu_speed_dco_mclk_8MHz_smclk_8MHz>:
    9a64:	04 12       	push	r4		
    9a66:	04 41       	mov	r1,	r4	
    9a68:	24 53       	incd	r4		
    9a6a:	5e 43       	mov.b	#1,	r14	;r3 As==01
    9a6c:	7f 42       	mov.b	#8,	r15	;r2 As==11
    9a6e:	b0 12 92 99 	call	#0x9992	
    9a72:	34 41       	pop	r4		
    9a74:	30 41       	ret			

00009a76 <set_mcu_speed_dco_mclk_8MHz_smclk_4MHz>:
    9a76:	04 12       	push	r4		
    9a78:	04 41       	mov	r1,	r4	
    9a7a:	24 53       	incd	r4		
    9a7c:	6e 43       	mov.b	#2,	r14	;r3 As==10
    9a7e:	7f 42       	mov.b	#8,	r15	;r2 As==11
    9a80:	b0 12 92 99 	call	#0x9992	
    9a84:	34 41       	pop	r4		
    9a86:	30 41       	ret			

00009a88 <set_mcu_speed_dco_mclk_8MHz_smclk_2MHz>:
    9a88:	04 12       	push	r4		
    9a8a:	04 41       	mov	r1,	r4	
    9a8c:	24 53       	incd	r4		
    9a8e:	6e 42       	mov.b	#4,	r14	;r2 As==10
    9a90:	7f 42       	mov.b	#8,	r15	;r2 As==11
    9a92:	b0 12 92 99 	call	#0x9992	
    9a96:	34 41       	pop	r4		
    9a98:	30 41       	ret			

00009a9a <set_mcu_speed_dco_mclk_8MHz_smclk_1MHz>:
    9a9a:	04 12       	push	r4		
    9a9c:	04 41       	mov	r1,	r4	
    9a9e:	24 53       	incd	r4		
    9aa0:	7e 42       	mov.b	#8,	r14	;r2 As==11
    9aa2:	7f 42       	mov.b	#8,	r15	;r2 As==11
    9aa4:	b0 12 92 99 	call	#0x9992	
    9aa8:	34 41       	pop	r4		
    9aaa:	30 41       	ret			

00009aac <set_mcu_speed_dco_mclk_12MHz_smclk_12MHz>:
    9aac:	04 12       	push	r4		
    9aae:	04 41       	mov	r1,	r4	
    9ab0:	24 53       	incd	r4		
    9ab2:	5e 43       	mov.b	#1,	r14	;r3 As==01
    9ab4:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    9ab8:	b0 12 92 99 	call	#0x9992	
    9abc:	34 41       	pop	r4		
    9abe:	30 41       	ret			

00009ac0 <set_mcu_speed_dco_mclk_12MHz_smclk_6MHz>:
    9ac0:	04 12       	push	r4		
    9ac2:	04 41       	mov	r1,	r4	
    9ac4:	24 53       	incd	r4		
    9ac6:	6e 43       	mov.b	#2,	r14	;r3 As==10
    9ac8:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    9acc:	b0 12 92 99 	call	#0x9992	
    9ad0:	34 41       	pop	r4		
    9ad2:	30 41       	ret			

00009ad4 <set_mcu_speed_dco_mclk_12MHz_smclk_3MHz>:
    9ad4:	04 12       	push	r4		
    9ad6:	04 41       	mov	r1,	r4	
    9ad8:	24 53       	incd	r4		
    9ada:	6e 42       	mov.b	#4,	r14	;r2 As==10
    9adc:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    9ae0:	b0 12 92 99 	call	#0x9992	
    9ae4:	34 41       	pop	r4		
    9ae6:	30 41       	ret			

00009ae8 <set_mcu_speed_dco_mclk_12MHz_smclk_1_5MHz>:
    9ae8:	04 12       	push	r4		
    9aea:	04 41       	mov	r1,	r4	
    9aec:	24 53       	incd	r4		
    9aee:	7e 42       	mov.b	#8,	r14	;r2 As==11
    9af0:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    9af4:	b0 12 92 99 	call	#0x9992	
    9af8:	34 41       	pop	r4		
    9afa:	30 41       	ret			

00009afc <set_mcu_speed_dco_mclk_16MHz_smclk_16MHz>:
    9afc:	04 12       	push	r4		
    9afe:	04 41       	mov	r1,	r4	
    9b00:	24 53       	incd	r4		
    9b02:	5e 43       	mov.b	#1,	r14	;r3 As==01
    9b04:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    9b08:	b0 12 92 99 	call	#0x9992	
    9b0c:	34 41       	pop	r4		
    9b0e:	30 41       	ret			

00009b10 <set_mcu_speed_dco_mclk_16MHz_smclk_8MHz>:
    9b10:	04 12       	push	r4		
    9b12:	04 41       	mov	r1,	r4	
    9b14:	24 53       	incd	r4		
    9b16:	6e 43       	mov.b	#2,	r14	;r3 As==10
    9b18:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    9b1c:	b0 12 92 99 	call	#0x9992	
    9b20:	34 41       	pop	r4		
    9b22:	30 41       	ret			

00009b24 <set_mcu_speed_dco_mclk_16MHz_smclk_4MHz>:
    9b24:	04 12       	push	r4		
    9b26:	04 41       	mov	r1,	r4	
    9b28:	24 53       	incd	r4		
    9b2a:	6e 42       	mov.b	#4,	r14	;r2 As==10
    9b2c:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    9b30:	b0 12 92 99 	call	#0x9992	
    9b34:	34 41       	pop	r4		
    9b36:	30 41       	ret			

00009b38 <set_mcu_speed_dco_mclk_16MHz_smclk_2MHz>:
    9b38:	04 12       	push	r4		
    9b3a:	04 41       	mov	r1,	r4	
    9b3c:	24 53       	incd	r4		
    9b3e:	7e 42       	mov.b	#8,	r14	;r2 As==11
    9b40:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    9b44:	b0 12 92 99 	call	#0x9992	
    9b48:	34 41       	pop	r4		
    9b4a:	30 41       	ret			

00009b4c <loop_4_cycles>:
    9b4c:	04 12       	push	r4		
    9b4e:	04 41       	mov	r1,	r4	
    9b50:	24 53       	incd	r4		
    9b52:	3e 53       	add	#-1,	r14	;r3 As==11
    9b54:	3f 63       	addc	#-1,	r15	;r3 As==11
    9b56:	fd 2f       	jc	$-4      	;abs 0x9b52
    9b58:	34 41       	pop	r4		
    9b5a:	30 41       	ret			

00009b5c <delay_usec>:
    9b5c:	04 12       	push	r4		
    9b5e:	04 41       	mov	r1,	r4	
    9b60:	24 53       	incd	r4		
    9b62:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    9b66:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9b6a:	1f 42 8e 02 	mov	&0x028e,r15	
    9b6e:	3f 92       	cmp	#8,	r15	;r2 As==11
    9b70:	18 24       	jz	$+50     	;abs 0x9ba2
    9b72:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    9b76:	03 2c       	jc	$+8      	;abs 0x9b7e
    9b78:	1f 93       	cmp	#1,	r15	;r3 As==01
    9b7a:	08 24       	jz	$+18     	;abs 0x9b8c
    9b7c:	2d 3c       	jmp	$+92     	;abs 0x9bd8
    9b7e:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    9b82:	17 24       	jz	$+48     	;abs 0x9bb2
    9b84:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    9b88:	1e 24       	jz	$+62     	;abs 0x9bc6
    9b8a:	26 3c       	jmp	$+78     	;abs 0x9bd8
    9b8c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9b90:	12 c3       	clrc			
    9b92:	0f 10       	rrc	r15		
    9b94:	12 c3       	clrc			
    9b96:	0f 10       	rrc	r15		
    9b98:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    9b9c:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9ba0:	26 3c       	jmp	$+78     	;abs 0x9bee
    9ba2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9ba6:	0f 5f       	rla	r15		
    9ba8:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    9bac:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9bb0:	1e 3c       	jmp	$+62     	;abs 0x9bee
    9bb2:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    9bb6:	0f 4e       	mov	r14,	r15	
    9bb8:	0f 5f       	rla	r15		
    9bba:	0f 5e       	add	r14,	r15	
    9bbc:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    9bc0:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9bc4:	14 3c       	jmp	$+42     	;abs 0x9bee
    9bc6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9bca:	0f 5f       	rla	r15		
    9bcc:	0f 5f       	rla	r15		
    9bce:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    9bd2:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9bd6:	0b 3c       	jmp	$+24     	;abs 0x9bee
    9bd8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9bdc:	12 c3       	clrc			
    9bde:	0f 10       	rrc	r15		
    9be0:	12 c3       	clrc			
    9be2:	0f 10       	rrc	r15		
    9be4:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    9be8:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9bec:	03 43       	nop			
    9bee:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    9bf2:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    9bf6:	b0 12 4c 9b 	call	#0x9b4c	
    9bfa:	31 50 06 00 	add	#6,	r1	;#0x0006
    9bfe:	34 41       	pop	r4		
    9c00:	30 41       	ret			

00009c02 <delay_ms>:
    9c02:	04 12       	push	r4		
    9c04:	04 41       	mov	r1,	r4	
    9c06:	24 53       	incd	r4		
    9c08:	31 82       	sub	#8,	r1	;r2 As==11
    9c0a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9c0e:	1f 42 8e 02 	mov	&0x028e,r15	
    9c12:	3f 92       	cmp	#8,	r15	;r2 As==11
    9c14:	13 24       	jz	$+40     	;abs 0x9c3c
    9c16:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    9c1a:	03 2c       	jc	$+8      	;abs 0x9c22
    9c1c:	1f 93       	cmp	#1,	r15	;r3 As==01
    9c1e:	08 24       	jz	$+18     	;abs 0x9c30
    9c20:	1f 3c       	jmp	$+64     	;abs 0x9c60
    9c22:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    9c26:	10 24       	jz	$+34     	;abs 0x9c48
    9c28:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    9c2c:	13 24       	jz	$+40     	;abs 0x9c54
    9c2e:	18 3c       	jmp	$+50     	;abs 0x9c60
    9c30:	b4 40 fa 00 	mov	#250,	-8(r4)	;#0x00fa, 0xfff8(r4)
    9c34:	f8 ff 
    9c36:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9c3a:	18 3c       	jmp	$+50     	;abs 0x9c6c
    9c3c:	b4 40 d0 07 	mov	#2000,	-8(r4)	;#0x07d0, 0xfff8(r4)
    9c40:	f8 ff 
    9c42:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9c46:	12 3c       	jmp	$+38     	;abs 0x9c6c
    9c48:	b4 40 b8 0b 	mov	#3000,	-8(r4)	;#0x0bb8, 0xfff8(r4)
    9c4c:	f8 ff 
    9c4e:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9c52:	0c 3c       	jmp	$+26     	;abs 0x9c6c
    9c54:	b4 40 a0 0f 	mov	#4000,	-8(r4)	;#0x0fa0, 0xfff8(r4)
    9c58:	f8 ff 
    9c5a:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9c5e:	06 3c       	jmp	$+14     	;abs 0x9c6c
    9c60:	b4 40 fa 00 	mov	#250,	-8(r4)	;#0x00fa, 0xfff8(r4)
    9c64:	f8 ff 
    9c66:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    9c6a:	03 43       	nop			
    9c6c:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    9c70:	08 3c       	jmp	$+18     	;abs 0x9c82
    9c72:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    9c76:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    9c7a:	b0 12 4c 9b 	call	#0x9b4c	
    9c7e:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    9c82:	94 94 fc ff 	cmp	-4(r4),	-10(r4)	;0xfffc(r4), 0xfff6(r4)
    9c86:	f6 ff 
    9c88:	f4 2b       	jnc	$-22     	;abs 0x9c72
    9c8a:	31 52       	add	#8,	r1	;r2 As==11
    9c8c:	34 41       	pop	r4		
    9c8e:	30 41       	ret			

00009c90 <led_green_off>:
    9c90:	04 12       	push	r4		
    9c92:	04 41       	mov	r1,	r4	
    9c94:	24 53       	incd	r4		
    9c96:	5f 42 21 00 	mov.b	&0x0021,r15	
    9c9a:	7f f0 fd ff 	and.b	#-3,	r15	;#0xfffd
    9c9e:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9ca2:	34 41       	pop	r4		
    9ca4:	30 41       	ret			

00009ca6 <led_green_on>:
    9ca6:	04 12       	push	r4		
    9ca8:	04 41       	mov	r1,	r4	
    9caa:	24 53       	incd	r4		
    9cac:	5f 42 21 00 	mov.b	&0x0021,r15	
    9cb0:	6f d3       	bis.b	#2,	r15	;r3 As==10
    9cb2:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9cb6:	34 41       	pop	r4		
    9cb8:	30 41       	ret			

00009cba <led_green_switch>:
    9cba:	04 12       	push	r4		
    9cbc:	04 41       	mov	r1,	r4	
    9cbe:	24 53       	incd	r4		
    9cc0:	5f 42 21 00 	mov.b	&0x0021,r15	
    9cc4:	6f e3       	xor.b	#2,	r15	;r3 As==10
    9cc6:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9cca:	34 41       	pop	r4		
    9ccc:	30 41       	ret			

00009cce <led_red_off>:
    9cce:	04 12       	push	r4		
    9cd0:	04 41       	mov	r1,	r4	
    9cd2:	24 53       	incd	r4		
    9cd4:	5f 42 21 00 	mov.b	&0x0021,r15	
    9cd8:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9cdc:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9ce0:	34 41       	pop	r4		
    9ce2:	30 41       	ret			

00009ce4 <led_red_on>:
    9ce4:	04 12       	push	r4		
    9ce6:	04 41       	mov	r1,	r4	
    9ce8:	24 53       	incd	r4		
    9cea:	5f 42 21 00 	mov.b	&0x0021,r15	
    9cee:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9cf0:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9cf4:	34 41       	pop	r4		
    9cf6:	30 41       	ret			

00009cf8 <led_red_switch>:
    9cf8:	04 12       	push	r4		
    9cfa:	04 41       	mov	r1,	r4	
    9cfc:	24 53       	incd	r4		
    9cfe:	5f 42 21 00 	mov.b	&0x0021,r15	
    9d02:	5f e3       	xor.b	#1,	r15	;r3 As==01
    9d04:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9d08:	34 41       	pop	r4		
    9d0a:	30 41       	ret			

00009d0c <leds_off>:
    9d0c:	04 12       	push	r4		
    9d0e:	04 41       	mov	r1,	r4	
    9d10:	24 53       	incd	r4		
    9d12:	5f 42 21 00 	mov.b	&0x0021,r15	
    9d16:	7f f0 fc ff 	and.b	#-4,	r15	;#0xfffc
    9d1a:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9d1e:	34 41       	pop	r4		
    9d20:	30 41       	ret			

00009d22 <leds_on>:
    9d22:	04 12       	push	r4		
    9d24:	04 41       	mov	r1,	r4	
    9d26:	24 53       	incd	r4		
    9d28:	5f 42 21 00 	mov.b	&0x0021,r15	
    9d2c:	7f d0 03 00 	bis.b	#3,	r15	;#0x0003
    9d30:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9d34:	34 41       	pop	r4		
    9d36:	30 41       	ret			

00009d38 <leds_init>:
    9d38:	04 12       	push	r4		
    9d3a:	04 41       	mov	r1,	r4	
    9d3c:	24 53       	incd	r4		
    9d3e:	5f 42 21 00 	mov.b	&0x0021,r15	
    9d42:	7f f0 fc ff 	and.b	#-4,	r15	;#0xfffc
    9d46:	c2 4f 21 00 	mov.b	r15,	&0x0021	
    9d4a:	5f 42 22 00 	mov.b	&0x0022,r15	
    9d4e:	7f d0 03 00 	bis.b	#3,	r15	;#0x0003
    9d52:	c2 4f 22 00 	mov.b	r15,	&0x0022	
    9d56:	5f 42 26 00 	mov.b	&0x0026,r15	
    9d5a:	7f f0 fc ff 	and.b	#-4,	r15	;#0xfffc
    9d5e:	c2 4f 26 00 	mov.b	r15,	&0x0026	
    9d62:	b0 12 0c 9d 	call	#0x9d0c	
    9d66:	34 41       	pop	r4		
    9d68:	30 41       	ret			

00009d6a <spi_init>:
    9d6a:	04 12       	push	r4		
    9d6c:	04 41       	mov	r1,	r4	
    9d6e:	24 53       	incd	r4		
    9d70:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9d74:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9d76:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    9d7a:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9d7e:	7f d2       	bis.b	#8,	r15	;r2 As==11
    9d80:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    9d84:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9d88:	6f d3       	bis.b	#2,	r15	;r3 As==10
    9d8a:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    9d8e:	5f 42 19 00 	mov.b	&0x0019,r15	
    9d92:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9d94:	c2 4f 19 00 	mov.b	r15,	&0x0019	
    9d98:	d2 43 69 00 	mov.b	#1,	&0x0069	;r3 As==01
    9d9c:	f2 40 81 ff 	mov.b	#-127,	&0x0069	;#0xff81
    9da0:	69 00 
    9da2:	f2 40 a9 ff 	mov.b	#-87,	&0x0068	;#0xffa9
    9da6:	68 00 
    9da8:	e2 43 6a 00 	mov.b	#2,	&0x006a	;r3 As==10
    9dac:	c2 43 6b 00 	mov.b	#0,	&0x006b	;r3 As==00
    9db0:	5f 42 1b 00 	mov.b	&0x001b,r15	
    9db4:	7f d0 0e 00 	bis.b	#14,	r15	;#0x000e
    9db8:	c2 4f 1b 00 	mov.b	r15,	&0x001b	
    9dbc:	5f 42 69 00 	mov.b	&0x0069,r15	
    9dc0:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9dc4:	c2 4f 69 00 	mov.b	r15,	&0x0069	
    9dc8:	34 41       	pop	r4		
    9dca:	30 41       	ret			

00009dcc <spi_clear_rx_IFG>:
    9dcc:	04 12       	push	r4		
    9dce:	04 41       	mov	r1,	r4	
    9dd0:	24 53       	incd	r4		
    9dd2:	e2 c2 03 00 	bic.b	#4,	&0x0003	;r2 As==10
    9dd6:	34 41       	pop	r4		
    9dd8:	30 41       	ret			

00009dda <spi_tx_rx>:
    9dda:	04 12       	push	r4		
    9ddc:	04 41       	mov	r1,	r4	
    9dde:	24 53       	incd	r4		
    9de0:	21 82       	sub	#4,	r1	;r2 As==10
    9de2:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9de6:	b0 12 cc 9d 	call	#0x9dcc	
    9dea:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9dee:	4f 4f       	mov.b	r15,	r15	
    9df0:	c2 4f 6f 00 	mov.b	r15,	&0x006f	
    9df4:	5f 42 03 00 	mov.b	&0x0003,r15	
    9df8:	4f 4f       	mov.b	r15,	r15	
    9dfa:	2f f2       	and	#4,	r15	;r2 As==10
    9dfc:	0f 93       	tst	r15		
    9dfe:	fa 27       	jz	$-10     	;abs 0x9df4
    9e00:	5f 42 6e 00 	mov.b	&0x006e,r15	
    9e04:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    9e08:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    9e0c:	8f 11       	sxt	r15		
    9e0e:	21 52       	add	#4,	r1	;r2 As==10
    9e10:	34 41       	pop	r4		
    9e12:	30 41       	ret			

00009e14 <spi_check_miso_high>:
    9e14:	04 12       	push	r4		
    9e16:	04 41       	mov	r1,	r4	
    9e18:	24 53       	incd	r4		
    9e1a:	5f 42 18 00 	mov.b	&0x0018,r15	
    9e1e:	4f 4f       	mov.b	r15,	r15	
    9e20:	2f f2       	and	#4,	r15	;r2 As==10
    9e22:	34 41       	pop	r4		
    9e24:	30 41       	ret			

00009e26 <spi_tx_burst>:
    9e26:	04 12       	push	r4		
    9e28:	04 41       	mov	r1,	r4	
    9e2a:	24 53       	incd	r4		
    9e2c:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    9e30:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    9e34:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    9e38:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    9e3c:	11 3c       	jmp	$+36     	;abs 0x9e60
    9e3e:	b0 12 cc 9d 	call	#0x9dcc	
    9e42:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    9e46:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    9e4a:	6f 4f       	mov.b	@r15,	r15	
    9e4c:	c2 4f 6f 00 	mov.b	r15,	&0x006f	
    9e50:	5f 42 03 00 	mov.b	&0x0003,r15	
    9e54:	4f 4f       	mov.b	r15,	r15	
    9e56:	2f f2       	and	#4,	r15	;r2 As==10
    9e58:	0f 93       	tst	r15		
    9e5a:	fa 27       	jz	$-10     	;abs 0x9e50
    9e5c:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    9e60:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    9e64:	f8 ff 
    9e66:	eb 3b       	jl	$-40     	;abs 0x9e3e
    9e68:	31 50 06 00 	add	#6,	r1	;#0x0006
    9e6c:	34 41       	pop	r4		
    9e6e:	30 41       	ret			

00009e70 <spi_rx_burst>:
    9e70:	04 12       	push	r4		
    9e72:	04 41       	mov	r1,	r4	
    9e74:	24 53       	incd	r4		
    9e76:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    9e7a:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    9e7e:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    9e82:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    9e86:	13 3c       	jmp	$+40     	;abs 0x9eae
    9e88:	f2 40 55 00 	mov.b	#85,	&0x006f	;#0x0055
    9e8c:	6f 00 
    9e8e:	5f 42 03 00 	mov.b	&0x0003,r15	
    9e92:	4f 4f       	mov.b	r15,	r15	
    9e94:	2f f2       	and	#4,	r15	;r2 As==10
    9e96:	0f 93       	tst	r15		
    9e98:	fa 27       	jz	$-10     	;abs 0x9e8e
    9e9a:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    9e9e:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    9ea2:	5e 42 6e 00 	mov.b	&0x006e,r14	
    9ea6:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
    9eaa:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    9eae:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    9eb2:	f8 ff 
    9eb4:	e9 3b       	jl	$-44     	;abs 0x9e88
    9eb6:	31 50 06 00 	add	#6,	r1	;#0x0006
    9eba:	34 41       	pop	r4		
    9ebc:	30 41       	ret			

00009ebe <spi_select_radio>:
    9ebe:	04 12       	push	r4		
    9ec0:	04 41       	mov	r1,	r4	
    9ec2:	24 53       	incd	r4		
    9ec4:	5f 42 19 00 	mov.b	&0x0019,r15	
    9ec8:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9ecc:	c2 4f 19 00 	mov.b	r15,	&0x0019	
    9ed0:	34 41       	pop	r4		
    9ed2:	30 41       	ret			

00009ed4 <spi_deselect_radio>:
    9ed4:	04 12       	push	r4		
    9ed6:	04 41       	mov	r1,	r4	
    9ed8:	24 53       	incd	r4		
    9eda:	5f 42 19 00 	mov.b	&0x0019,r15	
    9ede:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9ee0:	c2 4f 19 00 	mov.b	r15,	&0x0019	
    9ee4:	34 41       	pop	r4		
    9ee6:	30 41       	ret			

00009ee8 <Timer_A>:
    9ee8:	0f 12       	push	r15		
    9eea:	0e 12       	push	r14		
    9eec:	0d 12       	push	r13		
    9eee:	0c 12       	push	r12		
    9ef0:	04 12       	push	r4		
    9ef2:	04 41       	mov	r1,	r4	
    9ef4:	34 50 0a 00 	add	#10,	r4	;#0x000a
    9ef8:	1f 42 90 02 	mov	&0x0290,r15	
    9efc:	0f 93       	tst	r15		
    9efe:	03 24       	jz	$+8      	;abs 0x9f06
    9f00:	1f 42 90 02 	mov	&0x0290,r15	
    9f04:	8f 12       	call	r15		
    9f06:	1f 42 92 02 	mov	&0x0292,r15	
    9f0a:	1f 93       	cmp	#1,	r15	;r3 As==01
    9f0c:	03 20       	jnz	$+8      	;abs 0x9f14
    9f0e:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    9f12:	00 00 
    9f14:	34 41       	pop	r4		
    9f16:	3c 41       	pop	r12		
    9f18:	3d 41       	pop	r13		
    9f1a:	3e 41       	pop	r14		
    9f1c:	3f 41       	pop	r15		
    9f1e:	00 13       	reti			

00009f20 <timerA_init>:
    9f20:	04 12       	push	r4		
    9f22:	04 41       	mov	r1,	r4	
    9f24:	24 53       	incd	r4		
    9f26:	82 43 90 02 	mov	#0,	&0x0290	;r3 As==00
    9f2a:	82 43 92 02 	mov	#0,	&0x0292	;r3 As==00
    9f2e:	b0 12 be 9f 	call	#0x9fbe	
    9f32:	34 41       	pop	r4		
    9f34:	30 41       	ret			

00009f36 <timerA_register_cb>:
    9f36:	04 12       	push	r4		
    9f38:	04 41       	mov	r1,	r4	
    9f3a:	24 53       	incd	r4		
    9f3c:	21 83       	decd	r1		
    9f3e:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9f42:	92 44 fc ff 	mov	-4(r4),	&0x0290	;0xfffc(r4)
    9f46:	90 02 
    9f48:	21 53       	incd	r1		
    9f4a:	34 41       	pop	r4		
    9f4c:	30 41       	ret			

00009f4e <timerA_set_wakeup>:
    9f4e:	04 12       	push	r4		
    9f50:	04 41       	mov	r1,	r4	
    9f52:	24 53       	incd	r4		
    9f54:	21 83       	decd	r1		
    9f56:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9f5a:	92 44 fc ff 	mov	-4(r4),	&0x0292	;0xfffc(r4)
    9f5e:	92 02 
    9f60:	21 53       	incd	r1		
    9f62:	34 41       	pop	r4		
    9f64:	30 41       	ret			

00009f66 <timerA_start_ticks>:
    9f66:	04 12       	push	r4		
    9f68:	04 41       	mov	r1,	r4	
    9f6a:	24 53       	incd	r4		
    9f6c:	21 83       	decd	r1		
    9f6e:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9f72:	5f 42 53 00 	mov.b	&0x0053,r15	
    9f76:	7f d0 20 00 	bis.b	#32,	r15	;#0x0020
    9f7a:	c2 4f 53 00 	mov.b	r15,	&0x0053	
    9f7e:	b2 40 10 00 	mov	#16,	&0x0162	;#0x0010
    9f82:	62 01 
    9f84:	82 43 70 01 	mov	#0,	&0x0170	;r3 As==00
    9f88:	92 44 fc ff 	mov	-4(r4),	&0x0172	;0xfffc(r4)
    9f8c:	72 01 
    9f8e:	b2 40 10 01 	mov	#272,	&0x0160	;#0x0110
    9f92:	60 01 
    9f94:	21 53       	incd	r1		
    9f96:	34 41       	pop	r4		
    9f98:	30 41       	ret			

00009f9a <timerA_start_milliseconds>:
    9f9a:	04 12       	push	r4		
    9f9c:	04 41       	mov	r1,	r4	
    9f9e:	24 53       	incd	r4		
    9fa0:	21 83       	decd	r1		
    9fa2:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    9fa6:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    9faa:	0f 4e       	mov	r14,	r15	
    9fac:	0f 5f       	rla	r15		
    9fae:	0f 5e       	add	r14,	r15	
    9fb0:	0f 5f       	rla	r15		
    9fb2:	0f 5f       	rla	r15		
    9fb4:	b0 12 66 9f 	call	#0x9f66	
    9fb8:	21 53       	incd	r1		
    9fba:	34 41       	pop	r4		
    9fbc:	30 41       	ret			

00009fbe <timerA_stop>:
    9fbe:	04 12       	push	r4		
    9fc0:	04 41       	mov	r1,	r4	
    9fc2:	24 53       	incd	r4		
    9fc4:	82 43 60 01 	mov	#0,	&0x0160	;r3 As==00
    9fc8:	34 41       	pop	r4		
    9fca:	30 41       	ret			

00009fcc <Timer_B>:
    9fcc:	0f 12       	push	r15		
    9fce:	0e 12       	push	r14		
    9fd0:	0d 12       	push	r13		
    9fd2:	0c 12       	push	r12		
    9fd4:	04 12       	push	r4		
    9fd6:	04 41       	mov	r1,	r4	
    9fd8:	34 50 0a 00 	add	#10,	r4	;#0x000a
    9fdc:	1f 42 94 02 	mov	&0x0294,r15	
    9fe0:	0f 93       	tst	r15		
    9fe2:	03 24       	jz	$+8      	;abs 0x9fea
    9fe4:	1f 42 94 02 	mov	&0x0294,r15	
    9fe8:	8f 12       	call	r15		
    9fea:	1f 42 96 02 	mov	&0x0296,r15	
    9fee:	1f 93       	cmp	#1,	r15	;r3 As==01
    9ff0:	03 20       	jnz	$+8      	;abs 0x9ff8
    9ff2:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    9ff6:	00 00 
    9ff8:	34 41       	pop	r4		
    9ffa:	3c 41       	pop	r12		
    9ffc:	3d 41       	pop	r13		
    9ffe:	3e 41       	pop	r14		
    a000:	3f 41       	pop	r15		
    a002:	00 13       	reti			

0000a004 <timerB_init>:
    a004:	04 12       	push	r4		
    a006:	04 41       	mov	r1,	r4	
    a008:	24 53       	incd	r4		
    a00a:	82 43 94 02 	mov	#0,	&0x0294	;r3 As==00
    a00e:	82 43 96 02 	mov	#0,	&0x0296	;r3 As==00
    a012:	b0 12 a2 a0 	call	#0xa0a2	
    a016:	34 41       	pop	r4		
    a018:	30 41       	ret			

0000a01a <timerB_register_cb>:
    a01a:	04 12       	push	r4		
    a01c:	04 41       	mov	r1,	r4	
    a01e:	24 53       	incd	r4		
    a020:	21 83       	decd	r1		
    a022:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a026:	92 44 fc ff 	mov	-4(r4),	&0x0294	;0xfffc(r4)
    a02a:	94 02 
    a02c:	21 53       	incd	r1		
    a02e:	34 41       	pop	r4		
    a030:	30 41       	ret			

0000a032 <timerB_set_wakeup>:
    a032:	04 12       	push	r4		
    a034:	04 41       	mov	r1,	r4	
    a036:	24 53       	incd	r4		
    a038:	21 83       	decd	r1		
    a03a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a03e:	92 44 fc ff 	mov	-4(r4),	&0x0296	;0xfffc(r4)
    a042:	96 02 
    a044:	21 53       	incd	r1		
    a046:	34 41       	pop	r4		
    a048:	30 41       	ret			

0000a04a <timerB_start_ticks>:
    a04a:	04 12       	push	r4		
    a04c:	04 41       	mov	r1,	r4	
    a04e:	24 53       	incd	r4		
    a050:	21 83       	decd	r1		
    a052:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a056:	5f 42 53 00 	mov.b	&0x0053,r15	
    a05a:	7f d0 20 00 	bis.b	#32,	r15	;#0x0020
    a05e:	c2 4f 53 00 	mov.b	r15,	&0x0053	
    a062:	b2 40 10 00 	mov	#16,	&0x0182	;#0x0010
    a066:	82 01 
    a068:	82 43 90 01 	mov	#0,	&0x0190	;r3 As==00
    a06c:	92 44 fc ff 	mov	-4(r4),	&0x0192	;0xfffc(r4)
    a070:	92 01 
    a072:	b2 40 10 01 	mov	#272,	&0x0180	;#0x0110
    a076:	80 01 
    a078:	21 53       	incd	r1		
    a07a:	34 41       	pop	r4		
    a07c:	30 41       	ret			

0000a07e <timerB_start_milliseconds>:
    a07e:	04 12       	push	r4		
    a080:	04 41       	mov	r1,	r4	
    a082:	24 53       	incd	r4		
    a084:	21 83       	decd	r1		
    a086:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a08a:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    a08e:	0f 4e       	mov	r14,	r15	
    a090:	0f 5f       	rla	r15		
    a092:	0f 5e       	add	r14,	r15	
    a094:	0f 5f       	rla	r15		
    a096:	0f 5f       	rla	r15		
    a098:	b0 12 4a a0 	call	#0xa04a	
    a09c:	21 53       	incd	r1		
    a09e:	34 41       	pop	r4		
    a0a0:	30 41       	ret			

0000a0a2 <timerB_stop>:
    a0a2:	04 12       	push	r4		
    a0a4:	04 41       	mov	r1,	r4	
    a0a6:	24 53       	incd	r4		
    a0a8:	82 43 80 01 	mov	#0,	&0x0180	;r3 As==00
    a0ac:	34 41       	pop	r4		
    a0ae:	30 41       	ret			

0000a0b0 <uart_init>:
    a0b0:	04 12       	push	r4		
    a0b2:	04 41       	mov	r1,	r4	
    a0b4:	24 53       	incd	r4		
    a0b6:	21 83       	decd	r1		
    a0b8:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a0bc:	5f 42 1b 00 	mov.b	&0x001b,r15	
    a0c0:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    a0c4:	c2 4f 1b 00 	mov.b	r15,	&0x001b	
    a0c8:	5f 42 1a 00 	mov.b	&0x001a,r15	
    a0cc:	7f d0 10 00 	bis.b	#16,	r15	;#0x0010
    a0d0:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    a0d4:	5f 42 1a 00 	mov.b	&0x001a,r15	
    a0d8:	7f f0 df ff 	and.b	#-33,	r15	;#0xffdf
    a0dc:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
    a0e0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    a0e4:	1f 93       	cmp	#1,	r15	;r3 As==01
    a0e6:	03 24       	jz	$+8      	;abs 0xa0ee
    a0e8:	3f 92       	cmp	#8,	r15	;r2 As==11
    a0ea:	12 24       	jz	$+38     	;abs 0xa110
    a0ec:	23 3c       	jmp	$+72     	;abs 0xa134
    a0ee:	f2 40 80 ff 	mov.b	#-128,	&0x0061	;#0xff80
    a0f2:	61 00 
    a0f4:	f2 40 68 00 	mov.b	#104,	&0x0062	;#0x0068
    a0f8:	62 00 
    a0fa:	c2 43 63 00 	mov.b	#0,	&0x0063	;r3 As==00
    a0fe:	e2 42 64 00 	mov.b	#4,	&0x0064	;r2 As==10
    a102:	5f 42 61 00 	mov.b	&0x0061,r15	
    a106:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    a10a:	c2 4f 61 00 	mov.b	r15,	&0x0061	
    a10e:	13 3c       	jmp	$+40     	;abs 0xa136
    a110:	f2 40 80 ff 	mov.b	#-128,	&0x0061	;#0xff80
    a114:	61 00 
    a116:	f2 40 41 00 	mov.b	#65,	&0x0062	;#0x0041
    a11a:	62 00 
    a11c:	f2 40 03 00 	mov.b	#3,	&0x0063	;#0x0003
    a120:	63 00 
    a122:	e2 42 64 00 	mov.b	#4,	&0x0064	;r2 As==10
    a126:	5f 42 61 00 	mov.b	&0x0061,r15	
    a12a:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    a12e:	c2 4f 61 00 	mov.b	r15,	&0x0061	
    a132:	01 3c       	jmp	$+4      	;abs 0xa136
    a134:	03 43       	nop			
    a136:	82 43 98 02 	mov	#0,	&0x0298	;r3 As==00
    a13a:	21 53       	incd	r1		
    a13c:	34 41       	pop	r4		
    a13e:	30 41       	ret			

0000a140 <uart_stop>:
    a140:	04 12       	push	r4		
    a142:	04 41       	mov	r1,	r4	
    a144:	24 53       	incd	r4		
    a146:	34 41       	pop	r4		
    a148:	30 41       	ret			

0000a14a <putchar>:
    a14a:	04 12       	push	r4		
    a14c:	04 41       	mov	r1,	r4	
    a14e:	24 53       	incd	r4		
    a150:	21 83       	decd	r1		
    a152:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a156:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    a15a:	4f 4f       	mov.b	r15,	r15	
    a15c:	c2 4f 67 00 	mov.b	r15,	&0x0067	
    a160:	03 43       	nop			
    a162:	5f 42 03 00 	mov.b	&0x0003,r15	
    a166:	4f 4f       	mov.b	r15,	r15	
    a168:	2f f3       	and	#2,	r15	;r3 As==10
    a16a:	0f 93       	tst	r15		
    a16c:	fa 27       	jz	$-10     	;abs 0xa162
    a16e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    a172:	4f 4f       	mov.b	r15,	r15	
    a174:	4f 4f       	mov.b	r15,	r15	
    a176:	21 53       	incd	r1		
    a178:	34 41       	pop	r4		
    a17a:	30 41       	ret			

0000a17c <uart_getchar>:
    a17c:	04 12       	push	r4		
    a17e:	04 41       	mov	r1,	r4	
    a180:	24 53       	incd	r4		
    a182:	21 83       	decd	r1		
    a184:	5f 42 66 00 	mov.b	&0x0066,r15	
    a188:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    a18c:	c4 43 fd ff 	mov.b	#0,	-3(r4)	;r3 As==00, 0xfffd(r4)
    a190:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    a194:	21 53       	incd	r1		
    a196:	34 41       	pop	r4		
    a198:	30 41       	ret			

0000a19a <uart_eint>:
    a19a:	04 12       	push	r4		
    a19c:	04 41       	mov	r1,	r4	
    a19e:	24 53       	incd	r4		
    a1a0:	5f 42 01 00 	mov.b	&0x0001,r15	
    a1a4:	5f d3       	bis.b	#1,	r15	;r3 As==01
    a1a6:	c2 4f 01 00 	mov.b	r15,	&0x0001	
    a1aa:	34 41       	pop	r4		
    a1ac:	30 41       	ret			

0000a1ae <uart_dint>:
    a1ae:	04 12       	push	r4		
    a1b0:	04 41       	mov	r1,	r4	
    a1b2:	24 53       	incd	r4		
    a1b4:	5f 42 01 00 	mov.b	&0x0001,r15	
    a1b8:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    a1bc:	c2 4f 01 00 	mov.b	r15,	&0x0001	
    a1c0:	34 41       	pop	r4		
    a1c2:	30 41       	ret			

0000a1c4 <uart_register_cb>:
    a1c4:	04 12       	push	r4		
    a1c6:	04 41       	mov	r1,	r4	
    a1c8:	24 53       	incd	r4		
    a1ca:	21 83       	decd	r1		
    a1cc:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a1d0:	92 44 fc ff 	mov	-4(r4),	&0x0298	;0xfffc(r4)
    a1d4:	98 02 
    a1d6:	84 93 fc ff 	tst	-4(r4)		;0xfffc(r4)
    a1da:	03 20       	jnz	$+8      	;abs 0xa1e2
    a1dc:	b0 12 ae a1 	call	#0xa1ae	
    a1e0:	02 3c       	jmp	$+6      	;abs 0xa1e6
    a1e2:	b0 12 9a a1 	call	#0xa19a	
    a1e6:	21 53       	incd	r1		
    a1e8:	34 41       	pop	r4		
    a1ea:	30 41       	ret			

0000a1ec <usart0irq>:
    a1ec:	0f 12       	push	r15		
    a1ee:	0e 12       	push	r14		
    a1f0:	0d 12       	push	r13		
    a1f2:	0c 12       	push	r12		
    a1f4:	04 12       	push	r4		
    a1f6:	04 41       	mov	r1,	r4	
    a1f8:	34 50 0a 00 	add	#10,	r4	;#0x000a
    a1fc:	21 83       	decd	r1		
    a1fe:	5f 42 65 00 	mov.b	&0x0065,r15	
    a202:	4f 4f       	mov.b	r15,	r15	
    a204:	2f f2       	and	#4,	r15	;r2 As==10
    a206:	0f 93       	tst	r15		
    a208:	0a 24       	jz	$+22     	;abs 0xa21e
    a20a:	5f 42 66 00 	mov.b	&0x0066,r15	
    a20e:	c4 4f f4 ff 	mov.b	r15,	-12(r4)	;0xfff4(r4)
    a212:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    a216:	5f 53       	inc.b	r15		
    a218:	c4 4f f4 ff 	mov.b	r15,	-12(r4)	;0xfff4(r4)
    a21c:	0a 3c       	jmp	$+22     	;abs 0xa232
    a21e:	1e 42 98 02 	mov	&0x0298,r14	
    a222:	5f 42 66 00 	mov.b	&0x0066,r15	
    a226:	8e 12       	call	r14		
    a228:	0f 93       	tst	r15		
    a22a:	03 24       	jz	$+8      	;abs 0xa232
    a22c:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    a230:	00 00 
    a232:	21 53       	incd	r1		
    a234:	34 41       	pop	r4		
    a236:	3c 41       	pop	r12		
    a238:	3d 41       	pop	r13		
    a23a:	3e 41       	pop	r14		
    a23c:	3f 41       	pop	r15		
    a23e:	00 13       	reti			

0000a240 <flash_init>:
    a240:	04 12       	push	r4		
    a242:	04 41       	mov	r1,	r4	
    a244:	24 53       	incd	r4		
    a246:	b0 12 84 99 	call	#0x9984	
    a24a:	3f 92       	cmp	#8,	r15	;r2 As==11
    a24c:	11 24       	jz	$+36     	;abs 0xa270
    a24e:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    a252:	03 34       	jge	$+8      	;abs 0xa25a
    a254:	1f 93       	cmp	#1,	r15	;r3 As==01
    a256:	08 24       	jz	$+18     	;abs 0xa268
    a258:	17 3c       	jmp	$+48     	;abs 0xa288
    a25a:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    a25e:	0c 24       	jz	$+26     	;abs 0xa278
    a260:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    a264:	0d 24       	jz	$+28     	;abs 0xa280
    a266:	10 3c       	jmp	$+34     	;abs 0xa288
    a268:	b2 40 83 a5 	mov	#-23165,&0x012a	;#0xa583
    a26c:	2a 01 
    a26e:	0c 3c       	jmp	$+26     	;abs 0xa288
    a270:	b2 40 96 a5 	mov	#-23146,&0x012a	;#0xa596
    a274:	2a 01 
    a276:	08 3c       	jmp	$+18     	;abs 0xa288
    a278:	b2 40 a1 a5 	mov	#-23135,&0x012a	;#0xa5a1
    a27c:	2a 01 
    a27e:	04 3c       	jmp	$+10     	;abs 0xa288
    a280:	b2 40 ac a5 	mov	#-23124,&0x012a	;#0xa5ac
    a284:	2a 01 
    a286:	03 43       	nop			
    a288:	34 41       	pop	r4		
    a28a:	30 41       	ret			

0000a28c <flash_write_byte>:
    a28c:	04 12       	push	r4		
    a28e:	04 41       	mov	r1,	r4	
    a290:	24 53       	incd	r4		
    a292:	21 82       	sub	#4,	r1	;r2 As==10
    a294:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    a298:	c4 4e fc ff 	mov.b	r14,	-4(r4)	;0xfffc(r4)
    a29c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a2a0:	6f 4f       	mov.b	@r15,	r15	
    a2a2:	5f 94 fc ff 	cmp.b	-4(r4),	r15	;0xfffc(r4)
    a2a6:	02 20       	jnz	$+6      	;abs 0xa2ac
    a2a8:	0f 43       	clr	r15		
    a2aa:	1f 3c       	jmp	$+64     	;abs 0xa2ea
    a2ac:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a2b0:	6f 4f       	mov.b	@r15,	r15	
    a2b2:	7f 93       	cmp.b	#-1,	r15	;r3 As==11
    a2b4:	02 24       	jz	$+6      	;abs 0xa2ba
    a2b6:	3f 43       	mov	#-1,	r15	;r3 As==11
    a2b8:	18 3c       	jmp	$+50     	;abs 0xa2ea
    a2ba:	b0 12 40 a2 	call	#0xa240	
    a2be:	b0 12 b4 a3 	call	#0xa3b4	
    a2c2:	b2 40 00 a5 	mov	#-23296,&0x012c	;#0xa500
    a2c6:	2c 01 
    a2c8:	b2 40 40 a5 	mov	#-23232,&0x0128	;#0xa540
    a2cc:	28 01 
    a2ce:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a2d2:	df 44 fc ff 	mov.b	-4(r4),	0(r15)	;0xfffc(r4), 0x0000(r15)
    a2d6:	00 00 
    a2d8:	b2 40 00 a5 	mov	#-23296,&0x0128	;#0xa500
    a2dc:	28 01 
    a2de:	b2 40 10 a5 	mov	#-23280,&0x012c	;#0xa510
    a2e2:	2c 01 
    a2e4:	b0 12 d0 a3 	call	#0xa3d0	
    a2e8:	0f 43       	clr	r15		
    a2ea:	21 52       	add	#4,	r1	;r2 As==10
    a2ec:	34 41       	pop	r4		
    a2ee:	30 41       	ret			

0000a2f0 <flash_write_word>:
    a2f0:	04 12       	push	r4		
    a2f2:	04 41       	mov	r1,	r4	
    a2f4:	24 53       	incd	r4		
    a2f6:	21 82       	sub	#4,	r1	;r2 As==10
    a2f8:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    a2fc:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    a300:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a304:	2f 4f       	mov	@r15,	r15	
    a306:	1f 94 fc ff 	cmp	-4(r4),	r15	;0xfffc(r4)
    a30a:	02 20       	jnz	$+6      	;abs 0xa310
    a30c:	0f 43       	clr	r15		
    a30e:	1f 3c       	jmp	$+64     	;abs 0xa34e
    a310:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a314:	2f 4f       	mov	@r15,	r15	
    a316:	3f 93       	cmp	#-1,	r15	;r3 As==11
    a318:	02 24       	jz	$+6      	;abs 0xa31e
    a31a:	3f 43       	mov	#-1,	r15	;r3 As==11
    a31c:	18 3c       	jmp	$+50     	;abs 0xa34e
    a31e:	b0 12 40 a2 	call	#0xa240	
    a322:	b0 12 b4 a3 	call	#0xa3b4	
    a326:	b2 40 00 a5 	mov	#-23296,&0x012c	;#0xa500
    a32a:	2c 01 
    a32c:	b2 40 40 a5 	mov	#-23232,&0x0128	;#0xa540
    a330:	28 01 
    a332:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a336:	9f 44 fc ff 	mov	-4(r4),	0(r15)	;0xfffc(r4), 0x0000(r15)
    a33a:	00 00 
    a33c:	b2 40 00 a5 	mov	#-23296,&0x0128	;#0xa500
    a340:	28 01 
    a342:	b2 40 10 a5 	mov	#-23280,&0x012c	;#0xa510
    a346:	2c 01 
    a348:	b0 12 d0 a3 	call	#0xa3d0	
    a34c:	0f 43       	clr	r15		
    a34e:	21 52       	add	#4,	r1	;r2 As==10
    a350:	34 41       	pop	r4		
    a352:	30 41       	ret			

0000a354 <flash_erase_segment>:
    a354:	04 12       	push	r4		
    a356:	04 41       	mov	r1,	r4	
    a358:	24 53       	incd	r4		
    a35a:	21 83       	decd	r1		
    a35c:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    a360:	b0 12 40 a2 	call	#0xa240	
    a364:	b0 12 b4 a3 	call	#0xa3b4	
    a368:	b2 40 00 a5 	mov	#-23296,&0x012c	;#0xa500
    a36c:	2c 01 
    a36e:	b2 40 02 a5 	mov	#-23294,&0x0128	;#0xa502
    a372:	28 01 
    a374:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    a378:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    a37c:	b2 40 00 a5 	mov	#-23296,&0x0128	;#0xa500
    a380:	28 01 
    a382:	b2 40 10 a5 	mov	#-23280,&0x012c	;#0xa510
    a386:	2c 01 
    a388:	b0 12 d0 a3 	call	#0xa3d0	
    a38c:	21 53       	incd	r1		
    a38e:	34 41       	pop	r4		
    a390:	30 41       	ret			

0000a392 <flash_erase_info_memory>:
    a392:	04 12       	push	r4		
    a394:	04 41       	mov	r1,	r4	
    a396:	24 53       	incd	r4		
    a398:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    a39c:	b0 12 54 a3 	call	#0xa354	
    a3a0:	3f 40 40 10 	mov	#4160,	r15	;#0x1040
    a3a4:	b0 12 54 a3 	call	#0xa354	
    a3a8:	3f 40 80 10 	mov	#4224,	r15	;#0x1080
    a3ac:	b0 12 54 a3 	call	#0xa354	
    a3b0:	34 41       	pop	r4		
    a3b2:	30 41       	ret			

0000a3b4 <watchdog_stop>:
    a3b4:	04 12       	push	r4		
    a3b6:	04 41       	mov	r1,	r4	
    a3b8:	24 53       	incd	r4		
    a3ba:	1f 42 20 01 	mov	&0x0120,r15	
    a3be:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    a3c2:	82 4f 9a 02 	mov	r15,	&0x029a	
    a3c6:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    a3ca:	20 01 
    a3cc:	34 41       	pop	r4		
    a3ce:	30 41       	ret			

0000a3d0 <watchdog_restore>:
    a3d0:	04 12       	push	r4		
    a3d2:	04 41       	mov	r1,	r4	
    a3d4:	24 53       	incd	r4		
    a3d6:	1f 42 9a 02 	mov	&0x029a,r15	
    a3da:	3f d0 00 5a 	bis	#23040,	r15	;#0x5a00
    a3de:	82 4f 20 01 	mov	r15,	&0x0120	
    a3e2:	34 41       	pop	r4		
    a3e4:	30 41       	ret			

0000a3e6 <__mulsi3>:
    a3e6:	0b 12       	push	r11		
    a3e8:	0a 12       	push	r10		
    a3ea:	0b 43       	clr	r11		
    a3ec:	0a 43       	clr	r10		
    a3ee:	08 3c       	jmp	$+18     	;abs 0xa400
    a3f0:	12 c3       	clrc			
    a3f2:	0d 10       	rrc	r13		
    a3f4:	0c 10       	rrc	r12		
    a3f6:	02 28       	jnc	$+6      	;abs 0xa3fc
    a3f8:	0a 5e       	add	r14,	r10	
    a3fa:	0b 6f       	addc	r15,	r11	
    a3fc:	0e 5e       	rla	r14		
    a3fe:	0f 6f       	rlc	r15		
    a400:	0c 93       	tst	r12		
    a402:	f6 23       	jnz	$-18     	;abs 0xa3f0
    a404:	0d 93       	tst	r13		
    a406:	f4 23       	jnz	$-22     	;abs 0xa3f0
    a408:	0e 4a       	mov	r10,	r14	
    a40a:	0f 4b       	mov	r11,	r15	
    a40c:	3a 41       	pop	r10		
    a40e:	3b 41       	pop	r11		
    a410:	30 41       	ret			

0000a412 <__divhi3>:
    a412:	0d 43       	clr	r13		
    a414:	0f 93       	tst	r15		
    a416:	04 34       	jge	$+10     	;abs 0xa420
    a418:	3d 40 03 00 	mov	#3,	r13	;#0x0003
    a41c:	3f e3       	inv	r15		
    a41e:	1f 53       	inc	r15		
    a420:	0e 93       	tst	r14		
    a422:	03 34       	jge	$+8      	;abs 0xa42a
    a424:	5d e3       	xor.b	#1,	r13	;r3 As==01
    a426:	3e e3       	inv	r14		
    a428:	1e 53       	inc	r14		
    a42a:	0d 12       	push	r13		
    a42c:	b0 12 4c a4 	call	#0xa44c	
    a430:	3d 41       	pop	r13		
    a432:	6d b3       	bit.b	#2,	r13	;r3 As==10
    a434:	02 24       	jz	$+6      	;abs 0xa43a
    a436:	3e e3       	inv	r14		
    a438:	1e 53       	inc	r14		
    a43a:	5d b3       	bit.b	#1,	r13	;r3 As==01
    a43c:	02 24       	jz	$+6      	;abs 0xa442
    a43e:	3f e3       	inv	r15		
    a440:	1f 53       	inc	r15		
    a442:	30 41       	ret			

0000a444 <__modhi3>:
    a444:	b0 12 12 a4 	call	#0xa412	
    a448:	0f 4e       	mov	r14,	r15	
    a44a:	30 41       	ret			

0000a44c <__udivhi3>:
    a44c:	7c 40 10 00 	mov.b	#16,	r12	;#0x0010
    a450:	0d 4e       	mov	r14,	r13	
    a452:	0e 43       	clr	r14		
    a454:	0f 5f       	rla	r15		
    a456:	0e 6e       	rlc	r14		
    a458:	0e 9d       	cmp	r13,	r14	
    a45a:	02 28       	jnc	$+6      	;abs 0xa460
    a45c:	0e 8d       	sub	r13,	r14	
    a45e:	1f d3       	bis	#1,	r15	;r3 As==01
    a460:	1c 83       	dec	r12		
    a462:	f8 23       	jnz	$-14     	;abs 0xa454
    a464:	30 41       	ret			

0000a466 <__umodhi3>:
    a466:	b0 12 4c a4 	call	#0xa44c	
    a46a:	0f 4e       	mov	r14,	r15	
    a46c:	30 41       	ret			

0000a46e <memcpy>:
    a46e:	0b 12       	push	r11		
    a470:	0a 12       	push	r10		
    a472:	09 12       	push	r9		
    a474:	08 12       	push	r8		
    a476:	07 12       	push	r7		
    a478:	0d 93       	tst	r13		
    a47a:	70 24       	jz	$+226    	;abs 0xa55c
    a47c:	0f 9e       	cmp	r14,	r15	
    a47e:	6e 24       	jz	$+222    	;abs 0xa55c
    a480:	34 2c       	jc	$+106    	;abs 0xa4ea
    a482:	0c 4e       	mov	r14,	r12	
    a484:	0c df       	bis	r15,	r12	
    a486:	1c f3       	and	#1,	r12	;r3 As==01
    a488:	1b 24       	jz	$+56     	;abs 0xa4c0
    a48a:	0c 4e       	mov	r14,	r12	
    a48c:	0c ef       	xor	r15,	r12	
    a48e:	1c f3       	and	#1,	r12	;r3 As==01
    a490:	07 20       	jnz	$+16     	;abs 0xa4a0
    a492:	2d 93       	cmp	#2,	r13	;r3 As==10
    a494:	07 28       	jnc	$+16     	;abs 0xa4a4
    a496:	0b 4e       	mov	r14,	r11	
    a498:	1b f3       	and	#1,	r11	;r3 As==01
    a49a:	2c 43       	mov	#2,	r12	;r3 As==10
    a49c:	0c 8b       	sub	r11,	r12	
    a49e:	03 3c       	jmp	$+8      	;abs 0xa4a6
    a4a0:	0c 4d       	mov	r13,	r12	
    a4a2:	01 3c       	jmp	$+4      	;abs 0xa4a6
    a4a4:	1c 43       	mov	#1,	r12	;r3 As==01
    a4a6:	0d 8c       	sub	r12,	r13	
    a4a8:	0a 4c       	mov	r12,	r10	
    a4aa:	09 4e       	mov	r14,	r9	
    a4ac:	0b 4f       	mov	r15,	r11	
    a4ae:	fb 49 00 00 	mov.b	@r9+,	0(r11)	;0x0000(r11)
    a4b2:	1b 53       	inc	r11		
    a4b4:	3a 53       	add	#-1,	r10	;r3 As==11
    a4b6:	fb 23       	jnz	$-8      	;abs 0xa4ae
    a4b8:	0a 4f       	mov	r15,	r10	
    a4ba:	0a 5c       	add	r12,	r10	
    a4bc:	0e 5c       	add	r12,	r14	
    a4be:	01 3c       	jmp	$+4      	;abs 0xa4c2
    a4c0:	0a 4f       	mov	r15,	r10	
    a4c2:	0b 4d       	mov	r13,	r11	
    a4c4:	12 c3       	clrc			
    a4c6:	0b 10       	rrc	r11		
    a4c8:	0b 24       	jz	$+24     	;abs 0xa4e0
    a4ca:	09 4b       	mov	r11,	r9	
    a4cc:	08 4e       	mov	r14,	r8	
    a4ce:	0c 4a       	mov	r10,	r12	
    a4d0:	bc 48 00 00 	mov	@r8+,	0(r12)	;0x0000(r12)
    a4d4:	2c 53       	incd	r12		
    a4d6:	39 53       	add	#-1,	r9	;r3 As==11
    a4d8:	fb 23       	jnz	$-8      	;abs 0xa4d0
    a4da:	0b 5b       	rla	r11		
    a4dc:	0e 5b       	add	r11,	r14	
    a4de:	0a 5b       	add	r11,	r10	
    a4e0:	1d f3       	and	#1,	r13	;r3 As==01
    a4e2:	3c 24       	jz	$+122    	;abs 0xa55c
    a4e4:	ea 4e 00 00 	mov.b	@r14,	0(r10)	;0x0000(r10)
    a4e8:	39 3c       	jmp	$+116    	;abs 0xa55c
    a4ea:	0e 5d       	add	r13,	r14	
    a4ec:	0c 4f       	mov	r15,	r12	
    a4ee:	0c 5d       	add	r13,	r12	
    a4f0:	0b 4c       	mov	r12,	r11	
    a4f2:	0b de       	bis	r14,	r11	
    a4f4:	1b f3       	and	#1,	r11	;r3 As==01
    a4f6:	1b 24       	jz	$+56     	;abs 0xa52e
    a4f8:	0b 4c       	mov	r12,	r11	
    a4fa:	0b ee       	xor	r14,	r11	
    a4fc:	1b f3       	and	#1,	r11	;r3 As==01
    a4fe:	06 20       	jnz	$+14     	;abs 0xa50c
    a500:	3d 90 03 00 	cmp	#3,	r13	;#0x0003
    a504:	03 28       	jnc	$+8      	;abs 0xa50c
    a506:	0b 4e       	mov	r14,	r11	
    a508:	1b f3       	and	#1,	r11	;r3 As==01
    a50a:	01 3c       	jmp	$+4      	;abs 0xa50e
    a50c:	0b 4d       	mov	r13,	r11	
    a50e:	0d 8b       	sub	r11,	r13	
    a510:	09 4e       	mov	r14,	r9	
    a512:	0a 4c       	mov	r12,	r10	
    a514:	08 4b       	mov	r11,	r8	
    a516:	08 8c       	sub	r12,	r8	
    a518:	3a 53       	add	#-1,	r10	;r3 As==11
    a51a:	39 53       	add	#-1,	r9	;r3 As==11
    a51c:	ea 49 00 00 	mov.b	@r9,	0(r10)	;0x0000(r10)
    a520:	07 4a       	mov	r10,	r7	
    a522:	07 58       	add	r8,	r7	
    a524:	f9 23       	jnz	$-12     	;abs 0xa518
    a526:	3b e3       	inv	r11		
    a528:	1b 53       	inc	r11		
    a52a:	0c 5b       	add	r11,	r12	
    a52c:	0e 5b       	add	r11,	r14	
    a52e:	0b 4d       	mov	r13,	r11	
    a530:	12 c3       	clrc			
    a532:	0b 10       	rrc	r11		
    a534:	0e 24       	jz	$+30     	;abs 0xa552
    a536:	0a 4b       	mov	r11,	r10	
    a538:	08 4e       	mov	r14,	r8	
    a53a:	09 4c       	mov	r12,	r9	
    a53c:	28 83       	decd	r8		
    a53e:	29 83       	decd	r9		
    a540:	a9 48 00 00 	mov	@r8,	0(r9)	;0x0000(r9)
    a544:	3a 53       	add	#-1,	r10	;r3 As==11
    a546:	fa 23       	jnz	$-10     	;abs 0xa53c
    a548:	0a 8b       	sub	r11,	r10	
    a54a:	0b 4a       	mov	r10,	r11	
    a54c:	0b 5b       	rla	r11		
    a54e:	0e 5b       	add	r11,	r14	
    a550:	0c 5b       	add	r11,	r12	
    a552:	1d f3       	and	#1,	r13	;r3 As==01
    a554:	03 24       	jz	$+8      	;abs 0xa55c
    a556:	dc 4e ff ff 	mov.b	-1(r14),-1(r12)	;0xffff(r14), 0xffff(r12)
    a55a:	ff ff 
    a55c:	37 41       	pop	r7		
    a55e:	38 41       	pop	r8		
    a560:	39 41       	pop	r9		
    a562:	3a 41       	pop	r10		
    a564:	3b 41       	pop	r11		
    a566:	30 41       	ret			

0000a568 <printf>:
    a568:	0d 41       	mov	r1,	r13	
    a56a:	2d 53       	incd	r13		
    a56c:	3e 4d       	mov	@r13+,	r14	
    a56e:	3f 40 4a a1 	mov	#-24246,r15	;#0xa14a
    a572:	b0 12 da a7 	call	#0xa7da	
    a576:	30 41       	ret			

0000a578 <vprintf>:
    a578:	0d 4e       	mov	r14,	r13	
    a57a:	0e 4f       	mov	r15,	r14	
    a57c:	3f 40 4a a1 	mov	#-24246,r15	;#0xa14a
    a580:	b0 12 da a7 	call	#0xa7da	
    a584:	30 41       	ret			

0000a586 <append>:
    a586:	1e 42 9e 02 	mov	&0x029e,r14	
    a58a:	1e 93       	cmp	#1,	r14	;r3 As==01
    a58c:	0b 38       	jl	$+24     	;abs 0xa5a4
    a58e:	1d 42 9c 02 	mov	&0x029c,r13	
    a592:	cd 4f 00 00 	mov.b	r15,	0(r13)	;0x0000(r13)
    a596:	1d 53       	inc	r13		
    a598:	82 4d 9c 02 	mov	r13,	&0x029c	
    a59c:	3e 53       	add	#-1,	r14	;r3 As==11
    a59e:	82 4e 9e 02 	mov	r14,	&0x029e	
    a5a2:	30 41       	ret			
    a5a4:	3f 43       	mov	#-1,	r15	;r3 As==11
    a5a6:	30 41       	ret			

0000a5a8 <call_vuprintf>:
    a5a8:	0b 12       	push	r11		
    a5aa:	0a 12       	push	r10		
    a5ac:	21 83       	decd	r1		
    a5ae:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    a5b2:	1a 42 9c 02 	mov	&0x029c,r10	
    a5b6:	1b 42 9e 02 	mov	&0x029e,r11	
    a5ba:	0d 4e       	mov	r14,	r13	
    a5bc:	0e 4f       	mov	r15,	r14	
    a5be:	3f 40 86 a5 	mov	#-23162,r15	;#0xa586
    a5c2:	b0 12 da a7 	call	#0xa7da	
    a5c6:	0f 9b       	cmp	r11,	r15	
    a5c8:	05 38       	jl	$+12     	;abs 0xa5d4
    a5ca:	0e 4a       	mov	r10,	r14	
    a5cc:	0e 5b       	add	r11,	r14	
    a5ce:	ce 43 ff ff 	mov.b	#0,	-1(r14)	;r3 As==00, 0xffff(r14)
    a5d2:	04 3c       	jmp	$+10     	;abs 0xa5dc
    a5d4:	1e 42 9c 02 	mov	&0x029c,r14	
    a5d8:	ce 43 00 00 	mov.b	#0,	0(r14)	;r3 As==00, 0x0000(r14)
    a5dc:	21 53       	incd	r1		
    a5de:	3a 41       	pop	r10		
    a5e0:	3b 41       	pop	r11		
    a5e2:	30 41       	ret			

0000a5e4 <sprintf>:
    a5e4:	92 41 02 00 	mov	2(r1),	&0x029c	;0x0002(r1)
    a5e8:	9c 02 
    a5ea:	b2 40 ff 7f 	mov	#32767,	&0x029e	;#0x7fff
    a5ee:	9e 02 
    a5f0:	0e 41       	mov	r1,	r14	
    a5f2:	3e 50 06 00 	add	#6,	r14	;#0x0006
    a5f6:	1f 41 04 00 	mov	4(r1),	r15	;0x0004(r1)
    a5fa:	b0 12 a8 a5 	call	#0xa5a8	
    a5fe:	30 41       	ret			

0000a600 <snprintf>:
    a600:	92 41 02 00 	mov	2(r1),	&0x029c	;0x0002(r1)
    a604:	9c 02 
    a606:	92 41 04 00 	mov	4(r1),	&0x029e	;0x0004(r1)
    a60a:	9e 02 
    a60c:	0e 41       	mov	r1,	r14	
    a60e:	3e 52       	add	#8,	r14	;r2 As==11
    a610:	1f 41 06 00 	mov	6(r1),	r15	;0x0006(r1)
    a614:	b0 12 a8 a5 	call	#0xa5a8	
    a618:	30 41       	ret			

0000a61a <vsprintf>:
    a61a:	0c 4e       	mov	r14,	r12	
    a61c:	82 4f 9c 02 	mov	r15,	&0x029c	
    a620:	b2 40 ff 7f 	mov	#32767,	&0x029e	;#0x7fff
    a624:	9e 02 
    a626:	0e 4d       	mov	r13,	r14	
    a628:	0f 4c       	mov	r12,	r15	
    a62a:	b0 12 a8 a5 	call	#0xa5a8	
    a62e:	30 41       	ret			

0000a630 <vsnprintf>:
    a630:	82 4f 9c 02 	mov	r15,	&0x029c	
    a634:	82 4e 9e 02 	mov	r14,	&0x029e	
    a638:	0e 4c       	mov	r12,	r14	
    a63a:	0f 4d       	mov	r13,	r15	
    a63c:	b0 12 a8 a5 	call	#0xa5a8	
    a640:	30 41       	ret			

0000a642 <print_field>:
    a642:	0b 12       	push	r11		
    a644:	0a 12       	push	r10		
    a646:	09 12       	push	r9		
    a648:	08 12       	push	r8		
    a64a:	07 12       	push	r7		
    a64c:	06 12       	push	r6		
    a64e:	05 12       	push	r5		
    a650:	04 12       	push	r4		
    a652:	31 82       	sub	#8,	r1	;r2 As==11
    a654:	08 4f       	mov	r15,	r8	
    a656:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    a65a:	09 4d       	mov	r13,	r9	
    a65c:	1f 41 1a 00 	mov	26(r1),	r15	;0x001a(r1)
    a660:	1d 41 1c 00 	mov	28(r1),	r13	;0x001c(r1)
    a664:	4c 4d       	mov.b	r13,	r12	
    a666:	04 4d       	mov	r13,	r4	
    a668:	84 10       	swpb	r4		
    a66a:	45 44       	mov.b	r4,	r5	
    a66c:	4e 4f       	mov.b	r15,	r14	
    a66e:	7e b0 40 00 	bit.b	#64,	r14	;#0x0040
    a672:	11 24       	jz	$+36     	;abs 0xa696
    a674:	f1 40 30 00 	mov.b	#48,	0(r1)	;#0x0030, 0x0000(r1)
    a678:	00 00 
    a67a:	0e 4f       	mov	r15,	r14	
    a67c:	8e 10       	swpb	r14		
    a67e:	5e f3       	and.b	#1,	r14	;r3 As==01
    a680:	03 24       	jz	$+8      	;abs 0xa688
    a682:	7e 40 58 00 	mov.b	#88,	r14	;#0x0058
    a686:	02 3c       	jmp	$+6      	;abs 0xa68c
    a688:	7e 40 78 00 	mov.b	#120,	r14	;#0x0078
    a68c:	c1 4e 01 00 	mov.b	r14,	1(r1)	;0x0001(r1)
    a690:	0c 41       	mov	r1,	r12	
    a692:	2c 53       	incd	r12		
    a694:	0f 3c       	jmp	$+32     	;abs 0xa6b4
    a696:	7e f0 20 00 	and.b	#32,	r14	;#0x0020
    a69a:	04 24       	jz	$+10     	;abs 0xa6a4
    a69c:	f1 40 30 00 	mov.b	#48,	0(r1)	;#0x0030, 0x0000(r1)
    a6a0:	00 00 
    a6a2:	04 3c       	jmp	$+10     	;abs 0xa6ac
    a6a4:	4c 93       	tst.b	r12		
    a6a6:	05 24       	jz	$+12     	;abs 0xa6b2
    a6a8:	c1 4d 00 00 	mov.b	r13,	0(r1)	;0x0000(r1)
    a6ac:	0c 41       	mov	r1,	r12	
    a6ae:	1c 53       	inc	r12		
    a6b0:	01 3c       	jmp	$+4      	;abs 0xa6b4
    a6b2:	0c 41       	mov	r1,	r12	
    a6b4:	0a 4c       	mov	r12,	r10	
    a6b6:	8c 10       	swpb	r12		
    a6b8:	8c 11       	sxt	r12		
    a6ba:	8c 10       	swpb	r12		
    a6bc:	8c 11       	sxt	r12		
    a6be:	0b 4c       	mov	r12,	r11	
    a6c0:	06 41       	mov	r1,	r6	
    a6c2:	0c 41       	mov	r1,	r12	
    a6c4:	8c 10       	swpb	r12		
    a6c6:	8c 11       	sxt	r12		
    a6c8:	8c 10       	swpb	r12		
    a6ca:	8c 11       	sxt	r12		
    a6cc:	07 4c       	mov	r12,	r7	
    a6ce:	0a 86       	sub	r6,	r10	
    a6d0:	0b 77       	subc	r7,	r11	
    a6d2:	0e 4f       	mov	r15,	r14	
    a6d4:	8e 10       	swpb	r14		
    a6d6:	c1 4e 02 00 	mov.b	r14,	2(r1)	;0x0002(r1)
    a6da:	6e f2       	and.b	#4,	r14	;r2 As==10
    a6dc:	02 24       	jz	$+6      	;abs 0xa6e2
    a6de:	07 45       	mov	r5,	r7	
    a6e0:	01 3c       	jmp	$+4      	;abs 0xa6e4
    a6e2:	37 43       	mov	#-1,	r7	;r3 As==11
    a6e4:	4f 4f       	mov.b	r15,	r15	
    a6e6:	7f b0 10 00 	bit.b	#16,	r15	;#0x0010
    a6ea:	3c 20       	jnz	$+122    	;abs 0xa764
    a6ec:	1d 41 04 00 	mov	4(r1),	r13	;0x0004(r1)
    a6f0:	3d 53       	add	#-1,	r13	;r3 As==11
    a6f2:	1d 53       	inc	r13		
    a6f4:	cd 93 00 00 	tst.b	0(r13)		;0x0000(r13)
    a6f8:	fc 23       	jnz	$-6      	;abs 0xa6f2
    a6fa:	1d 81 04 00 	sub	4(r1),	r13	;0x0004(r1)
    a6fe:	09 9a       	cmp	r10,	r9	
    a700:	02 28       	jnc	$+6      	;abs 0xa706
    a702:	09 8a       	sub	r10,	r9	
    a704:	01 3c       	jmp	$+4      	;abs 0xa708
    a706:	09 43       	clr	r9		
    a708:	e1 b3 02 00 	bit.b	#2,	2(r1)	;r3 As==10, 0x0002(r1)
    a70c:	05 24       	jz	$+12     	;abs 0xa718
    a70e:	09 95       	cmp	r5,	r9	
    a710:	02 28       	jnc	$+6      	;abs 0xa716
    a712:	09 85       	sub	r5,	r9	
    a714:	01 3c       	jmp	$+4      	;abs 0xa718
    a716:	09 43       	clr	r9		
    a718:	05 4d       	mov	r13,	r5	
    a71a:	07 9d       	cmp	r13,	r7	
    a71c:	01 2c       	jc	$+4      	;abs 0xa720
    a71e:	05 47       	mov	r7,	r5	
    a720:	4f 93       	tst.b	r15		
    a722:	0d 38       	jl	$+28     	;abs 0xa73e
    a724:	f1 40 20 00 	mov.b	#32,	6(r1)	;#0x0020, 0x0006(r1)
    a728:	06 00 
    a72a:	06 43       	clr	r6		
    a72c:	0b 43       	clr	r11		
    a72e:	0e 3c       	jmp	$+30     	;abs 0xa74c
    a730:	0f 41       	mov	r1,	r15	
    a732:	0f 56       	add	r6,	r15	
    a734:	6f 4f       	mov.b	@r15,	r15	
    a736:	8f 11       	sxt	r15		
    a738:	16 53       	inc	r6		
    a73a:	88 12       	call	r8		
    a73c:	01 3c       	jmp	$+4      	;abs 0xa740
    a73e:	06 43       	clr	r6		
    a740:	06 9a       	cmp	r10,	r6	
    a742:	f6 3b       	jl	$-18     	;abs 0xa730
    a744:	0b 4a       	mov	r10,	r11	
    a746:	f1 40 30 00 	mov.b	#48,	6(r1)	;#0x0030, 0x0006(r1)
    a74a:	06 00 
    a74c:	05 8b       	sub	r11,	r5	
    a74e:	05 3c       	jmp	$+12     	;abs 0xa75a
    a750:	5f 41 06 00 	mov.b	6(r1),	r15	;0x0006(r1)
    a754:	8f 11       	sxt	r15		
    a756:	88 12       	call	r8		
    a758:	1b 53       	inc	r11		
    a75a:	0f 45       	mov	r5,	r15	
    a75c:	0f 5b       	add	r11,	r15	
    a75e:	0f 99       	cmp	r9,	r15	
    a760:	f7 2b       	jnc	$-16     	;abs 0xa750
    a762:	0a 3c       	jmp	$+22     	;abs 0xa778
    a764:	06 43       	clr	r6		
    a766:	0b 43       	clr	r11		
    a768:	07 3c       	jmp	$+16     	;abs 0xa778
    a76a:	1b 53       	inc	r11		
    a76c:	0f 41       	mov	r1,	r15	
    a76e:	0f 56       	add	r6,	r15	
    a770:	6f 4f       	mov.b	@r15,	r15	
    a772:	8f 11       	sxt	r15		
    a774:	16 53       	inc	r6		
    a776:	88 12       	call	r8		
    a778:	06 9a       	cmp	r10,	r6	
    a77a:	f7 3b       	jl	$-16     	;abs 0xa76a
    a77c:	e1 b3 02 00 	bit.b	#2,	2(r1)	;r3 As==10, 0x0002(r1)
    a780:	02 24       	jz	$+6      	;abs 0xa786
    a782:	4a 44       	mov.b	r4,	r10	
    a784:	08 3c       	jmp	$+18     	;abs 0xa796
    a786:	1a 41 04 00 	mov	4(r1),	r10	;0x0004(r1)
    a78a:	0a 8b       	sub	r11,	r10	
    a78c:	0d 3c       	jmp	$+28     	;abs 0xa7a8
    a78e:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    a792:	88 12       	call	r8		
    a794:	7a 53       	add.b	#-1,	r10	;r3 As==11
    a796:	4a 93       	tst.b	r10		
    a798:	fa 23       	jnz	$-10     	;abs 0xa78e
    a79a:	44 44       	mov.b	r4,	r4	
    a79c:	0b 54       	add	r4,	r11	
    a79e:	f3 3f       	jmp	$-24     	;abs 0xa786
    a7a0:	37 53       	add	#-1,	r7	;r3 As==11
    a7a2:	8f 11       	sxt	r15		
    a7a4:	88 12       	call	r8		
    a7a6:	1b 53       	inc	r11		
    a7a8:	0f 4a       	mov	r10,	r15	
    a7aa:	0f 5b       	add	r11,	r15	
    a7ac:	6f 4f       	mov.b	@r15,	r15	
    a7ae:	4f 93       	tst.b	r15		
    a7b0:	07 24       	jz	$+16     	;abs 0xa7c0
    a7b2:	07 93       	tst	r7		
    a7b4:	f5 23       	jnz	$-20     	;abs 0xa7a0
    a7b6:	04 3c       	jmp	$+10     	;abs 0xa7c0
    a7b8:	3f 40 20 00 	mov	#32,	r15	;#0x0020
    a7bc:	88 12       	call	r8		
    a7be:	1b 53       	inc	r11		
    a7c0:	0b 99       	cmp	r9,	r11	
    a7c2:	fa 2b       	jnc	$-10     	;abs 0xa7b8
    a7c4:	0f 4b       	mov	r11,	r15	
    a7c6:	31 52       	add	#8,	r1	;r2 As==11
    a7c8:	34 41       	pop	r4		
    a7ca:	35 41       	pop	r5		
    a7cc:	36 41       	pop	r6		
    a7ce:	37 41       	pop	r7		
    a7d0:	38 41       	pop	r8		
    a7d2:	39 41       	pop	r9		
    a7d4:	3a 41       	pop	r10		
    a7d6:	3b 41       	pop	r11		
    a7d8:	30 41       	ret			

0000a7da <vuprintf>:
    a7da:	0b 12       	push	r11		
    a7dc:	0a 12       	push	r10		
    a7de:	09 12       	push	r9		
    a7e0:	08 12       	push	r8		
    a7e2:	07 12       	push	r7		
    a7e4:	06 12       	push	r6		
    a7e6:	05 12       	push	r5		
    a7e8:	04 12       	push	r4		
    a7ea:	31 50 b6 ff 	add	#-74,	r1	;#0xffb6
    a7ee:	81 4f 3a 00 	mov	r15,	58(r1)	;0x003a(r1)
    a7f2:	06 4e       	mov	r14,	r6	
    a7f4:	05 4d       	mov	r13,	r5	
    a7f6:	81 4e 3e 00 	mov	r14,	62(r1)	;0x003e(r1)
    a7fa:	c1 43 2f 00 	mov.b	#0,	47(r1)	;r3 As==00, 0x002f(r1)
    a7fe:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    a802:	c1 43 2e 00 	mov.b	#0,	46(r1)	;r3 As==00, 0x002e(r1)
    a806:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    a80a:	81 43 30 00 	mov	#0,	48(r1)	;r3 As==00, 0x0030(r1)
    a80e:	81 43 26 00 	mov	#0,	38(r1)	;r3 As==00, 0x0026(r1)
    a812:	07 43       	clr	r7		
    a814:	81 43 2c 00 	mov	#0,	44(r1)	;r3 As==00, 0x002c(r1)
    a818:	0e 41       	mov	r1,	r14	
    a81a:	3e 50 1c 00 	add	#28,	r14	;#0x001c
    a81e:	81 4e 1c 00 	mov	r14,	28(r1)	;0x001c(r1)
    a822:	30 40 54 ae 	br	#0xae54	
    a826:	0f 46       	mov	r6,	r15	
    a828:	1f 53       	inc	r15		
    a82a:	81 4f 40 00 	mov	r15,	64(r1)	;0x0040(r1)
    a82e:	07 93       	tst	r7		
    a830:	1e 20       	jnz	$+62     	;abs 0xa86e
    a832:	7e 90 25 00 	cmp.b	#37,	r14	;#0x0025
    a836:	13 20       	jnz	$+40     	;abs 0xa85e
    a838:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00, 0x0000(r1)
    a83c:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00, 0x0002(r1)
    a840:	81 46 3e 00 	mov	r6,	62(r1)	;0x003e(r1)
    a844:	c1 43 2f 00 	mov.b	#0,	47(r1)	;r3 As==00, 0x002f(r1)
    a848:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    a84c:	c1 43 2e 00 	mov.b	#0,	46(r1)	;r3 As==00, 0x002e(r1)
    a850:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    a854:	81 43 30 00 	mov	#0,	48(r1)	;r3 As==00, 0x0030(r1)
    a858:	30 40 4a ae 	br	#0xae4a	
    a85c:	05 47       	mov	r7,	r5	
    a85e:	8e 11       	sxt	r14		
    a860:	0f 4e       	mov	r14,	r15	
    a862:	91 12 3c 00 	call	60(r1)		;0x003c(r1)
    a866:	91 53 2c 00 	inc	44(r1)		;0x002c(r1)
    a86a:	30 40 30 ae 	br	#0xae30	
    a86e:	7e 90 63 00 	cmp.b	#99,	r14	;#0x0063
    a872:	c5 24       	jz	$+396    	;abs 0xa9fe
    a874:	7e 90 64 00 	cmp.b	#100,	r14	;#0x0064
    a878:	27 34       	jge	$+80     	;abs 0xa8c8
    a87a:	7e 90 30 00 	cmp.b	#48,	r14	;#0x0030
    a87e:	94 24       	jz	$+298    	;abs 0xa9a8
    a880:	7e 90 31 00 	cmp.b	#49,	r14	;#0x0031
    a884:	1a 34       	jge	$+54     	;abs 0xa8ba
    a886:	7e 90 2a 00 	cmp.b	#42,	r14	;#0x002a
    a88a:	77 24       	jz	$+240    	;abs 0xa97a
    a88c:	7e 90 2b 00 	cmp.b	#43,	r14	;#0x002b
    a890:	0a 34       	jge	$+22     	;abs 0xa8a6
    a892:	7e 90 23 00 	cmp.b	#35,	r14	;#0x0023
    a896:	42 24       	jz	$+134    	;abs 0xa91c
    a898:	7e 90 25 00 	cmp.b	#37,	r14	;#0x0025
    a89c:	e0 27       	jz	$-62     	;abs 0xa85e
    a89e:	7e 90 20 00 	cmp.b	#32,	r14	;#0x0020
    a8a2:	32 20       	jnz	$+102    	;abs 0xa908
    a8a4:	56 3c       	jmp	$+174    	;abs 0xa952
    a8a6:	7e 90 2d 00 	cmp.b	#45,	r14	;#0x002d
    a8aa:	49 24       	jz	$+148    	;abs 0xa93e
    a8ac:	7e 90 2e 00 	cmp.b	#46,	r14	;#0x002e
    a8b0:	5b 24       	jz	$+184    	;abs 0xa968
    a8b2:	7e 90 2b 00 	cmp.b	#43,	r14	;#0x002b
    a8b6:	28 20       	jnz	$+82     	;abs 0xa908
    a8b8:	47 3c       	jmp	$+144    	;abs 0xa948
    a8ba:	7e 90 3a 00 	cmp.b	#58,	r14	;#0x003a
    a8be:	8c 38       	jl	$+282    	;abs 0xa9d8
    a8c0:	7e 90 58 00 	cmp.b	#88,	r14	;#0x0058
    a8c4:	21 20       	jnz	$+68     	;abs 0xa908
    a8c6:	e9 3c       	jmp	$+468    	;abs 0xaa9a
    a8c8:	7e 90 6f 00 	cmp.b	#111,	r14	;#0x006f
    a8cc:	24 24       	jz	$+74     	;abs 0xa916
    a8ce:	7e 90 70 00 	cmp.b	#112,	r14	;#0x0070
    a8d2:	0a 34       	jge	$+22     	;abs 0xa8e8
    a8d4:	7e 90 69 00 	cmp.b	#105,	r14	;#0x0069
    a8d8:	e3 24       	jz	$+456    	;abs 0xaaa0
    a8da:	7e 90 6c 00 	cmp.b	#108,	r14	;#0x006c
    a8de:	22 24       	jz	$+70     	;abs 0xa924
    a8e0:	7e 90 64 00 	cmp.b	#100,	r14	;#0x0064
    a8e4:	11 20       	jnz	$+36     	;abs 0xa908
    a8e6:	dc 3c       	jmp	$+442    	;abs 0xaaa0
    a8e8:	7e 90 73 00 	cmp.b	#115,	r14	;#0x0073
    a8ec:	98 24       	jz	$+306    	;abs 0xaa1e
    a8ee:	7e 90 74 00 	cmp.b	#116,	r14	;#0x0074
    a8f2:	04 34       	jge	$+10     	;abs 0xa8fc
    a8f4:	7e 90 70 00 	cmp.b	#112,	r14	;#0x0070
    a8f8:	07 20       	jnz	$+16     	;abs 0xa908
    a8fa:	b8 3c       	jmp	$+370    	;abs 0xaa6c
    a8fc:	7e 90 75 00 	cmp.b	#117,	r14	;#0x0075
    a900:	d1 24       	jz	$+420    	;abs 0xaaa4
    a902:	7e 90 78 00 	cmp.b	#120,	r14	;#0x0078
    a906:	d2 24       	jz	$+422    	;abs 0xaaac
    a908:	19 41 3e 00 	mov	62(r1),	r9	;0x003e(r1)
    a90c:	18 41 2c 00 	mov	44(r1),	r8	;0x002c(r1)
    a910:	08 89       	sub	r9,	r8	
    a912:	30 40 1e ae 	br	#0xae1e	
    a916:	b1 42 28 00 	mov	#8,	40(r1)	;r2 As==11, 0x0028(r1)
    a91a:	cb 3c       	jmp	$+408    	;abs 0xaab2
    a91c:	f1 d2 00 00 	bis.b	#8,	0(r1)	;r2 As==11, 0x0000(r1)
    a920:	30 40 4e ae 	br	#0xae4e	
    a924:	69 41       	mov.b	@r1,	r9	
    a926:	59 f3       	and.b	#1,	r9	;r3 As==01
    a928:	6e 41       	mov.b	@r1,	r14	
    a92a:	04 24       	jz	$+10     	;abs 0xa934
    a92c:	7e f0 fe ff 	and.b	#-2,	r14	;#0xfffe
    a930:	6e d3       	bis.b	#2,	r14	;r3 As==10
    a932:	01 3c       	jmp	$+4      	;abs 0xa936
    a934:	5e d3       	bis.b	#1,	r14	;r3 As==01
    a936:	c1 4e 00 00 	mov.b	r14,	0(r1)	;0x0000(r1)
    a93a:	30 40 4e ae 	br	#0xae4e	
    a93e:	f1 d0 10 00 	bis.b	#16,	0(r1)	;#0x0010, 0x0000(r1)
    a942:	00 00 
    a944:	30 40 4e ae 	br	#0xae4e	
    a948:	f1 40 2b 00 	mov.b	#43,	2(r1)	;#0x002b, 0x0002(r1)
    a94c:	02 00 
    a94e:	30 40 4e ae 	br	#0xae4e	
    a952:	f1 90 2b 00 	cmp.b	#43,	2(r1)	;#0x002b, 0x0002(r1)
    a956:	02 00 
    a958:	02 20       	jnz	$+6      	;abs 0xa95e
    a95a:	30 40 4e ae 	br	#0xae4e	
    a95e:	f1 40 20 00 	mov.b	#32,	2(r1)	;#0x0020, 0x0002(r1)
    a962:	02 00 
    a964:	30 40 4e ae 	br	#0xae4e	
    a968:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    a96c:	02 24       	jz	$+6      	;abs 0xa972
    a96e:	30 40 34 ae 	br	#0xae34	
    a972:	d1 43 2e 00 	mov.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    a976:	30 40 4e ae 	br	#0xae4e	
    a97a:	0e 45       	mov	r5,	r14	
    a97c:	2e 53       	incd	r14		
    a97e:	2a 45       	mov	@r5,	r10	
    a980:	0a 93       	tst	r10		
    a982:	03 38       	jl	$+8      	;abs 0xa98a
    a984:	81 4a 26 00 	mov	r10,	38(r1)	;0x0026(r1)
    a988:	0d 3c       	jmp	$+28     	;abs 0xa9a4
    a98a:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    a98e:	02 24       	jz	$+6      	;abs 0xa994
    a990:	30 40 44 ae 	br	#0xae44	
    a994:	f1 d0 10 00 	bis.b	#16,	0(r1)	;#0x0010, 0x0000(r1)
    a998:	00 00 
    a99a:	3a e3       	inv	r10		
    a99c:	81 4a 26 00 	mov	r10,	38(r1)	;0x0026(r1)
    a9a0:	91 53 26 00 	inc	38(r1)		;0x0026(r1)
    a9a4:	05 4e       	mov	r14,	r5	
    a9a6:	27 3c       	jmp	$+80     	;abs 0xa9f6
    a9a8:	81 93 26 00 	tst	38(r1)		;0x0026(r1)
    a9ac:	15 20       	jnz	$+44     	;abs 0xa9d8
    a9ae:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    a9b2:	12 20       	jnz	$+38     	;abs 0xa9d8
    a9b4:	69 41       	mov.b	@r1,	r9	
    a9b6:	79 f0 10 00 	and.b	#16,	r9	;#0x0010
    a9ba:	5e 43       	mov.b	#1,	r14	;r3 As==01
    a9bc:	01 24       	jz	$+4      	;abs 0xa9c0
    a9be:	4e 43       	clr.b	r14		
    a9c0:	4e 4e       	mov.b	r14,	r14	
    a9c2:	0e 11       	rra	r14		
    a9c4:	0e 43       	clr	r14		
    a9c6:	4e 10       	rrc.b	r14		
    a9c8:	6a 41       	mov.b	@r1,	r10	
    a9ca:	7a f0 7f 00 	and.b	#127,	r10	;#0x007f
    a9ce:	4a de       	bis.b	r14,	r10	
    a9d0:	c1 4a 00 00 	mov.b	r10,	0(r1)	;0x0000(r1)
    a9d4:	30 40 4e ae 	br	#0xae4e	
    a9d8:	1a 41 26 00 	mov	38(r1),	r10	;0x0026(r1)
    a9dc:	0a 5a       	rla	r10		
    a9de:	0c 4a       	mov	r10,	r12	
    a9e0:	0c 5c       	rla	r12		
    a9e2:	0c 5c       	rla	r12		
    a9e4:	0a 5c       	add	r12,	r10	
    a9e6:	81 4a 26 00 	mov	r10,	38(r1)	;0x0026(r1)
    a9ea:	b1 50 d0 ff 	add	#-48,	38(r1)	;#0xffd0, 0x0026(r1)
    a9ee:	26 00 
    a9f0:	8e 11       	sxt	r14		
    a9f2:	81 5e 26 00 	add	r14,	38(r1)	;0x0026(r1)
    a9f6:	d1 43 2a 00 	mov.b	#1,	42(r1)	;r3 As==01, 0x002a(r1)
    a9fa:	30 40 4e ae 	br	#0xae4e	
    a9fe:	07 45       	mov	r5,	r7	
    aa00:	27 53       	incd	r7		
    aa02:	6e 45       	mov.b	@r5,	r14	
    aa04:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    aa08:	03 20       	jnz	$+8      	;abs 0xaa10
    aa0a:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    aa0e:	26 27       	jz	$-434    	;abs 0xa85c
    aa10:	c1 4e 04 00 	mov.b	r14,	4(r1)	;0x0004(r1)
    aa14:	c1 43 05 00 	mov.b	#0,	5(r1)	;r3 As==00, 0x0005(r1)
    aa18:	0e 41       	mov	r1,	r14	
    aa1a:	2e 52       	add	#4,	r14	;r2 As==10
    aa1c:	03 3c       	jmp	$+8      	;abs 0xaa24
    aa1e:	07 45       	mov	r5,	r7	
    aa20:	27 53       	incd	r7		
    aa22:	2e 45       	mov	@r5,	r14	
    aa24:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    aa28:	07 24       	jz	$+16     	;abs 0xaa38
    aa2a:	e1 d2 01 00 	bis.b	#4,	1(r1)	;r2 As==10, 0x0001(r1)
    aa2e:	1f 41 26 00 	mov	38(r1),	r15	;0x0026(r1)
    aa32:	c1 4f 03 00 	mov.b	r15,	3(r1)	;0x0003(r1)
    aa36:	06 3c       	jmp	$+14     	;abs 0xaa44
    aa38:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    aa3c:	03 24       	jz	$+8      	;abs 0xaa44
    aa3e:	91 41 26 00 	mov	38(r1),	48(r1)	;0x0026(r1), 0x0030(r1)
    aa42:	30 00 
    aa44:	0e 93       	tst	r14		
    aa46:	02 20       	jnz	$+6      	;abs 0xaa4c
    aa48:	3e 40 2a b1 	mov	#-20182,r14	;#0xb12a
    aa4c:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    aa50:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    aa54:	1d 41 34 00 	mov	52(r1),	r13	;0x0034(r1)
    aa58:	1f 41 3e 00 	mov	62(r1),	r15	;0x003e(r1)
    aa5c:	b0 12 42 a6 	call	#0xa642	
    aa60:	21 52       	add	#4,	r1	;r2 As==10
    aa62:	81 5f 2c 00 	add	r15,	44(r1)	;0x002c(r1)
    aa66:	05 47       	mov	r7,	r5	
    aa68:	30 40 30 ae 	br	#0xae30	
    aa6c:	07 45       	mov	r5,	r7	
    aa6e:	27 53       	incd	r7		
    aa70:	29 45       	mov	@r5,	r9	
    aa72:	81 49 1e 00 	mov	r9,	30(r1)	;0x001e(r1)
    aa76:	5e 43       	mov.b	#1,	r14	;r3 As==01
    aa78:	09 93       	tst	r9		
    aa7a:	01 20       	jnz	$+4      	;abs 0xaa7e
    aa7c:	4e 43       	clr.b	r14		
    aa7e:	4e 5e       	rla.b	r14		
    aa80:	4e 5e       	rla.b	r14		
    aa82:	4e 5e       	rla.b	r14		
    aa84:	6a 41       	mov.b	@r1,	r10	
    aa86:	7a f0 f7 ff 	and.b	#-9,	r10	;#0xfff7
    aa8a:	4a de       	bis.b	r14,	r10	
    aa8c:	c1 4a 00 00 	mov.b	r10,	0(r1)	;0x0000(r1)
    aa90:	05 47       	mov	r7,	r5	
    aa92:	b1 40 10 00 	mov	#16,	40(r1)	;#0x0010, 0x0028(r1)
    aa96:	28 00 
    aa98:	53 3c       	jmp	$+168    	;abs 0xab40
    aa9a:	d1 d3 01 00 	bis.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    aa9e:	06 3c       	jmp	$+14     	;abs 0xaaac
    aaa0:	e1 d2 00 00 	bis.b	#4,	0(r1)	;r2 As==10, 0x0000(r1)
    aaa4:	b1 40 0a 00 	mov	#10,	40(r1)	;#0x000a, 0x0028(r1)
    aaa8:	28 00 
    aaaa:	03 3c       	jmp	$+8      	;abs 0xaab2
    aaac:	b1 40 10 00 	mov	#16,	40(r1)	;#0x0010, 0x0028(r1)
    aab0:	28 00 
    aab2:	6b 41       	mov.b	@r1,	r11	
    aab4:	6b b3       	bit.b	#2,	r11	;r3 As==10
    aab6:	24 24       	jz	$+74     	;abs 0xab00
    aab8:	0c 45       	mov	r5,	r12	
    aaba:	3c 52       	add	#8,	r12	;r2 As==11
    aabc:	28 45       	mov	@r5,	r8	
    aabe:	17 45 02 00 	mov	2(r5),	r7	;0x0002(r5)
    aac2:	16 45 04 00 	mov	4(r5),	r6	;0x0004(r5)
    aac6:	1b 45 06 00 	mov	6(r5),	r11	;0x0006(r5)
    aaca:	81 48 1e 00 	mov	r8,	30(r1)	;0x001e(r1)
    aace:	81 47 20 00 	mov	r7,	32(r1)	;0x0020(r1)
    aad2:	81 46 22 00 	mov	r6,	34(r1)	;0x0022(r1)
    aad6:	81 4b 24 00 	mov	r11,	36(r1)	;0x0024(r1)
    aada:	d1 43 2b 00 	mov.b	#1,	43(r1)	;r3 As==01, 0x002b(r1)
    aade:	08 93       	tst	r8		
    aae0:	06 20       	jnz	$+14     	;abs 0xaaee
    aae2:	07 93       	tst	r7		
    aae4:	04 20       	jnz	$+10     	;abs 0xaaee
    aae6:	06 93       	tst	r6		
    aae8:	02 20       	jnz	$+6      	;abs 0xaaee
    aaea:	0b 93       	tst	r11		
    aaec:	02 24       	jz	$+6      	;abs 0xaaf2
    aaee:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    aaf2:	0b 5b       	rla	r11		
    aaf4:	0b 43       	clr	r11		
    aaf6:	0b 6b       	rlc	r11		
    aaf8:	c1 4b 2f 00 	mov.b	r11,	47(r1)	;0x002f(r1)
    aafc:	05 4c       	mov	r12,	r5	
    aafe:	20 3c       	jmp	$+66     	;abs 0xab40
    ab00:	5b f3       	and.b	#1,	r11	;r3 As==01
    ab02:	07 45       	mov	r5,	r7	
    ab04:	0d 24       	jz	$+28     	;abs 0xab20
    ab06:	27 52       	add	#4,	r7	;r2 As==10
    ab08:	28 45       	mov	@r5,	r8	
    ab0a:	1b 45 02 00 	mov	2(r5),	r11	;0x0002(r5)
    ab0e:	81 48 1e 00 	mov	r8,	30(r1)	;0x001e(r1)
    ab12:	81 4b 20 00 	mov	r11,	32(r1)	;0x0020(r1)
    ab16:	d1 43 2b 00 	mov.b	#1,	43(r1)	;r3 As==01, 0x002b(r1)
    ab1a:	08 93       	tst	r8		
    ab1c:	09 20       	jnz	$+20     	;abs 0xab30
    ab1e:	06 3c       	jmp	$+14     	;abs 0xab2c
    ab20:	27 53       	incd	r7		
    ab22:	2b 45       	mov	@r5,	r11	
    ab24:	81 4b 1e 00 	mov	r11,	30(r1)	;0x001e(r1)
    ab28:	d1 43 2b 00 	mov.b	#1,	43(r1)	;r3 As==01, 0x002b(r1)
    ab2c:	0b 93       	tst	r11		
    ab2e:	02 24       	jz	$+6      	;abs 0xab34
    ab30:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    ab34:	0b 5b       	rla	r11		
    ab36:	0b 43       	clr	r11		
    ab38:	0b 6b       	rlc	r11		
    ab3a:	c1 4b 2f 00 	mov.b	r11,	47(r1)	;0x002f(r1)
    ab3e:	05 47       	mov	r7,	r5	
    ab40:	f1 b2 00 00 	bit.b	#8,	0(r1)	;r2 As==11, 0x0000(r1)
    ab44:	12 24       	jz	$+38     	;abs 0xab6a
    ab46:	c1 93 2b 00 	tst.b	43(r1)		;0x002b(r1)
    ab4a:	0f 20       	jnz	$+32     	;abs 0xab6a
    ab4c:	68 41       	mov.b	@r1,	r8	
    ab4e:	b1 90 10 00 	cmp	#16,	40(r1)	;#0x0010, 0x0028(r1)
    ab52:	28 00 
    ab54:	03 20       	jnz	$+8      	;abs 0xab5c
    ab56:	78 d0 40 00 	bis.b	#64,	r8	;#0x0040
    ab5a:	05 3c       	jmp	$+12     	;abs 0xab66
    ab5c:	b1 92 28 00 	cmp	#8,	40(r1)	;r2 As==11, 0x0028(r1)
    ab60:	04 20       	jnz	$+10     	;abs 0xab6a
    ab62:	78 d0 20 00 	bis.b	#32,	r8	;#0x0020
    ab66:	c1 48 00 00 	mov.b	r8,	0(r1)	;0x0000(r1)
    ab6a:	68 41       	mov.b	@r1,	r8	
    ab6c:	68 b2       	bit.b	#4,	r8	;r2 As==10
    ab6e:	30 24       	jz	$+98     	;abs 0xabd0
    ab70:	c1 93 2f 00 	tst.b	47(r1)		;0x002f(r1)
    ab74:	2d 24       	jz	$+92     	;abs 0xabd0
    ab76:	f1 40 2d 00 	mov.b	#45,	2(r1)	;#0x002d, 0x0002(r1)
    ab7a:	02 00 
    ab7c:	68 b3       	bit.b	#2,	r8	;r3 As==10
    ab7e:	11 24       	jz	$+36     	;abs 0xaba2
    ab80:	b1 e3 1e 00 	xor	#-1,	30(r1)	;r3 As==11, 0x001e(r1)
    ab84:	b1 e3 20 00 	xor	#-1,	32(r1)	;r3 As==11, 0x0020(r1)
    ab88:	b1 e3 22 00 	xor	#-1,	34(r1)	;r3 As==11, 0x0022(r1)
    ab8c:	b1 e3 24 00 	xor	#-1,	36(r1)	;r3 As==11, 0x0024(r1)
    ab90:	91 53 1e 00 	inc	30(r1)		;0x001e(r1)
    ab94:	81 63 20 00 	adc	32(r1)		;0x0020(r1)
    ab98:	81 63 22 00 	adc	34(r1)		;0x0022(r1)
    ab9c:	81 63 24 00 	adc	36(r1)		;0x0024(r1)
    aba0:	17 3c       	jmp	$+48     	;abs 0xabd0
    aba2:	58 b3       	bit.b	#1,	r8	;r3 As==01
    aba4:	0f 24       	jz	$+32     	;abs 0xabc4
    aba6:	1a 41 1e 00 	mov	30(r1),	r10	;0x001e(r1)
    abaa:	1b 41 20 00 	mov	32(r1),	r11	;0x0020(r1)
    abae:	3a e3       	inv	r10		
    abb0:	3b e3       	inv	r11		
    abb2:	0e 4a       	mov	r10,	r14	
    abb4:	0f 4b       	mov	r11,	r15	
    abb6:	1e 53       	inc	r14		
    abb8:	0f 63       	adc	r15		
    abba:	81 4e 1e 00 	mov	r14,	30(r1)	;0x001e(r1)
    abbe:	81 4f 20 00 	mov	r15,	32(r1)	;0x0020(r1)
    abc2:	06 3c       	jmp	$+14     	;abs 0xabd0
    abc4:	1a 41 1e 00 	mov	30(r1),	r10	;0x001e(r1)
    abc8:	3a e3       	inv	r10		
    abca:	1a 53       	inc	r10		
    abcc:	81 4a 1e 00 	mov	r10,	30(r1)	;0x001e(r1)
    abd0:	c1 43 1b 00 	mov.b	#0,	27(r1)	;r3 As==00, 0x001b(r1)
    abd4:	68 b3       	bit.b	#2,	r8	;r3 As==10
    abd6:	6a 24       	jz	$+214    	;abs 0xacac
    abd8:	16 41 1e 00 	mov	30(r1),	r6	;0x001e(r1)
    abdc:	91 41 20 00 	mov	32(r1),	60(r1)	;0x0020(r1), 0x003c(r1)
    abe0:	3c 00 
    abe2:	18 41 22 00 	mov	34(r1),	r8	;0x0022(r1)
    abe6:	14 41 24 00 	mov	36(r1),	r4	;0x0024(r1)
    abea:	07 41       	mov	r1,	r7	
    abec:	37 50 1a 00 	add	#26,	r7	;#0x001a
    abf0:	09 46       	mov	r6,	r9	
    abf2:	91 41 28 00 	mov	40(r1),	50(r1)	;0x0028(r1), 0x0032(r1)
    abf6:	32 00 
    abf8:	1b 41 28 00 	mov	40(r1),	r11	;0x0028(r1)
    abfc:	8b 10       	swpb	r11		
    abfe:	8b 11       	sxt	r11		
    ac00:	8b 10       	swpb	r11		
    ac02:	8b 11       	sxt	r11		
    ac04:	81 4b 34 00 	mov	r11,	52(r1)	;0x0034(r1)
    ac08:	81 4b 36 00 	mov	r11,	54(r1)	;0x0036(r1)
    ac0c:	81 4b 38 00 	mov	r11,	56(r1)	;0x0038(r1)
    ac10:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac14:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac18:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac1c:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac20:	0c 49       	mov	r9,	r12	
    ac22:	1d 41 44 00 	mov	68(r1),	r13	;0x0044(r1)
    ac26:	0e 48       	mov	r8,	r14	
    ac28:	0f 44       	mov	r4,	r15	
    ac2a:	b0 12 68 af 	call	#0xaf68	
    ac2e:	31 52       	add	#8,	r1	;r2 As==11
    ac30:	0b 4c       	mov	r12,	r11	
    ac32:	3c 90 0a 00 	cmp	#10,	r12	;#0x000a
    ac36:	05 34       	jge	$+12     	;abs 0xac42
    ac38:	7b 50 30 00 	add.b	#48,	r11	;#0x0030
    ac3c:	c7 4b 00 00 	mov.b	r11,	0(r7)	;0x0000(r7)
    ac40:	0c 3c       	jmp	$+26     	;abs 0xac5a
    ac42:	4b 4c       	mov.b	r12,	r11	
    ac44:	d1 b3 01 00 	bit.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    ac48:	03 24       	jz	$+8      	;abs 0xac50
    ac4a:	7a 40 37 00 	mov.b	#55,	r10	;#0x0037
    ac4e:	02 3c       	jmp	$+6      	;abs 0xac54
    ac50:	7a 40 57 00 	mov.b	#87,	r10	;#0x0057
    ac54:	4a 5b       	add.b	r11,	r10	
    ac56:	c7 4a 00 00 	mov.b	r10,	0(r7)	;0x0000(r7)
    ac5a:	06 47       	mov	r7,	r6	
    ac5c:	36 53       	add	#-1,	r6	;r3 As==11
    ac5e:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac62:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac66:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac6a:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    ac6e:	0c 49       	mov	r9,	r12	
    ac70:	1d 41 44 00 	mov	68(r1),	r13	;0x0044(r1)
    ac74:	0e 48       	mov	r8,	r14	
    ac76:	0f 44       	mov	r4,	r15	
    ac78:	b0 12 42 af 	call	#0xaf42	
    ac7c:	31 52       	add	#8,	r1	;r2 As==11
    ac7e:	09 4c       	mov	r12,	r9	
    ac80:	81 4d 3c 00 	mov	r13,	60(r1)	;0x003c(r1)
    ac84:	08 4e       	mov	r14,	r8	
    ac86:	04 4f       	mov	r15,	r4	
    ac88:	37 53       	add	#-1,	r7	;r3 As==11
    ac8a:	0c 93       	tst	r12		
    ac8c:	b2 23       	jnz	$-154    	;abs 0xabf2
    ac8e:	0d 93       	tst	r13		
    ac90:	b0 23       	jnz	$-158    	;abs 0xabf2
    ac92:	0e 93       	tst	r14		
    ac94:	ae 23       	jnz	$-162    	;abs 0xabf2
    ac96:	0f 93       	tst	r15		
    ac98:	ac 23       	jnz	$-166    	;abs 0xabf2
    ac9a:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e(r1)
    ac9e:	81 43 20 00 	mov	#0,	32(r1)	;r3 As==00, 0x0020(r1)
    aca2:	81 43 22 00 	mov	#0,	34(r1)	;r3 As==00, 0x0022(r1)
    aca6:	81 43 24 00 	mov	#0,	36(r1)	;r3 As==00, 0x0024(r1)
    acaa:	6c 3c       	jmp	$+218    	;abs 0xad84
    acac:	58 b3       	bit.b	#1,	r8	;r3 As==01
    acae:	3e 24       	jz	$+126    	;abs 0xad2c
    acb0:	14 41 1e 00 	mov	30(r1),	r4	;0x001e(r1)
    acb4:	17 41 20 00 	mov	32(r1),	r7	;0x0020(r1)
    acb8:	08 41       	mov	r1,	r8	
    acba:	38 50 1a 00 	add	#26,	r8	;#0x001a
    acbe:	19 41 28 00 	mov	40(r1),	r9	;0x0028(r1)
    acc2:	89 10       	swpb	r9		
    acc4:	89 11       	sxt	r9		
    acc6:	89 10       	swpb	r9		
    acc8:	89 11       	sxt	r9		
    acca:	1c 41 28 00 	mov	40(r1),	r12	;0x0028(r1)
    acce:	0d 49       	mov	r9,	r13	
    acd0:	0e 44       	mov	r4,	r14	
    acd2:	0f 47       	mov	r7,	r15	
    acd4:	b0 12 da ae 	call	#0xaeda	
    acd8:	0b 4e       	mov	r14,	r11	
    acda:	3e 90 0a 00 	cmp	#10,	r14	;#0x000a
    acde:	05 34       	jge	$+12     	;abs 0xacea
    ace0:	7b 50 30 00 	add.b	#48,	r11	;#0x0030
    ace4:	c8 4b 00 00 	mov.b	r11,	0(r8)	;0x0000(r8)
    ace8:	0c 3c       	jmp	$+26     	;abs 0xad02
    acea:	4b 4e       	mov.b	r14,	r11	
    acec:	d1 b3 01 00 	bit.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    acf0:	03 24       	jz	$+8      	;abs 0xacf8
    acf2:	7a 40 37 00 	mov.b	#55,	r10	;#0x0037
    acf6:	02 3c       	jmp	$+6      	;abs 0xacfc
    acf8:	7a 40 57 00 	mov.b	#87,	r10	;#0x0057
    acfc:	4a 5b       	add.b	r11,	r10	
    acfe:	c8 4a 00 00 	mov.b	r10,	0(r8)	;0x0000(r8)
    ad02:	06 48       	mov	r8,	r6	
    ad04:	36 53       	add	#-1,	r6	;r3 As==11
    ad06:	1c 41 28 00 	mov	40(r1),	r12	;0x0028(r1)
    ad0a:	0d 49       	mov	r9,	r13	
    ad0c:	0e 44       	mov	r4,	r14	
    ad0e:	0f 47       	mov	r7,	r15	
    ad10:	b0 12 a4 ae 	call	#0xaea4	
    ad14:	04 4e       	mov	r14,	r4	
    ad16:	07 4f       	mov	r15,	r7	
    ad18:	38 53       	add	#-1,	r8	;r3 As==11
    ad1a:	0e 93       	tst	r14		
    ad1c:	d0 23       	jnz	$-94     	;abs 0xacbe
    ad1e:	0f 93       	tst	r15		
    ad20:	ce 23       	jnz	$-98     	;abs 0xacbe
    ad22:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e(r1)
    ad26:	81 43 20 00 	mov	#0,	32(r1)	;r3 As==00, 0x0020(r1)
    ad2a:	2c 3c       	jmp	$+90     	;abs 0xad84
    ad2c:	17 41 1e 00 	mov	30(r1),	r7	;0x001e(r1)
    ad30:	08 41       	mov	r1,	r8	
    ad32:	38 50 1a 00 	add	#26,	r8	;#0x001a
    ad36:	1e 41 28 00 	mov	40(r1),	r14	;0x0028(r1)
    ad3a:	0f 47       	mov	r7,	r15	
    ad3c:	b0 12 66 a4 	call	#0xa466	
    ad40:	0d 4f       	mov	r15,	r13	
    ad42:	3f 90 0a 00 	cmp	#10,	r15	;#0x000a
    ad46:	05 34       	jge	$+12     	;abs 0xad52
    ad48:	7d 50 30 00 	add.b	#48,	r13	;#0x0030
    ad4c:	c8 4d 00 00 	mov.b	r13,	0(r8)	;0x0000(r8)
    ad50:	0c 3c       	jmp	$+26     	;abs 0xad6a
    ad52:	4d 4f       	mov.b	r15,	r13	
    ad54:	d1 b3 01 00 	bit.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    ad58:	03 24       	jz	$+8      	;abs 0xad60
    ad5a:	7c 40 37 00 	mov.b	#55,	r12	;#0x0037
    ad5e:	02 3c       	jmp	$+6      	;abs 0xad64
    ad60:	7c 40 57 00 	mov.b	#87,	r12	;#0x0057
    ad64:	4c 5d       	add.b	r13,	r12	
    ad66:	c8 4c 00 00 	mov.b	r12,	0(r8)	;0x0000(r8)
    ad6a:	06 48       	mov	r8,	r6	
    ad6c:	36 53       	add	#-1,	r6	;r3 As==11
    ad6e:	1e 41 28 00 	mov	40(r1),	r14	;0x0028(r1)
    ad72:	0f 47       	mov	r7,	r15	
    ad74:	b0 12 4c a4 	call	#0xa44c	
    ad78:	07 4f       	mov	r15,	r7	
    ad7a:	38 53       	add	#-1,	r8	;r3 As==11
    ad7c:	0f 93       	tst	r15		
    ad7e:	db 23       	jnz	$-72     	;abs 0xad36
    ad80:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e(r1)
    ad84:	b1 90 0a 00 	cmp	#10,	40(r1)	;#0x000a, 0x0028(r1)
    ad88:	28 00 
    ad8a:	02 24       	jz	$+6      	;abs 0xad90
    ad8c:	c1 43 02 00 	mov.b	#0,	2(r1)	;r3 As==00, 0x0002(r1)
    ad90:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    ad94:	2a 24       	jz	$+86     	;abs 0xadea
    ad96:	0f 41       	mov	r1,	r15	
    ad98:	3f 50 1c 00 	add	#28,	r15	;#0x001c
    ad9c:	81 4f 42 00 	mov	r15,	66(r1)	;0x0042(r1)
    ada0:	1a 41 1c 00 	mov	28(r1),	r10	;0x001c(r1)
    ada4:	8a 10       	swpb	r10		
    ada6:	8a 11       	sxt	r10		
    ada8:	8a 10       	swpb	r10		
    adaa:	8a 11       	sxt	r10		
    adac:	81 4a 44 00 	mov	r10,	68(r1)	;0x0044(r1)
    adb0:	81 46 46 00 	mov	r6,	70(r1)	;0x0046(r1)
    adb4:	0a 46       	mov	r6,	r10	
    adb6:	8a 10       	swpb	r10		
    adb8:	8a 11       	sxt	r10		
    adba:	8a 10       	swpb	r10		
    adbc:	8a 11       	sxt	r10		
    adbe:	81 4a 48 00 	mov	r10,	72(r1)	;0x0048(r1)
    adc2:	1c 41 42 00 	mov	66(r1),	r12	;0x0042(r1)
    adc6:	1d 41 44 00 	mov	68(r1),	r13	;0x0044(r1)
    adca:	1c 81 46 00 	sub	70(r1),	r12	;0x0046(r1)
    adce:	1d 71 48 00 	subc	72(r1),	r13	;0x0048(r1)
    add2:	2c 83       	decd	r12		
    add4:	1c 91 26 00 	cmp	38(r1),	r12	;0x0026(r1)
    add8:	0e 2c       	jc	$+30     	;abs 0xadf6
    adda:	e1 d3 01 00 	bis.b	#2,	1(r1)	;r3 As==10, 0x0001(r1)
    adde:	5e 41 26 00 	mov.b	38(r1),	r14	;0x0026(r1)
    ade2:	4e 8c       	sub.b	r12,	r14	
    ade4:	c1 4e 03 00 	mov.b	r14,	3(r1)	;0x0003(r1)
    ade8:	06 3c       	jmp	$+14     	;abs 0xadf6
    adea:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    adee:	03 24       	jz	$+8      	;abs 0xadf6
    adf0:	91 41 26 00 	mov	38(r1),	48(r1)	;0x0026(r1), 0x0030(r1)
    adf4:	30 00 
    adf6:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    adfa:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    adfe:	1d 41 34 00 	mov	52(r1),	r13	;0x0034(r1)
    ae02:	0e 46       	mov	r6,	r14	
    ae04:	1e 53       	inc	r14		
    ae06:	1f 41 3e 00 	mov	62(r1),	r15	;0x003e(r1)
    ae0a:	b0 12 42 a6 	call	#0xa642	
    ae0e:	21 52       	add	#4,	r1	;r2 As==10
    ae10:	81 5f 2c 00 	add	r15,	44(r1)	;0x002c(r1)
    ae14:	0d 3c       	jmp	$+28     	;abs 0xae30
    ae16:	7f 49       	mov.b	@r9+,	r15	
    ae18:	8f 11       	sxt	r15		
    ae1a:	91 12 3c 00 	call	60(r1)		;0x003c(r1)
    ae1e:	0e 49       	mov	r9,	r14	
    ae20:	0e 58       	add	r8,	r14	
    ae22:	19 91 40 00 	cmp	64(r1),	r9	;0x0040(r1)
    ae26:	f7 2b       	jnc	$-16     	;abs 0xae16
    ae28:	81 49 3e 00 	mov	r9,	62(r1)	;0x003e(r1)
    ae2c:	81 4e 2c 00 	mov	r14,	44(r1)	;0x002c(r1)
    ae30:	07 43       	clr	r7		
    ae32:	0e 3c       	jmp	$+30     	;abs 0xae50
    ae34:	91 41 26 00 	mov	38(r1),	48(r1)	;0x0026(r1), 0x0030(r1)
    ae38:	30 00 
    ae3a:	d1 43 2e 00 	mov.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    ae3e:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    ae42:	03 3c       	jmp	$+8      	;abs 0xae4a
    ae44:	05 4e       	mov	r14,	r5	
    ae46:	d1 43 2a 00 	mov.b	#1,	42(r1)	;r3 As==01, 0x002a(r1)
    ae4a:	81 43 26 00 	mov	#0,	38(r1)	;r3 As==00, 0x0026(r1)
    ae4e:	17 43       	mov	#1,	r7	;r3 As==01
    ae50:	16 41 40 00 	mov	64(r1),	r6	;0x0040(r1)
    ae54:	6e 46       	mov.b	@r6,	r14	
    ae56:	4e 93       	tst.b	r14		
    ae58:	02 24       	jz	$+6      	;abs 0xae5e
    ae5a:	30 40 26 a8 	br	#0xa826	
    ae5e:	1f 41 2c 00 	mov	44(r1),	r15	;0x002c(r1)
    ae62:	31 50 4a 00 	add	#74,	r1	;#0x004a
    ae66:	34 41       	pop	r4		
    ae68:	35 41       	pop	r5		
    ae6a:	36 41       	pop	r6		
    ae6c:	37 41       	pop	r7		
    ae6e:	38 41       	pop	r8		
    ae70:	39 41       	pop	r9		
    ae72:	3a 41       	pop	r10		
    ae74:	3b 41       	pop	r11		
    ae76:	30 41       	ret			

0000ae78 <puts>:
    ae78:	0b 12       	push	r11		
    ae7a:	0b 4f       	mov	r15,	r11	
    ae7c:	6f 4b       	mov.b	@r11,	r15	
    ae7e:	4f 93       	tst.b	r15		
    ae80:	06 24       	jz	$+14     	;abs 0xae8e
    ae82:	1b 53       	inc	r11		
    ae84:	8f 11       	sxt	r15		
    ae86:	b0 12 4a a1 	call	#0xa14a	
    ae8a:	0f 93       	tst	r15		
    ae8c:	f7 37       	jge	$-16     	;abs 0xae7c
    ae8e:	cb 93 00 00 	tst.b	0(r11)		;0x0000(r11)
    ae92:	05 20       	jnz	$+12     	;abs 0xae9e
    ae94:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    ae98:	b0 12 4a a1 	call	#0xa14a	
    ae9c:	01 3c       	jmp	$+4      	;abs 0xaea0
    ae9e:	3f 43       	mov	#-1,	r15	;r3 As==11
    aea0:	3b 41       	pop	r11		
    aea2:	30 41       	ret			

0000aea4 <__udivsi3>:
    aea4:	0b 12       	push	r11		
    aea6:	0a 12       	push	r10		
    aea8:	09 12       	push	r9		
    aeaa:	79 40 20 00 	mov.b	#32,	r9	;#0x0020
    aeae:	0a 4c       	mov	r12,	r10	
    aeb0:	0b 4d       	mov	r13,	r11	
    aeb2:	0c 43       	clr	r12		
    aeb4:	0d 43       	clr	r13		
    aeb6:	0e 5e       	rla	r14		
    aeb8:	0f 6f       	rlc	r15		
    aeba:	0c 6c       	rlc	r12		
    aebc:	0d 6d       	rlc	r13		
    aebe:	0d 9b       	cmp	r11,	r13	
    aec0:	06 28       	jnc	$+14     	;abs 0xaece
    aec2:	02 20       	jnz	$+6      	;abs 0xaec8
    aec4:	0c 9a       	cmp	r10,	r12	
    aec6:	03 28       	jnc	$+8      	;abs 0xaece
    aec8:	0c 8a       	sub	r10,	r12	
    aeca:	0d 7b       	subc	r11,	r13	
    aecc:	1e d3       	bis	#1,	r14	;r3 As==01
    aece:	19 83       	dec	r9		
    aed0:	f2 23       	jnz	$-26     	;abs 0xaeb6
    aed2:	39 41       	pop	r9		
    aed4:	3a 41       	pop	r10		
    aed6:	3b 41       	pop	r11		
    aed8:	30 41       	ret			

0000aeda <__umodsi3>:
    aeda:	b0 12 a4 ae 	call	#0xaea4	
    aede:	0e 4c       	mov	r12,	r14	
    aee0:	0f 4d       	mov	r13,	r15	
    aee2:	30 41       	ret			

0000aee4 <__xabi_udivmod64>:
    aee4:	07 12       	push	r7		
    aee6:	06 12       	push	r6		
    aee8:	05 12       	push	r5		
    aeea:	04 12       	push	r4		
    aeec:	30 12 40 00 	push	#64		;#0x0040
    aef0:	04 48       	mov	r8,	r4	
    aef2:	05 49       	mov	r9,	r5	
    aef4:	06 4a       	mov	r10,	r6	
    aef6:	07 4b       	mov	r11,	r7	
    aef8:	08 43       	clr	r8		
    aefa:	09 43       	clr	r9		
    aefc:	0a 43       	clr	r10		
    aefe:	0b 43       	clr	r11		
    af00:	0c 5c       	rla	r12		
    af02:	0d 6d       	rlc	r13		
    af04:	0e 6e       	rlc	r14		
    af06:	0f 6f       	rlc	r15		
    af08:	08 68       	rlc	r8		
    af0a:	09 69       	rlc	r9		
    af0c:	0a 6a       	rlc	r10		
    af0e:	0b 6b       	rlc	r11		
    af10:	0b 97       	cmp	r7,	r11	
    af12:	0e 28       	jnc	$+30     	;abs 0xaf30
    af14:	08 20       	jnz	$+18     	;abs 0xaf26
    af16:	0a 96       	cmp	r6,	r10	
    af18:	0b 28       	jnc	$+24     	;abs 0xaf30
    af1a:	05 20       	jnz	$+12     	;abs 0xaf26
    af1c:	09 95       	cmp	r5,	r9	
    af1e:	08 28       	jnc	$+18     	;abs 0xaf30
    af20:	02 20       	jnz	$+6      	;abs 0xaf26
    af22:	08 94       	cmp	r4,	r8	
    af24:	05 28       	jnc	$+12     	;abs 0xaf30
    af26:	08 84       	sub	r4,	r8	
    af28:	09 75       	subc	r5,	r9	
    af2a:	0a 76       	subc	r6,	r10	
    af2c:	0b 77       	subc	r7,	r11	
    af2e:	1c d3       	bis	#1,	r12	;r3 As==01
    af30:	91 83 00 00 	dec	0(r1)		;0x0000(r1)
    af34:	e5 23       	jnz	$-52     	;abs 0xaf00
    af36:	21 53       	incd	r1		
    af38:	34 41       	pop	r4		
    af3a:	35 41       	pop	r5		
    af3c:	36 41       	pop	r6		
    af3e:	37 41       	pop	r7		
    af40:	30 41       	ret			

0000af42 <__udivdi3>:
    af42:	0b 12       	push	r11		
    af44:	0a 12       	push	r10		
    af46:	09 12       	push	r9		
    af48:	08 12       	push	r8		
    af4a:	18 41 0a 00 	mov	10(r1),	r8	;0x000a(r1)
    af4e:	19 41 0c 00 	mov	12(r1),	r9	;0x000c(r1)
    af52:	1a 41 0e 00 	mov	14(r1),	r10	;0x000e(r1)
    af56:	1b 41 10 00 	mov	16(r1),	r11	;0x0010(r1)
    af5a:	b0 12 e4 ae 	call	#0xaee4	
    af5e:	38 41       	pop	r8		
    af60:	39 41       	pop	r9		
    af62:	3a 41       	pop	r10		
    af64:	3b 41       	pop	r11		
    af66:	30 41       	ret			

0000af68 <__umoddi3>:
    af68:	0b 12       	push	r11		
    af6a:	0a 12       	push	r10		
    af6c:	09 12       	push	r9		
    af6e:	08 12       	push	r8		
    af70:	18 41 0a 00 	mov	10(r1),	r8	;0x000a(r1)
    af74:	19 41 0c 00 	mov	12(r1),	r9	;0x000c(r1)
    af78:	1a 41 0e 00 	mov	14(r1),	r10	;0x000e(r1)
    af7c:	1b 41 10 00 	mov	16(r1),	r11	;0x0010(r1)
    af80:	b0 12 e4 ae 	call	#0xaee4	
    af84:	0c 48       	mov	r8,	r12	
    af86:	0d 49       	mov	r9,	r13	
    af88:	0e 4a       	mov	r10,	r14	
    af8a:	0f 4b       	mov	r11,	r15	
    af8c:	38 41       	pop	r8		
    af8e:	39 41       	pop	r9		
    af90:	3a 41       	pop	r10		
    af92:	3b 41       	pop	r11		
    af94:	30 41       	ret			

0000af96 <__udivmoddi4>:
    af96:	0b 12       	push	r11		
    af98:	0a 12       	push	r10		
    af9a:	09 12       	push	r9		
    af9c:	08 12       	push	r8		
    af9e:	07 12       	push	r7		
    afa0:	18 41 0c 00 	mov	12(r1),	r8	;0x000c(r1)
    afa4:	19 41 0e 00 	mov	14(r1),	r9	;0x000e(r1)
    afa8:	1a 41 10 00 	mov	16(r1),	r10	;0x0010(r1)
    afac:	1b 41 12 00 	mov	18(r1),	r11	;0x0012(r1)
    afb0:	b0 12 e4 ae 	call	#0xaee4	
    afb4:	17 41 14 00 	mov	20(r1),	r7	;0x0014(r1)
    afb8:	87 48 00 00 	mov	r8,	0(r7)	;0x0000(r7)
    afbc:	87 49 02 00 	mov	r9,	2(r7)	;0x0002(r7)
    afc0:	87 4a 04 00 	mov	r10,	4(r7)	;0x0004(r7)
    afc4:	87 4b 06 00 	mov	r11,	6(r7)	;0x0006(r7)
    afc8:	37 41       	pop	r7		
    afca:	38 41       	pop	r8		
    afcc:	39 41       	pop	r9		
    afce:	3a 41       	pop	r10		
    afd0:	3b 41       	pop	r11		
    afd2:	30 41       	ret			

0000afd4 <_unexpected_>:
    afd4:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	16 81 16 81 16 81 ea 98 16 81 50 8b 16 81 ec a1     ..........P.....
    fff0:	16 81 e8 9e 16 81 16 81 16 81 cc 9f 16 81 00 80     ................
