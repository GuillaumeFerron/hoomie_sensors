
bin/msp_rx.elf:     file format elf32-msp430

SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
0000bb2e l    d  .rodata	00000000 .rodata
00000200 l    d  .bss	00000000 .bss
000002aa l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 msp_rx.c
00000200 l     O .bss	00000002 node_id
00000202 l     O .bss	0000000e timer
00000210 l     O .bss	00000002 led_green_duration
00000212 l     O .bss	00000002 led_green_flag
00000214 l     O .bss	00000002 led_red_duration
00000216 l     O .bss	00000002 led_red_flag
00000218 l     O .bss	00000002 periodic_write_flag
0000021a l     O .bss	00000002 periodic_temp_flag
0000021c l     O .bss	00000002 current_buffer_pt
0000021e l     O .bss	00000002 uart_flag
00000220 l     O .bss	00000002 uart_data
00000222 l     O .bss	00000002 room_flag
00000224 l     O .bss	00000001 room
0000818a l     F .text	0000004c printhex
000081d6 l     F .text	00000076 set_node_id
0000824c l     F .text	00000278 converter
000084c4 l     F .text	0000001c led_green_blink
000084e0 l     F .text	0000001c led_red_blink
000084fc l     F .text	00000086 thread_led_green
00008582 l     F .text	000000b4 thread_led_red
000086fa l     F .text	0000007a thread_uart
00000226 l     O .bss	0000001c radio_tx_buffer
00000242 l     O .bss	0000001c radio_rx_buffer
0000025e l     O .bss	0000001c own_buffer
0000027a l     O .bss	00000002 radio_rx_flag
000088b2 l     F .text	00000064 thread_rx
00008916 l     F .text	00000050 init_message
00008966 l     F .text	00000028 write_message
0000898e l     F .text	0000008e thread_periodic_writeTemp
00008a1c l     F .text	0000004c register_temperature
00008a68 l     F .text	0000008a thread_periodic_temperature
0000027c l     O .bss	0000000a pt
00008116 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 adc10.c
00000286 l     O .bss	00000002 coeff_1
00000288 l     O .bss	00000002 coeff_2
00000000 l    df *ABS*	00000000 cc2500.c
00008d28 l     F .text	00000016 CC2500_HW_GDO0_IRQ_ON_ASSERT
00008d3e l     F .text	00000016 CC2500_HW_GDO2_IRQ_ON_ASSERT
00008d54 l     F .text	00000016 CC2500_HW_GDO0_DINT
00008d6a l     F .text	00000016 CC2500_HW_GDO2_DINT
00008d80 l     F .text	00000016 CC2500_HW_GDO0_EINT
00008d96 l     F .text	00000016 CC2500_HW_GDO0_CLEAR_FLAG
00008dac l     F .text	00000016 CC2500_HW_GDO2_CLEAR_FLAG
00008dc2 l     F .text	00000016 CONFIG_GDO0_PIN_AS_INPUT
00008dd8 l     F .text	00000052 CC2500_HW_INIT
00009110 l     F .text	00000048 cc2500_check_tx_underflow
00009158 l     F .text	0000004a cc2500_check_rx_overflow
00000000 l    df *ABS*	00000000 clock.c
0000028e l     O .bss	00000002 mclk_freq_mhz
000099ca l     F .text	000000c0 set_mcu_speed
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 spi.c
00000000 l    df *ABS*	00000000 timer.c
00000290 l     O .bss	00000002 timerA_cb
00000292 l     O .bss	00000002 timerA_wakeup
00000294 l     O .bss	00000002 timerB_cb
00000296 l     O .bss	00000002 timerB_wakeup
00000000 l    df *ABS*	00000000 uart.c
00000298 l     O .bss	00000002 uart_cb
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 watchdog.c
0000029a l     O .bss	00000002 watchdog_backup
00000000 l    df *ABS*	00000000 fp-bit.c
0000a458 l     F .text	00000292 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sprintf.c
0000b0de l     F .text	00000022 append
0000029e l     O .bss	00000002 available_
0000029c l     O .bss	00000002 destination_
0000b100 l     F .text	0000003c call_vuprintf
00000000 l    df *ABS*	00000000 vuprintf.c
0000b19a l     F .text	00000198 print_field
00000000 l    df *ABS*	00000000 puts.c
0000a182 g     F .text	00000032 putchar
00000057 g       *ABS*	00000000 __BCSCTL1
00009b34 g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_16MHz
000002a0 g     O .bss	00000001 cc2500_gdo2_cfg
00000174 g       *ABS*	00000000 __TACCR1
00009784 g     F .text	00000024 cc2500_idle
00000000 g       *ABS*	00000000 __data_size
00008116  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
000097f8 g     F .text	0000001a cc2500_variables_bootstrap
00009b0c g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_3MHz
00000024 g       *ABS*	00000000 __P1IES
00008b60 g     F .text	00000106 adc10_sample_temp
0000004b g       *ABS*	00000000 __ADC10AE1
00009922 g     F .text	0000009a port2_irq_handler
0000b0c0 g     F .text	00000010 printf
00000069 g       *ABS*	00000000 __UCB0CTL1
0000b172 g     F .text	00000016 vsprintf
0000a41e g       .text	00000000 __ext_divmod16
00008116  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00009ef6 g     F .text	00000016 spi_select_radio
00000060 g       *ABS*	00000000 __UCA0CTL0
00009500 g     F .text	0000006a cc2500_utx
0000a9aa g     F .text	00000150 __divsf3
0000a2c4 g     F .text	00000064 flash_write_byte
00009aae g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_4MHz
0000a052 g     F .text	00000018 timerB_register_cb
0000012e g       *ABS*	00000000 __TAIV
00009e4c g     F .text	00000012 spi_check_miso_high
0000b158 g     F .text	0000001a snprintf
0000a178 g     F .text	0000000a uart_stop
0000aba0 g     F .text	00000090 __fixsfsi
00008e6c g     F .text	0000002e CC2500_SPI_WREG
0000028c g     O .bss	00000001 cc2500_rx_length
00000000 g       .vectors	00000000 _efartext
00009e12 g     F .text	0000003a spi_tx_rx
0000ac30 g     F .text	00000000 __udivhi3
00000001 g       *ABS*	00000000 __IE2
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
00009022 g     F .text	0000001e CC2500_SPI_RX_FIFO_BYTE
0000bd92 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
00009f20 g     F .text	00000038 Timer_A
00009824 g     F .text	000000dc cc2500_init
000010f8 g       *ABS*	00000000 __CALDCO_16MHZ
00009700 g     F .text	00000018 cc2500_rx_register_cb
0000a3ca g     F .text	00000022 flash_erase_info_memory
0000a736 g     F .text	00000050 __subsf3
0000001d g       *ABS*	00000000 __P4OUT
000000aa g       *ABS*	00000000 __bss_size
000010fd g       *ABS*	00000000 __CALBC1_8MHZ
00009b84 g     F .text	00000010 loop_4_cycles
00008000  w      .text	00000000 __watchdog_support
000090b4 g     F .text	00000030 cc2500_gdo2_set_signal
00008110  w      .text	00000000 __stop_progExec__
0000afc6 g     F .text	000000fa memcpy
0000002d g       *ABS*	00000000 __P2IE
0000b9d0 g     F .text	0000002c puts
0000a1d2 g     F .text	00000014 uart_eint
00008fc0 g     F .text	00000062 CC2500_SPI_RX_BURST
00000192 g       *ABS*	00000000 __TBCCR0
00008116  w      .text	00000000 __isr_11
00009f0c g     F .text	00000014 spi_deselect_radio
00000186 g       *ABS*	00000000 __TBCCTL2
00009af8 g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_6MHz
0000b9fc g     F .text	00000000 __udivsi3
00000025 g       *ABS*	00000000 __P1IE
0000006b g       *ABS*	00000000 __UCB0BR1
00009da2 g     F .text	00000062 spi_init
0000a0da g     F .text	0000000e timerB_stop
0000b188 g     F .text	00000012 vsnprintf
00000049 g       *ABS*	00000000 __ADC10DTC1
00008f6a g     F .text	00000056 CC2500_SPI_TX_BURST
0000028a g     O .bss	00000001 cc2500_rx_offset
00000066 g       *ABS*	00000000 __UCA0RXBUF
00000061 g       *ABS*	00000000 __UCA0CTL1
00008b50 g     F .text	00000010 adc10irq
00009ad2 g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_1MHz
0000baee g       .text	00000000 __udivmoddi4
000094e4 g     F .text	0000001c cc2500_calibrate
00009b5c g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_4MHz
000090e4 g     F .text	0000002c cc2500_set_fifo_threshold
00008e2a g     F .text	00000020 CC2500_SPI_TX
00000182 g       *ABS*	00000000 __TBCCTL0
00009040 g     F .text	00000044 cc2500_wait_status
000095c8 g     F .text	00000138 cc2500_rx_pkt_eop
0000006d g       *ABS*	00000000 __UCB0STAT
00008b50 g       .text	00000000 __isr_5
00008e9a g     F .text	00000036 CC2500_SPI_RREG
00008b08 g     F .text	00000032 adc10_calibrate
00000063 g       *ABS*	00000000 __UCA0BR1
0000bac0 g     F .text	00000000 __umoddi3
0000bd92 g       *ABS*	00000000 __data_load_start
00009d5a g     F .text	00000016 leds_on
00008116 g       .text	00000000 __dtors_end
00000053 g       *ABS*	00000000 __BCSCTL3
00009718 g     F .text	0000001e cc2500_packet_status
00009cf2 g     F .text	00000014 led_green_switch
0000a38c g     F .text	0000003e flash_erase_segment
000001bc g       *ABS*	00000000 __ADC10SA
0000a278 g     F .text	0000004c flash_init
00000166 g       *ABS*	00000000 __TACCTL2
00008168 g     F .text	00000022 timer_reached
0000ba9a g     F .text	00000000 __udivdi3
00000065 g       *ABS*	00000000 __UCA0STAT
00009cc8 g     F .text	00000016 led_green_off
000097a8 g     F .text	00000012 cc2500_sleep
00009736 g     F .text	00000030 cc2500_cca
00008116  w      .text	00000000 __isr_2
00000160 g       *ABS*	00000000 __TACTL
0000a450 g     F .text	00000000 __modhi3
0000012c g       *ABS*	00000000 __FCTL3
00009f6e g     F .text	00000018 timerA_register_cb
00008116  w      .text	00000000 __isr_10
000002a2 g     O .bss	00000002 radio_rx_cb
000099bc g     F .text	0000000e get_mclk_freq_mhz
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
00009fd2 g     F .text	00000024 timerA_start_milliseconds
00009ac0 g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_2MHz
00008f34 g     F .text	00000036 CC2500_SPI_RX_BYTE
000010f9 g       *ABS*	00000000 __CALBC1_16MHZ
000000c3 g       *ABS*	00000000 __OA1CTL1
00000023 g       *ABS*	00000000 __P1IFG
00009e5e g     F .text	0000004a spi_tx_burst
000010fb g       *ABS*	00000000 __CALBC1_12MHZ
0000aea2 g     F .text	00000124 __unpack_f
0000004a g       *ABS*	00000000 __ADC10AE0
0000011a g       *ABS*	00000000 __UCB0I2CSA
00009d1c g     F .text	00000014 led_red_on
00000172 g       *ABS*	00000000 __TACCR0
00009d44 g     F .text	00000016 leds_off
00000056 g       *ABS*	00000000 __DCOCTL
00000003 g       *ABS*	00000000 __IFG2
000002aa g     O .noinit	00000002 __wdt_clear_value
00008774 g     F .text	00000050 radio_cb
0000a1b4 g     F .text	0000001e uart_getchar
0000001b g       *ABS*	00000000 __P3SEL
00009ff6 g     F .text	0000000e timerA_stop
000097d2 g     F .text	00000026 cc2500_wakeup
0000a224 g       .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
0000006c g       *ABS*	00000000 __UCB0I2CIE
0000006a g       *ABS*	00000000 __UCB0BR0
0000ba32 g     F .text	00000000 __umodsi3
00009812 g     F .text	00000012 CC_ASSERT
0000b0d0 g     F .text	0000000e vprintf
00000028 g       *ABS*	00000000 __P2IN
00009f86 g     F .text	00000018 timerA_set_wakeup
0000acc4 g     F .text	000001de __pack_f
00000118 g       *ABS*	00000000 __UCB0I2COA
00000184 g       *ABS*	00000000 __TBCCTL1
000001b4 g       *ABS*	00000000 __ADC10MEM
000002a4 g     O .bss	00000001 cc2500_gdo0_cfg
00009d06 g     F .text	00000016 led_red_off
0000ac4a g     F .text	00000000 __umodhi3
000087c4 g     F .text	000000ee ezdisplay
00008116  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000ac52 g     F .text	00000072 __clzsi2
0000012a g       *ABS*	00000000 __FCTL2
00000064 g       *ABS*	00000000 __UCA0MCTL
00009ea8 g     F .text	0000004e spi_rx_burst
0000a0e8 g     F .text	00000090 uart_init
00008028  w      .text	00000000 __do_clear_bss
0000a1e6 g     F .text	00000016 uart_dint
00008636 g     F .text	000000c4 uart_cb
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
00000026 g       *ABS*	00000000 __P1SEL
00009b48 g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_8MHz
0000a3ec g     F .text	0000001c watchdog_stop
00009a8a g     F .text	00000012 set_mcu_speed_dco_mclk_1MHz_smclk_1MHz
0000aafa g     F .text	000000a6 __floatsisf
00009b20 g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_1_5MHz
00008b3a g     F .text	00000016 adc10_stop
0000b9fc g       .text	00000000 __ext_udivmod32
0000a03c g     F .text	00000016 timerB_init
00009084 g     F .text	00000030 cc2500_gdo0_set_signal
00000027 g       *ABS*	00000000 __P1REN
0000a1fc g     F .text	00000028 uart_register_cb
000000c0 g       *ABS*	00000000 __OA0CTL0
00009598 g     F .text	00000030 cc2500_rx_enter
00009b70 g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_2MHz
0000bb2c  w      .text	00000000 _unexpected_
00008116  w      .text	00000000 __isr_8
00009922 g       .text	00000000 __isr_3
0000b332 g     F .text	0000069e vuprintf
00009d30 g     F .text	00000014 led_red_switch
000010fc g       *ABS*	00000000 __CALDCO_8MHZ
0000a41e g     F .text	00000000 __divhi3
0000ac30 g       .text	00000000 __ext_udivmod16
00008000  w      .text	00000000 _reset_vector__
00008116 g       .text	00000000 __ctors_start
0000ba3c g       .text	00000000 __xabi_udivmod64
00008116  w      .text	00000000 __isr_12
000010fa g       *ABS*	00000000 __CALDCO_12MHZ
0000bc82 g     O .rodata	00000008 __thenan_sf
00000018 g       *ABS*	00000000 __P3IN
00008010  w      .text	00000000 __do_copy_data
00000200 g       .bss	00000000 __bss_start
0000803e g     F .text	000000d2 main
00000176 g       *ABS*	00000000 __TACCR2
00009c3a g     F .text	0000008e delay_ms
000000c2 g       *ABS*	00000000 __OA1CTL0
0000a004 g       .text	00000000 __isr_13
00009b94 g     F .text	000000a6 delay_usec
00000170 g       *ABS*	00000000 __TAR
0000001e g       *ABS*	00000000 __P4DIR
00009f58 g     F .text	00000016 timerA_init
0000a224 g     F .text	00000054 usart0irq
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
0000a786 g     F .text	00000224 __mulsf3
0000a06a g     F .text	00000018 timerB_set_wakeup
0000002a g       *ABS*	00000000 __P2DIR
00000068 g       *ABS*	00000000 __UCB0CTL0
0000002f g       *ABS*	00000000 __P2REN
00008c66 g     F .text	000000c2 adc10_sample_avcc
0000b13c g     F .text	0000001c sprintf
0000bc8a g     O .rodata	00000100 __clz_tab
0000a004 g     F .text	00000038 Timer_B
00009766 g     F .text	0000001e cc2500_get_rssi
000097ba g     F .text	00000018 cc2500_reset
0000006e g       *ABS*	00000000 __UCB0RXBUF
000001b0 g       *ABS*	00000000 __ADC10CTL0
00008ed0 g     F .text	00000036 CC2500_SPI_ROREG
0000bc5e g     O .rodata	00000024 rfSettings_default_config
00009f20 g       .text	00000000 __isr_9
0000005e g       *ABS*	00000000 __UCA0IRTCTL
000010fe g       *ABS*	00000000 __CALDCO_1MHZ
00000067 g       *ABS*	00000000 __UCA0TXBUF
0000800c  w      .text	00000000 __init_stack
0000005d g       *ABS*	00000000 __UCA0ABCTL
00009f9e g     F .text	00000034 timerA_start_ticks
00000019 g       *ABS*	00000000 __P3OUT
000000c1 g       *ABS*	00000000 __OA0CTL1
00009ae4 g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_12MHz
00008e4a g     F .text	00000022 CC2500_SPI_STROBE
00008116 g       .text	00000000 __dtors_start
00008116  w      .text	00000000 __isr_6
00008116 g       .text	00000000 __ctors_end
00000062 g       *ABS*	00000000 __UCA0BR0
00000600 g       *ABS*	00000000 __stack
00009a9c g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_8MHz
00008116  w      .text	00000000 __isr_1
00000200 g       .rodata	00000000 _edata
000002ac g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
000002a6 g     O .bss	00000002 cc2500_rx_packet
00000048 g       *ABS*	00000000 __ADC10DTC0
0000011e g       *ABS*	00000000 __TBIV
000001b2 g       *ABS*	00000000 __ADC10CTL1
000002a8 g     O .bss	00000001 cc2500_status_register
00009cde g     F .text	00000014 led_green_on
000091cc g     F .text	000002f8 cc2500_configure
0000811a g     F .text	0000004e timer_tick_cb
0000a408 g     F .text	00000016 watchdog_restore
00000058 g       *ABS*	00000000 __BCSCTL2
00008110  w      .text	00000000 _endless_loop__
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
00000022 g       *ABS*	00000000 __P1DIR
000094c4 g     F .text	00000020 cc2500_set_channel
0000956a g     F .text	0000002e cc2500_rx_register_buffer
0000005f g       *ABS*	00000000 __UCA0IRRCTL
00000010 g       *ABS*	00000000 __P3REN
00000164 g       *ABS*	00000000 __TACCTL1
0000006f g       *ABS*	00000000 __UCB0TXBUF
0000a082 g     F .text	00000034 timerB_start_ticks
000010ff g       *ABS*	00000000 __CALBC1_1MHZ
00008010  w      .text	00000000 __low_level_init
00000011 g       *ABS*	00000000 __P4REN
00008af2 g     F .text	00000016 adc10_start
00000200 g       .rodata	00000000 __data_start
0000a0b6 g     F .text	00000024 timerB_start_milliseconds
00009900 g     F .text	00000022 cc2500_gdox_signal_handler
00000120 g       *ABS*	00000000 __WDTCTL
00000000 g       *ABS*	00000000 __IE1
00008f06 g     F .text	0000002e CC2500_SPI_TX_BYTE
000091a2 g     F .text	0000002a cc2500_check_fifo_xflow_flush
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
00009e04 g     F .text	0000000e spi_clear_rx_IFG
0000a6ea g     F .text	0000004c __addsf3
0000a328 g     F .text	00000064 flash_write_word
00009d70 g     F .text	00000032 leds_init



Disassembly of section .text:

00008000 <__watchdog_support>:
    8000:	55 42 20 01 	mov.b	&0x0120,r5	
    8004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    8008:	82 45 aa 02 	mov	r5,	&0x02aa	

0000800c <__init_stack>:
    800c:	31 40 00 06 	mov	#1536,	r1	;#0x0600

00008010 <__do_copy_data>:
    8010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    8014:	0f 93       	tst	r15		
    8016:	08 24       	jz	$+18     	;abs 0x8028
    8018:	92 42 aa 02 	mov	&0x02aa,&0x0120	
    801c:	20 01 
    801e:	2f 83       	decd	r15		
    8020:	9f 4f 92 bd 	mov	-17006(r15),512(r15);0xbd92(r15), 0x0200(r15)
    8024:	00 02 
    8026:	f8 23       	jnz	$-14     	;abs 0x8018

00008028 <__do_clear_bss>:
    8028:	3f 40 aa 00 	mov	#170,	r15	;#0x00aa
    802c:	0f 93       	tst	r15		
    802e:	07 24       	jz	$+16     	;abs 0x803e
    8030:	92 42 aa 02 	mov	&0x02aa,&0x0120	
    8034:	20 01 
    8036:	1f 83       	dec	r15		
    8038:	cf 43 00 02 	mov.b	#0,	512(r15);r3 As==00, 0x0200(r15)
    803c:	f9 23       	jnz	$-12     	;abs 0x8030

0000803e <main>:

#define NUM_PT 5
static struct pt pt[NUM_PT];

int main(void)
{
    803e:	04 41       	mov	r1,	r4	
    8040:	24 53       	incd	r4		
    8042:	21 83       	decd	r1		
    watchdog_stop();
    8044:	b0 12 ec a3 	call	#0xa3ec	

    /* protothreads init */
    int i;
    for(i = 0; i < NUM_PT; i++)
    8048:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc(r4)
    804c:	09 3c       	jmp	$+20     	;abs 0x8060
    {
        PT_INIT(&pt[i]);
    804e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8052:	0f 5f       	rla	r15		
    8054:	3f 50 7c 02 	add	#636,	r15	;#0x027c
    8058:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
{
    watchdog_stop();

    /* protothreads init */
    int i;
    for(i = 0; i < NUM_PT; i++)
    805c:	94 53 fc ff 	inc	-4(r4)		;0xfffc(r4)
    8060:	b4 90 05 00 	cmp	#5,	-4(r4)	;#0x0005, 0xfffc(r4)
    8064:	fc ff 
    8066:	f3 3b       	jl	$-24     	;abs 0x804e
    {
        PT_INIT(&pt[i]);
    }

    /* clock init */
    set_mcu_speed_dco_mclk_16MHz_smclk_8MHz();
    8068:	b0 12 48 9b 	call	#0x9b48	

    /* LEDs init */
    leds_init();
    806c:	b0 12 70 9d 	call	#0x9d70	
    led_green_flag = 0;
    8070:	82 43 12 02 	mov	#0,	&0x0212	;r3 As==00
    led_red_flag = 0;
    8074:	82 43 16 02 	mov	#0,	&0x0216	;r3 As==00

    /* timer init */
    timerA_init();
    8078:	b0 12 58 9f 	call	#0x9f58	
    timerA_register_cb(&timer_tick_cb);
    807c:	3f 40 1a 81 	mov	#-32486,r15	;#0x811a
    8080:	b0 12 6e 9f 	call	#0x9f6e	
    timerA_start_milliseconds(TIMER_PERIOD_MS);
    8084:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    8088:	b0 12 d2 9f 	call	#0x9fd2	

    /* UART init (serial link) */
    uart_init(UART_9600_SMCLK_8MHZ);
    808c:	3f 42       	mov	#8,	r15	;r2 As==11
    808e:	b0 12 e8 a0 	call	#0xa0e8	
    uart_register_cb(uart_cb);
    8092:	3f 40 36 86 	mov	#-31178,r15	;#0x8636
    8096:	b0 12 fc a1 	call	#0xa1fc	
    uart_flag = 0;
    809a:	82 43 1e 02 	mov	#0,	&0x021e	;r3 As==00
    uart_data = 0x0000;
    809e:	82 43 20 02 	mov	#0,	&0x0220	;r3 As==00
    room = 0;
    80a2:	c2 43 24 02 	mov.b	#0,	&0x0224	;r3 As==00
    room_flag = 0;
    80a6:	82 43 22 02 	mov	#0,	&0x0222	;r3 As==00

    /* ADC10 init (temperature) */
    adc10_start();
    80aa:	b0 12 f2 8a 	call	#0x8af2	

    /* radio init */
    
    spi_init();
    80ae:	b0 12 a2 9d 	call	#0x9da2	
    cc2500_init();
    80b2:	b0 12 24 98 	call	#0x9824	
    cc2500_rx_register_buffer(radio_tx_buffer, PKTLEN);
    80b6:	7e 40 1c 00 	mov.b	#28,	r14	;#0x001c
    80ba:	3f 40 26 02 	mov	#550,	r15	;#0x0226
    80be:	b0 12 6a 95 	call	#0x956a	
    cc2500_rx_register_cb(radio_cb);
    80c2:	3f 40 74 87 	mov	#-30860,r15	;#0x8774
    80c6:	b0 12 00 97 	call	#0x9700	
    cc2500_rx_enter();
    80ca:	b0 12 98 95 	call	#0x9598	
    radio_rx_flag = 0;
    80ce:	82 43 7a 02 	mov	#0,	&0x027a	;r3 As==00
    
    __enable_interrupt();
    80d2:	32 d2       	eint			


    //Connection init
    uart_flag = 0;
    80d4:	82 43 1e 02 	mov	#0,	&0x021e	;r3 As==00
    periodic_write_flag=1;
    80d8:	92 43 18 02 	mov	#1,	&0x0218	;r3 As==01
    periodic_temp_flag=1;
    80dc:	92 43 1a 02 	mov	#1,	&0x021a	;r3 As==01
    set_node_id(0);
    80e0:	0f 43       	clr	r15		
    80e2:	b0 12 d6 81 	call	#0x81d6	

    /* simple cycle scheduling */
    while(1) {
      thread_led_red(&pt[0]);
    80e6:	3f 40 7c 02 	mov	#636,	r15	;#0x027c
    80ea:	b0 12 82 85 	call	#0x8582	
      thread_uart(&pt[1]);//for setting node ID
    80ee:	3f 40 7e 02 	mov	#638,	r15	;#0x027e
    80f2:	b0 12 fa 86 	call	#0x86fa	
      thread_rx(&pt[2]); //for writing on ezconsole reception temp
    80f6:	3f 40 80 02 	mov	#640,	r15	;#0x0280
    80fa:	b0 12 b2 88 	call	#0x88b2	
      thread_periodic_temperature(&pt[3]);//for sampling temp
    80fe:	3f 40 82 02 	mov	#642,	r15	;#0x0282
    8102:	b0 12 68 8a 	call	#0x8a68	
      thread_periodic_writeTemp(&pt[4]);//for writing own temp on ezconsole
    8106:	3f 40 84 02 	mov	#644,	r15	;#0x0284
    810a:	b0 12 8e 89 	call	#0x898e	
    }
    810e:	eb 3f       	jmp	$-40     	;abs 0x80e6

00008110 <__stop_progExec__>:
    8110:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    8114:	fd 3f       	jmp	$-4      	;abs 0x8110

00008116 <__ctors_end>:
    8116:	30 40 2c bb 	br	#0xbb2c	

0000811a <timer_tick_cb>:
 * Timer
 */

/* timer interrupt handler: increases timer's counter */
/* approximately every 10ms                           */ 
void timer_tick_cb() {
    811a:	04 12       	push	r4		
    811c:	04 41       	mov	r1,	r4	
    811e:	24 53       	incd	r4		
    8120:	21 83       	decd	r1		
    int i;
    for(i = 0; i < NUM_TIMERS; i++)
    8122:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc(r4)
    8126:	19 3c       	jmp	$+52     	;abs 0x815a
    {
        if(timer[i] != UINT_MAX) {
    8128:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    812c:	0f 5f       	rla	r15		
    812e:	3f 50 02 02 	add	#514,	r15	;#0x0202
    8132:	2f 4f       	mov	@r15,	r15	
    8134:	3f 93       	cmp	#-1,	r15	;r3 As==11
    8136:	0f 24       	jz	$+32     	;abs 0x8156
            timer[i]++;
    8138:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    813c:	0f 5f       	rla	r15		
    813e:	3f 50 02 02 	add	#514,	r15	;#0x0202
    8142:	2f 4f       	mov	@r15,	r15	
    8144:	0e 4f       	mov	r15,	r14	
    8146:	1e 53       	inc	r14		
    8148:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    814c:	0f 5f       	rla	r15		
    814e:	3f 50 02 02 	add	#514,	r15	;#0x0202
    8152:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)

/* timer interrupt handler: increases timer's counter */
/* approximately every 10ms                           */ 
void timer_tick_cb() {
    int i;
    for(i = 0; i < NUM_TIMERS; i++)
    8156:	94 53 fc ff 	inc	-4(r4)		;0xfffc(r4)
    815a:	b4 90 07 00 	cmp	#7,	-4(r4)	;#0x0007, 0xfffc(r4)
    815e:	fc ff 
    8160:	e3 3b       	jl	$-56     	;abs 0x8128
    {
        if(timer[i] != UINT_MAX) {
            timer[i]++;
        }
    }
}
    8162:	21 53       	incd	r1		
    8164:	34 41       	pop	r4		
    8166:	30 41       	ret			

00008168 <timer_reached>:

int timer_reached(uint16_t timer, uint16_t count) {
    8168:	04 12       	push	r4		
    816a:	04 41       	mov	r1,	r4	
    816c:	24 53       	incd	r4		
    816e:	21 82       	sub	#4,	r1	;r2 As==10
    8170:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8174:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    return (timer >= count);
    8178:	1f 43       	mov	#1,	r15	;r3 As==01
    817a:	94 94 fc ff 	cmp	-4(r4),	-6(r4)	;0xfffc(r4), 0xfffa(r4)
    817e:	fa ff 
    8180:	01 2c       	jc	$+4      	;abs 0x8184
    8182:	0f 43       	clr	r15		
}
    8184:	21 52       	add	#4,	r1	;r2 As==10
    8186:	34 41       	pop	r4		
    8188:	30 41       	ret			

0000818a <printhex>:

static void printhex(char *buffer, unsigned int len)
{
    818a:	04 12       	push	r4		
    818c:	04 41       	mov	r1,	r4	
    818e:	24 53       	incd	r4		
    8190:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    8194:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8198:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    unsigned int i;
    for(i = 0; i < len; i++)
    819c:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    81a0:	0e 3c       	jmp	$+30     	;abs 0x81be
    {
        printf("%02X ", buffer[i]);
    81a2:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    81a6:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    81aa:	6f 4f       	mov.b	@r15,	r15	
    81ac:	8f 11       	sxt	r15		
    81ae:	0f 12       	push	r15		
    81b0:	30 12 2e bb 	push	#-17618	;#0xbb2e
    81b4:	b0 12 c0 b0 	call	#0xb0c0	
    81b8:	21 52       	add	#4,	r1	;r2 As==10
}

static void printhex(char *buffer, unsigned int len)
{
    unsigned int i;
    for(i = 0; i < len; i++)
    81ba:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    81be:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    81c2:	f8 ff 
    81c4:	ee 2b       	jnc	$-34     	;abs 0x81a2
    {
        printf("%02X ", buffer[i]);
    }
    printf("\n");
    81c6:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    81ca:	b0 12 82 a1 	call	#0xa182	
}
    81ce:	31 50 06 00 	add	#6,	r1	;#0x0006
    81d2:	34 41       	pop	r4		
    81d4:	30 41       	ret			

000081d6 <set_node_id>:

/* returns 1 if the id was expected and set, 0 otherwise */
static void set_node_id(unsigned int id)
{
    81d6:	04 12       	push	r4		
    81d8:	04 41       	mov	r1,	r4	
    81da:	24 53       	incd	r4		
    81dc:	21 83       	decd	r1		
    81de:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    TIMER_ID_INPUT = UINT_MAX;
    81e2:	b2 43 06 02 	mov	#-1,	&0x0206	;r3 As==11
    if(id!=0){
    81e6:	84 93 fc ff 	tst	-4(r4)		;0xfffc(r4)
    81ea:	20 24       	jz	$+66     	;abs 0x822c
        if(flash_write_byte((unsigned char *) NODE_ID_LOCATION, id) != 0)
    81ec:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    81f0:	4f 4f       	mov.b	r15,	r15	
    81f2:	4e 4f       	mov.b	r15,	r14	
    81f4:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    81f8:	b0 12 c4 a2 	call	#0xa2c4	
    81fc:	0f 93       	tst	r15		
    81fe:	23 24       	jz	$+72     	;abs 0x8246
        {
            flash_erase_segment((unsigned int *) NODE_ID_LOCATION);
    8200:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    8204:	b0 12 8c a3 	call	#0xa38c	
            flash_write_word((unsigned int *) NODE_ID_LOCATION, id);
    8208:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    820c:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    8210:	b0 12 28 a3 	call	#0xa328	
            node_id = id;
    8214:	92 44 fc ff 	mov	-4(r4),	&0x0200	;0xfffc(r4)
    8218:	00 02 
            printf("node id set to: %x\n", node_id);
    821a:	1f 42 00 02 	mov	&0x0200,r15	
    821e:	0f 12       	push	r15		
    8220:	30 12 34 bb 	push	#-17612	;#0xbb34
    8224:	b0 12 c0 b0 	call	#0xb0c0	
    8228:	21 52       	add	#4,	r1	;r2 As==10
    822a:	0d 3c       	jmp	$+28     	;abs 0x8246
        }
    } 
    else{
        /* retrieve node id from flash */
        node_id = *((unsigned int *) NODE_ID_LOCATION);
    822c:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    8230:	2f 4f       	mov	@r15,	r15	
    8232:	82 4f 00 02 	mov	r15,	&0x0200	
        printf("node id retrieved from flash:  %x\n", node_id);
    8236:	1f 42 00 02 	mov	&0x0200,r15	
    823a:	0f 12       	push	r15		
    823c:	30 12 48 bb 	push	#-17592	;#0xbb48
    8240:	b0 12 c0 b0 	call	#0xb0c0	
    8244:	21 52       	add	#4,	r1	;r2 As==10
    }
}
    8246:	21 53       	incd	r1		
    8248:	34 41       	pop	r4		
    824a:	30 41       	ret			

0000824c <converter>:


static int converter(char a, char b){
    824c:	04 12       	push	r4		
    824e:	04 41       	mov	r1,	r4	
    8250:	24 53       	incd	r4		
    8252:	31 50 f0 ff 	add	#-16,	r1	;#0xfff0
    8256:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    825a:	c4 4e fd ff 	mov.b	r14,	-3(r4)	;0xfffd(r4)
    char s[4];
    sprintf(s,"%02X%02X \n",a,b);
    825e:	5e 44 fd ff 	mov.b	-3(r4),	r14	;0xfffd(r4)
    8262:	8e 11       	sxt	r14		
    8264:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    8268:	8f 11       	sxt	r15		
    826a:	0e 12       	push	r14		
    826c:	0f 12       	push	r15		
    826e:	30 12 6b bb 	push	#-17557	;#0xbb6b
    8272:	0f 44       	mov	r4,	r15	
    8274:	3f 50 f0 ff 	add	#-16,	r15	;#0xfff0
    8278:	0f 12       	push	r15		
    827a:	b0 12 3c b1 	call	#0xb13c	
    827e:	31 52       	add	#8,	r1	;r2 As==11
    int number[4]; 
    int i;
    for(i=0;i<4;i++){
    8280:	84 43 ee ff 	mov	#0,	-18(r4)	;r3 As==00, 0xffee(r4)
    8284:	30 40 84 84 	br	#0x8484	
        switch(s[i]){
    8288:	0f 44       	mov	r4,	r15	
    828a:	3f 50 f0 ff 	add	#-16,	r15	;#0xfff0
    828e:	1f 54 ee ff 	add	-18(r4),r15	;0xffee(r4)
    8292:	6f 4f       	mov.b	@r15,	r15	
    8294:	8f 11       	sxt	r15		
    8296:	3f 50 d0 ff 	add	#-48,	r15	;#0xffd0
    829a:	3f 90 17 00 	cmp	#23,	r15	;#0x0017
    829e:	f0 2c       	jc	$+482    	;abs 0x8480
    82a0:	0f 5f       	rla	r15		
    82a2:	3f 50 76 bb 	add	#-17546,r15	;#0xbb76
    82a6:	2f 4f       	mov	@r15,	r15	
    82a8:	00 4f       	br	r15		
            case '0':
                number[3-i]=0;break;
    82aa:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    82ae:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    82b2:	0f 5f       	rla	r15		
    82b4:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    82b8:	0e 54       	add	r4,	r14	
    82ba:	0f 5e       	add	r14,	r15	
    82bc:	3f 50 06 00 	add	#6,	r15	;#0x0006
    82c0:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    82c4:	dd 3c       	jmp	$+444    	;abs 0x8480
            case '1':
                number[3-i]=1;break;
    82c6:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    82ca:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    82ce:	0f 5f       	rla	r15		
    82d0:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    82d4:	0e 54       	add	r4,	r14	
    82d6:	0f 5e       	add	r14,	r15	
    82d8:	3f 50 06 00 	add	#6,	r15	;#0x0006
    82dc:	9f 43 00 00 	mov	#1,	0(r15)	;r3 As==01, 0x0000(r15)
    82e0:	cf 3c       	jmp	$+416    	;abs 0x8480
            case '2':
                number[3-i]=2;break;
    82e2:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    82e6:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    82ea:	0f 5f       	rla	r15		
    82ec:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    82f0:	0e 54       	add	r4,	r14	
    82f2:	0f 5e       	add	r14,	r15	
    82f4:	3f 50 06 00 	add	#6,	r15	;#0x0006
    82f8:	af 43 00 00 	mov	#2,	0(r15)	;r3 As==10, 0x0000(r15)
    82fc:	c1 3c       	jmp	$+388    	;abs 0x8480
            case '3':
                number[3-i]=3;break;
    82fe:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8302:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    8306:	0f 5f       	rla	r15		
    8308:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    830c:	0e 54       	add	r4,	r14	
    830e:	0f 5e       	add	r14,	r15	
    8310:	3f 50 06 00 	add	#6,	r15	;#0x0006
    8314:	bf 40 03 00 	mov	#3,	0(r15)	;#0x0003, 0x0000(r15)
    8318:	00 00 
    831a:	b2 3c       	jmp	$+358    	;abs 0x8480
            case '4':
                number[3-i]=4;break;
    831c:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8320:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    8324:	0f 5f       	rla	r15		
    8326:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    832a:	0e 54       	add	r4,	r14	
    832c:	0f 5e       	add	r14,	r15	
    832e:	3f 50 06 00 	add	#6,	r15	;#0x0006
    8332:	af 42 00 00 	mov	#4,	0(r15)	;r2 As==10, 0x0000(r15)
    8336:	a4 3c       	jmp	$+330    	;abs 0x8480
            case '5':
                number[3-i]=5;break;
    8338:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    833c:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    8340:	0f 5f       	rla	r15		
    8342:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8346:	0e 54       	add	r4,	r14	
    8348:	0f 5e       	add	r14,	r15	
    834a:	3f 50 06 00 	add	#6,	r15	;#0x0006
    834e:	bf 40 05 00 	mov	#5,	0(r15)	;#0x0005, 0x0000(r15)
    8352:	00 00 
    8354:	95 3c       	jmp	$+300    	;abs 0x8480
            case '6':
                number[3-i]=6;break;
    8356:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    835a:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    835e:	0f 5f       	rla	r15		
    8360:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8364:	0e 54       	add	r4,	r14	
    8366:	0f 5e       	add	r14,	r15	
    8368:	3f 50 06 00 	add	#6,	r15	;#0x0006
    836c:	bf 40 06 00 	mov	#6,	0(r15)	;#0x0006, 0x0000(r15)
    8370:	00 00 
    8372:	86 3c       	jmp	$+270    	;abs 0x8480
            case '7':
                number[3-i]=7;break;
    8374:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8378:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    837c:	0f 5f       	rla	r15		
    837e:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8382:	0e 54       	add	r4,	r14	
    8384:	0f 5e       	add	r14,	r15	
    8386:	3f 50 06 00 	add	#6,	r15	;#0x0006
    838a:	bf 40 07 00 	mov	#7,	0(r15)	;#0x0007, 0x0000(r15)
    838e:	00 00 
    8390:	77 3c       	jmp	$+240    	;abs 0x8480
            case '8':
                number[3-i]=8;break;
    8392:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8396:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    839a:	0f 5f       	rla	r15		
    839c:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    83a0:	0e 54       	add	r4,	r14	
    83a2:	0f 5e       	add	r14,	r15	
    83a4:	3f 50 06 00 	add	#6,	r15	;#0x0006
    83a8:	bf 42 00 00 	mov	#8,	0(r15)	;r2 As==11, 0x0000(r15)
    83ac:	69 3c       	jmp	$+212    	;abs 0x8480
            case '9':
                number[3-i]=9;break;
    83ae:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    83b2:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    83b6:	0f 5f       	rla	r15		
    83b8:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    83bc:	0e 54       	add	r4,	r14	
    83be:	0f 5e       	add	r14,	r15	
    83c0:	3f 50 06 00 	add	#6,	r15	;#0x0006
    83c4:	bf 40 09 00 	mov	#9,	0(r15)	;#0x0009, 0x0000(r15)
    83c8:	00 00 
    83ca:	5a 3c       	jmp	$+182    	;abs 0x8480
            case 'A':
                number[3-i]=10;break;
    83cc:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    83d0:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    83d4:	0f 5f       	rla	r15		
    83d6:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    83da:	0e 54       	add	r4,	r14	
    83dc:	0f 5e       	add	r14,	r15	
    83de:	3f 50 06 00 	add	#6,	r15	;#0x0006
    83e2:	bf 40 0a 00 	mov	#10,	0(r15)	;#0x000a, 0x0000(r15)
    83e6:	00 00 
    83e8:	4b 3c       	jmp	$+152    	;abs 0x8480
            case 'B':
                number[3-i]=11;break;
    83ea:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    83ee:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    83f2:	0f 5f       	rla	r15		
    83f4:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    83f8:	0e 54       	add	r4,	r14	
    83fa:	0f 5e       	add	r14,	r15	
    83fc:	3f 50 06 00 	add	#6,	r15	;#0x0006
    8400:	bf 40 0b 00 	mov	#11,	0(r15)	;#0x000b, 0x0000(r15)
    8404:	00 00 
    8406:	3c 3c       	jmp	$+122    	;abs 0x8480
            case 'C':
                number[3-i]=12;break;
    8408:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    840c:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    8410:	0f 5f       	rla	r15		
    8412:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8416:	0e 54       	add	r4,	r14	
    8418:	0f 5e       	add	r14,	r15	
    841a:	3f 50 06 00 	add	#6,	r15	;#0x0006
    841e:	bf 40 0c 00 	mov	#12,	0(r15)	;#0x000c, 0x0000(r15)
    8422:	00 00 
    8424:	2d 3c       	jmp	$+92     	;abs 0x8480
            case 'D':
                number[3-i]=13;break;
    8426:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    842a:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    842e:	0f 5f       	rla	r15		
    8430:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8434:	0e 54       	add	r4,	r14	
    8436:	0f 5e       	add	r14,	r15	
    8438:	3f 50 06 00 	add	#6,	r15	;#0x0006
    843c:	bf 40 0d 00 	mov	#13,	0(r15)	;#0x000d, 0x0000(r15)
    8440:	00 00 
    8442:	1e 3c       	jmp	$+62     	;abs 0x8480
            case 'E':        
                number[3-i]=14;break;
    8444:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8448:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    844c:	0f 5f       	rla	r15		
    844e:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8452:	0e 54       	add	r4,	r14	
    8454:	0f 5e       	add	r14,	r15	
    8456:	3f 50 06 00 	add	#6,	r15	;#0x0006
    845a:	bf 40 0e 00 	mov	#14,	0(r15)	;#0x000e, 0x0000(r15)
    845e:	00 00 
    8460:	0f 3c       	jmp	$+32     	;abs 0x8480
            case 'F':        
                number[3-i]=15;break;
    8462:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8466:	1f 84 ee ff 	sub	-18(r4),r15	;0xffee(r4)
    846a:	0f 5f       	rla	r15		
    846c:	3e 40 ee ff 	mov	#-18,	r14	;#0xffee
    8470:	0e 54       	add	r4,	r14	
    8472:	0f 5e       	add	r14,	r15	
    8474:	3f 50 06 00 	add	#6,	r15	;#0x0006
    8478:	bf 40 0f 00 	mov	#15,	0(r15)	;#0x000f, 0x0000(r15)
    847c:	00 00 
    847e:	03 43       	nop			
static int converter(char a, char b){
    char s[4];
    sprintf(s,"%02X%02X \n",a,b);
    int number[4]; 
    int i;
    for(i=0;i<4;i++){
    8480:	94 53 ee ff 	inc	-18(r4)	;0xffee(r4)
    8484:	a4 92 ee ff 	cmp	#4,	-18(r4)	;r2 As==10, 0xffee(r4)
    8488:	02 34       	jge	$+6      	;abs 0x848e
    848a:	30 40 88 82 	br	#0x8288	
                number[3-i]=14;break;
            case 'F':        
                number[3-i]=15;break;
        }
    }
    return number[0]+number[1]*16+number[2]*16*16+number[3]*16*16*16;
    848e:	1e 44 f4 ff 	mov	-12(r4),r14	;0xfff4(r4)
    8492:	1d 44 f8 ff 	mov	-8(r4),	r13	;0xfff8(r4)
    8496:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    849a:	0f 5f       	rla	r15		
    849c:	0f 5f       	rla	r15		
    849e:	0f 5f       	rla	r15		
    84a0:	0f 5f       	rla	r15		
    84a2:	0f 5d       	add	r13,	r15	
    84a4:	0f 5f       	rla	r15		
    84a6:	0f 5f       	rla	r15		
    84a8:	0f 5f       	rla	r15		
    84aa:	0f 5f       	rla	r15		
    84ac:	1d 44 f6 ff 	mov	-10(r4),r13	;0xfff6(r4)
    84b0:	0f 5d       	add	r13,	r15	
    84b2:	0f 5f       	rla	r15		
    84b4:	0f 5f       	rla	r15		
    84b6:	0f 5f       	rla	r15		
    84b8:	0f 5f       	rla	r15		
    84ba:	0f 5e       	add	r14,	r15	
    
}
    84bc:	31 50 10 00 	add	#16,	r1	;#0x0010
    84c0:	34 41       	pop	r4		
    84c2:	30 41       	ret			

000084c4 <led_green_blink>:

static int led_green_flag;


static void led_green_blink(int duration)
{
    84c4:	04 12       	push	r4		
    84c6:	04 41       	mov	r1,	r4	
    84c8:	24 53       	incd	r4		
    84ca:	21 83       	decd	r1		
    84cc:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    led_green_duration = duration;
    84d0:	92 44 fc ff 	mov	-4(r4),	&0x0210	;0xfffc(r4)
    84d4:	10 02 
    led_green_flag = 1;
    84d6:	92 43 12 02 	mov	#1,	&0x0212	;r3 As==01
}
    84da:	21 53       	incd	r1		
    84dc:	34 41       	pop	r4		
    84de:	30 41       	ret			

000084e0 <led_red_blink>:

static void led_red_blink(int duration)
{
    84e0:	04 12       	push	r4		
    84e2:	04 41       	mov	r1,	r4	
    84e4:	24 53       	incd	r4		
    84e6:	21 83       	decd	r1		
    84e8:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    led_red_duration = duration;
    84ec:	92 44 fc ff 	mov	-4(r4),	&0x0214	;0xfffc(r4)
    84f0:	14 02 
    led_red_flag = 1;
    84f2:	92 43 16 02 	mov	#1,	&0x0216	;r3 As==01
}
    84f6:	21 53       	incd	r1		
    84f8:	34 41       	pop	r4		
    84fa:	30 41       	ret			

000084fc <thread_led_green>:

static PT_THREAD(thread_led_green(struct pt *pt))
{
    84fc:	04 12       	push	r4		
    84fe:	04 41       	mov	r1,	r4	
    8500:	24 53       	incd	r4		
    8502:	21 82       	sub	#4,	r1	;r2 As==10
    8504:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    8508:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    850c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8510:	2f 4f       	mov	@r15,	r15	
    8512:	3f 90 de 00 	cmp	#222,	r15	;#0x00de
    8516:	0c 24       	jz	$+26     	;abs 0x8530
    8518:	3f 90 e1 00 	cmp	#225,	r15	;#0x00e1
    851c:	18 24       	jz	$+50     	;abs 0x854e
    851e:	0f 93       	tst	r15		
    8520:	25 20       	jnz	$+76     	;abs 0x856c

    led_green_flag=0;
    8522:	82 43 12 02 	mov	#0,	&0x0212	;r3 As==00
    
    while(1)
      {
        PT_WAIT_UNTIL(pt, led_green_flag);
    8526:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    852a:	bf 40 de 00 	mov	#222,	0(r15)	;#0x00de, 0x0000(r15)
    852e:	00 00 
    8530:	1f 42 12 02 	mov	&0x0212,r15	
    8534:	0f 93       	tst	r15		
    8536:	02 20       	jnz	$+6      	;abs 0x853c
    8538:	4f 43       	clr.b	r15		
    853a:	20 3c       	jmp	$+66     	;abs 0x857c
        led_green_on();
    853c:	b0 12 de 9c 	call	#0x9cde	
        TIMER_LED_GREEN_ON = 0;
    8540:	82 43 04 02 	mov	#0,	&0x0204	;r3 As==00
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_GREEN_ON, DELAY_LED_GREEN));
    8544:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8548:	bf 40 e1 00 	mov	#225,	0(r15)	;#0x00e1, 0x0000(r15)
    854c:	00 00 
    854e:	1f 42 04 02 	mov	&0x0204,r15	
    8552:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    8556:	b0 12 68 81 	call	#0x8168	
    855a:	0f 93       	tst	r15		
    855c:	02 20       	jnz	$+6      	;abs 0x8562
    855e:	4f 43       	clr.b	r15		
    8560:	0d 3c       	jmp	$+28     	;abs 0x857c
        led_green_off();
    8562:	b0 12 c8 9c 	call	#0x9cc8	
	led_green_flag=0;	
    8566:	82 43 12 02 	mov	#0,	&0x0212	;r3 As==00
    }
    856a:	dd 3f       	jmp	$-68     	;abs 0x8526

    PT_END(pt);
    856c:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8570:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8574:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    8578:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    857c:	21 52       	add	#4,	r1	;r2 As==10
    857e:	34 41       	pop	r4		
    8580:	30 41       	ret			

00008582 <thread_led_red>:

static PT_THREAD(thread_led_red(struct pt *pt))
{
    8582:	04 12       	push	r4		
    8584:	04 41       	mov	r1,	r4	
    8586:	24 53       	incd	r4		
    8588:	21 82       	sub	#4,	r1	;r2 As==10
    858a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    858e:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    8592:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8596:	2f 4f       	mov	@r15,	r15	
    8598:	3f 90 ee 00 	cmp	#238,	r15	;#0x00ee
    859c:	13 24       	jz	$+40     	;abs 0x85c4
    859e:	3f 90 ef 00 	cmp	#239,	r15	;#0x00ef
    85a2:	03 2c       	jc	$+8      	;abs 0x85aa
    85a4:	0f 93       	tst	r15		
    85a6:	09 24       	jz	$+20     	;abs 0x85ba
    85a8:	3b 3c       	jmp	$+120    	;abs 0x8620
    85aa:	3f 90 f2 00 	cmp	#242,	r15	;#0x00f2
    85ae:	19 24       	jz	$+52     	;abs 0x85e2
    85b0:	3f 90 f6 00 	cmp	#246,	r15	;#0x00f6
    85b4:	2a 24       	jz	$+86     	;abs 0x860a
    85b6:	34 3c       	jmp	$+106    	;abs 0x8620
          led_red_duration));
        led_red_off();
        TIMER_LED_RED_ON = 0;
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_RED_ON,
          led_red_duration));
    }
    85b8:	03 43       	nop			
static PT_THREAD(thread_led_red(struct pt *pt))
{
    PT_BEGIN(pt);
    while(1)
    {
        PT_WAIT_UNTIL(pt, led_red_flag);
    85ba:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    85be:	bf 40 ee 00 	mov	#238,	0(r15)	;#0x00ee, 0x0000(r15)
    85c2:	00 00 
    85c4:	1f 42 16 02 	mov	&0x0216,r15	
    85c8:	0f 93       	tst	r15		
    85ca:	02 20       	jnz	$+6      	;abs 0x85d0
    85cc:	4f 43       	clr.b	r15		
    85ce:	30 3c       	jmp	$+98     	;abs 0x8630
        led_red_on();
    85d0:	b0 12 1c 9d 	call	#0x9d1c	
        TIMER_LED_RED_ON = 0;
    85d4:	82 43 02 02 	mov	#0,	&0x0202	;r3 As==00
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_RED_ON,
    85d8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    85dc:	bf 40 f2 00 	mov	#242,	0(r15)	;#0x00f2, 0x0000(r15)
    85e0:	00 00 
    85e2:	1f 42 14 02 	mov	&0x0214,r15	
    85e6:	0e 4f       	mov	r15,	r14	
    85e8:	1f 42 02 02 	mov	&0x0202,r15	
    85ec:	b0 12 68 81 	call	#0x8168	
    85f0:	0f 93       	tst	r15		
    85f2:	02 20       	jnz	$+6      	;abs 0x85f8
    85f4:	4f 43       	clr.b	r15		
    85f6:	1c 3c       	jmp	$+58     	;abs 0x8630
          led_red_duration));
        led_red_off();
    85f8:	b0 12 06 9d 	call	#0x9d06	
        TIMER_LED_RED_ON = 0;
    85fc:	82 43 02 02 	mov	#0,	&0x0202	;r3 As==00
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_RED_ON,
    8600:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8604:	bf 40 f6 00 	mov	#246,	0(r15)	;#0x00f6, 0x0000(r15)
    8608:	00 00 
    860a:	1f 42 14 02 	mov	&0x0214,r15	
    860e:	0e 4f       	mov	r15,	r14	
    8610:	1f 42 02 02 	mov	&0x0202,r15	
    8614:	b0 12 68 81 	call	#0x8168	
    8618:	0f 93       	tst	r15		
    861a:	ce 23       	jnz	$-98     	;abs 0x85b8
    861c:	4f 43       	clr.b	r15		
    861e:	08 3c       	jmp	$+18     	;abs 0x8630
          led_red_duration));
    }

    PT_END(pt);
    8620:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8624:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8628:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    862c:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    8630:	21 52       	add	#4,	r1	;r2 As==10
    8632:	34 41       	pop	r4		
    8634:	30 41       	ret			

00008636 <uart_cb>:
/*
 * UART
 */

int uart_cb(uint8_t data)
{
    8636:	04 12       	push	r4		
    8638:	04 41       	mov	r1,	r4	
    863a:	24 53       	incd	r4		
    863c:	21 83       	decd	r1		
    863e:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    
    if(data == 27 && uart_flag==0){ //27 is ESC ascii code (decimal) 
    8642:	f4 90 1b 00 	cmp.b	#27,	-4(r4)	;#0x001b, 0xfffc(r4)
    8646:	fc ff 
    8648:	13 20       	jnz	$+40     	;abs 0x8670
    864a:	1f 42 1e 02 	mov	&0x021e,r15	
    864e:	0f 93       	tst	r15		
    8650:	0f 20       	jnz	$+32     	;abs 0x8670
        printf("Enter new id starting with the room number and then the sensor number. Press enter to accept\n");
    8652:	3f 40 a4 bb 	mov	#-17500,r15	;#0xbba4
    8656:	b0 12 d0 b9 	call	#0xb9d0	
        room_flag = 0;
    865a:	82 43 22 02 	mov	#0,	&0x0222	;r3 As==00
        uart_data = 0;
    865e:	82 43 20 02 	mov	#0,	&0x0220	;r3 As==00
        uart_flag=1;
    8662:	92 43 1e 02 	mov	#1,	&0x021e	;r3 As==01
        periodic_write_flag=0;
    8666:	82 43 18 02 	mov	#0,	&0x0218	;r3 As==00
        periodic_temp_flag=0;
    866a:	82 43 1a 02 	mov	#0,	&0x021a	;r3 As==00
    866e:	41 3c       	jmp	$+132    	;abs 0x86f2
    }
    else if(data == 13 && uart_flag==1){ //13 is return/enter ascii code
    8670:	f4 90 0d 00 	cmp.b	#13,	-4(r4)	;#0x000d, 0xfffc(r4)
    8674:	fc ff 
    8676:	0b 20       	jnz	$+24     	;abs 0x868e
    8678:	1f 42 1e 02 	mov	&0x021e,r15	
    867c:	1f 93       	cmp	#1,	r15	;r3 As==01
    867e:	07 20       	jnz	$+16     	;abs 0x868e
        uart_flag=0;
    8680:	82 43 1e 02 	mov	#0,	&0x021e	;r3 As==00
        periodic_write_flag=1;
    8684:	92 43 18 02 	mov	#1,	&0x0218	;r3 As==01
        periodic_temp_flag=1;
    8688:	92 43 1a 02 	mov	#1,	&0x021a	;r3 As==01
    868c:	32 3c       	jmp	$+102    	;abs 0x86f2
    }
    else {
    	if(room_flag == 0){
    868e:	1f 42 22 02 	mov	&0x0222,r15	
    8692:	0f 93       	tst	r15		
    8694:	12 20       	jnz	$+38     	;abs 0x86ba
    		printf("room : %c (hex code : %x)\n",data, data);
    8696:	5e 44 fc ff 	mov.b	-4(r4),	r14	;0xfffc(r4)
    869a:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    869e:	0e 12       	push	r14		
    86a0:	0f 12       	push	r15		
    86a2:	30 12 01 bc 	push	#-17407	;#0xbc01
    86a6:	b0 12 c0 b0 	call	#0xb0c0	
    86aa:	31 50 06 00 	add	#6,	r1	;#0x0006
    		room = data;
    86ae:	d2 44 fc ff 	mov.b	-4(r4),	&0x0224	;0xfffc(r4)
    86b2:	24 02 
    		room_flag=1;
    86b4:	92 43 22 02 	mov	#1,	&0x0222	;r3 As==01
    86b8:	1c 3c       	jmp	$+58     	;abs 0x86f2
    		
    	}
        else if (room_flag == 1){
    86ba:	1f 42 22 02 	mov	&0x0222,r15	
    86be:	1f 93       	cmp	#1,	r15	;r3 As==01
    86c0:	18 20       	jnz	$+50     	;abs 0x86f2
        	printf("sensor: %c (hex code : %x)\n",data,data);
    86c2:	5e 44 fc ff 	mov.b	-4(r4),	r14	;0xfffc(r4)
    86c6:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    86ca:	0e 12       	push	r14		
    86cc:	0f 12       	push	r15		
    86ce:	30 12 1c bc 	push	#-17380	;#0xbc1c
    86d2:	b0 12 c0 b0 	call	#0xb0c0	
    86d6:	31 50 06 00 	add	#6,	r1	;#0x0006
        	uart_data = ((room & 0xFF) <<8) | (data & 0xFF) ;
    86da:	5f 42 24 02 	mov.b	&0x0224,r15	
    86de:	4f 4f       	mov.b	r15,	r15	
    86e0:	4f 4f       	mov.b	r15,	r15	
    86e2:	8f 10       	swpb	r15		
    86e4:	5e 44 fc ff 	mov.b	-4(r4),	r14	;0xfffc(r4)
    86e8:	0f de       	bis	r14,	r15	
    86ea:	82 4f 20 02 	mov	r15,	&0x0220	
        	//printf("uart_data : %x \n",uart_data);
        	room_flag = 0;
    86ee:	82 43 22 02 	mov	#0,	&0x0222	;r3 As==00
        }      
    }
        
    return 0;
    86f2:	0f 43       	clr	r15		
}
    86f4:	21 53       	incd	r1		
    86f6:	34 41       	pop	r4		
    86f8:	30 41       	ret			

000086fa <thread_uart>:

static PT_THREAD(thread_uart(struct pt *pt))
{
    86fa:	04 12       	push	r4		
    86fc:	04 41       	mov	r1,	r4	
    86fe:	24 53       	incd	r4		
    8700:	21 82       	sub	#4,	r1	;r2 As==10
    8702:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    8706:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    870a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    870e:	2f 4f       	mov	@r15,	r15	
    8710:	3f 90 29 01 	cmp	#297,	r15	;#0x0129
    8714:	0a 24       	jz	$+22     	;abs 0x872a
    8716:	3f 90 2b 01 	cmp	#299,	r15	;#0x012b
    871a:	14 24       	jz	$+42     	;abs 0x8744
    871c:	0f 93       	tst	r15		
    871e:	1f 20       	jnz	$+64     	;abs 0x875e

    while(1)
    {
        PT_WAIT_UNTIL(pt, uart_flag==1);
    8720:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8724:	bf 40 29 01 	mov	#297,	0(r15)	;#0x0129, 0x0000(r15)
    8728:	00 00 
    872a:	1f 42 1e 02 	mov	&0x021e,r15	
    872e:	1f 93       	cmp	#1,	r15	;r3 As==01
    8730:	02 24       	jz	$+6      	;abs 0x8736
    8732:	4f 43       	clr.b	r15		
    8734:	1c 3c       	jmp	$+58     	;abs 0x876e
        led_red_on();
    8736:	b0 12 1c 9d 	call	#0x9d1c	
        PT_WAIT_UNTIL(pt,uart_flag==0);
    873a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    873e:	bf 40 2b 01 	mov	#299,	0(r15)	;#0x012b, 0x0000(r15)
    8742:	00 00 
    8744:	1f 42 1e 02 	mov	&0x021e,r15	
    8748:	0f 93       	tst	r15		
    874a:	02 24       	jz	$+6      	;abs 0x8750
    874c:	4f 43       	clr.b	r15		
    874e:	0f 3c       	jmp	$+32     	;abs 0x876e
        set_node_id(uart_data);
    8750:	1f 42 20 02 	mov	&0x0220,r15	
    8754:	b0 12 d6 81 	call	#0x81d6	
        led_red_off();
    8758:	b0 12 06 9d 	call	#0x9d06	
    }
    875c:	e1 3f       	jmp	$-60     	;abs 0x8720

    PT_END(pt);
    875e:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8762:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8766:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    876a:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    876e:	21 52       	add	#4,	r1	;r2 As==10
    8770:	34 41       	pop	r4		
    8772:	30 41       	ret			

00008774 <radio_cb>:
static char radio_rx_buffer[PKTLEN];
static char own_buffer[PKTLEN];
static int radio_rx_flag;

void radio_cb(uint8_t *buffer, int size, int8_t rssi)
{
    8774:	04 12       	push	r4		
    8776:	04 41       	mov	r1,	r4	
    8778:	24 53       	incd	r4		
    877a:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    877e:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    8782:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    8786:	c4 4d fc ff 	mov.b	r13,	-4(r4)	;0xfffc(r4)

        //printf(" in the call back %c %c \n",buffer[0]&0xFF,buffer[1]&0xFF);
        if (size > 0 && periodic_write_flag ==1)
    878a:	94 93 fa ff 	cmp	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    878e:	14 38       	jl	$+42     	;abs 0x87b8
    8790:	1f 42 18 02 	mov	&0x0218,r15	
    8794:	1f 93       	cmp	#1,	r15	;r3 As==01
    8796:	10 20       	jnz	$+34     	;abs 0x87b8
        {
            memcpy(radio_rx_buffer, buffer, PKTLEN);
    8798:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    879c:	3f 40 42 02 	mov	#578,	r15	;#0x0242
    87a0:	3d 40 1c 00 	mov	#28,	r13	;#0x001c
    87a4:	b0 12 c6 af 	call	#0xafc6	
            printhex(radio_rx_buffer,PKTLEN);
    87a8:	3e 40 1c 00 	mov	#28,	r14	;#0x001c
    87ac:	3f 40 42 02 	mov	#578,	r15	;#0x0242
    87b0:	b0 12 8a 81 	call	#0x818a	
            radio_rx_flag = 1;
    87b4:	92 43 7a 02 	mov	#1,	&0x027a	;r3 As==01
        {
            //DBG_PRINTF("msg packet error size=%d\r\n",size);
            //J'ai commenté la ligne supérieure pour la démo
        }

    cc2500_rx_enter();
    87b8:	b0 12 98 95 	call	#0x9598	
}
    87bc:	31 50 06 00 	add	#6,	r1	;#0x0006
    87c0:	34 41       	pop	r4		
    87c2:	30 41       	ret			

000087c4 <ezdisplay>:

void ezdisplay( char message[])
{
    87c4:	0b 12       	push	r11		
    87c6:	04 12       	push	r4		
    87c8:	04 41       	mov	r1,	r4	
    87ca:	24 52       	add	#4,	r4	;r2 As==10
    87cc:	31 50 f4 ff 	add	#-12,	r1	;#0xfff4
    87d0:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    char msproom=message[0]&0xFF;
    87d4:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    87d8:	e4 4f f4 ff 	mov.b	@r15,	-12(r4)	;0xfff4(r4)
    char mspsensor=message[1]&0xFF;
    87dc:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    87e0:	1f 53       	inc	r15		
    87e2:	e4 4f f5 ff 	mov.b	@r15,	-11(r4)	;0xfff5(r4)
    unsigned int time=0;
    87e6:	84 43 f0 ff 	mov	#0,	-16(r4)	;r3 As==00, 0xfff0(r4)
    
    printf("id:%c%c,",msproom,mspsensor);
    87ea:	5e 44 f5 ff 	mov.b	-11(r4),r14	;0xfff5(r4)
    87ee:	8e 11       	sxt	r14		
    87f0:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    87f4:	8f 11       	sxt	r15		
    87f6:	0e 12       	push	r14		
    87f8:	0f 12       	push	r15		
    87fa:	30 12 38 bc 	push	#-17352	;#0xbc38
    87fe:	b0 12 c0 b0 	call	#0xb0c0	
    8802:	31 50 06 00 	add	#6,	r1	;#0x0006
    int i=3; //index 2 is the space charactere
    8806:	b4 40 03 00 	mov	#3,	-14(r4)	;#0x0003, 0xfff2(r4)
    880a:	f2 ff 
    while( i < PKTLEN-1)
    880c:	49 3c       	jmp	$+148    	;abs 0x88a0
    {
    	char msptemperature1=message[i++];
    880e:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    8812:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    8816:	e4 4f f6 ff 	mov.b	@r15,	-10(r4)	;0xfff6(r4)
    881a:	94 53 f2 ff 	inc	-14(r4)	;0xfff2(r4)
   	char msptemperature2=message[i++];
    881e:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    8822:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    8826:	e4 4f f7 ff 	mov.b	@r15,	-9(r4)	;0xfff7(r4)
    882a:	94 53 f2 ff 	inc	-14(r4)	;0xfff2(r4)
   	if ((message[i-1]&0xFF) == 0x2E || (message[i-2]&0xFF) == 0x2E )
    882e:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    8832:	3f 53       	add	#-1,	r15	;r3 As==11
    8834:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    8838:	6f 4f       	mov.b	@r15,	r15	
    883a:	8f 11       	sxt	r15		
    883c:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    8840:	3f 90 2e 00 	cmp	#46,	r15	;#0x002e
    8844:	31 24       	jz	$+100    	;abs 0x88a8
    8846:	1f 44 f2 ff 	mov	-14(r4),r15	;0xfff2(r4)
    884a:	2f 83       	decd	r15		
    884c:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    8850:	6f 4f       	mov.b	@r15,	r15	
    8852:	8f 11       	sxt	r15		
    8854:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    8858:	3f 90 2e 00 	cmp	#46,	r15	;#0x002e
    885c:	25 24       	jz	$+76     	;abs 0x88a8
   	{
   		break;
   	}
    	int temperature=converter(msptemperature1, msptemperature2);
    885e:	5e 44 f7 ff 	mov.b	-9(r4),	r14	;0xfff7(r4)
    8862:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    8866:	b0 12 4c 82 	call	#0x824c	
    886a:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    	time += TIMER_SENSING_TEMP*TIMER_PERIOD_MS; //TIMER_SENSING_TEMP*TIMER_PERIOD_MS to get the time in ms (cf driver)
    886e:	b4 50 70 17 	add	#6000,	-16(r4)	;#0x1770, 0xfff0(r4)
    8872:	f0 ff 
    	printf("temperature: %d.%d,time:%u\n",temperature/10, temperature%10, time);
    8874:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    8878:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    887c:	b0 12 50 a4 	call	#0xa450	
    8880:	0b 4f       	mov	r15,	r11	
    8882:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    8886:	3e 40 0a 00 	mov	#10,	r14	;#0x000a
    888a:	b0 12 1e a4 	call	#0xa41e	
    888e:	14 12 f0 ff 	push	-16(r4)	;0xfff0(r4)
    8892:	0b 12       	push	r11		
    8894:	0f 12       	push	r15		
    8896:	30 12 41 bc 	push	#-17343	;#0xbc41
    889a:	b0 12 c0 b0 	call	#0xb0c0	
    889e:	31 52       	add	#8,	r1	;r2 As==11
    char mspsensor=message[1]&0xFF;
    unsigned int time=0;
    
    printf("id:%c%c,",msproom,mspsensor);
    int i=3; //index 2 is the space charactere
    while( i < PKTLEN-1)
    88a0:	b4 90 1b 00 	cmp	#27,	-14(r4)	;#0x001b, 0xfff2(r4)
    88a4:	f2 ff 
    88a6:	b3 3b       	jl	$-152    	;abs 0x880e
   	}
    	int temperature=converter(msptemperature1, msptemperature2);
    	time += TIMER_SENSING_TEMP*TIMER_PERIOD_MS; //TIMER_SENSING_TEMP*TIMER_PERIOD_MS to get the time in ms (cf driver)
    	printf("temperature: %d.%d,time:%u\n",temperature/10, temperature%10, time);
    }
}
    88a8:	31 50 0c 00 	add	#12,	r1	;#0x000c
    88ac:	34 41       	pop	r4		
    88ae:	3b 41       	pop	r11		
    88b0:	30 41       	ret			

000088b2 <thread_rx>:

static PT_THREAD(thread_rx(struct pt *pt))
{
    88b2:	04 12       	push	r4		
    88b4:	04 41       	mov	r1,	r4	
    88b6:	24 53       	incd	r4		
    88b8:	21 82       	sub	#4,	r1	;r2 As==10
    88ba:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    88be:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    88c2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    88c6:	2f 4f       	mov	@r15,	r15	
    88c8:	0f 93       	tst	r15		
    88ca:	04 24       	jz	$+10     	;abs 0x88d4
    88cc:	3f 90 6a 01 	cmp	#362,	r15	;#0x016a
    88d0:	06 24       	jz	$+14     	;abs 0x88de
    88d2:	16 3c       	jmp	$+46     	;abs 0x8900

    while(1)
    {
        PT_WAIT_UNTIL(pt, radio_rx_flag == 1);
    88d4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    88d8:	bf 40 6a 01 	mov	#362,	0(r15)	;#0x016a, 0x0000(r15)
    88dc:	00 00 
    88de:	1f 42 7a 02 	mov	&0x027a,r15	
    88e2:	1f 93       	cmp	#1,	r15	;r3 As==01
    88e4:	02 24       	jz	$+6      	;abs 0x88ea
    88e6:	4f 43       	clr.b	r15		
    88e8:	13 3c       	jmp	$+40     	;abs 0x8910
        led_green_on();
    88ea:	b0 12 de 9c 	call	#0x9cde	
        ezdisplay(radio_rx_buffer);
    88ee:	3f 40 42 02 	mov	#578,	r15	;#0x0242
    88f2:	b0 12 c4 87 	call	#0x87c4	
        radio_rx_flag = 0;
    88f6:	82 43 7a 02 	mov	#0,	&0x027a	;r3 As==00
        led_green_off();
    88fa:	b0 12 c8 9c 	call	#0x9cc8	
    }
    88fe:	ea 3f       	jmp	$-42     	;abs 0x88d4

    PT_END(pt);
    8900:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8904:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8908:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    890c:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    8910:	21 52       	add	#4,	r1	;r2 As==10
    8912:	34 41       	pop	r4		
    8914:	30 41       	ret			

00008916 <init_message>:




static void init_message()
{
    8916:	04 12       	push	r4		
    8918:	04 41       	mov	r1,	r4	
    891a:	24 53       	incd	r4		
    891c:	21 83       	decd	r1		
    unsigned int i;
    for(i = 0; i < PKTLEN; i++)
    891e:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc(r4)
    8922:	08 3c       	jmp	$+18     	;abs 0x8934
    {
        own_buffer[i] = 0x00;
    8924:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8928:	3f 50 5e 02 	add	#606,	r15	;#0x025e
    892c:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)


static void init_message()
{
    unsigned int i;
    for(i = 0; i < PKTLEN; i++)
    8930:	94 53 fc ff 	inc	-4(r4)		;0xfffc(r4)
    8934:	b4 90 1c 00 	cmp	#28,	-4(r4)	;#0x001c, 0xfffc(r4)
    8938:	fc ff 
    893a:	f4 2b       	jnc	$-22     	;abs 0x8924
    {
        own_buffer[i] = 0x00;
    }
    own_buffer[0] = (node_id>>8) &0xFF;
    893c:	1f 42 00 02 	mov	&0x0200,r15	
    8940:	8f 10       	swpb	r15		
    8942:	4f 4f       	mov.b	r15,	r15	
    8944:	4f 4f       	mov.b	r15,	r15	
    8946:	c2 4f 5e 02 	mov.b	r15,	&0x025e	
    own_buffer[1] = node_id & 0xFF;
    894a:	1f 42 00 02 	mov	&0x0200,r15	
    894e:	4f 4f       	mov.b	r15,	r15	
    8950:	c2 4f 5f 02 	mov.b	r15,	&0x025f	
    own_buffer[2] = 0x20;//hex code for SPACE char
    8954:	f2 40 20 00 	mov.b	#32,	&0x0260	;#0x0020
    8958:	60 02 
    current_buffer_pt = 3;
    895a:	b2 40 03 00 	mov	#3,	&0x021c	;#0x0003
    895e:	1c 02 
    
}
    8960:	21 53       	incd	r1		
    8962:	34 41       	pop	r4		
    8964:	30 41       	ret			

00008966 <write_message>:


static void write_message()
{
    8966:	04 12       	push	r4		
    8968:	04 41       	mov	r1,	r4	
    896a:	24 53       	incd	r4		
    //finish the sending buffer with a dot 
    own_buffer[current_buffer_pt] = 0x2E; //dot hex code
    896c:	1f 42 1c 02 	mov	&0x021c,r15	
    8970:	ff 40 2e 00 	mov.b	#46,	606(r15);#0x002e, 0x025e(r15)
    8974:	5e 02 
    current_buffer_pt = 0;
    8976:	82 43 1c 02 	mov	#0,	&0x021c	;r3 As==00
    led_green_on();
    897a:	b0 12 de 9c 	call	#0x9cde	
    ezdisplay(own_buffer);
    897e:	3f 40 5e 02 	mov	#606,	r15	;#0x025e
    8982:	b0 12 c4 87 	call	#0x87c4	
    led_green_off();
    8986:	b0 12 c8 9c 	call	#0x9cc8	
   
}
    898a:	34 41       	pop	r4		
    898c:	30 41       	ret			

0000898e <thread_periodic_writeTemp>:



static PT_THREAD(thread_periodic_writeTemp(struct pt *pt))
{
    898e:	04 12       	push	r4		
    8990:	04 41       	mov	r1,	r4	
    8992:	24 53       	incd	r4		
    8994:	21 82       	sub	#4,	r1	;r2 As==10
    8996:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    899a:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    899e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    89a2:	2f 4f       	mov	@r15,	r15	
    89a4:	3f 90 99 01 	cmp	#409,	r15	;#0x0199
    89a8:	0a 24       	jz	$+22     	;abs 0x89be
    89aa:	3f 90 9c 01 	cmp	#412,	r15	;#0x019c
    89ae:	16 24       	jz	$+46     	;abs 0x89dc
    89b0:	0f 93       	tst	r15		
    89b2:	29 20       	jnz	$+84     	;abs 0x8a06

    while(1)
    {
        PT_WAIT_UNTIL(pt,periodic_write_flag==1);
    89b4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    89b8:	bf 40 99 01 	mov	#409,	0(r15)	;#0x0199, 0x0000(r15)
    89bc:	00 00 
    89be:	1f 42 18 02 	mov	&0x0218,r15	
    89c2:	1f 93       	cmp	#1,	r15	;r3 As==01
    89c4:	02 24       	jz	$+6      	;abs 0x89ca
    89c6:	4f 43       	clr.b	r15		
    89c8:	26 3c       	jmp	$+78     	;abs 0x8a16
        TIMER_WRITE = 0;
    89ca:	82 43 0e 02 	mov	#0,	&0x020e	;r3 As==00
        init_message();
    89ce:	b0 12 16 89 	call	#0x8916	
        PT_WAIT_UNTIL(pt, node_id != NODE_ID_UNDEFINED && timer_reached( TIMER_WRITE, TIMER_SEND) && periodic_write_flag==1);
    89d2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    89d6:	bf 40 9c 01 	mov	#412,	0(r15)	;#0x019c, 0x0000(r15)
    89da:	00 00 
    89dc:	1f 42 00 02 	mov	&0x0200,r15	
    89e0:	0f 93       	tst	r15		
    89e2:	0c 24       	jz	$+26     	;abs 0x89fc
    89e4:	1f 42 0e 02 	mov	&0x020e,r15	
    89e8:	3e 40 71 17 	mov	#6001,	r14	;#0x1771
    89ec:	b0 12 68 81 	call	#0x8168	
    89f0:	0f 93       	tst	r15		
    89f2:	04 24       	jz	$+10     	;abs 0x89fc
    89f4:	1f 42 18 02 	mov	&0x0218,r15	
    89f8:	1f 93       	cmp	#1,	r15	;r3 As==01
    89fa:	02 24       	jz	$+6      	;abs 0x8a00
    89fc:	4f 43       	clr.b	r15		
    89fe:	0b 3c       	jmp	$+24     	;abs 0x8a16
        write_message();
    8a00:	b0 12 66 89 	call	#0x8966	
    }
    8a04:	d7 3f       	jmp	$-80     	;abs 0x89b4

    PT_END(pt);
    8a06:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8a0a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8a0e:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    8a12:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    8a16:	21 52       	add	#4,	r1	;r2 As==10
    8a18:	34 41       	pop	r4		
    8a1a:	30 41       	ret			

00008a1c <register_temperature>:
 * TEMP SENSOR
 */
 
 /* to be called from within a protothread */
static void register_temperature()
{
    8a1c:	04 12       	push	r4		
    8a1e:	04 41       	mov	r1,	r4	
    8a20:	24 53       	incd	r4		
    8a22:	21 82       	sub	#4,	r1	;r2 As==10
    
    int temperature = adc10_sample_temp();
    8a24:	b0 12 60 8b 	call	#0x8b60	
    8a28:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    /* msp430 is little endian, convert temperature to network order */
    char *pt = (char *) &temperature;    
    8a2c:	3f 40 fa ff 	mov	#-6,	r15	;#0xfffa
    8a30:	0f 54       	add	r4,	r15	
    8a32:	2f 53       	incd	r15		
    8a34:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    own_buffer[current_buffer_pt++] = pt[1];
    8a38:	1f 42 1c 02 	mov	&0x021c,r15	
    8a3c:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    8a40:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    8a44:	cf 4e 5e 02 	mov.b	r14,	606(r15);0x025e(r15)
    8a48:	1f 53       	inc	r15		
    8a4a:	82 4f 1c 02 	mov	r15,	&0x021c	
    own_buffer[current_buffer_pt++] = pt[0];
    8a4e:	1f 42 1c 02 	mov	&0x021c,r15	
    8a52:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    8a56:	6e 4e       	mov.b	@r14,	r14	
    8a58:	cf 4e 5e 02 	mov.b	r14,	606(r15);0x025e(r15)
    8a5c:	1f 53       	inc	r15		
    8a5e:	82 4f 1c 02 	mov	r15,	&0x021c	
    
}
    8a62:	21 52       	add	#4,	r1	;r2 As==10
    8a64:	34 41       	pop	r4		
    8a66:	30 41       	ret			

00008a68 <thread_periodic_temperature>:

static PT_THREAD(thread_periodic_temperature(struct pt *pt))
{
    8a68:	04 12       	push	r4		
    8a6a:	04 41       	mov	r1,	r4	
    8a6c:	24 53       	incd	r4		
    8a6e:	21 82       	sub	#4,	r1	;r2 As==10
    8a70:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    8a74:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    8a78:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8a7c:	2f 4f       	mov	@r15,	r15	
    8a7e:	3f 90 ba 01 	cmp	#442,	r15	;#0x01ba
    8a82:	0a 24       	jz	$+22     	;abs 0x8a98
    8a84:	3f 90 bc 01 	cmp	#444,	r15	;#0x01bc
    8a88:	14 24       	jz	$+42     	;abs 0x8ab2
    8a8a:	0f 93       	tst	r15		
    8a8c:	27 20       	jnz	$+80     	;abs 0x8adc

    while(1)
    {
        PT_WAIT_UNTIL(pt,periodic_temp_flag==1);
    8a8e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8a92:	bf 40 ba 01 	mov	#442,	0(r15)	;#0x01ba, 0x0000(r15)
    8a96:	00 00 
    8a98:	1f 42 1a 02 	mov	&0x021a,r15	
    8a9c:	1f 93       	cmp	#1,	r15	;r3 As==01
    8a9e:	02 24       	jz	$+6      	;abs 0x8aa4
    8aa0:	4f 43       	clr.b	r15		
    8aa2:	24 3c       	jmp	$+74     	;abs 0x8aec
        TIMER_TEMP = 0;
    8aa4:	82 43 0c 02 	mov	#0,	&0x020c	;r3 As==00
        PT_WAIT_UNTIL(pt, node_id != NODE_ID_UNDEFINED && timer_reached( TIMER_TEMP, TIMER_SENSING_TEMP) && periodic_temp_flag==1);
    8aa8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8aac:	bf 40 bc 01 	mov	#444,	0(r15)	;#0x01bc, 0x0000(r15)
    8ab0:	00 00 
    8ab2:	1f 42 00 02 	mov	&0x0200,r15	
    8ab6:	0f 93       	tst	r15		
    8ab8:	0c 24       	jz	$+26     	;abs 0x8ad2
    8aba:	1f 42 0c 02 	mov	&0x020c,r15	
    8abe:	3e 40 58 02 	mov	#600,	r14	;#0x0258
    8ac2:	b0 12 68 81 	call	#0x8168	
    8ac6:	0f 93       	tst	r15		
    8ac8:	04 24       	jz	$+10     	;abs 0x8ad2
    8aca:	1f 42 1a 02 	mov	&0x021a,r15	
    8ace:	1f 93       	cmp	#1,	r15	;r3 As==01
    8ad0:	02 24       	jz	$+6      	;abs 0x8ad6
    8ad2:	4f 43       	clr.b	r15		
    8ad4:	0b 3c       	jmp	$+24     	;abs 0x8aec
        register_temperature();
    8ad6:	b0 12 1c 8a 	call	#0x8a1c	
    }
    8ada:	d9 3f       	jmp	$-76     	;abs 0x8a8e

    PT_END(pt);
    8adc:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8ae0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8ae4:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    8ae8:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    8aec:	21 52       	add	#4,	r1	;r2 As==10
    8aee:	34 41       	pop	r4		
    8af0:	30 41       	ret			

00008af2 <adc10_start>:
/* **************************************************
 * 
 * **************************************************/

void adc10_start(void)
{
    8af2:	04 12       	push	r4		
    8af4:	04 41       	mov	r1,	r4	
    8af6:	24 53       	incd	r4		
		coeff_1 = 355;//slope in 10-² mV
    8af8:	b2 40 63 01 	mov	#355,	&0x0286	;#0x0163
    8afc:	86 02 
		coeff_2 = 986;//origin point
    8afe:	b2 40 da 03 	mov	#986,	&0x0288	;#0x03da
    8b02:	88 02 
}
    8b04:	34 41       	pop	r4		
    8b06:	30 41       	ret			

00008b08 <adc10_calibrate>:

void adc10_calibrate(uint16_t coeff1, uint16_t coeff2) {
    8b08:	04 12       	push	r4		
    8b0a:	04 41       	mov	r1,	r4	
    8b0c:	24 53       	incd	r4		
    8b0e:	21 82       	sub	#4,	r1	;r2 As==10
    8b10:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8b14:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	if (coeff1 !=0){
    8b18:	84 93 fa ff 	tst	-6(r4)		;0xfffa(r4)
    8b1c:	04 24       	jz	$+10     	;abs 0x8b26
		coeff_1 = coeff1;
    8b1e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    8b22:	82 4f 86 02 	mov	r15,	&0x0286	
	}
	if (coeff2 !=0){
    8b26:	84 93 fc ff 	tst	-4(r4)		;0xfffc(r4)
    8b2a:	04 24       	jz	$+10     	;abs 0x8b34
		coeff_2 = coeff2;
    8b2c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8b30:	82 4f 88 02 	mov	r15,	&0x0288	
	}
}
    8b34:	21 52       	add	#4,	r1	;r2 As==10
    8b36:	34 41       	pop	r4		
    8b38:	30 41       	ret			

00008b3a <adc10_stop>:
/* **************************************************
 * 
 * **************************************************/

void adc10_stop(void)
{
    8b3a:	04 12       	push	r4		
    8b3c:	04 41       	mov	r1,	r4	
    8b3e:	24 53       	incd	r4		
	//  ADC10CTL0  = 0;
	ADC10CTL0 &= ~(REFON + ADC10ON);	// turn off A/D to save power
    8b40:	1f 42 b0 01 	mov	&0x01b0,r15	
    8b44:	3f f0 cf ff 	and	#-49,	r15	;#0xffcf
    8b48:	82 4f b0 01 	mov	r15,	&0x01b0	
}
    8b4c:	34 41       	pop	r4		
    8b4e:	30 41       	ret			

00008b50 <adc10irq>:
/* **************************************************
 * 
 * **************************************************/

ISR(ADC10, adc10irq)
{
    8b50:	04 12       	push	r4		
    8b52:	04 41       	mov	r1,	r4	
    8b54:	24 53       	incd	r4		
	LPM_OFF_ON_EXIT;
    8b56:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    8b5a:	00 00 
}
    8b5c:	34 41       	pop	r4		
    8b5e:	00 13       	reti			

00008b60 <adc10_sample_temp>:

#define TEMPOFFSET_ 0x10F4
SFRB(TEMPOFFSET, TEMPOFFSET_);

int adc10_sample_temp(void)
{
    8b60:	0b 12       	push	r11		
    8b62:	0a 12       	push	r10		
    8b64:	09 12       	push	r9		
    8b66:	08 12       	push	r8		
    8b68:	07 12       	push	r7		
    8b6a:	06 12       	push	r6		
    8b6c:	04 12       	push	r4		
    8b6e:	04 41       	mov	r1,	r4	
    8b70:	34 50 0e 00 	add	#14,	r4	;#0x000e
    8b74:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
	volatile long result;
	int degC;

	ADC10CTL1 = INCH_10 + ADC10DIV_4;	// Temp Sensor ADC10CLK/3
    8b78:	b2 40 80 a0 	mov	#-24448,&0x01b2	;#0xa080
    8b7c:	b2 01 
	ADC10CTL0 = SREF_1 + ADC10SHT_3 + REFON + ADC10ON + ADC10IE + ADC10SR;
    8b7e:	b2 40 38 3c 	mov	#15416,	&0x01b0	;#0x3c38
    8b82:	b0 01 
    //here we supposed Vref =1.5V since there is no REF2_5V used
	loop_4_cycles(60);	// delay to allow reference to settle (240 cycles)
    8b84:	3e 40 3c 00 	mov	#60,	r14	;#0x003c
    8b88:	0f 43       	clr	r15		
    8b8a:	b0 12 84 9b 	call	#0x9b84	
	ADC10CTL0 |= ENC + ADC10SC;	// Sampling and conversion start
    8b8e:	1f 42 b0 01 	mov	&0x01b0,r15	
    8b92:	3f d0 03 00 	bis	#3,	r15	;#0x0003
    8b96:	82 4f b0 01 	mov	r15,	&0x01b0	

	LPM(0);
    8b9a:	32 d0 10 00 	bis	#16,	r2	;#0x0010

	result = ADC10MEM;
    8b9e:	1f 42 b4 01 	mov	&0x01b4,r15	
    8ba2:	06 4f       	mov	r15,	r6	
    8ba4:	07 43       	clr	r7		
    8ba6:	84 46 ee ff 	mov	r6,	-18(r4)	;0xffee(r4)
    8baa:	84 47 f0 ff 	mov	r7,	-16(r4)	;0xfff0(r4)
	ADC10CTL0 &= ~ENC;
    8bae:	1f 42 b0 01 	mov	&0x01b0,r15	
    8bb2:	3f f0 fd ff 	and	#-3,	r15	;#0xfffd
    8bb6:	82 4f b0 01 	mov	r15,	&0x01b0	
	ADC10CTL0 &= ~(REFON + ADC10ON);	// turn off A/D to save power
    8bba:	1f 42 b0 01 	mov	&0x01b0,r15	
    8bbe:	3f f0 cf ff 	and	#-49,	r15	;#0xffcf
    8bc2:	82 4f b0 01 	mov	r15,	&0x01b0	
	// oC = ((A10*1500/1024-986mV)*100/355
	// VTEMP=0.00355(TEMPC)+0.986

    //1000 for 1/10-²mv*10 to have  temperature transmitted as an integer 321 for 32.1

    degC = ((float)result*1500/1024-coeff_2)*1000/coeff_1;
    8bc6:	1e 44 ee ff 	mov	-18(r4),r14	;0xffee(r4)
    8bca:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    8bce:	b0 12 fa aa 	call	#0xaafa	
    8bd2:	3c 40 00 80 	mov	#-32768,r12	;#0x8000
    8bd6:	3d 40 bb 44 	mov	#17595,	r13	;#0x44bb
    8bda:	b0 12 86 a7 	call	#0xa786	
    8bde:	0c 43       	clr	r12		
    8be0:	3d 40 80 44 	mov	#17536,	r13	;#0x4480
    8be4:	b0 12 aa a9 	call	#0xa9aa	
    8be8:	06 4e       	mov	r14,	r6	
    8bea:	07 4f       	mov	r15,	r7	
    8bec:	1f 42 88 02 	mov	&0x0288,r15	
    8bf0:	08 4f       	mov	r15,	r8	
    8bf2:	0f 48       	mov	r8,	r15	
    8bf4:	8f 10       	swpb	r15		
    8bf6:	8f 11       	sxt	r15		
    8bf8:	8f 10       	swpb	r15		
    8bfa:	8f 11       	sxt	r15		
    8bfc:	09 4f       	mov	r15,	r9	
    8bfe:	0e 48       	mov	r8,	r14	
    8c00:	0f 49       	mov	r9,	r15	
    8c02:	b0 12 fa aa 	call	#0xaafa	
    8c06:	0c 4e       	mov	r14,	r12	
    8c08:	0d 4f       	mov	r15,	r13	
    8c0a:	0e 46       	mov	r6,	r14	
    8c0c:	0f 47       	mov	r7,	r15	
    8c0e:	b0 12 36 a7 	call	#0xa736	
    8c12:	0c 43       	clr	r12		
    8c14:	3d 40 7a 44 	mov	#17530,	r13	;#0x447a
    8c18:	b0 12 86 a7 	call	#0xa786	
    8c1c:	08 4e       	mov	r14,	r8	
    8c1e:	09 4f       	mov	r15,	r9	
    8c20:	1f 42 86 02 	mov	&0x0286,r15	
    8c24:	0a 4f       	mov	r15,	r10	
    8c26:	0f 4a       	mov	r10,	r15	
    8c28:	8f 10       	swpb	r15		
    8c2a:	8f 11       	sxt	r15		
    8c2c:	8f 10       	swpb	r15		
    8c2e:	8f 11       	sxt	r15		
    8c30:	0b 4f       	mov	r15,	r11	
    8c32:	0e 4a       	mov	r10,	r14	
    8c34:	0f 4b       	mov	r11,	r15	
    8c36:	b0 12 fa aa 	call	#0xaafa	
    8c3a:	0c 4e       	mov	r14,	r12	
    8c3c:	0d 4f       	mov	r15,	r13	
    8c3e:	0e 48       	mov	r8,	r14	
    8c40:	0f 49       	mov	r9,	r15	
    8c42:	b0 12 aa a9 	call	#0xa9aa	
    8c46:	b0 12 a0 ab 	call	#0xaba0	
    8c4a:	84 4e ec ff 	mov	r14,	-20(r4)	;0xffec(r4)
	degC = ((temp - 673) * 4230) / 1024;

	   if( TEMPOFFSET != 0xFFFF )
	   degC += TEMPOFFSET;
	printf("degC after offset : ", degC);*/
	return degC;
    8c4e:	1f 44 ec ff 	mov	-20(r4),r15	;0xffec(r4)
}
    8c52:	31 50 06 00 	add	#6,	r1	;#0x0006
    8c56:	34 41       	pop	r4		
    8c58:	36 41       	pop	r6		
    8c5a:	37 41       	pop	r7		
    8c5c:	38 41       	pop	r8		
    8c5e:	39 41       	pop	r9		
    8c60:	3a 41       	pop	r10		
    8c62:	3b 41       	pop	r11		
    8c64:	30 41       	ret			

00008c66 <adc10_sample_avcc>:
/* **************************************************
 * 
 * **************************************************/

int adc10_sample_avcc(void)
{
    8c66:	0b 12       	push	r11		
    8c68:	0a 12       	push	r10		
    8c6a:	04 12       	push	r4		
    8c6c:	04 41       	mov	r1,	r4	
    8c6e:	34 50 06 00 	add	#6,	r4	;#0x0006
    8c72:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
	volatile long result;
	unsigned int volt;

	ADC10CTL1 = INCH_11;	// AVcc/2
    8c76:	b2 40 00 b0 	mov	#-20480,&0x01b2	;#0xb000
    8c7a:	b2 01 
	ADC10CTL0 = SREF_1 + ADC10SHT_2 + REFON + ADC10ON + ADC10IE + REF2_5V;
    8c7c:	b2 40 78 30 	mov	#12408,	&0x01b0	;#0x3078
    8c80:	b0 01 

	loop_4_cycles(60);	// delay to allow reference to settle (240 cycles)
    8c82:	3e 40 3c 00 	mov	#60,	r14	;#0x003c
    8c86:	0f 43       	clr	r15		
    8c88:	b0 12 84 9b 	call	#0x9b84	

	ADC10CTL0 |= ENC + ADC10SC;	// Sampling and conversion start
    8c8c:	1f 42 b0 01 	mov	&0x01b0,r15	
    8c90:	3f d0 03 00 	bis	#3,	r15	;#0x0003
    8c94:	82 4f b0 01 	mov	r15,	&0x01b0	

	LPM(0);
    8c98:	32 d0 10 00 	bis	#16,	r2	;#0x0010

	result = ADC10MEM;
    8c9c:	1f 42 b4 01 	mov	&0x01b4,r15	
    8ca0:	0a 4f       	mov	r15,	r10	
    8ca2:	0b 43       	clr	r11		
    8ca4:	84 4a f6 ff 	mov	r10,	-10(r4)	;0xfff6(r4)
    8ca8:	84 4b f8 ff 	mov	r11,	-8(r4)	;0xfff8(r4)
	ADC10CTL0 &= ~ENC;
    8cac:	1f 42 b0 01 	mov	&0x01b0,r15	
    8cb0:	3f f0 fd ff 	and	#-3,	r15	;#0xfffd
    8cb4:	82 4f b0 01 	mov	r15,	&0x01b0	
	ADC10CTL0 &= ~(REFON + ADC10ON);	// turn off A/D to save power
    8cb8:	1f 42 b0 01 	mov	&0x01b0,r15	
    8cbc:	3f f0 cf ff 	and	#-49,	r15	;#0xffcf
    8cc0:	82 4f b0 01 	mov	r15,	&0x01b0	

	volt = (result * 25) / 512;
    8cc4:	1a 44 f6 ff 	mov	-10(r4),r10	;0xfff6(r4)
    8cc8:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    8ccc:	0c 4a       	mov	r10,	r12	
    8cce:	0d 4b       	mov	r11,	r13	
    8cd0:	0e 4c       	mov	r12,	r14	
    8cd2:	0f 4d       	mov	r13,	r15	
    8cd4:	0e 5e       	rla	r14		
    8cd6:	0f 6f       	rlc	r15		
    8cd8:	0e 5e       	rla	r14		
    8cda:	0f 6f       	rlc	r15		
    8cdc:	0c 4e       	mov	r14,	r12	
    8cde:	0d 4f       	mov	r15,	r13	
    8ce0:	0c 5a       	add	r10,	r12	
    8ce2:	0d 6b       	addc	r11,	r13	
    8ce4:	0e 4c       	mov	r12,	r14	
    8ce6:	0f 4d       	mov	r13,	r15	
    8ce8:	0e 5e       	rla	r14		
    8cea:	0f 6f       	rlc	r15		
    8cec:	0e 5e       	rla	r14		
    8cee:	0f 6f       	rlc	r15		
    8cf0:	0e 5c       	add	r12,	r14	
    8cf2:	0f 6d       	addc	r13,	r15	
    8cf4:	0f 93       	tst	r15		
    8cf6:	04 38       	jl	$+10     	;abs 0x8d00
    8cf8:	1f 93       	cmp	#1,	r15	;r3 As==01
    8cfa:	05 34       	jge	$+12     	;abs 0x8d06
    8cfc:	0e 93       	tst	r14		
    8cfe:	03 2c       	jc	$+8      	;abs 0x8d06
    8d00:	3e 50 ff 01 	add	#511,	r14	;#0x01ff
    8d04:	0f 63       	adc	r15		
    8d06:	8e 10       	swpb	r14		
    8d08:	8f 10       	swpb	r15		
    8d0a:	4e ef       	xor.b	r15,	r14	
    8d0c:	0e ef       	xor	r15,	r14	
    8d0e:	8f 11       	sxt	r15		
    8d10:	0f 11       	rra	r15		
    8d12:	0e 10       	rrc	r14		
    8d14:	84 4e f4 ff 	mov	r14,	-12(r4)	;0xfff4(r4)
	return volt;
    8d18:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
}
    8d1c:	31 50 06 00 	add	#6,	r1	;#0x0006
    8d20:	34 41       	pop	r4		
    8d22:	3a 41       	pop	r10		
    8d24:	3b 41       	pop	r11		
    8d26:	30 41       	ret			

00008d28 <CC2500_HW_GDO0_IRQ_ON_ASSERT>:
#define SIIF static inline int

#define GDOPORT(x) P2##x

SIVF CC2500_HW_GDO0_IRQ_ON_ASSERT(void)
{
    8d28:	04 12       	push	r4		
    8d2a:	04 41       	mov	r1,	r4	
    8d2c:	24 53       	incd	r4		
	GDOPORT(IES) &= ~(GDO0_MASK);
    8d2e:	5f 42 2c 00 	mov.b	&0x002c,r15	
    8d32:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8d36:	c2 4f 2c 00 	mov.b	r15,	&0x002c	
}
    8d3a:	34 41       	pop	r4		
    8d3c:	30 41       	ret			

00008d3e <CC2500_HW_GDO2_IRQ_ON_ASSERT>:

SIVF CC2500_HW_GDO2_IRQ_ON_ASSERT(void)
{
    8d3e:	04 12       	push	r4		
    8d40:	04 41       	mov	r1,	r4	
    8d42:	24 53       	incd	r4		
	GDOPORT(IES) &= ~(GDO2_MASK);
    8d44:	5f 42 2c 00 	mov.b	&0x002c,r15	
    8d48:	7f f0 7f 00 	and.b	#127,	r15	;#0x007f
    8d4c:	c2 4f 2c 00 	mov.b	r15,	&0x002c	
}
    8d50:	34 41       	pop	r4		
    8d52:	30 41       	ret			

00008d54 <CC2500_HW_GDO0_DINT>:
{
	GDOPORT(IES) |= GDO2_MASK;
}

SIVF CC2500_HW_GDO0_DINT(void)
{
    8d54:	04 12       	push	r4		
    8d56:	04 41       	mov	r1,	r4	
    8d58:	24 53       	incd	r4		
	GDOPORT(IE) &= ~(GDO0_MASK);
    8d5a:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8d5e:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8d62:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
}
    8d66:	34 41       	pop	r4		
    8d68:	30 41       	ret			

00008d6a <CC2500_HW_GDO2_DINT>:

SIVF CC2500_HW_GDO2_DINT(void)
{
    8d6a:	04 12       	push	r4		
    8d6c:	04 41       	mov	r1,	r4	
    8d6e:	24 53       	incd	r4		
	GDOPORT(IE) &= ~(GDO2_MASK);
    8d70:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8d74:	7f f0 7f 00 	and.b	#127,	r15	;#0x007f
    8d78:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
}
    8d7c:	34 41       	pop	r4		
    8d7e:	30 41       	ret			

00008d80 <CC2500_HW_GDO0_EINT>:

SIVF CC2500_HW_GDO0_EINT(void)
{
    8d80:	04 12       	push	r4		
    8d82:	04 41       	mov	r1,	r4	
    8d84:	24 53       	incd	r4		
	GDOPORT(IE) |= GDO0_MASK;
    8d86:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8d8a:	7f d0 40 00 	bis.b	#64,	r15	;#0x0040
    8d8e:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
}
    8d92:	34 41       	pop	r4		
    8d94:	30 41       	ret			

00008d96 <CC2500_HW_GDO0_CLEAR_FLAG>:
{
	GDOPORT(IE) |= GDO2_MASK;
}

SIVF CC2500_HW_GDO0_CLEAR_FLAG(void)
{
    8d96:	04 12       	push	r4		
    8d98:	04 41       	mov	r1,	r4	
    8d9a:	24 53       	incd	r4		
	GDOPORT(IFG) &= ~(GDO0_MASK);
    8d9c:	5f 42 2b 00 	mov.b	&0x002b,r15	
    8da0:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8da4:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
}
    8da8:	34 41       	pop	r4		
    8daa:	30 41       	ret			

00008dac <CC2500_HW_GDO2_CLEAR_FLAG>:

SIVF CC2500_HW_GDO2_CLEAR_FLAG(void)
{
    8dac:	04 12       	push	r4		
    8dae:	04 41       	mov	r1,	r4	
    8db0:	24 53       	incd	r4		
	GDOPORT(IFG) &= ~(GDO2_MASK);
    8db2:	5f 42 2b 00 	mov.b	&0x002b,r15	
    8db6:	7f f0 7f 00 	and.b	#127,	r15	;#0x007f
    8dba:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
}
    8dbe:	34 41       	pop	r4		
    8dc0:	30 41       	ret			

00008dc2 <CONFIG_GDO0_PIN_AS_INPUT>:
{
	return (GDOPORT(IN) >> GDO2_SHIFT) & 0x1;
}

SIVF CONFIG_GDO0_PIN_AS_INPUT(void)
{
    8dc2:	04 12       	push	r4		
    8dc4:	04 41       	mov	r1,	r4	
    8dc6:	24 53       	incd	r4		
	GDOPORT(SEL) &= ~(GDO0_MASK);
    8dc8:	5f 42 2e 00 	mov.b	&0x002e,r15	
    8dcc:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8dd0:	c2 4f 2e 00 	mov.b	r15,	&0x002e	
}
    8dd4:	34 41       	pop	r4		
    8dd6:	30 41       	ret			

00008dd8 <CC2500_HW_INIT>:
{
	return (GDOPORT(IN) & GDO0_MASK);
}

SIVF CC2500_HW_INIT(void)
{
    8dd8:	04 12       	push	r4		
    8dda:	04 41       	mov	r1,	r4	
    8ddc:	24 53       	incd	r4		
	GDOPORT(SEL) &= ~(GDO0_MASK | GDO2_MASK);
    8dde:	5f 42 2e 00 	mov.b	&0x002e,r15	
    8de2:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8de6:	c2 4f 2e 00 	mov.b	r15,	&0x002e	
	GDOPORT(DIR) &= ~(GDO0_MASK | GDO2_MASK);
    8dea:	5f 42 2a 00 	mov.b	&0x002a,r15	
    8dee:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8df2:	c2 4f 2a 00 	mov.b	r15,	&0x002a	
	GDOPORT(IE) &= ~(GDO0_MASK | GDO2_MASK);
    8df6:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8dfa:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8dfe:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
	GDOPORT(IES) &= ~(GDO0_MASK | GDO2_MASK);
    8e02:	5f 42 2c 00 	mov.b	&0x002c,r15	
    8e06:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8e0a:	c2 4f 2c 00 	mov.b	r15,	&0x002c	
	GDOPORT(IFG) &= ~(GDO0_MASK | GDO2_MASK);
    8e0e:	5f 42 2b 00 	mov.b	&0x002b,r15	
    8e12:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8e16:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
	GDOPORT(REN) |= (GDO0_MASK | GDO2_MASK);
    8e1a:	5f 42 2f 00 	mov.b	&0x002f,r15	
    8e1e:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    8e22:	c2 4f 2f 00 	mov.b	r15,	&0x002f	
}
    8e26:	34 41       	pop	r4		
    8e28:	30 41       	ret			

00008e2a <CC2500_SPI_TX>:
#define CC2500_SPI_ENABLE()         spi_select_radio()
#define CC2500_SPI_DISABLE()        spi_deselect_radio()
#define CC2500_HW_CHECK_MISO_HIGH() spi_check_miso_high()

void CC2500_SPI_TX(int x)
{
    8e2a:	04 12       	push	r4		
    8e2c:	04 41       	mov	r1,	r4	
    8e2e:	24 53       	incd	r4		
    8e30:	21 83       	decd	r1		
    8e32:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	cc2500_status_register = spi_tx_rx(x);
    8e36:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8e3a:	b0 12 12 9e 	call	#0x9e12	
    8e3e:	4f 4f       	mov.b	r15,	r15	
    8e40:	c2 4f a8 02 	mov.b	r15,	&0x02a8	
}
    8e44:	21 53       	incd	r1		
    8e46:	34 41       	pop	r4		
    8e48:	30 41       	ret			

00008e4a <CC2500_SPI_STROBE>:

#define CC2500_SPI_RX() spi_rx()

void CC2500_SPI_STROBE(int s)
{
    8e4a:	04 12       	push	r4		
    8e4c:	04 41       	mov	r1,	r4	
    8e4e:	24 53       	incd	r4		
    8e50:	21 83       	decd	r1		
    8e52:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	CC2500_SPI_ENABLE();
    8e56:	b0 12 f6 9e 	call	#0x9ef6	
	CC2500_SPI_TX(s | CC2500_REG_ACCESS_OP_WRITE |
    8e5a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8e5e:	b0 12 2a 8e 	call	#0x8e2a	
		      CC2500_REG_ACCESS_NOBURST);
	CC2500_SPI_DISABLE();
    8e62:	b0 12 0c 9f 	call	#0x9f0c	
}
    8e66:	21 53       	incd	r1		
    8e68:	34 41       	pop	r4		
    8e6a:	30 41       	ret			

00008e6c <CC2500_SPI_WREG>:

void CC2500_SPI_WREG(int a, int v)
{
    8e6c:	04 12       	push	r4		
    8e6e:	04 41       	mov	r1,	r4	
    8e70:	24 53       	incd	r4		
    8e72:	21 82       	sub	#4,	r1	;r2 As==10
    8e74:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8e78:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	CC2500_SPI_ENABLE();
    8e7c:	b0 12 f6 9e 	call	#0x9ef6	
	CC2500_SPI_TX(a | CC2500_REG_ACCESS_OP_WRITE |
    8e80:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    8e84:	b0 12 2a 8e 	call	#0x8e2a	
		      CC2500_REG_ACCESS_NOBURST);
	CC2500_SPI_TX(v);
    8e88:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8e8c:	b0 12 2a 8e 	call	#0x8e2a	
	CC2500_SPI_DISABLE();
    8e90:	b0 12 0c 9f 	call	#0x9f0c	
}
    8e94:	21 52       	add	#4,	r1	;r2 As==10
    8e96:	34 41       	pop	r4		
    8e98:	30 41       	ret			

00008e9a <CC2500_SPI_RREG>:

char CC2500_SPI_RREG(int a)
{
    8e9a:	04 12       	push	r4		
    8e9c:	04 41       	mov	r1,	r4	
    8e9e:	24 53       	incd	r4		
    8ea0:	21 82       	sub	#4,	r1	;r2 As==10
    8ea2:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	char r;
	CC2500_SPI_ENABLE();
    8ea6:	b0 12 f6 9e 	call	#0x9ef6	
	CC2500_SPI_TX(a | CC2500_REG_ACCESS_OP_READ |
    8eaa:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8eae:	3f d0 80 00 	bis	#128,	r15	;#0x0080
    8eb2:	b0 12 2a 8e 	call	#0x8e2a	
		      CC2500_REG_ACCESS_NOBURST);
	r = CC2500_SPI_RX();
    8eb6:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8eba:	b0 12 12 9e 	call	#0x9e12	
    8ebe:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
	CC2500_SPI_DISABLE();
    8ec2:	b0 12 0c 9f 	call	#0x9f0c	
	return r;
    8ec6:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
}
    8eca:	21 52       	add	#4,	r1	;r2 As==10
    8ecc:	34 41       	pop	r4		
    8ece:	30 41       	ret			

00008ed0 <CC2500_SPI_ROREG>:

char CC2500_SPI_ROREG(int a)
{
    8ed0:	04 12       	push	r4		
    8ed2:	04 41       	mov	r1,	r4	
    8ed4:	24 53       	incd	r4		
    8ed6:	21 82       	sub	#4,	r1	;r2 As==10
    8ed8:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	char r;
	CC2500_SPI_ENABLE();
    8edc:	b0 12 f6 9e 	call	#0x9ef6	
	CC2500_SPI_TX(a | CC2500_REG_ACCESS_OP_READ | CC2500_REG_ACCESS_BURST);
    8ee0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8ee4:	3f d0 c0 00 	bis	#192,	r15	;#0x00c0
    8ee8:	b0 12 2a 8e 	call	#0x8e2a	
	r = CC2500_SPI_RX();
    8eec:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8ef0:	b0 12 12 9e 	call	#0x9e12	
    8ef4:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
	CC2500_SPI_DISABLE();
    8ef8:	b0 12 0c 9f 	call	#0x9f0c	
	return r;
    8efc:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
}
    8f00:	21 52       	add	#4,	r1	;r2 As==10
    8f02:	34 41       	pop	r4		
    8f04:	30 41       	ret			

00008f06 <CC2500_SPI_TX_BYTE>:

void CC2500_SPI_TX_BYTE(int a, int v)
{
    8f06:	04 12       	push	r4		
    8f08:	04 41       	mov	r1,	r4	
    8f0a:	24 53       	incd	r4		
    8f0c:	21 82       	sub	#4,	r1	;r2 As==10
    8f0e:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8f12:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	CC2500_SPI_ENABLE();
    8f16:	b0 12 f6 9e 	call	#0x9ef6	
	CC2500_SPI_TX(a);
    8f1a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    8f1e:	b0 12 2a 8e 	call	#0x8e2a	
	CC2500_SPI_TX(v);
    8f22:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f26:	b0 12 2a 8e 	call	#0x8e2a	
	CC2500_SPI_DISABLE();
    8f2a:	b0 12 0c 9f 	call	#0x9f0c	
}
    8f2e:	21 52       	add	#4,	r1	;r2 As==10
    8f30:	34 41       	pop	r4		
    8f32:	30 41       	ret			

00008f34 <CC2500_SPI_RX_BYTE>:

char CC2500_SPI_RX_BYTE(int a)
{
    8f34:	04 12       	push	r4		
    8f36:	04 41       	mov	r1,	r4	
    8f38:	24 53       	incd	r4		
    8f3a:	21 82       	sub	#4,	r1	;r2 As==10
    8f3c:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	char r;
	CC2500_SPI_ENABLE();
    8f40:	b0 12 f6 9e 	call	#0x9ef6	
	CC2500_SPI_TX(a | CC2500_REG_ACCESS_OP_READ);
    8f44:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f48:	3f d0 80 00 	bis	#128,	r15	;#0x0080
    8f4c:	b0 12 2a 8e 	call	#0x8e2a	
	r = CC2500_SPI_RX();
    8f50:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8f54:	b0 12 12 9e 	call	#0x9e12	
    8f58:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
	CC2500_SPI_DISABLE();
    8f5c:	b0 12 0c 9f 	call	#0x9f0c	
	return r;
    8f60:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
}
    8f64:	21 52       	add	#4,	r1	;r2 As==10
    8f66:	34 41       	pop	r4		
    8f68:	30 41       	ret			

00008f6a <CC2500_SPI_TX_BURST>:

void CC2500_SPI_TX_BURST(int addr, const char *val, int len)
{
    8f6a:	04 12       	push	r4		
    8f6c:	04 41       	mov	r1,	r4	
    8f6e:	24 53       	incd	r4		
    8f70:	31 82       	sub	#8,	r1	;r2 As==11
    8f72:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    8f76:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    8f7a:	84 4d fc ff 	mov	r13,	-4(r4)	;0xfffc(r4)
	uint8_t cnt = 0;
    8f7e:	c4 43 f6 ff 	mov.b	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
	CC2500_SPI_ENABLE();
    8f82:	b0 12 f6 9e 	call	#0x9ef6	
	CC2500_SPI_TX(addr | CC2500_REG_ACCESS_BURST);
    8f86:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    8f8a:	3f d0 40 00 	bis	#64,	r15	;#0x0040
    8f8e:	b0 12 2a 8e 	call	#0x8e2a	
	for (cnt = 0; cnt < (len); cnt++) {
    8f92:	c4 43 f6 ff 	mov.b	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    8f96:	0a 3c       	jmp	$+22     	;abs 0x8fac
		CC2500_SPI_TX(val[cnt]);
    8f98:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    8f9c:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    8fa0:	6f 4f       	mov.b	@r15,	r15	
    8fa2:	8f 11       	sxt	r15		
    8fa4:	b0 12 2a 8e 	call	#0x8e2a	
void CC2500_SPI_TX_BURST(int addr, const char *val, int len)
{
	uint8_t cnt = 0;
	CC2500_SPI_ENABLE();
	CC2500_SPI_TX(addr | CC2500_REG_ACCESS_BURST);
	for (cnt = 0; cnt < (len); cnt++) {
    8fa8:	d4 53 f6 ff 	inc.b	-10(r4)	;0xfff6(r4)
    8fac:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    8fb0:	1f 94 fc ff 	cmp	-4(r4),	r15	;0xfffc(r4)
    8fb4:	f1 3b       	jl	$-28     	;abs 0x8f98
		CC2500_SPI_TX(val[cnt]);
	}
	CC2500_SPI_DISABLE();
    8fb6:	b0 12 0c 9f 	call	#0x9f0c	
}
    8fba:	31 52       	add	#8,	r1	;r2 As==11
    8fbc:	34 41       	pop	r4		
    8fbe:	30 41       	ret			

00008fc0 <CC2500_SPI_RX_BURST>:

void CC2500_SPI_RX_BURST(int addr, uint8_t * val, int len)
{
    8fc0:	0b 12       	push	r11		
    8fc2:	04 12       	push	r4		
    8fc4:	04 41       	mov	r1,	r4	
    8fc6:	24 52       	add	#4,	r4	;r2 As==10
    8fc8:	31 82       	sub	#8,	r1	;r2 As==11
    8fca:	84 4f f6 ff 	mov	r15,	-10(r4)	;0xfff6(r4)
    8fce:	84 4e f8 ff 	mov	r14,	-8(r4)	;0xfff8(r4)
    8fd2:	84 4d fa ff 	mov	r13,	-6(r4)	;0xfffa(r4)
	uint8_t cnt = 0;
    8fd6:	c4 43 f4 ff 	mov.b	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
	CC2500_SPI_ENABLE();
    8fda:	b0 12 f6 9e 	call	#0x9ef6	
	CC2500_SPI_TX(addr | CC2500_REG_ACCESS_OP_READ |
    8fde:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    8fe2:	3f d0 c0 00 	bis	#192,	r15	;#0x00c0
    8fe6:	b0 12 2a 8e 	call	#0x8e2a	
		      CC2500_REG_ACCESS_BURST);
	for (cnt = 0; cnt < (len); cnt++) {
    8fea:	c4 43 f4 ff 	mov.b	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    8fee:	0e 3c       	jmp	$+30     	;abs 0x900c
		val[cnt] = (uint8_t) CC2500_SPI_RX();
    8ff0:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    8ff4:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    8ff8:	0b 5f       	add	r15,	r11	
    8ffa:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8ffe:	b0 12 12 9e 	call	#0x9e12	
    9002:	4f 4f       	mov.b	r15,	r15	
    9004:	cb 4f 00 00 	mov.b	r15,	0(r11)	;0x0000(r11)
{
	uint8_t cnt = 0;
	CC2500_SPI_ENABLE();
	CC2500_SPI_TX(addr | CC2500_REG_ACCESS_OP_READ |
		      CC2500_REG_ACCESS_BURST);
	for (cnt = 0; cnt < (len); cnt++) {
    9008:	d4 53 f4 ff 	inc.b	-12(r4)	;0xfff4(r4)
    900c:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    9010:	1f 94 fa ff 	cmp	-6(r4),	r15	;0xfffa(r4)
    9014:	ed 3b       	jl	$-36     	;abs 0x8ff0
		val[cnt] = (uint8_t) CC2500_SPI_RX();
	}
	CC2500_SPI_DISABLE();
    9016:	b0 12 0c 9f 	call	#0x9f0c	
}
    901a:	31 52       	add	#8,	r1	;r2 As==11
    901c:	34 41       	pop	r4		
    901e:	3b 41       	pop	r11		
    9020:	30 41       	ret			

00009022 <CC2500_SPI_RX_FIFO_BYTE>:

#define CC2500_SPI_TX_FIFO_BYTE(val)      CC2500_SPI_TX_BYTE (CC2500_DATA_FIFO_ADDR,val)
#define CC2500_SPI_TX_FIFO_BURST(val,len) CC2500_SPI_TX_BURST(CC2500_DATA_FIFO_ADDR,val,len)

char CC2500_SPI_RX_FIFO_BYTE()
{
    9022:	04 12       	push	r4		
    9024:	04 41       	mov	r1,	r4	
    9026:	24 53       	incd	r4		
    9028:	21 83       	decd	r1		
	unsigned char r;
	r = CC2500_SPI_RX_BYTE(CC2500_DATA_FIFO_ADDR);
    902a:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    902e:	b0 12 34 8f 	call	#0x8f34	
    9032:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	return r;
    9036:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
}
    903a:	21 53       	incd	r1		
    903c:	34 41       	pop	r4		
    903e:	30 41       	ret			

00009040 <cc2500_wait_status>:

#define cc2500_get_state_from_status()   ((cc2500_status_register >> 4) & 0x07)
#define cc2500_update_status()           CC2500_SPI_STROBE(CC2500_STROBE_SNOP)

void cc2500_wait_status(uint8_t state)
{
    9040:	04 12       	push	r4		
    9042:	04 41       	mov	r1,	r4	
    9044:	24 53       	incd	r4		
    9046:	21 82       	sub	#4,	r1	;r2 As==10
    9048:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	uint8_t s;
	do {
		cc2500_update_status();
    904c:	3f 40 3d 00 	mov	#61,	r15	;#0x003d
    9050:	b0 12 4a 8e 	call	#0x8e4a	
		s = cc2500_get_state_from_status();
    9054:	5f 42 a8 02 	mov.b	&0x02a8,r15	
    9058:	4f 4f       	mov.b	r15,	r15	
    905a:	4f 4f       	mov.b	r15,	r15	
    905c:	12 c3       	clrc			
    905e:	4f 10       	rrc.b	r15		
    9060:	12 c3       	clrc			
    9062:	4f 10       	rrc.b	r15		
    9064:	12 c3       	clrc			
    9066:	4f 10       	rrc.b	r15		
    9068:	12 c3       	clrc			
    906a:	4f 10       	rrc.b	r15		
    906c:	4e 4f       	mov.b	r15,	r14	
    906e:	7e f0 07 00 	and.b	#7,	r14	;#0x0007
    9072:	c4 4e fa ff 	mov.b	r14,	-6(r4)	;0xfffa(r4)
	} while (s != state);
    9076:	d4 94 fa ff 	cmp.b	-6(r4),	-4(r4)	;0xfffa(r4), 0xfffc(r4)
    907a:	fc ff 
    907c:	e7 23       	jnz	$-48     	;abs 0x904c
}
    907e:	21 52       	add	#4,	r1	;r2 As==10
    9080:	34 41       	pop	r4		
    9082:	30 41       	ret			

00009084 <cc2500_gdo0_set_signal>:

void cc2500_gdo0_set_signal(uint8_t signal)
{
    9084:	04 12       	push	r4		
    9086:	04 41       	mov	r1,	r4	
    9088:	24 53       	incd	r4		
    908a:	21 82       	sub	#4,	r1	;r2 As==10
    908c:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	uint8_t reg = signal & 0x3F;
    9090:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9094:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    9098:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
	cc2500_gdo0_cfg = reg;
    909c:	d2 44 fa ff 	mov.b	-6(r4),	&0x02a4	;0xfffa(r4)
    90a0:	a4 02 
	CC2500_SPI_WREG(CC2500_REG_IOCFG0, reg);
    90a2:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    90a6:	0e 4f       	mov	r15,	r14	
    90a8:	2f 43       	mov	#2,	r15	;r3 As==10
    90aa:	b0 12 6c 8e 	call	#0x8e6c	
}
    90ae:	21 52       	add	#4,	r1	;r2 As==10
    90b0:	34 41       	pop	r4		
    90b2:	30 41       	ret			

000090b4 <cc2500_gdo2_set_signal>:

void cc2500_gdo2_set_signal(uint8_t signal)
{
    90b4:	04 12       	push	r4		
    90b6:	04 41       	mov	r1,	r4	
    90b8:	24 53       	incd	r4		
    90ba:	21 82       	sub	#4,	r1	;r2 As==10
    90bc:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	uint8_t reg = signal & 0x3F;
    90c0:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    90c4:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    90c8:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
	cc2500_gdo2_cfg = reg;
    90cc:	d2 44 fa ff 	mov.b	-6(r4),	&0x02a0	;0xfffa(r4)
    90d0:	a0 02 
	CC2500_SPI_WREG(CC2500_REG_IOCFG2, reg);
    90d2:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    90d6:	0e 4f       	mov	r15,	r14	
    90d8:	0f 43       	clr	r15		
    90da:	b0 12 6c 8e 	call	#0x8e6c	
}
    90de:	21 52       	add	#4,	r1	;r2 As==10
    90e0:	34 41       	pop	r4		
    90e2:	30 41       	ret			

000090e4 <cc2500_set_fifo_threshold>:

void cc2500_set_fifo_threshold(uint8_t thr)
{
    90e4:	04 12       	push	r4		
    90e6:	04 41       	mov	r1,	r4	
    90e8:	24 53       	incd	r4		
    90ea:	21 82       	sub	#4,	r1	;r2 As==10
    90ec:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	uint8_t reg;
	reg = (thr & 0x0F);
    90f0:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    90f4:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f
    90f8:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
	CC2500_SPI_WREG(CC2500_REG_FIFOTHR, reg);
    90fc:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    9100:	0e 4f       	mov	r15,	r14	
    9102:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    9106:	b0 12 6c 8e 	call	#0x8e6c	
}
    910a:	21 52       	add	#4,	r1	;r2 As==10
    910c:	34 41       	pop	r4		
    910e:	30 41       	ret			

00009110 <cc2500_check_tx_underflow>:
/* **************************************************
 * RX overflow / TX underflow
 * **************************************************/

static inline int cc2500_check_tx_underflow(void)
{
    9110:	04 12       	push	r4		
    9112:	04 41       	mov	r1,	r4	
    9114:	24 53       	incd	r4		
    9116:	21 83       	decd	r1		
	int ret;
	cc2500_update_status();
    9118:	3f 40 3d 00 	mov	#61,	r15	;#0x003d
    911c:	b0 12 4a 8e 	call	#0x8e4a	
	ret =
	    (cc2500_get_state_from_status() == CC2500_STATUS_TXFIFO_UNDERFLOW);
    9120:	5f 42 a8 02 	mov.b	&0x02a8,r15	
    9124:	4f 4f       	mov.b	r15,	r15	
    9126:	4f 4f       	mov.b	r15,	r15	
    9128:	12 c3       	clrc			
    912a:	4f 10       	rrc.b	r15		
    912c:	12 c3       	clrc			
    912e:	4f 10       	rrc.b	r15		
    9130:	12 c3       	clrc			
    9132:	4f 10       	rrc.b	r15		
    9134:	12 c3       	clrc			
    9136:	4f 10       	rrc.b	r15		
    9138:	4f 4f       	mov.b	r15,	r15	
    913a:	0e 4f       	mov	r15,	r14	
    913c:	3e f0 07 00 	and	#7,	r14	;#0x0007

static inline int cc2500_check_tx_underflow(void)
{
	int ret;
	cc2500_update_status();
	ret =
    9140:	1f 43       	mov	#1,	r15	;r3 As==01
    9142:	3e 90 07 00 	cmp	#7,	r14	;#0x0007
    9146:	01 24       	jz	$+4      	;abs 0x914a
    9148:	0f 43       	clr	r15		
    914a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	    (cc2500_get_state_from_status() == CC2500_STATUS_TXFIFO_UNDERFLOW);
	return ret;
    914e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
}
    9152:	21 53       	incd	r1		
    9154:	34 41       	pop	r4		
    9156:	30 41       	ret			

00009158 <cc2500_check_rx_overflow>:

static inline int cc2500_check_rx_overflow(void)
{
    9158:	04 12       	push	r4		
    915a:	04 41       	mov	r1,	r4	
    915c:	24 53       	incd	r4		
    915e:	21 83       	decd	r1		
	char ret;
	cc2500_update_status();
    9160:	3f 40 3d 00 	mov	#61,	r15	;#0x003d
    9164:	b0 12 4a 8e 	call	#0x8e4a	
	ret = (cc2500_get_state_from_status() == CC2500_STATUS_RXFIFO_OVERFLOW);
    9168:	5f 42 a8 02 	mov.b	&0x02a8,r15	
    916c:	4f 4f       	mov.b	r15,	r15	
    916e:	4f 4f       	mov.b	r15,	r15	
    9170:	12 c3       	clrc			
    9172:	4f 10       	rrc.b	r15		
    9174:	12 c3       	clrc			
    9176:	4f 10       	rrc.b	r15		
    9178:	12 c3       	clrc			
    917a:	4f 10       	rrc.b	r15		
    917c:	12 c3       	clrc			
    917e:	4f 10       	rrc.b	r15		
    9180:	4f 4f       	mov.b	r15,	r15	
    9182:	0e 4f       	mov	r15,	r14	
    9184:	3e f0 07 00 	and	#7,	r14	;#0x0007
    9188:	5f 43       	mov.b	#1,	r15	;r3 As==01
    918a:	3e 90 06 00 	cmp	#6,	r14	;#0x0006
    918e:	01 24       	jz	$+4      	;abs 0x9192
    9190:	4f 43       	clr.b	r15		
    9192:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	return ret;
    9196:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    919a:	8f 11       	sxt	r15		
}
    919c:	21 53       	incd	r1		
    919e:	34 41       	pop	r4		
    91a0:	30 41       	ret			

000091a2 <cc2500_check_fifo_xflow_flush>:

#define CC2500_FLUSH_RX()  CC2500_SPI_STROBE(CC2500_STROBE_SFRX)
#define CC2500_FLUSH_TX()  CC2500_SPI_STROBE(CC2500_STROBE_SFTX)

void cc2500_check_fifo_xflow_flush(void)
{
    91a2:	04 12       	push	r4		
    91a4:	04 41       	mov	r1,	r4	
    91a6:	24 53       	incd	r4		
	if (cc2500_check_tx_underflow()) {
    91a8:	b0 12 10 91 	call	#0x9110	
    91ac:	0f 93       	tst	r15		
    91ae:	04 24       	jz	$+10     	;abs 0x91b8
		CC2500_FLUSH_TX();
    91b0:	3f 40 3b 00 	mov	#59,	r15	;#0x003b
    91b4:	b0 12 4a 8e 	call	#0x8e4a	
	}
	if (cc2500_check_rx_overflow()) {
    91b8:	b0 12 58 91 	call	#0x9158	
    91bc:	0f 93       	tst	r15		
    91be:	04 24       	jz	$+10     	;abs 0x91c8
		CC2500_FLUSH_RX();
    91c0:	3f 40 3a 00 	mov	#58,	r15	;#0x003a
    91c4:	b0 12 4a 8e 	call	#0x8e4a	
	}
}
    91c8:	34 41       	pop	r4		
    91ca:	30 41       	ret			

000091cc <cc2500_configure>:
 ***************************************************************/

#define PATABLE_VALUE     0xFE

void cc2500_configure(RF_SETTINGS const *cfg)
{
    91cc:	04 12       	push	r4		
    91ce:	04 41       	mov	r1,	r4	
    91d0:	24 53       	incd	r4		
    91d2:	21 83       	decd	r1		
    91d4:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	/* */
	CC2500_SPI_WREG(CC2500_REG_FSCTRL1, cfg->fsctrl1);
    91d8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    91dc:	6f 4f       	mov.b	@r15,	r15	
    91de:	4f 4f       	mov.b	r15,	r15	
    91e0:	0e 4f       	mov	r15,	r14	
    91e2:	3f 40 0b 00 	mov	#11,	r15	;#0x000b
    91e6:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_FSCTRL0, cfg->fsctrl0);
    91ea:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    91ee:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    91f2:	4f 4f       	mov.b	r15,	r15	
    91f4:	0e 4f       	mov	r15,	r14	
    91f6:	3f 40 0c 00 	mov	#12,	r15	;#0x000c
    91fa:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_FREQ2, cfg->freq2);
    91fe:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9202:	5f 4f 02 00 	mov.b	2(r15),	r15	;0x0002(r15)
    9206:	4f 4f       	mov.b	r15,	r15	
    9208:	0e 4f       	mov	r15,	r14	
    920a:	3f 40 0d 00 	mov	#13,	r15	;#0x000d
    920e:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_FREQ1, cfg->freq1);
    9212:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9216:	5f 4f 03 00 	mov.b	3(r15),	r15	;0x0003(r15)
    921a:	4f 4f       	mov.b	r15,	r15	
    921c:	0e 4f       	mov	r15,	r14	
    921e:	3f 40 0e 00 	mov	#14,	r15	;#0x000e
    9222:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_FREQ0, cfg->freq0);
    9226:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    922a:	5f 4f 04 00 	mov.b	4(r15),	r15	;0x0004(r15)
    922e:	4f 4f       	mov.b	r15,	r15	
    9230:	0e 4f       	mov	r15,	r14	
    9232:	3f 40 0f 00 	mov	#15,	r15	;#0x000f
    9236:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_MDMCFG4, cfg->mdmcfg4);
    923a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    923e:	5f 4f 05 00 	mov.b	5(r15),	r15	;0x0005(r15)
    9242:	4f 4f       	mov.b	r15,	r15	
    9244:	0e 4f       	mov	r15,	r14	
    9246:	3f 40 10 00 	mov	#16,	r15	;#0x0010
    924a:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_MDMCFG3, cfg->mdmcfg3);
    924e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9252:	5f 4f 06 00 	mov.b	6(r15),	r15	;0x0006(r15)
    9256:	4f 4f       	mov.b	r15,	r15	
    9258:	0e 4f       	mov	r15,	r14	
    925a:	3f 40 11 00 	mov	#17,	r15	;#0x0011
    925e:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_MDMCFG2, cfg->mdmcfg2);
    9262:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9266:	5f 4f 07 00 	mov.b	7(r15),	r15	;0x0007(r15)
    926a:	4f 4f       	mov.b	r15,	r15	
    926c:	0e 4f       	mov	r15,	r14	
    926e:	3f 40 12 00 	mov	#18,	r15	;#0x0012
    9272:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_MDMCFG1, cfg->mdmcfg1);
    9276:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    927a:	5f 4f 08 00 	mov.b	8(r15),	r15	;0x0008(r15)
    927e:	4f 4f       	mov.b	r15,	r15	
    9280:	0e 4f       	mov	r15,	r14	
    9282:	3f 40 13 00 	mov	#19,	r15	;#0x0013
    9286:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_MDMCFG0, cfg->mdmcfg0);
    928a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    928e:	5f 4f 09 00 	mov.b	9(r15),	r15	;0x0009(r15)
    9292:	4f 4f       	mov.b	r15,	r15	
    9294:	0e 4f       	mov	r15,	r14	
    9296:	3f 40 14 00 	mov	#20,	r15	;#0x0014
    929a:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_CHANNR, cfg->channr);
    929e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    92a2:	5f 4f 0a 00 	mov.b	10(r15),r15	;0x000a(r15)
    92a6:	4f 4f       	mov.b	r15,	r15	
    92a8:	0e 4f       	mov	r15,	r14	
    92aa:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    92ae:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_DEVIATN, cfg->deviatn);
    92b2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    92b6:	5f 4f 0b 00 	mov.b	11(r15),r15	;0x000b(r15)
    92ba:	4f 4f       	mov.b	r15,	r15	
    92bc:	0e 4f       	mov	r15,	r14	
    92be:	3f 40 15 00 	mov	#21,	r15	;#0x0015
    92c2:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_FREND1, cfg->frend1);
    92c6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    92ca:	5f 4f 0c 00 	mov.b	12(r15),r15	;0x000c(r15)
    92ce:	4f 4f       	mov.b	r15,	r15	
    92d0:	0e 4f       	mov	r15,	r14	
    92d2:	3f 40 21 00 	mov	#33,	r15	;#0x0021
    92d6:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_FREND0, cfg->frend0);
    92da:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    92de:	5f 4f 0d 00 	mov.b	13(r15),r15	;0x000d(r15)
    92e2:	4f 4f       	mov.b	r15,	r15	
    92e4:	0e 4f       	mov	r15,	r14	
    92e6:	3f 40 22 00 	mov	#34,	r15	;#0x0022
    92ea:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_MCSM0, cfg->mcsm0);
    92ee:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    92f2:	5f 4f 0e 00 	mov.b	14(r15),r15	;0x000e(r15)
    92f6:	4f 4f       	mov.b	r15,	r15	
    92f8:	0e 4f       	mov	r15,	r14	
    92fa:	3f 40 18 00 	mov	#24,	r15	;#0x0018
    92fe:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_FOCCFG, cfg->foccfg);
    9302:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9306:	5f 4f 0f 00 	mov.b	15(r15),r15	;0x000f(r15)
    930a:	4f 4f       	mov.b	r15,	r15	
    930c:	0e 4f       	mov	r15,	r14	
    930e:	3f 40 19 00 	mov	#25,	r15	;#0x0019
    9312:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_BSCFG, cfg->bscfg);
    9316:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    931a:	5f 4f 10 00 	mov.b	16(r15),r15	;0x0010(r15)
    931e:	4f 4f       	mov.b	r15,	r15	
    9320:	0e 4f       	mov	r15,	r14	
    9322:	3f 40 1a 00 	mov	#26,	r15	;#0x001a
    9326:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_AGCCTRL2, cfg->agcctrl2);
    932a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    932e:	5f 4f 11 00 	mov.b	17(r15),r15	;0x0011(r15)
    9332:	4f 4f       	mov.b	r15,	r15	
    9334:	0e 4f       	mov	r15,	r14	
    9336:	3f 40 1b 00 	mov	#27,	r15	;#0x001b
    933a:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_AGCCTRL1, cfg->agcctrl1);
    933e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9342:	5f 4f 12 00 	mov.b	18(r15),r15	;0x0012(r15)
    9346:	4f 4f       	mov.b	r15,	r15	
    9348:	0e 4f       	mov	r15,	r14	
    934a:	3f 40 1c 00 	mov	#28,	r15	;#0x001c
    934e:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_AGCCTRL0, cfg->agcctrl0);
    9352:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9356:	5f 4f 13 00 	mov.b	19(r15),r15	;0x0013(r15)
    935a:	4f 4f       	mov.b	r15,	r15	
    935c:	0e 4f       	mov	r15,	r14	
    935e:	3f 40 1d 00 	mov	#29,	r15	;#0x001d
    9362:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_FSCAL3, cfg->fscal3);
    9366:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    936a:	5f 4f 14 00 	mov.b	20(r15),r15	;0x0014(r15)
    936e:	4f 4f       	mov.b	r15,	r15	
    9370:	0e 4f       	mov	r15,	r14	
    9372:	3f 40 23 00 	mov	#35,	r15	;#0x0023
    9376:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_FSCAL2, cfg->fscal2);
    937a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    937e:	5f 4f 15 00 	mov.b	21(r15),r15	;0x0015(r15)
    9382:	4f 4f       	mov.b	r15,	r15	
    9384:	0e 4f       	mov	r15,	r14	
    9386:	3f 40 24 00 	mov	#36,	r15	;#0x0024
    938a:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_FSCAL1, cfg->fscal1);
    938e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9392:	5f 4f 16 00 	mov.b	22(r15),r15	;0x0016(r15)
    9396:	4f 4f       	mov.b	r15,	r15	
    9398:	0e 4f       	mov	r15,	r14	
    939a:	3f 40 25 00 	mov	#37,	r15	;#0x0025
    939e:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_FSCAL0, cfg->fscal0);
    93a2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    93a6:	5f 4f 17 00 	mov.b	23(r15),r15	;0x0017(r15)
    93aa:	4f 4f       	mov.b	r15,	r15	
    93ac:	0e 4f       	mov	r15,	r14	
    93ae:	3f 40 26 00 	mov	#38,	r15	;#0x0026
    93b2:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_FSTEST, cfg->fstest);
    93b6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    93ba:	5f 4f 18 00 	mov.b	24(r15),r15	;0x0018(r15)
    93be:	4f 4f       	mov.b	r15,	r15	
    93c0:	0e 4f       	mov	r15,	r14	
    93c2:	3f 40 29 00 	mov	#41,	r15	;#0x0029
    93c6:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_TEST2, cfg->test2);
    93ca:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    93ce:	5f 4f 19 00 	mov.b	25(r15),r15	;0x0019(r15)
    93d2:	4f 4f       	mov.b	r15,	r15	
    93d4:	0e 4f       	mov	r15,	r14	
    93d6:	3f 40 2c 00 	mov	#44,	r15	;#0x002c
    93da:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_TEST1, cfg->test1);
    93de:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    93e2:	5f 4f 1a 00 	mov.b	26(r15),r15	;0x001a(r15)
    93e6:	4f 4f       	mov.b	r15,	r15	
    93e8:	0e 4f       	mov	r15,	r14	
    93ea:	3f 40 2d 00 	mov	#45,	r15	;#0x002d
    93ee:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_TEST0, cfg->test0);
    93f2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    93f6:	5f 4f 1b 00 	mov.b	27(r15),r15	;0x001b(r15)
    93fa:	4f 4f       	mov.b	r15,	r15	
    93fc:	0e 4f       	mov	r15,	r14	
    93fe:	3f 40 2e 00 	mov	#46,	r15	;#0x002e
    9402:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_FIFOTHR, cfg->fifothr);
    9406:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    940a:	5f 4f 1c 00 	mov.b	28(r15),r15	;0x001c(r15)
    940e:	4f 4f       	mov.b	r15,	r15	
    9410:	0e 4f       	mov	r15,	r14	
    9412:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    9416:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_IOCFG2, cfg->iocfg2);
    941a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    941e:	5f 4f 1d 00 	mov.b	29(r15),r15	;0x001d(r15)
    9422:	4f 4f       	mov.b	r15,	r15	
    9424:	0e 4f       	mov	r15,	r14	
    9426:	0f 43       	clr	r15		
    9428:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_IOCFG0, cfg->iocfg0d);
    942c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9430:	5f 4f 1e 00 	mov.b	30(r15),r15	;0x001e(r15)
    9434:	4f 4f       	mov.b	r15,	r15	
    9436:	0e 4f       	mov	r15,	r14	
    9438:	2f 43       	mov	#2,	r15	;r3 As==10
    943a:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_PKTCTRL1, cfg->pktctrl1);
    943e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9442:	5f 4f 1f 00 	mov.b	31(r15),r15	;0x001f(r15)
    9446:	4f 4f       	mov.b	r15,	r15	
    9448:	0e 4f       	mov	r15,	r14	
    944a:	3f 40 07 00 	mov	#7,	r15	;#0x0007
    944e:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_PKTCTRL0, cfg->pktctrl0);
    9452:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9456:	5f 4f 20 00 	mov.b	32(r15),r15	;0x0020(r15)
    945a:	4f 4f       	mov.b	r15,	r15	
    945c:	0e 4f       	mov	r15,	r14	
    945e:	3f 42       	mov	#8,	r15	;r2 As==11
    9460:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_ADDR, cfg->addr);
    9464:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9468:	5f 4f 21 00 	mov.b	33(r15),r15	;0x0021(r15)
    946c:	4f 4f       	mov.b	r15,	r15	
    946e:	0e 4f       	mov	r15,	r14	
    9470:	3f 40 09 00 	mov	#9,	r15	;#0x0009
    9474:	b0 12 6c 8e 	call	#0x8e6c	
	CC2500_SPI_WREG(CC2500_REG_PKTLEN, cfg->pktlen);
    9478:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    947c:	5f 4f 22 00 	mov.b	34(r15),r15	;0x0022(r15)
    9480:	4f 4f       	mov.b	r15,	r15	
    9482:	0e 4f       	mov	r15,	r14	
    9484:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    9488:	b0 12 6c 8e 	call	#0x8e6c	

	CC2500_SPI_WREG(CC2500_PATABLE_ADDR, PATABLE_VALUE);
    948c:	3e 40 fe 00 	mov	#254,	r14	;#0x00fe
    9490:	3f 40 3e 00 	mov	#62,	r15	;#0x003e
    9494:	b0 12 6c 8e 	call	#0x8e6c	
     *******************/

	// cc2500_calibrate();

	/* GDO0 asserted when rx fifo above threshold */
	cc2500_set_fifo_threshold(15);
    9498:	7f 40 0f 00 	mov.b	#15,	r15	;#0x000f
    949c:	b0 12 e4 90 	call	#0x90e4	
	cc2500_gdo0_set_signal(CC2500_GDOx_RX_FIFO_EOP);
    94a0:	5f 43       	mov.b	#1,	r15	;r3 As==01
    94a2:	b0 12 84 90 	call	#0x9084	
	CC2500_HW_GDO0_IRQ_ON_ASSERT();
    94a6:	b0 12 28 8d 	call	#0x8d28	
	CC2500_HW_GDO0_DINT();
    94aa:	b0 12 54 8d 	call	#0x8d54	

	/* GDO2 Deasserted when packet rx/tx or fifo xxxflow */
	cc2500_gdo2_set_signal(CC2500_GDOx_SYNC_WORD);
    94ae:	7f 40 06 00 	mov.b	#6,	r15	;#0x0006
    94b2:	b0 12 b4 90 	call	#0x90b4	
	CC2500_HW_GDO2_IRQ_ON_ASSERT();
    94b6:	b0 12 3e 8d 	call	#0x8d3e	
	CC2500_HW_GDO2_DINT();
    94ba:	b0 12 6a 8d 	call	#0x8d6a	
}
    94be:	21 53       	incd	r1		
    94c0:	34 41       	pop	r4		
    94c2:	30 41       	ret			

000094c4 <cc2500_set_channel>:

void cc2500_set_channel(uint8_t chan)
{
    94c4:	04 12       	push	r4		
    94c6:	04 41       	mov	r1,	r4	
    94c8:	24 53       	incd	r4		
    94ca:	21 83       	decd	r1		
    94cc:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	CC2500_SPI_WREG(CC2500_REG_CHANNR, chan);
    94d0:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    94d4:	0e 4f       	mov	r15,	r14	
    94d6:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    94da:	b0 12 6c 8e 	call	#0x8e6c	
}
    94de:	21 53       	incd	r1		
    94e0:	34 41       	pop	r4		
    94e2:	30 41       	ret			

000094e4 <cc2500_calibrate>:

void cc2500_calibrate(void)
{
    94e4:	04 12       	push	r4		
    94e6:	04 41       	mov	r1,	r4	
    94e8:	24 53       	incd	r4		
	cc2500_idle();
    94ea:	b0 12 84 97 	call	#0x9784	
	CC2500_SPI_STROBE(CC2500_STROBE_SCAL);
    94ee:	3f 40 33 00 	mov	#51,	r15	;#0x0033
    94f2:	b0 12 4a 8e 	call	#0x8e4a	
	cc2500_wait_status(CC2500_STATUS_IDLE);
    94f6:	4f 43       	clr.b	r15		
    94f8:	b0 12 40 90 	call	#0x9040	
}
    94fc:	34 41       	pop	r4		
    94fe:	30 41       	ret			

00009500 <cc2500_utx>:
/* this function does not require any interrupt handler  */
/* both modes wtr. READ_TX_FIFO_BYTE should work equally */
/* although register read might be cleaner               */

void cc2500_utx(const char *buffer, const uint8_t length)
{
    9500:	04 12       	push	r4		
    9502:	04 41       	mov	r1,	r4	
    9504:	24 53       	incd	r4		
    9506:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    950a:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    950e:	c4 4e fc ff 	mov.b	r14,	-4(r4)	;0xfffc(r4)
	DBG_PRINTF("utx_enter\n");
	cc2500_idle();
    9512:	b0 12 84 97 	call	#0x9784	

	CC2500_HW_GDO2_DINT();
    9516:	b0 12 6a 8d 	call	#0x8d6a	

	/* Fill tx fifo */
	CC2500_SPI_TX_FIFO_BYTE(length);
    951a:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    951e:	0e 4f       	mov	r15,	r14	
    9520:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    9524:	b0 12 06 8f 	call	#0x8f06	
	CC2500_SPI_TX_FIFO_BURST(buffer, length);
    9528:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    952c:	0d 4f       	mov	r15,	r13	
    952e:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    9532:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    9536:	b0 12 6a 8f 	call	#0x8f6a	
	DBG_PRINTF("utx 1\n");

	/* Send packet and wait for complete */
	CC2500_SPI_STROBE(CC2500_STROBE_STX);
    953a:	3f 40 35 00 	mov	#53,	r15	;#0x0035
    953e:	b0 12 4a 8e 	call	#0x8e4a	
#define     STOP_READ_TX_FIFO_BYTES
#if defined(STOP_READ_TX_FIFO_BYTES)
	{
		uint8_t txbytes;
		do {
			txbytes = CC2500_SPI_ROREG(CC2500_REG_TXBYTES);
    9542:	3f 40 3a 00 	mov	#58,	r15	;#0x003a
    9546:	b0 12 d0 8e 	call	#0x8ed0	
    954a:	c4 4f f8 ff 	mov.b	r15,	-8(r4)	;0xfff8(r4)
		} while ((txbytes & 0x7f) > 0);
    954e:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    9552:	3f f0 7f 00 	and	#127,	r15	;#0x007f
    9556:	1f 93       	cmp	#1,	r15	;r3 As==01
    9558:	f4 37       	jge	$-22     	;abs 0x9542
	DBG_PRINTF("utx 3.1\n");
	while ((CC2500_HW_GDO2_READ()) != 0) ;	/* GDO2 goes low  = EOP     */
	DBG_PRINTF("utx 3.2\n");
#endif

	CC2500_HW_GDO0_CLEAR_FLAG();
    955a:	b0 12 96 8d 	call	#0x8d96	
	CC2500_HW_GDO2_CLEAR_FLAG();
    955e:	b0 12 ac 8d 	call	#0x8dac	
	DBG_PRINTF("utx out\n");
}
    9562:	31 50 06 00 	add	#6,	r1	;#0x0006
    9566:	34 41       	pop	r4		
    9568:	30 41       	ret			

0000956a <cc2500_rx_register_buffer>:
void cc2500_rx_register_buffer(uint8_t * buffer, uint8_t length);
void cc2500_rx_enter(void);
void cc2500_rx_pkt_eop(void);

void cc2500_rx_register_buffer(uint8_t * buffer, uint8_t length)
{
    956a:	04 12       	push	r4		
    956c:	04 41       	mov	r1,	r4	
    956e:	24 53       	incd	r4		
    9570:	21 82       	sub	#4,	r1	;r2 As==10
    9572:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    9576:	c4 4e fc ff 	mov.b	r14,	-4(r4)	;0xfffc(r4)
	cc2500_rx_packet = buffer;
    957a:	92 44 fa ff 	mov	-6(r4),	&0x02a6	;0xfffa(r4)
    957e:	a6 02 
	cc2500_rx_offset = 0x00;
    9580:	c2 43 8a 02 	mov.b	#0,	&0x028a	;r3 As==00
	CC2500_SPI_WREG(CC2500_REG_PKTLEN, length); /* simpler than testing in ISR */
    9584:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9588:	0e 4f       	mov	r15,	r14	
    958a:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    958e:	b0 12 6c 8e 	call	#0x8e6c	
}
    9592:	21 52       	add	#4,	r1	;r2 As==10
    9594:	34 41       	pop	r4		
    9596:	30 41       	ret			

00009598 <cc2500_rx_enter>:

void cc2500_rx_enter(void)
{
    9598:	04 12       	push	r4		
    959a:	04 41       	mov	r1,	r4	
    959c:	24 53       	incd	r4		
	cc2500_idle();
    959e:	b0 12 84 97 	call	#0x9784	
	cc2500_rx_offset = 0;
    95a2:	c2 43 8a 02 	mov.b	#0,	&0x028a	;r3 As==00

	CC2500_HW_GDO0_CLEAR_FLAG();	/* clear pending irq     */
    95a6:	b0 12 96 8d 	call	#0x8d96	
	CC2500_HW_GDO2_CLEAR_FLAG();	/* clear pending irq     */
    95aa:	b0 12 ac 8d 	call	#0x8dac	
	CC2500_HW_GDO0_EINT();
    95ae:	b0 12 80 8d 	call	#0x8d80	
	CC2500_HW_GDO2_DINT();
    95b2:	b0 12 6a 8d 	call	#0x8d6a	

	CC2500_SPI_STROBE(CC2500_STROBE_SRX);
    95b6:	3f 40 34 00 	mov	#52,	r15	;#0x0034
    95ba:	b0 12 4a 8e 	call	#0x8e4a	
	cc2500_wait_status(CC2500_STATUS_RX);
    95be:	5f 43       	mov.b	#1,	r15	;r3 As==01
    95c0:	b0 12 40 90 	call	#0x9040	
}
    95c4:	34 41       	pop	r4		
    95c6:	30 41       	ret			

000095c8 <cc2500_rx_pkt_eop>:
/* ****************** */
/* ** RX EOP     **** */
/* ****************** */

void cc2500_rx_pkt_eop(void)
{				/* called from IRQ context */
    95c8:	0b 12       	push	r11		
    95ca:	04 12       	push	r4		
    95cc:	04 41       	mov	r1,	r4	
    95ce:	24 52       	add	#4,	r4	;r2 As==10
    95d0:	31 50 f6 ff 	add	#-10,	r1	;#0xfff6
	uint8_t rxbytes;
	int l;

	/* read RX bytes on general registers */
	rxbytes = CC2500_SPI_ROREG(CC2500_REG_RXBYTES);
    95d4:	3f 40 3b 00 	mov	#59,	r15	;#0x003b
    95d8:	b0 12 d0 8e 	call	#0x8ed0	
    95dc:	c4 4f f2 ff 	mov.b	r15,	-14(r4)	;0xfff2(r4)
	do {
		l = rxbytes;
    95e0:	d4 44 f2 ff 	mov.b	-14(r4),-10(r4)	;0xfff2(r4), 0xfff6(r4)
    95e4:	f6 ff 
    95e6:	c4 43 f7 ff 	mov.b	#0,	-9(r4)	;r3 As==00, 0xfff7(r4)
		rxbytes = CC2500_SPI_ROREG(CC2500_REG_RXBYTES);
    95ea:	3f 40 3b 00 	mov	#59,	r15	;#0x003b
    95ee:	b0 12 d0 8e 	call	#0x8ed0	
    95f2:	c4 4f f2 ff 	mov.b	r15,	-14(r4)	;0xfff2(r4)
	} while (rxbytes < 2 && rxbytes != l);
    95f6:	e4 93 f2 ff 	cmp.b	#2,	-14(r4)	;r3 As==10, 0xfff2(r4)
    95fa:	05 2c       	jc	$+12     	;abs 0x9606
    95fc:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    9600:	1f 94 f6 ff 	cmp	-10(r4),r15	;0xfff6(r4)
    9604:	ed 23       	jnz	$-36     	;abs 0x95e0

	if ((0 < rxbytes)) {
    9606:	c4 93 f2 ff 	tst.b	-14(r4)	;0xfff2(r4)
    960a:	68 24       	jz	$+210    	;abs 0x96dc
		if ((rxbytes & 0x80) == 0) {	/* RX overflow == false */
    960c:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    9610:	4f 93       	tst.b	r15		
    9612:	59 38       	jl	$+180    	;abs 0x96c6

			/*
			 * This reads the first DATA bytes, this byte should be
			 * equal to rxbytes-1 (rxbytes == size + data))
			 */
			size = CC2500_SPI_RX_FIFO_BYTE();
    9614:	b0 12 22 90 	call	#0x9022	
    9618:	c4 4f f8 ff 	mov.b	r15,	-8(r4)	;0xfff8(r4)
			/* 
			 * rxbytes can be different from size+1 
			 * this happens on transmission errors 
			 * (ex: if packets is filled with a serie of bytes eq 0)
			 */
			CC2500_SPI_RX_FIFO_BURST(cc2500_rx_packet, rxbytes - 1);
    961c:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    9620:	0e 4f       	mov	r15,	r14	
    9622:	3e 53       	add	#-1,	r14	;r3 As==11
    9624:	1f 42 a6 02 	mov	&0x02a6,r15	
    9628:	0d 4e       	mov	r14,	r13	
    962a:	0e 4f       	mov	r15,	r14	
    962c:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    9630:	b0 12 c0 8f 	call	#0x8fc0	
#define FRAME_LQI_OFFSET  1
#define rssi_offset       72

			int rssi_dec;
			int rssi_dbm;
			rssi_dec = cc2500_rx_packet[size + FRAME_RSSI_OFFSET];
    9634:	1e 42 a6 02 	mov	&0x02a6,r14	
    9638:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    963c:	0f 5e       	add	r14,	r15	
    963e:	6f 4f       	mov.b	@r15,	r15	
    9640:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    9644:	c4 43 fb ff 	mov.b	#0,	-5(r4)	;r3 As==00, 0xfffb(r4)
			if (rssi_dec >= 128) {
    9648:	b4 90 80 00 	cmp	#128,	-6(r4)	;#0x0080, 0xfffa(r4)
    964c:	fa ff 
    964e:	0e 38       	jl	$+30     	;abs 0x966c
				rssi_dbm = (rssi_dec - 256) / 2 - rssi_offset;
    9650:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    9654:	3f 50 00 ff 	add	#-256,	r15	;#0xff00
    9658:	0f 93       	tst	r15		
    965a:	01 34       	jge	$+4      	;abs 0x965e
    965c:	1f 53       	inc	r15		
    965e:	0f 11       	rra	r15		
    9660:	0e 4f       	mov	r15,	r14	
    9662:	3e 50 b8 ff 	add	#-72,	r14	;#0xffb8
    9666:	84 4e f4 ff 	mov	r14,	-12(r4)	;0xfff4(r4)
    966a:	0b 3c       	jmp	$+24     	;abs 0x9682
			} else {
				rssi_dbm = (rssi_dec) / 2 - rssi_offset;
    966c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    9670:	0f 93       	tst	r15		
    9672:	01 34       	jge	$+4      	;abs 0x9676
    9674:	1f 53       	inc	r15		
    9676:	0f 11       	rra	r15		
    9678:	0e 4f       	mov	r15,	r14	
    967a:	3e 50 b8 ff 	add	#-72,	r14	;#0xffb8
    967e:	84 4e f4 ff 	mov	r14,	-12(r4)	;0xfff4(r4)
			}

			if (cc2500_rx_packet[size + FRAME_LQI_OFFSET] & 0x80) {	/* crc ok */
    9682:	1e 42 a6 02 	mov	&0x02a6,r14	
    9686:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    968a:	1f 53       	inc	r15		
    968c:	0f 5e       	add	r14,	r15	
    968e:	6f 4f       	mov.b	@r15,	r15	
    9690:	4f 93       	tst.b	r15		
    9692:	0e 34       	jge	$+30     	;abs 0x96b0
				/* ok */
				radio_rx_cb(cc2500_rx_packet, size, rssi_dbm);
    9694:	1c 42 a2 02 	mov	&0x02a2,r12	
    9698:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    969c:	4e 4f       	mov.b	r15,	r14	
    969e:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    96a2:	1b 42 a6 02 	mov	&0x02a6,r11	
    96a6:	4d 4e       	mov.b	r14,	r13	
    96a8:	0e 4f       	mov	r15,	r14	
    96aa:	0f 4b       	mov	r11,	r15	
    96ac:	8c 12       	call	r12		
    96ae:	1f 3c       	jmp	$+64     	;abs 0x96ee
			} else {
				cc2500_check_fifo_xflow_flush();
    96b0:	b0 12 a2 91 	call	#0x91a2	
				radio_rx_cb(cc2500_rx_packet, -ERXBADCRC, 0);
    96b4:	1c 42 a2 02 	mov	&0x02a2,r12	
    96b8:	1f 42 a6 02 	mov	&0x02a6,r15	
    96bc:	4d 43       	clr.b	r13		
    96be:	3e 40 fd ff 	mov	#-3,	r14	;#0xfffd
    96c2:	8c 12       	call	r12		
    96c4:	14 3c       	jmp	$+42     	;abs 0x96ee
			}
		} else {
			cc2500_check_fifo_xflow_flush();
    96c6:	b0 12 a2 91 	call	#0x91a2	
			radio_rx_cb(cc2500_rx_packet, -ERXFLOW, 0);
    96ca:	1c 42 a2 02 	mov	&0x02a2,r12	
    96ce:	1f 42 a6 02 	mov	&0x02a6,r15	
    96d2:	4d 43       	clr.b	r13		
    96d4:	3e 40 fe ff 	mov	#-2,	r14	;#0xfffe
    96d8:	8c 12       	call	r12		
    96da:	09 3c       	jmp	$+20     	;abs 0x96ee
		}
	} else {
		cc2500_check_fifo_xflow_flush();
    96dc:	b0 12 a2 91 	call	#0x91a2	
		radio_rx_cb(cc2500_rx_packet, -EEMPTY, 0);
    96e0:	1c 42 a2 02 	mov	&0x02a2,r12	
    96e4:	1f 42 a6 02 	mov	&0x02a6,r15	
    96e8:	4d 43       	clr.b	r13		
    96ea:	3e 43       	mov	#-1,	r14	;r3 As==11
    96ec:	8c 12       	call	r12		
	}

	CC2500_HW_GDO0_CLEAR_FLAG();
    96ee:	b0 12 96 8d 	call	#0x8d96	
	CC2500_HW_GDO2_CLEAR_FLAG();
    96f2:	b0 12 ac 8d 	call	#0x8dac	
}
    96f6:	31 50 0a 00 	add	#10,	r1	;#0x000a
    96fa:	34 41       	pop	r4		
    96fc:	3b 41       	pop	r11		
    96fe:	30 41       	ret			

00009700 <cc2500_rx_register_cb>:
/* **************************************************
 * utils
 * **************************************************/

void cc2500_rx_register_cb(cc2500_cb_t f)
{
    9700:	04 12       	push	r4		
    9702:	04 41       	mov	r1,	r4	
    9704:	24 53       	incd	r4		
    9706:	21 83       	decd	r1		
    9708:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	radio_rx_cb = f;
    970c:	92 44 fc ff 	mov	-4(r4),	&0x02a2	;0xfffc(r4)
    9710:	a2 02 
}
    9712:	21 53       	incd	r1		
    9714:	34 41       	pop	r4		
    9716:	30 41       	ret			

00009718 <cc2500_packet_status>:

uint8_t cc2500_packet_status(void)
{
    9718:	04 12       	push	r4		
    971a:	04 41       	mov	r1,	r4	
    971c:	24 53       	incd	r4		
    971e:	21 83       	decd	r1		
	uint8_t ps;
	ps = CC2500_SPI_ROREG(CC2500_REG_PKTSTATUS);
    9720:	3f 40 38 00 	mov	#56,	r15	;#0x0038
    9724:	b0 12 d0 8e 	call	#0x8ed0	
    9728:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	return ps;
    972c:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
}
    9730:	21 53       	incd	r1		
    9732:	34 41       	pop	r4		
    9734:	30 41       	ret			

00009736 <cc2500_cca>:

int cc2500_cca(void)
{
    9736:	04 12       	push	r4		
    9738:	04 41       	mov	r1,	r4	
    973a:	24 53       	incd	r4		
    973c:	21 83       	decd	r1		
	uint8_t cca = cc2500_packet_status();
    973e:	b0 12 18 97 	call	#0x9718	
    9742:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	return (cca >> 4) & 0x01;
    9746:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    974a:	4f 4f       	mov.b	r15,	r15	
    974c:	12 c3       	clrc			
    974e:	4f 10       	rrc.b	r15		
    9750:	12 c3       	clrc			
    9752:	4f 10       	rrc.b	r15		
    9754:	12 c3       	clrc			
    9756:	4f 10       	rrc.b	r15		
    9758:	12 c3       	clrc			
    975a:	4f 10       	rrc.b	r15		
    975c:	4f 4f       	mov.b	r15,	r15	
    975e:	1f f3       	and	#1,	r15	;r3 As==01
}
    9760:	21 53       	incd	r1		
    9762:	34 41       	pop	r4		
    9764:	30 41       	ret			

00009766 <cc2500_get_rssi>:

uint8_t cc2500_get_rssi(void)
{
    9766:	04 12       	push	r4		
    9768:	04 41       	mov	r1,	r4	
    976a:	24 53       	incd	r4		
    976c:	21 83       	decd	r1		
	uint8_t rssi;
	/* cc2500 should be in Rx */
	rssi = CC2500_SPI_ROREG(CC2500_REG_RSSI);
    976e:	3f 40 34 00 	mov	#52,	r15	;#0x0034
    9772:	b0 12 d0 8e 	call	#0x8ed0	
    9776:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	return rssi;
    977a:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
}
    977e:	21 53       	incd	r1		
    9780:	34 41       	pop	r4		
    9782:	30 41       	ret			

00009784 <cc2500_idle>:

/* idle mode
 * - wait for idle
 */
void cc2500_idle(void)
{
    9784:	04 12       	push	r4		
    9786:	04 41       	mov	r1,	r4	
    9788:	24 53       	incd	r4		
	CC2500_HW_GDO0_DINT();
    978a:	b0 12 54 8d 	call	#0x8d54	
	CC2500_HW_GDO2_DINT();
    978e:	b0 12 6a 8d 	call	#0x8d6a	
	cc2500_check_fifo_xflow_flush();
    9792:	b0 12 a2 91 	call	#0x91a2	
	CC2500_SPI_STROBE(CC2500_STROBE_SIDLE);
    9796:	3f 40 36 00 	mov	#54,	r15	;#0x0036
    979a:	b0 12 4a 8e 	call	#0x8e4a	
	cc2500_wait_status(CC2500_STATUS_IDLE);
    979e:	4f 43       	clr.b	r15		
    97a0:	b0 12 40 90 	call	#0x9040	
}
    97a4:	34 41       	pop	r4		
    97a6:	30 41       	ret			

000097a8 <cc2500_sleep>:
 * - crystal is off
 * - configuration saved except power table and test registers
 * - calibration and power table update needed after sleep
 */
void cc2500_sleep(void)
{
    97a8:	04 12       	push	r4		
    97aa:	04 41       	mov	r1,	r4	
    97ac:	24 53       	incd	r4		
	CC2500_SPI_STROBE(CC2500_STROBE_SPWD);
    97ae:	3f 40 39 00 	mov	#57,	r15	;#0x0039
    97b2:	b0 12 4a 8e 	call	#0x8e4a	
}
    97b6:	34 41       	pop	r4		
    97b8:	30 41       	ret			

000097ba <cc2500_reset>:
/* **************************************************
 * Init / Reset
 * **************************************************/

void cc2500_reset(void)
{
    97ba:	04 12       	push	r4		
    97bc:	04 41       	mov	r1,	r4	
    97be:	24 53       	incd	r4		
	CC2500_SPI_STROBE(CC2500_STROBE_SRES);
    97c0:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    97c4:	b0 12 4a 8e 	call	#0x8e4a	
	cc2500_wait_status(CC2500_STATUS_IDLE);
    97c8:	4f 43       	clr.b	r15		
    97ca:	b0 12 40 90 	call	#0x9040	
}
    97ce:	34 41       	pop	r4		
    97d0:	30 41       	ret			

000097d2 <cc2500_wakeup>:

void cc2500_wakeup(void)
{
    97d2:	04 12       	push	r4		
    97d4:	04 41       	mov	r1,	r4	
    97d6:	24 53       	incd	r4		
	CC2500_SPI_ENABLE();
    97d8:	b0 12 f6 9e 	call	#0x9ef6	
	/* wait for MISO to go high indicating the oscillator is stable */
	while (CC2500_HW_CHECK_MISO_HIGH()) ;
    97dc:	03 43       	nop			
    97de:	b0 12 4c 9e 	call	#0x9e4c	
    97e2:	0f 93       	tst	r15		
    97e4:	fc 23       	jnz	$-6      	;abs 0x97de
	/* wakeup is complete, drive CSn high and continue */
	CC2500_SPI_DISABLE();
    97e6:	b0 12 0c 9f 	call	#0x9f0c	

	cc2500_idle();
    97ea:	b0 12 84 97 	call	#0x9784	
	cc2500_wait_status(CC2500_STATUS_IDLE);
    97ee:	4f 43       	clr.b	r15		
    97f0:	b0 12 40 90 	call	#0x9040	
}
    97f4:	34 41       	pop	r4		
    97f6:	30 41       	ret			

000097f8 <cc2500_variables_bootstrap>:
/* ************************************************** */
/* ************************************************** */
/* ************************************************** */

void cc2500_variables_bootstrap(void)
{
    97f8:	04 12       	push	r4		
    97fa:	04 41       	mov	r1,	r4	
    97fc:	24 53       	incd	r4		
	/* status */
	cc2500_status_register = 0;
    97fe:	c2 43 a8 02 	mov.b	#0,	&0x02a8	;r3 As==00

	/* Internal driver variables for tx/rx */
	cc2500_rx_packet = 0x00;
    9802:	82 43 a6 02 	mov	#0,	&0x02a6	;r3 As==00
	cc2500_rx_offset = 0x00;
    9806:	c2 43 8a 02 	mov.b	#0,	&0x028a	;r3 As==00
	cc2500_rx_length = 0x00;
    980a:	c2 43 8c 02 	mov.b	#0,	&0x028c	;r3 As==00
}
    980e:	34 41       	pop	r4		
    9810:	30 41       	ret			

00009812 <CC_ASSERT>:
/* ************************************************** */
/* ************************************************** */
/* ************************************************** */

void CC_ASSERT(int cond)
{
    9812:	04 12       	push	r4		
    9814:	04 41       	mov	r1,	r4	
    9816:	24 53       	incd	r4		
    9818:	21 83       	decd	r1		
    981a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	if (!cond) {
		//LED_BLINK_ME();
	}
}
    981e:	21 53       	incd	r1		
    9820:	34 41       	pop	r4		
    9822:	30 41       	ret			

00009824 <cc2500_init>:

void cc2500_init(void)
{
    9824:	04 12       	push	r4		
    9826:	04 41       	mov	r1,	r4	
    9828:	24 53       	incd	r4		
    982a:	21 83       	decd	r1		
	/* ------------------------------
	 * Init
	 * ------------------------------ */

	cc2500_variables_bootstrap();	/* bootstrap global cc2500 variables */
    982c:	b0 12 f8 97 	call	#0x97f8	

	DBG_PRINTF("init enter\n");

	CC2500_HW_INIT();
    9830:	b0 12 d8 8d 	call	#0x8dd8	

	DBG_PRINTF("  hw_init ok\n");

	/* initialize GPIO pins */
	CONFIG_GDO0_PIN_AS_INPUT();
    9834:	b0 12 c2 8d 	call	#0x8dc2	
	/* CC_ASSERT(spi_check_miso_high()); */

	DBG_PRINTF("  miso ok\n");

	/* pulse CSn low then high */
	spi_select_radio();
    9838:	b0 12 f6 9e 	call	#0x9ef6	
	delay_usec(10);
    983c:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    9840:	b0 12 94 9b 	call	#0x9b94	
	spi_deselect_radio();
    9844:	b0 12 0c 9f 	call	#0x9f0c	
	/* hold CSn high for at least 40 microseconds */
	delay_usec(40);
    9848:	3f 40 28 00 	mov	#40,	r15	;#0x0028
    984c:	b0 12 94 9b 	call	#0x9b94	
	/* pull CSn low and wait for SO to go low */

	DBG_PRINTF("  reset 1 ok\n");

	spi_select_radio();
    9850:	b0 12 f6 9e 	call	#0x9ef6	
	while (spi_check_miso_high()) ;
    9854:	03 43       	nop			
    9856:	b0 12 4c 9e 	call	#0x9e4c	
    985a:	0f 93       	tst	r15		
    985c:	fc 23       	jnz	$-6      	;abs 0x9856

	/* directly send strobe command - cannot use function as it affects CSn pin */
	spi_tx_rx(CC2500_STROBE_SRES);
    985e:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    9862:	b0 12 12 9e 	call	#0x9e12	

	/* wait for SO to go low again, reset is complete at that point */
	while (spi_check_miso_high()) ;
    9866:	03 43       	nop			
    9868:	b0 12 4c 9e 	call	#0x9e4c	
    986c:	0f 93       	tst	r15		
    986e:	fc 23       	jnz	$-6      	;abs 0x9868

	/* return CSn pin to its default high level */
	spi_deselect_radio();
    9870:	b0 12 0c 9f 	call	#0x9f0c	
	 * ------------------------------ */

	/* verify that SPI is working, PKTLEN is an arbitrary read/write register used for testing */
#define TEST_VALUE 0xA5
	unsigned short v;
	CC2500_SPI_WREG(CC2500_REG_PKTLEN, TEST_VALUE);
    9874:	3e 40 a5 00 	mov	#165,	r14	;#0x00a5
    9878:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    987c:	b0 12 6c 8e 	call	#0x8e6c	
	v = CC2500_SPI_RREG(CC2500_REG_PKTLEN);
    9880:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    9884:	b0 12 9a 8e 	call	#0x8e9a	
    9888:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    988c:	94 11 fc ff 	sxt	-4(r4)		;0xfffc(r4)
	CC_ASSERT((v & 0xff) == TEST_VALUE);	/* SPI is not responding */
    9890:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    9894:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    9898:	1f 43       	mov	#1,	r15	;r3 As==01
    989a:	3e 90 a5 00 	cmp	#165,	r14	;#0x00a5
    989e:	01 24       	jz	$+4      	;abs 0x98a2
    98a0:	0f 43       	clr	r15		
    98a2:	b0 12 12 98 	call	#0x9812	

	/* verify the correct radio is installed */
#define RADIO_PARTNUM          0x80
#define RADIO_MIN_VERSION      3
#define SETTING_PATABLE0       0xFE
	v = CC2500_SPI_ROREG(CC2500_REG_PARTNUM);
    98a6:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    98aa:	b0 12 d0 8e 	call	#0x8ed0	
    98ae:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    98b2:	94 11 fc ff 	sxt	-4(r4)		;0xfffc(r4)
	CC_ASSERT((v & 0xff) == RADIO_PARTNUM);	/* incorrect radio specified */
    98b6:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    98ba:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    98be:	1f 43       	mov	#1,	r15	;r3 As==01
    98c0:	3e 90 80 00 	cmp	#128,	r14	;#0x0080
    98c4:	01 24       	jz	$+4      	;abs 0x98c8
    98c6:	0f 43       	clr	r15		
    98c8:	b0 12 12 98 	call	#0x9812	
	DBG_PRINTF("  t3 ok\n");

	v = CC2500_SPI_ROREG(CC2500_REG_VERSION);
    98cc:	3f 40 31 00 	mov	#49,	r15	;#0x0031
    98d0:	b0 12 d0 8e 	call	#0x8ed0	
    98d4:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    98d8:	94 11 fc ff 	sxt	-4(r4)		;0xfffc(r4)
	CC_ASSERT((v & 0xff) >= RADIO_MIN_VERSION);	/* obsolete radio specified  */
    98dc:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    98e0:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    98e4:	1f 43       	mov	#1,	r15	;r3 As==01
    98e6:	3e 90 03 00 	cmp	#3,	r14	;#0x0003
    98ea:	01 2c       	jc	$+4      	;abs 0x98ee
    98ec:	0f 43       	clr	r15		
    98ee:	b0 12 12 98 	call	#0x9812	

	/* ------------------------------
	 * Configuration
	 * ------------------------------ */

	cc2500_configure(&rfSettings_default_config);
    98f2:	3f 40 5e bc 	mov	#-17314,r15	;#0xbc5e
    98f6:	b0 12 cc 91 	call	#0x91cc	

	DBG_PRINTF("init done\n");
}
    98fa:	21 53       	incd	r1		
    98fc:	34 41       	pop	r4		
    98fe:	30 41       	ret			

00009900 <cc2500_gdox_signal_handler>:
/* ************************************************** */
/* ************************************************** */
/* ************************************************** */

void cc2500_gdox_signal_handler(uint8_t mask)
{
    9900:	04 12       	push	r4		
    9902:	04 41       	mov	r1,	r4	
    9904:	24 53       	incd	r4		
    9906:	21 83       	decd	r1		
    9908:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	if (mask & CC2500_GDO0) {
    990c:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9910:	1f f3       	and	#1,	r15	;r3 As==01
    9912:	4f 4f       	mov.b	r15,	r15	
    9914:	4f 93       	tst.b	r15		
    9916:	02 24       	jz	$+6      	;abs 0x991c
		/* rx fifo above threshold */
		cc2500_rx_pkt_eop();
    9918:	b0 12 c8 95 	call	#0x95c8	
	}

	if (mask & CC2500_GDO2) {
		/* SYNC_WORD */
	}
}
    991c:	21 53       	incd	r1		
    991e:	34 41       	pop	r4		
    9920:	30 41       	ret			

00009922 <port2_irq_handler>:
/* **************************************************
 * Interupts handler
 * **************************************************/

ISR(PORT2, port2_irq_handler)
{
    9922:	0f 12       	push	r15		
    9924:	0e 12       	push	r14		
    9926:	0d 12       	push	r13		
    9928:	0c 12       	push	r12		
    992a:	04 12       	push	r4		
    992c:	04 41       	mov	r1,	r4	
    992e:	34 50 0a 00 	add	#10,	r4	;#0x000a
    9932:	21 83       	decd	r1		
	uint8_t cc_cmd = 0;
    9934:	c4 43 f4 ff 	mov.b	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
	uint8_t cc_alive = 0;
    9938:	c4 43 f5 ff 	mov.b	#0,	-11(r4)	;r3 As==00, 0xfff5(r4)

	DBG_PRINTF("port2 irq\n");

	if (P2IFG & (P2IE & GDO0_MASK)) {
    993c:	5f 42 2b 00 	mov.b	&0x002b,r15	
    9940:	4f 4f       	mov.b	r15,	r15	
    9942:	5e 42 2d 00 	mov.b	&0x002d,r14	
    9946:	4e 4e       	mov.b	r14,	r14	
    9948:	3e f0 40 00 	and	#64,	r14	;#0x0040
    994c:	0f fe       	and	r14,	r15	
    994e:	0f 93       	tst	r15		
    9950:	0a 24       	jz	$+22     	;abs 0x9966
		DBG_PRINTF("IRQ GDO0\n");
		cc_cmd |= CC2500_GDO0;
    9952:	d4 d3 f4 ff 	bis.b	#1,	-12(r4)	;r3 As==01, 0xfff4(r4)
		cc_alive |= 1;
    9956:	d4 d3 f5 ff 	bis.b	#1,	-11(r4)	;r3 As==01, 0xfff5(r4)
		P2IFG &= GDO0_MASK;
    995a:	5f 42 2b 00 	mov.b	&0x002b,r15	
    995e:	7f f0 40 00 	and.b	#64,	r15	;#0x0040
    9962:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
	}

	if (P2IFG & (P2IE & GDO2_MASK)) {
    9966:	5f 42 2b 00 	mov.b	&0x002b,r15	
    996a:	4f 4f       	mov.b	r15,	r15	
    996c:	5e 42 2d 00 	mov.b	&0x002d,r14	
    9970:	4e 4e       	mov.b	r14,	r14	
    9972:	3e f0 80 00 	and	#128,	r14	;#0x0080
    9976:	0f fe       	and	r14,	r15	
    9978:	0f 93       	tst	r15		
    997a:	0a 24       	jz	$+22     	;abs 0x9990
		DBG_PRINTF("IRQ GDO2\n");
		cc_cmd |= CC2500_GDO2;
    997c:	e4 d3 f4 ff 	bis.b	#2,	-12(r4)	;r3 As==10, 0xfff4(r4)
		cc_alive |= 1;
    9980:	d4 d3 f5 ff 	bis.b	#1,	-11(r4)	;r3 As==01, 0xfff5(r4)
		P2IFG &= GDO2_MASK;
    9984:	5f 42 2b 00 	mov.b	&0x002b,r15	
    9988:	7f f0 80 ff 	and.b	#-128,	r15	;#0xff80
    998c:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
	}

	if (cc_cmd != 0) {
    9990:	c4 93 f4 ff 	tst.b	-12(r4)	;0xfff4(r4)
    9994:	04 24       	jz	$+10     	;abs 0x999e
		cc2500_gdox_signal_handler(cc_cmd);
    9996:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    999a:	b0 12 00 99 	call	#0x9900	
	}

	if (cc_alive) {
    999e:	c4 93 f5 ff 	tst.b	-11(r4)	;0xfff5(r4)
    99a2:	03 24       	jz	$+8      	;abs 0x99aa
		LPM_OFF_ON_EXIT;
    99a4:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    99a8:	00 00 
	}

	P2IFG = 0;
    99aa:	c2 43 2b 00 	mov.b	#0,	&0x002b	;r3 As==00
}
    99ae:	21 53       	incd	r1		
    99b0:	34 41       	pop	r4		
    99b2:	3c 41       	pop	r12		
    99b4:	3d 41       	pop	r13		
    99b6:	3e 41       	pop	r14		
    99b8:	3f 41       	pop	r15		
    99ba:	00 13       	reti			

000099bc <get_mclk_freq_mhz>:
 ***************************************************************/

#define WAIT_CRISTAL() do { } while (0)

int get_mclk_freq_mhz()
{
    99bc:	04 12       	push	r4		
    99be:	04 41       	mov	r1,	r4	
    99c0:	24 53       	incd	r4		
	return mclk_freq_mhz;
    99c2:	1f 42 8e 02 	mov	&0x028e,r15	
}
    99c6:	34 41       	pop	r4		
    99c8:	30 41       	ret			

000099ca <set_mcu_speed>:

static void set_mcu_speed(unsigned char dco_mhz, unsigned char smclk_divider)
{
    99ca:	04 12       	push	r4		
    99cc:	04 41       	mov	r1,	r4	
    99ce:	24 53       	incd	r4		
    99d0:	21 83       	decd	r1		
    99d2:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    99d6:	c4 4e fd ff 	mov.b	r14,	-3(r4)	;0xfffd(r4)
	switch (dco_mhz) {
    99da:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    99de:	3f 92       	cmp	#8,	r15	;r2 As==11
    99e0:	16 24       	jz	$+46     	;abs 0x9a0e
    99e2:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    99e6:	03 34       	jge	$+8      	;abs 0x99ee
    99e8:	1f 93       	cmp	#1,	r15	;r3 As==01
    99ea:	08 24       	jz	$+18     	;abs 0x99fc
    99ec:	2b 3c       	jmp	$+88     	;abs 0x9a44
    99ee:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    99f2:	16 24       	jz	$+46     	;abs 0x9a20
    99f4:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    99f8:	1c 24       	jz	$+58     	;abs 0x9a32
    99fa:	24 3c       	jmp	$+74     	;abs 0x9a44
	case 1:
		BCSCTL1 = CALBC1_1MHZ;
    99fc:	5f 42 ff 10 	mov.b	&0x10ff,r15	
    9a00:	c2 4f 57 00 	mov.b	r15,	&0x0057	
		DCOCTL = CALDCO_1MHZ;
    9a04:	5f 42 fe 10 	mov.b	&0x10fe,r15	
    9a08:	c2 4f 56 00 	mov.b	r15,	&0x0056	
		break;
    9a0c:	1b 3c       	jmp	$+56     	;abs 0x9a44
	case 8:
		BCSCTL1 = CALBC1_8MHZ;
    9a0e:	5f 42 fd 10 	mov.b	&0x10fd,r15	
    9a12:	c2 4f 57 00 	mov.b	r15,	&0x0057	
		DCOCTL = CALDCO_8MHZ;
    9a16:	5f 42 fc 10 	mov.b	&0x10fc,r15	
    9a1a:	c2 4f 56 00 	mov.b	r15,	&0x0056	
		break;
    9a1e:	12 3c       	jmp	$+38     	;abs 0x9a44
	case 12:
		BCSCTL1 = CALBC1_12MHZ;
    9a20:	5f 42 fb 10 	mov.b	&0x10fb,r15	
    9a24:	c2 4f 57 00 	mov.b	r15,	&0x0057	
		DCOCTL = CALDCO_12MHZ;
    9a28:	5f 42 fa 10 	mov.b	&0x10fa,r15	
    9a2c:	c2 4f 56 00 	mov.b	r15,	&0x0056	
		break;
    9a30:	09 3c       	jmp	$+20     	;abs 0x9a44
	case 16:
		BCSCTL1 = CALBC1_16MHZ;
    9a32:	5f 42 f9 10 	mov.b	&0x10f9,r15	
    9a36:	c2 4f 57 00 	mov.b	r15,	&0x0057	
		DCOCTL = CALDCO_16MHZ;
    9a3a:	5f 42 f8 10 	mov.b	&0x10f8,r15	
    9a3e:	c2 4f 56 00 	mov.b	r15,	&0x0056	
		break;
    9a42:	03 43       	nop			
	}
	switch (smclk_divider) {
    9a44:	5f 44 fd ff 	mov.b	-3(r4),	r15	;0xfffd(r4)
    9a48:	2f 93       	cmp	#2,	r15	;r3 As==10
    9a4a:	0e 24       	jz	$+30     	;abs 0x9a68
    9a4c:	3f 90 03 00 	cmp	#3,	r15	;#0x0003
    9a50:	03 34       	jge	$+8      	;abs 0x9a58
    9a52:	1f 93       	cmp	#1,	r15	;r3 As==01
    9a54:	06 24       	jz	$+14     	;abs 0x9a62
    9a56:	12 3c       	jmp	$+38     	;abs 0x9a7c
    9a58:	2f 92       	cmp	#4,	r15	;r2 As==10
    9a5a:	09 24       	jz	$+20     	;abs 0x9a6e
    9a5c:	3f 92       	cmp	#8,	r15	;r2 As==11
    9a5e:	0a 24       	jz	$+22     	;abs 0x9a74
    9a60:	0d 3c       	jmp	$+28     	;abs 0x9a7c
	case 1:
		/* SELM_0: MCL Source Select 0: DCOCLK */
		/* DIVS_1: SMCLK divider /1 */
		BCSCTL2 = SELM_0 | DIVS_0;
    9a62:	c2 43 58 00 	mov.b	#0,	&0x0058	;r3 As==00
		break;
    9a66:	0a 3c       	jmp	$+22     	;abs 0x9a7c
	case 2:
		/* DIVS_1: SMCLK divider /2 */
		BCSCTL2 = SELM_0 | DIVS_1;
    9a68:	e2 43 58 00 	mov.b	#2,	&0x0058	;r3 As==10
		break;
    9a6c:	07 3c       	jmp	$+16     	;abs 0x9a7c
	case 4:
		/* DIVS_2: SMCLK divider /4 */
		BCSCTL2 = SELM_0 | DIVS_2;
    9a6e:	e2 42 58 00 	mov.b	#4,	&0x0058	;r2 As==10
		break;
    9a72:	04 3c       	jmp	$+10     	;abs 0x9a7c
	case 8:
		/* DIVS_3: SMCLK divider /8 */
		BCSCTL2 = SELM_0 | DIVS_3;
    9a74:	f2 40 06 00 	mov.b	#6,	&0x0058	;#0x0006
    9a78:	58 00 
		break;
    9a7a:	03 43       	nop			
	}

	WAIT_CRISTAL();

	mclk_freq_mhz = dco_mhz;
    9a7c:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9a80:	82 4f 8e 02 	mov	r15,	&0x028e	
}
    9a84:	21 53       	incd	r1		
    9a86:	34 41       	pop	r4		
    9a88:	30 41       	ret			

00009a8a <set_mcu_speed_dco_mclk_1MHz_smclk_1MHz>:

void set_mcu_speed_dco_mclk_1MHz_smclk_1MHz()
{
    9a8a:	04 12       	push	r4		
    9a8c:	04 41       	mov	r1,	r4	
    9a8e:	24 53       	incd	r4		
	set_mcu_speed(1, 1);
    9a90:	5e 43       	mov.b	#1,	r14	;r3 As==01
    9a92:	5f 43       	mov.b	#1,	r15	;r3 As==01
    9a94:	b0 12 ca 99 	call	#0x99ca	
}
    9a98:	34 41       	pop	r4		
    9a9a:	30 41       	ret			

00009a9c <set_mcu_speed_dco_mclk_8MHz_smclk_8MHz>:

void set_mcu_speed_dco_mclk_8MHz_smclk_8MHz()
{
    9a9c:	04 12       	push	r4		
    9a9e:	04 41       	mov	r1,	r4	
    9aa0:	24 53       	incd	r4		
	set_mcu_speed(8, 1);
    9aa2:	5e 43       	mov.b	#1,	r14	;r3 As==01
    9aa4:	7f 42       	mov.b	#8,	r15	;r2 As==11
    9aa6:	b0 12 ca 99 	call	#0x99ca	
}
    9aaa:	34 41       	pop	r4		
    9aac:	30 41       	ret			

00009aae <set_mcu_speed_dco_mclk_8MHz_smclk_4MHz>:

void set_mcu_speed_dco_mclk_8MHz_smclk_4MHz()
{
    9aae:	04 12       	push	r4		
    9ab0:	04 41       	mov	r1,	r4	
    9ab2:	24 53       	incd	r4		
	set_mcu_speed(8, 2);
    9ab4:	6e 43       	mov.b	#2,	r14	;r3 As==10
    9ab6:	7f 42       	mov.b	#8,	r15	;r2 As==11
    9ab8:	b0 12 ca 99 	call	#0x99ca	
}
    9abc:	34 41       	pop	r4		
    9abe:	30 41       	ret			

00009ac0 <set_mcu_speed_dco_mclk_8MHz_smclk_2MHz>:

void set_mcu_speed_dco_mclk_8MHz_smclk_2MHz()
{
    9ac0:	04 12       	push	r4		
    9ac2:	04 41       	mov	r1,	r4	
    9ac4:	24 53       	incd	r4		
	set_mcu_speed(8, 4);
    9ac6:	6e 42       	mov.b	#4,	r14	;r2 As==10
    9ac8:	7f 42       	mov.b	#8,	r15	;r2 As==11
    9aca:	b0 12 ca 99 	call	#0x99ca	
}
    9ace:	34 41       	pop	r4		
    9ad0:	30 41       	ret			

00009ad2 <set_mcu_speed_dco_mclk_8MHz_smclk_1MHz>:

void set_mcu_speed_dco_mclk_8MHz_smclk_1MHz()
{
    9ad2:	04 12       	push	r4		
    9ad4:	04 41       	mov	r1,	r4	
    9ad6:	24 53       	incd	r4		
	set_mcu_speed(8, 8);
    9ad8:	7e 42       	mov.b	#8,	r14	;r2 As==11
    9ada:	7f 42       	mov.b	#8,	r15	;r2 As==11
    9adc:	b0 12 ca 99 	call	#0x99ca	
}
    9ae0:	34 41       	pop	r4		
    9ae2:	30 41       	ret			

00009ae4 <set_mcu_speed_dco_mclk_12MHz_smclk_12MHz>:

void set_mcu_speed_dco_mclk_12MHz_smclk_12MHz()
{
    9ae4:	04 12       	push	r4		
    9ae6:	04 41       	mov	r1,	r4	
    9ae8:	24 53       	incd	r4		
	set_mcu_speed(12, 1);
    9aea:	5e 43       	mov.b	#1,	r14	;r3 As==01
    9aec:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    9af0:	b0 12 ca 99 	call	#0x99ca	
}
    9af4:	34 41       	pop	r4		
    9af6:	30 41       	ret			

00009af8 <set_mcu_speed_dco_mclk_12MHz_smclk_6MHz>:

void set_mcu_speed_dco_mclk_12MHz_smclk_6MHz()
{
    9af8:	04 12       	push	r4		
    9afa:	04 41       	mov	r1,	r4	
    9afc:	24 53       	incd	r4		
	set_mcu_speed(12, 2);
    9afe:	6e 43       	mov.b	#2,	r14	;r3 As==10
    9b00:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    9b04:	b0 12 ca 99 	call	#0x99ca	
}
    9b08:	34 41       	pop	r4		
    9b0a:	30 41       	ret			

00009b0c <set_mcu_speed_dco_mclk_12MHz_smclk_3MHz>:

void set_mcu_speed_dco_mclk_12MHz_smclk_3MHz()
{
    9b0c:	04 12       	push	r4		
    9b0e:	04 41       	mov	r1,	r4	
    9b10:	24 53       	incd	r4		
	set_mcu_speed(12, 4);
    9b12:	6e 42       	mov.b	#4,	r14	;r2 As==10
    9b14:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    9b18:	b0 12 ca 99 	call	#0x99ca	
}
    9b1c:	34 41       	pop	r4		
    9b1e:	30 41       	ret			

00009b20 <set_mcu_speed_dco_mclk_12MHz_smclk_1_5MHz>:

void set_mcu_speed_dco_mclk_12MHz_smclk_1_5MHz()
{
    9b20:	04 12       	push	r4		
    9b22:	04 41       	mov	r1,	r4	
    9b24:	24 53       	incd	r4		
	set_mcu_speed(12, 8);
    9b26:	7e 42       	mov.b	#8,	r14	;r2 As==11
    9b28:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    9b2c:	b0 12 ca 99 	call	#0x99ca	
}
    9b30:	34 41       	pop	r4		
    9b32:	30 41       	ret			

00009b34 <set_mcu_speed_dco_mclk_16MHz_smclk_16MHz>:

void set_mcu_speed_dco_mclk_16MHz_smclk_16MHz()
{
    9b34:	04 12       	push	r4		
    9b36:	04 41       	mov	r1,	r4	
    9b38:	24 53       	incd	r4		
	set_mcu_speed(16, 1);
    9b3a:	5e 43       	mov.b	#1,	r14	;r3 As==01
    9b3c:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    9b40:	b0 12 ca 99 	call	#0x99ca	
}
    9b44:	34 41       	pop	r4		
    9b46:	30 41       	ret			

00009b48 <set_mcu_speed_dco_mclk_16MHz_smclk_8MHz>:

void set_mcu_speed_dco_mclk_16MHz_smclk_8MHz()
{
    9b48:	04 12       	push	r4		
    9b4a:	04 41       	mov	r1,	r4	
    9b4c:	24 53       	incd	r4		
	set_mcu_speed(16, 2);
    9b4e:	6e 43       	mov.b	#2,	r14	;r3 As==10
    9b50:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    9b54:	b0 12 ca 99 	call	#0x99ca	
}
    9b58:	34 41       	pop	r4		
    9b5a:	30 41       	ret			

00009b5c <set_mcu_speed_dco_mclk_16MHz_smclk_4MHz>:

void set_mcu_speed_dco_mclk_16MHz_smclk_4MHz()
{
    9b5c:	04 12       	push	r4		
    9b5e:	04 41       	mov	r1,	r4	
    9b60:	24 53       	incd	r4		
	set_mcu_speed(16, 4);
    9b62:	6e 42       	mov.b	#4,	r14	;r2 As==10
    9b64:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    9b68:	b0 12 ca 99 	call	#0x99ca	
}
    9b6c:	34 41       	pop	r4		
    9b6e:	30 41       	ret			

00009b70 <set_mcu_speed_dco_mclk_16MHz_smclk_2MHz>:

void set_mcu_speed_dco_mclk_16MHz_smclk_2MHz()
{
    9b70:	04 12       	push	r4		
    9b72:	04 41       	mov	r1,	r4	
    9b74:	24 53       	incd	r4		
	set_mcu_speed(16, 8);
    9b76:	7e 42       	mov.b	#8,	r14	;r2 As==11
    9b78:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    9b7c:	b0 12 ca 99 	call	#0x99ca	
}
    9b80:	34 41       	pop	r4		
    9b82:	30 41       	ret			

00009b84 <loop_4_cycles>:
/* the IAR version of loop_4_cycles is defined in loop_4_cycles.s43 */
#if defined(__GNUC__) && defined(__MSP430__)
/* uint32_t version */
/* will block 4*n cycles + constant (function jump and init) */
void loop_4_cycles(register uint32_t n)
{
    9b84:	04 12       	push	r4		
    9b86:	04 41       	mov	r1,	r4	
    9b88:	24 53       	incd	r4		
	/* C equivalent: do{ n--; } while(n > 0) */
	__asm__ __volatile__("0: \n" "add.w #-1,%A[n] \n"	/* LSB, 1 cycles */
    9b8a:	3e 53       	add	#-1,	r14	;r3 As==11
    9b8c:	3f 63       	addc	#-1,	r15	;r3 As==11
    9b8e:	fd 2f       	jc	$-4      	;abs 0x9b8a
			     "addc.w #-1,%B[n] \n"	/* MSB, 1 cycles */
			     "jc 0b \n"	/* 2 cycles      */
			     :[n] "+r"((long)n));
}
    9b90:	34 41       	pop	r4		
    9b92:	30 41       	ret			

00009b94 <delay_usec>:
#endif

void inline delay_usec(unsigned int usec)
{
    9b94:	04 12       	push	r4		
    9b96:	04 41       	mov	r1,	r4	
    9b98:	24 53       	incd	r4		
    9b9a:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    9b9e:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	uint32_t loops;
	switch (mclk_freq_mhz) {
    9ba2:	1f 42 8e 02 	mov	&0x028e,r15	
    9ba6:	3f 92       	cmp	#8,	r15	;r2 As==11
    9ba8:	18 24       	jz	$+50     	;abs 0x9bda
    9baa:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    9bae:	03 2c       	jc	$+8      	;abs 0x9bb6
    9bb0:	1f 93       	cmp	#1,	r15	;r3 As==01
    9bb2:	08 24       	jz	$+18     	;abs 0x9bc4
    9bb4:	2d 3c       	jmp	$+92     	;abs 0x9c10
    9bb6:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    9bba:	17 24       	jz	$+48     	;abs 0x9bea
    9bbc:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    9bc0:	1e 24       	jz	$+62     	;abs 0x9bfe
    9bc2:	26 3c       	jmp	$+78     	;abs 0x9c10
	case 1:		// 4 cycles == 4 us
		loops = usec >> 2;
    9bc4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9bc8:	12 c3       	clrc			
    9bca:	0f 10       	rrc	r15		
    9bcc:	12 c3       	clrc			
    9bce:	0f 10       	rrc	r15		
    9bd0:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    9bd4:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
		break;
    9bd8:	26 3c       	jmp	$+78     	;abs 0x9c26
	case 8:		// 4 cycles == 0.5 us
		loops = usec << 1;
    9bda:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9bde:	0f 5f       	rla	r15		
    9be0:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    9be4:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
		break;
    9be8:	1e 3c       	jmp	$+62     	;abs 0x9c26
	case 12:		// 4 cycles == 0.33 us
		loops = usec * 3;
    9bea:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    9bee:	0f 4e       	mov	r14,	r15	
    9bf0:	0f 5f       	rla	r15		
    9bf2:	0f 5e       	add	r14,	r15	
    9bf4:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    9bf8:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
		break;
    9bfc:	14 3c       	jmp	$+42     	;abs 0x9c26
	case 16:		// 4 cycles == 0.25 us
		loops = usec << 2;
    9bfe:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9c02:	0f 5f       	rla	r15		
    9c04:	0f 5f       	rla	r15		
    9c06:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    9c0a:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
		break;
    9c0e:	0b 3c       	jmp	$+24     	;abs 0x9c26
	default:
		loops = usec >> 2; /* arbitrary 1MHz */
    9c10:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9c14:	12 c3       	clrc			
    9c16:	0f 10       	rrc	r15		
    9c18:	12 c3       	clrc			
    9c1a:	0f 10       	rrc	r15		
    9c1c:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    9c20:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
		break;
    9c24:	03 43       	nop			
	}
	loop_4_cycles(loops);
    9c26:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    9c2a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    9c2e:	b0 12 84 9b 	call	#0x9b84	
}
    9c32:	31 50 06 00 	add	#6,	r1	;#0x0006
    9c36:	34 41       	pop	r4		
    9c38:	30 41       	ret			

00009c3a <delay_ms>:

void delay_ms(unsigned int ms)
{
    9c3a:	04 12       	push	r4		
    9c3c:	04 41       	mov	r1,	r4	
    9c3e:	24 53       	incd	r4		
    9c40:	31 82       	sub	#8,	r1	;r2 As==11
    9c42:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	unsigned int i;
	uint32_t loops;

	switch (mclk_freq_mhz) {
    9c46:	1f 42 8e 02 	mov	&0x028e,r15	
    9c4a:	3f 92       	cmp	#8,	r15	;r2 As==11
    9c4c:	13 24       	jz	$+40     	;abs 0x9c74
    9c4e:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    9c52:	03 2c       	jc	$+8      	;abs 0x9c5a
    9c54:	1f 93       	cmp	#1,	r15	;r3 As==01
    9c56:	08 24       	jz	$+18     	;abs 0x9c68
    9c58:	1f 3c       	jmp	$+64     	;abs 0x9c98
    9c5a:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    9c5e:	10 24       	jz	$+34     	;abs 0x9c80
    9c60:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    9c64:	13 24       	jz	$+40     	;abs 0x9c8c
    9c66:	18 3c       	jmp	$+50     	;abs 0x9c98
	case 1:
		loops = 1000 >> 2;
    9c68:	b4 40 fa 00 	mov	#250,	-8(r4)	;#0x00fa, 0xfff8(r4)
    9c6c:	f8 ff 
    9c6e:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
		break;
    9c72:	18 3c       	jmp	$+50     	;abs 0x9ca4
	case 8:
		loops = 1000 << 1;
    9c74:	b4 40 d0 07 	mov	#2000,	-8(r4)	;#0x07d0, 0xfff8(r4)
    9c78:	f8 ff 
    9c7a:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
		break;
    9c7e:	12 3c       	jmp	$+38     	;abs 0x9ca4
	case 12:
		loops = 1000 * 3;
    9c80:	b4 40 b8 0b 	mov	#3000,	-8(r4)	;#0x0bb8, 0xfff8(r4)
    9c84:	f8 ff 
    9c86:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
		break;
    9c8a:	0c 3c       	jmp	$+26     	;abs 0x9ca4
	case 16:
		loops = 1000 << 2;
    9c8c:	b4 40 a0 0f 	mov	#4000,	-8(r4)	;#0x0fa0, 0xfff8(r4)
    9c90:	f8 ff 
    9c92:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
		break;
    9c96:	06 3c       	jmp	$+14     	;abs 0x9ca4
	default: /* arbitrary value to 1MHZ */
		loops = 1000 >> 2;
    9c98:	b4 40 fa 00 	mov	#250,	-8(r4)	;#0x00fa, 0xfff8(r4)
    9c9c:	f8 ff 
    9c9e:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
		break;
    9ca2:	03 43       	nop			
	}

	/* calling delay_usec() introduces an high
	 * clock skew for low mclk frequencies
	 */
	for (i = 0; i < ms; i++) {
    9ca4:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    9ca8:	08 3c       	jmp	$+18     	;abs 0x9cba
		loop_4_cycles(loops);
    9caa:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    9cae:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    9cb2:	b0 12 84 9b 	call	#0x9b84	
	}

	/* calling delay_usec() introduces an high
	 * clock skew for low mclk frequencies
	 */
	for (i = 0; i < ms; i++) {
    9cb6:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    9cba:	94 94 fc ff 	cmp	-4(r4),	-10(r4)	;0xfffc(r4), 0xfff6(r4)
    9cbe:	f6 ff 
    9cc0:	f4 2b       	jnc	$-22     	;abs 0x9caa
		loop_4_cycles(loops);
	}
}
    9cc2:	31 52       	add	#8,	r1	;r2 As==11
    9cc4:	34 41       	pop	r4		
    9cc6:	30 41       	ret			

00009cc8 <led_green_off>:
#define LED_PORT       P1OUT
#define BIT_GREEN      BIT1
#define BIT_RED        BIT0

void led_green_off(void)
{
    9cc8:	04 12       	push	r4		
    9cca:	04 41       	mov	r1,	r4	
    9ccc:	24 53       	incd	r4		
	LED_PORT &= ~BIT_GREEN;
    9cce:	5f 42 21 00 	mov.b	&0x0021,r15	
    9cd2:	7f f0 fd ff 	and.b	#-3,	r15	;#0xfffd
    9cd6:	c2 4f 21 00 	mov.b	r15,	&0x0021	
}
    9cda:	34 41       	pop	r4		
    9cdc:	30 41       	ret			

00009cde <led_green_on>:

void led_green_on(void)
{
    9cde:	04 12       	push	r4		
    9ce0:	04 41       	mov	r1,	r4	
    9ce2:	24 53       	incd	r4		
	LED_PORT |= BIT_GREEN;
    9ce4:	5f 42 21 00 	mov.b	&0x0021,r15	
    9ce8:	6f d3       	bis.b	#2,	r15	;r3 As==10
    9cea:	c2 4f 21 00 	mov.b	r15,	&0x0021	
}
    9cee:	34 41       	pop	r4		
    9cf0:	30 41       	ret			

00009cf2 <led_green_switch>:

void led_green_switch(void)
{
    9cf2:	04 12       	push	r4		
    9cf4:	04 41       	mov	r1,	r4	
    9cf6:	24 53       	incd	r4		
	LED_PORT ^= BIT_GREEN;
    9cf8:	5f 42 21 00 	mov.b	&0x0021,r15	
    9cfc:	6f e3       	xor.b	#2,	r15	;r3 As==10
    9cfe:	c2 4f 21 00 	mov.b	r15,	&0x0021	
}
    9d02:	34 41       	pop	r4		
    9d04:	30 41       	ret			

00009d06 <led_red_off>:

void led_red_off(void)
{
    9d06:	04 12       	push	r4		
    9d08:	04 41       	mov	r1,	r4	
    9d0a:	24 53       	incd	r4		
	LED_PORT &= ~BIT_RED;
    9d0c:	5f 42 21 00 	mov.b	&0x0021,r15	
    9d10:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9d14:	c2 4f 21 00 	mov.b	r15,	&0x0021	
}
    9d18:	34 41       	pop	r4		
    9d1a:	30 41       	ret			

00009d1c <led_red_on>:

void led_red_on(void)
{
    9d1c:	04 12       	push	r4		
    9d1e:	04 41       	mov	r1,	r4	
    9d20:	24 53       	incd	r4		
	LED_PORT |= BIT_RED;
    9d22:	5f 42 21 00 	mov.b	&0x0021,r15	
    9d26:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9d28:	c2 4f 21 00 	mov.b	r15,	&0x0021	
}
    9d2c:	34 41       	pop	r4		
    9d2e:	30 41       	ret			

00009d30 <led_red_switch>:

void led_red_switch(void)
{
    9d30:	04 12       	push	r4		
    9d32:	04 41       	mov	r1,	r4	
    9d34:	24 53       	incd	r4		
	LED_PORT ^= BIT_RED;
    9d36:	5f 42 21 00 	mov.b	&0x0021,r15	
    9d3a:	5f e3       	xor.b	#1,	r15	;r3 As==01
    9d3c:	c2 4f 21 00 	mov.b	r15,	&0x0021	
}
    9d40:	34 41       	pop	r4		
    9d42:	30 41       	ret			

00009d44 <leds_off>:

void leds_off(void)
{
    9d44:	04 12       	push	r4		
    9d46:	04 41       	mov	r1,	r4	
    9d48:	24 53       	incd	r4		
	LED_PORT &= ~(BIT_GREEN | BIT_RED);
    9d4a:	5f 42 21 00 	mov.b	&0x0021,r15	
    9d4e:	7f f0 fc ff 	and.b	#-4,	r15	;#0xfffc
    9d52:	c2 4f 21 00 	mov.b	r15,	&0x0021	
}
    9d56:	34 41       	pop	r4		
    9d58:	30 41       	ret			

00009d5a <leds_on>:

void leds_on(void)
{
    9d5a:	04 12       	push	r4		
    9d5c:	04 41       	mov	r1,	r4	
    9d5e:	24 53       	incd	r4		
	LED_PORT |= (BIT_GREEN | BIT_RED);
    9d60:	5f 42 21 00 	mov.b	&0x0021,r15	
    9d64:	7f d0 03 00 	bis.b	#3,	r15	;#0x0003
    9d68:	c2 4f 21 00 	mov.b	r15,	&0x0021	
}
    9d6c:	34 41       	pop	r4		
    9d6e:	30 41       	ret			

00009d70 <leds_init>:

void leds_init(void)
{
    9d70:	04 12       	push	r4		
    9d72:	04 41       	mov	r1,	r4	
    9d74:	24 53       	incd	r4		
	P1OUT &= ~(BIT_GREEN | BIT_RED);
    9d76:	5f 42 21 00 	mov.b	&0x0021,r15	
    9d7a:	7f f0 fc ff 	and.b	#-4,	r15	;#0xfffc
    9d7e:	c2 4f 21 00 	mov.b	r15,	&0x0021	
	P1DIR |= (BIT_GREEN | BIT_RED);
    9d82:	5f 42 22 00 	mov.b	&0x0022,r15	
    9d86:	7f d0 03 00 	bis.b	#3,	r15	;#0x0003
    9d8a:	c2 4f 22 00 	mov.b	r15,	&0x0022	
	P1SEL &= ~(BIT_GREEN | BIT_RED);
    9d8e:	5f 42 26 00 	mov.b	&0x0026,r15	
    9d92:	7f f0 fc ff 	and.b	#-4,	r15	;#0xfffc
    9d96:	c2 4f 26 00 	mov.b	r15,	&0x0026	
	leds_off();
    9d9a:	b0 12 44 9d 	call	#0x9d44	
}
    9d9e:	34 41       	pop	r4		
    9da0:	30 41       	ret			

00009da2 <spi_init>:
            SPI_CONFIG_PORT();				\
            UCB0CTL1 &= ~UCSWRST;                         \
       )

void spi_init(void)
{
    9da2:	04 12       	push	r4		
    9da4:	04 41       	mov	r1,	r4	
    9da6:	24 53       	incd	r4		
	/* configure all SPI related pins */
	SPI_CONFIG_CSN_PIN_AS_OUTPUT();
    9da8:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9dac:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9dae:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
	SPI_CONFIG_SCLK_PIN_AS_OUTPUT();
    9db2:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9db6:	7f d2       	bis.b	#8,	r15	;r2 As==11
    9db8:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
	SPI_CONFIG_SI_PIN_AS_OUTPUT();
    9dbc:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9dc0:	6f d3       	bis.b	#2,	r15	;r3 As==10
    9dc2:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
	SPI_CONFIG_SO_PIN_AS_INPUT();

	/* set CSn to default high level */
	SPI_DRIVE_CSN_HIGH();
    9dc6:	5f 42 19 00 	mov.b	&0x0019,r15	
    9dca:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9dcc:	c2 4f 19 00 	mov.b	r15,	&0x0019	

	/* initialize the SPI registers */
	SPI_INIT();
    9dd0:	d2 43 69 00 	mov.b	#1,	&0x0069	;r3 As==01
    9dd4:	f2 40 81 ff 	mov.b	#-127,	&0x0069	;#0xff81
    9dd8:	69 00 
    9dda:	f2 40 a9 ff 	mov.b	#-87,	&0x0068	;#0xffa9
    9dde:	68 00 
    9de0:	e2 43 6a 00 	mov.b	#2,	&0x006a	;r3 As==10
    9de4:	c2 43 6b 00 	mov.b	#0,	&0x006b	;r3 As==00
    9de8:	5f 42 1b 00 	mov.b	&0x001b,r15	
    9dec:	7f d0 0e 00 	bis.b	#14,	r15	;#0x000e
    9df0:	c2 4f 1b 00 	mov.b	r15,	&0x001b	
    9df4:	5f 42 69 00 	mov.b	&0x0069,r15	
    9df8:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9dfc:	c2 4f 69 00 	mov.b	r15,	&0x0069	
}
    9e00:	34 41       	pop	r4		
    9e02:	30 41       	ret			

00009e04 <spi_clear_rx_IFG>:

/* ************************************************** */
/* ************************************************** */
/* ************************************************** */

void inline spi_clear_rx_IFG() {
    9e04:	04 12       	push	r4		
    9e06:	04 41       	mov	r1,	r4	
    9e08:	24 53       	incd	r4		
	__asm__ __volatile__("BIC.B #4, &0x3	/* BIC.B #UCB0RXIFG, #IFG2 */ \n");
    9e0a:	e2 c2 03 00 	bic.b	#4,	&0x0003	;r2 As==10
}
    9e0e:	34 41       	pop	r4		
    9e10:	30 41       	ret			

00009e12 <spi_tx_rx>:

int spi_tx_rx(int data)
{
    9e12:	04 12       	push	r4		
    9e14:	04 41       	mov	r1,	r4	
    9e16:	24 53       	incd	r4		
    9e18:	21 82       	sub	#4,	r1	;r2 As==10
    9e1a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	char res;
	spi_clear_rx_IFG();
    9e1e:	b0 12 04 9e 	call	#0x9e04	
	SPI_TX = data;
    9e22:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9e26:	4f 4f       	mov.b	r15,	r15	
    9e28:	c2 4f 6f 00 	mov.b	r15,	&0x006f	
	SPI_WAIT_EOR();
    9e2c:	5f 42 03 00 	mov.b	&0x0003,r15	
    9e30:	4f 4f       	mov.b	r15,	r15	
    9e32:	2f f2       	and	#4,	r15	;r2 As==10
    9e34:	0f 93       	tst	r15		
    9e36:	fa 27       	jz	$-10     	;abs 0x9e2c
	res = SPI_RX;
    9e38:	5f 42 6e 00 	mov.b	&0x006e,r15	
    9e3c:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
	return res;
    9e40:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    9e44:	8f 11       	sxt	r15		
}
    9e46:	21 52       	add	#4,	r1	;r2 As==10
    9e48:	34 41       	pop	r4		
    9e4a:	30 41       	ret			

00009e4c <spi_check_miso_high>:



int spi_check_miso_high(void)
{
    9e4c:	04 12       	push	r4		
    9e4e:	04 41       	mov	r1,	r4	
    9e50:	24 53       	incd	r4		
	return SPI_SO_IS_HIGH();
    9e52:	5f 42 18 00 	mov.b	&0x0018,r15	
    9e56:	4f 4f       	mov.b	r15,	r15	
    9e58:	2f f2       	and	#4,	r15	;r2 As==10
}
    9e5a:	34 41       	pop	r4		
    9e5c:	30 41       	ret			

00009e5e <spi_tx_burst>:

void spi_tx_burst(char *data, int len)
{
    9e5e:	04 12       	push	r4		
    9e60:	04 41       	mov	r1,	r4	
    9e62:	24 53       	incd	r4		
    9e64:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    9e68:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    9e6c:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	int i;
	for (i = 0; i < len; i++) {
    9e70:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    9e74:	11 3c       	jmp	$+36     	;abs 0x9e98
		spi_clear_rx_IFG();
    9e76:	b0 12 04 9e 	call	#0x9e04	
		SPI_TX = data[i];
    9e7a:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    9e7e:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    9e82:	6f 4f       	mov.b	@r15,	r15	
    9e84:	c2 4f 6f 00 	mov.b	r15,	&0x006f	
		SPI_WAIT_EOR();
    9e88:	5f 42 03 00 	mov.b	&0x0003,r15	
    9e8c:	4f 4f       	mov.b	r15,	r15	
    9e8e:	2f f2       	and	#4,	r15	;r2 As==10
    9e90:	0f 93       	tst	r15		
    9e92:	fa 27       	jz	$-10     	;abs 0x9e88
}

void spi_tx_burst(char *data, int len)
{
	int i;
	for (i = 0; i < len; i++) {
    9e94:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    9e98:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    9e9c:	f8 ff 
    9e9e:	eb 3b       	jl	$-40     	;abs 0x9e76
		spi_clear_rx_IFG();
		SPI_TX = data[i];
		SPI_WAIT_EOR();
	}
}
    9ea0:	31 50 06 00 	add	#6,	r1	;#0x0006
    9ea4:	34 41       	pop	r4		
    9ea6:	30 41       	ret			

00009ea8 <spi_rx_burst>:

void spi_rx_burst(char *data, int len)
{
    9ea8:	04 12       	push	r4		
    9eaa:	04 41       	mov	r1,	r4	
    9eac:	24 53       	incd	r4		
    9eae:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    9eb2:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    9eb6:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	int i;
	for (i = 0; i < len; i++) {
    9eba:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    9ebe:	13 3c       	jmp	$+40     	;abs 0x9ee6
		SPI_TX = SPI_DUMMY_BYTE;
    9ec0:	f2 40 55 00 	mov.b	#85,	&0x006f	;#0x0055
    9ec4:	6f 00 
		SPI_WAIT_EOR();
    9ec6:	5f 42 03 00 	mov.b	&0x0003,r15	
    9eca:	4f 4f       	mov.b	r15,	r15	
    9ecc:	2f f2       	and	#4,	r15	;r2 As==10
    9ece:	0f 93       	tst	r15		
    9ed0:	fa 27       	jz	$-10     	;abs 0x9ec6
		data[i] = SPI_RX;
    9ed2:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    9ed6:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    9eda:	5e 42 6e 00 	mov.b	&0x006e,r14	
    9ede:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
}

void spi_rx_burst(char *data, int len)
{
	int i;
	for (i = 0; i < len; i++) {
    9ee2:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    9ee6:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    9eea:	f8 ff 
    9eec:	e9 3b       	jl	$-44     	;abs 0x9ec0
		SPI_TX = SPI_DUMMY_BYTE;
		SPI_WAIT_EOR();
		data[i] = SPI_RX;
	}
}
    9eee:	31 50 06 00 	add	#6,	r1	;#0x0006
    9ef2:	34 41       	pop	r4		
    9ef4:	30 41       	ret			

00009ef6 <spi_select_radio>:
/* ************************************************** */
/* ************************************************** */
/* ************************************************** */

void spi_select_radio(void)
{
    9ef6:	04 12       	push	r4		
    9ef8:	04 41       	mov	r1,	r4	
    9efa:	24 53       	incd	r4		
	RADIO_ENABLE();
    9efc:	5f 42 19 00 	mov.b	&0x0019,r15	
    9f00:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9f04:	c2 4f 19 00 	mov.b	r15,	&0x0019	
}
    9f08:	34 41       	pop	r4		
    9f0a:	30 41       	ret			

00009f0c <spi_deselect_radio>:

void spi_deselect_radio(void)
{
    9f0c:	04 12       	push	r4		
    9f0e:	04 41       	mov	r1,	r4	
    9f10:	24 53       	incd	r4		
	RADIO_DISABLE();
    9f12:	5f 42 19 00 	mov.b	&0x0019,r15	
    9f16:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9f18:	c2 4f 19 00 	mov.b	r15,	&0x0019	
}
    9f1c:	34 41       	pop	r4		
    9f1e:	30 41       	ret			

00009f20 <Timer_A>:

static volatile timer_cb timerA_cb;
static volatile int timerA_wakeup;

ISR(TIMERA0, Timer_A)
{
    9f20:	0f 12       	push	r15		
    9f22:	0e 12       	push	r14		
    9f24:	0d 12       	push	r13		
    9f26:	0c 12       	push	r12		
    9f28:	04 12       	push	r4		
    9f2a:	04 41       	mov	r1,	r4	
    9f2c:	34 50 0a 00 	add	#10,	r4	;#0x000a
	if (timerA_cb != NULL)
    9f30:	1f 42 90 02 	mov	&0x0290,r15	
    9f34:	0f 93       	tst	r15		
    9f36:	03 24       	jz	$+8      	;abs 0x9f3e
		timerA_cb();
    9f38:	1f 42 90 02 	mov	&0x0290,r15	
    9f3c:	8f 12       	call	r15		

	if (timerA_wakeup == 1)
    9f3e:	1f 42 92 02 	mov	&0x0292,r15	
    9f42:	1f 93       	cmp	#1,	r15	;r3 As==01
    9f44:	03 20       	jnz	$+8      	;abs 0x9f4c
		LPM_OFF_ON_EXIT;
    9f46:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    9f4a:	00 00 
}
    9f4c:	34 41       	pop	r4		
    9f4e:	3c 41       	pop	r12		
    9f50:	3d 41       	pop	r13		
    9f52:	3e 41       	pop	r14		
    9f54:	3f 41       	pop	r15		
    9f56:	00 13       	reti			

00009f58 <timerA_init>:

void timerA_init(void)
{
    9f58:	04 12       	push	r4		
    9f5a:	04 41       	mov	r1,	r4	
    9f5c:	24 53       	incd	r4		
	timerA_cb = NULL;
    9f5e:	82 43 90 02 	mov	#0,	&0x0290	;r3 As==00
	timerA_wakeup = 0;
    9f62:	82 43 92 02 	mov	#0,	&0x0292	;r3 As==00
	timerA_stop();
    9f66:	b0 12 f6 9f 	call	#0x9ff6	
}
    9f6a:	34 41       	pop	r4		
    9f6c:	30 41       	ret			

00009f6e <timerA_register_cb>:

void timerA_register_cb(timer_cb cb)
{
    9f6e:	04 12       	push	r4		
    9f70:	04 41       	mov	r1,	r4	
    9f72:	24 53       	incd	r4		
    9f74:	21 83       	decd	r1		
    9f76:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	timerA_cb = cb;
    9f7a:	92 44 fc ff 	mov	-4(r4),	&0x0290	;0xfffc(r4)
    9f7e:	90 02 
}
    9f80:	21 53       	incd	r1		
    9f82:	34 41       	pop	r4		
    9f84:	30 41       	ret			

00009f86 <timerA_set_wakeup>:

void timerA_set_wakeup(int w)
{
    9f86:	04 12       	push	r4		
    9f88:	04 41       	mov	r1,	r4	
    9f8a:	24 53       	incd	r4		
    9f8c:	21 83       	decd	r1		
    9f8e:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	timerA_wakeup = w;
    9f92:	92 44 fc ff 	mov	-4(r4),	&0x0292	;0xfffc(r4)
    9f96:	92 02 
}
    9f98:	21 53       	incd	r1		
    9f9a:	34 41       	pop	r4		
    9f9c:	30 41       	ret			

00009f9e <timerA_start_ticks>:

void timerA_start_ticks(unsigned ticks)
{
    9f9e:	04 12       	push	r4		
    9fa0:	04 41       	mov	r1,	r4	
    9fa2:	24 53       	incd	r4		
    9fa4:	21 83       	decd	r1		
    9fa6:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	BCSCTL3 |= LFXT1S_2;	// LFXT1 = VLO
    9faa:	5f 42 53 00 	mov.b	&0x0053,r15	
    9fae:	7f d0 20 00 	bis.b	#32,	r15	;#0x0020
    9fb2:	c2 4f 53 00 	mov.b	r15,	&0x0053	
	TACCTL0 = CCIE;		// TCCR0 interrupt enabled
    9fb6:	b2 40 10 00 	mov	#16,	&0x0162	;#0x0010
    9fba:	62 01 
	TAR = 0;
    9fbc:	82 43 70 01 	mov	#0,	&0x0170	;r3 As==00
	TACCR0 = ticks;
    9fc0:	92 44 fc ff 	mov	-4(r4),	&0x0172	;0xfffc(r4)
    9fc4:	72 01 
	TACTL = TASSEL_1 + MC_1;	// ACLK, upmode
    9fc6:	b2 40 10 01 	mov	#272,	&0x0160	;#0x0110
    9fca:	60 01 
}
    9fcc:	21 53       	incd	r1		
    9fce:	34 41       	pop	r4		
    9fd0:	30 41       	ret			

00009fd2 <timerA_start_milliseconds>:

#define VLO_FREQ 12000
#define TICKS_IN_MS (VLO_FREQ/1000)

void timerA_start_milliseconds(unsigned ms)
{
    9fd2:	04 12       	push	r4		
    9fd4:	04 41       	mov	r1,	r4	
    9fd6:	24 53       	incd	r4		
    9fd8:	21 83       	decd	r1		
    9fda:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	timerA_start_ticks(ms * TICKS_IN_MS);
    9fde:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    9fe2:	0f 4e       	mov	r14,	r15	
    9fe4:	0f 5f       	rla	r15		
    9fe6:	0f 5e       	add	r14,	r15	
    9fe8:	0f 5f       	rla	r15		
    9fea:	0f 5f       	rla	r15		
    9fec:	b0 12 9e 9f 	call	#0x9f9e	
}
    9ff0:	21 53       	incd	r1		
    9ff2:	34 41       	pop	r4		
    9ff4:	30 41       	ret			

00009ff6 <timerA_stop>:

void timerA_stop(void)
{
    9ff6:	04 12       	push	r4		
    9ff8:	04 41       	mov	r1,	r4	
    9ffa:	24 53       	incd	r4		
	TACTL = 0;
    9ffc:	82 43 60 01 	mov	#0,	&0x0160	;r3 As==00
}
    a000:	34 41       	pop	r4		
    a002:	30 41       	ret			

0000a004 <Timer_B>:

static volatile timer_cb timerB_cb;
static volatile int timerB_wakeup;

ISR(TIMERB0, Timer_B)
{
    a004:	0f 12       	push	r15		
    a006:	0e 12       	push	r14		
    a008:	0d 12       	push	r13		
    a00a:	0c 12       	push	r12		
    a00c:	04 12       	push	r4		
    a00e:	04 41       	mov	r1,	r4	
    a010:	34 50 0a 00 	add	#10,	r4	;#0x000a
	if (timerB_cb != NULL)
    a014:	1f 42 94 02 	mov	&0x0294,r15	
    a018:	0f 93       	tst	r15		
    a01a:	03 24       	jz	$+8      	;abs 0xa022
		timerB_cb();
    a01c:	1f 42 94 02 	mov	&0x0294,r15	
    a020:	8f 12       	call	r15		

	if (timerB_wakeup == 1)
    a022:	1f 42 96 02 	mov	&0x0296,r15	
    a026:	1f 93       	cmp	#1,	r15	;r3 As==01
    a028:	03 20       	jnz	$+8      	;abs 0xa030
		LPM_OFF_ON_EXIT;
    a02a:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    a02e:	00 00 
}
    a030:	34 41       	pop	r4		
    a032:	3c 41       	pop	r12		
    a034:	3d 41       	pop	r13		
    a036:	3e 41       	pop	r14		
    a038:	3f 41       	pop	r15		
    a03a:	00 13       	reti			

0000a03c <timerB_init>:

void timerB_init(void)
{
    a03c:	04 12       	push	r4		
    a03e:	04 41       	mov	r1,	r4	
    a040:	24 53       	incd	r4		
	timerB_cb = NULL;
    a042:	82 43 94 02 	mov	#0,	&0x0294	;r3 As==00
	timerB_wakeup = 0;
    a046:	82 43 96 02 	mov	#0,	&0x0296	;r3 As==00
	timerB_stop();
    a04a:	b0 12 da a0 	call	#0xa0da	
}
    a04e:	34 41       	pop	r4		
    a050:	30 41       	ret			

0000a052 <timerB_register_cb>:

void timerB_register_cb(timer_cb cb)
{
    a052:	04 12       	push	r4		
    a054:	04 41       	mov	r1,	r4	
    a056:	24 53       	incd	r4		
    a058:	21 83       	decd	r1		
    a05a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	timerB_cb = cb;
    a05e:	92 44 fc ff 	mov	-4(r4),	&0x0294	;0xfffc(r4)
    a062:	94 02 
}
    a064:	21 53       	incd	r1		
    a066:	34 41       	pop	r4		
    a068:	30 41       	ret			

0000a06a <timerB_set_wakeup>:

void timerB_set_wakeup(int w)
{
    a06a:	04 12       	push	r4		
    a06c:	04 41       	mov	r1,	r4	
    a06e:	24 53       	incd	r4		
    a070:	21 83       	decd	r1		
    a072:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	timerB_wakeup = w;
    a076:	92 44 fc ff 	mov	-4(r4),	&0x0296	;0xfffc(r4)
    a07a:	96 02 
}
    a07c:	21 53       	incd	r1		
    a07e:	34 41       	pop	r4		
    a080:	30 41       	ret			

0000a082 <timerB_start_ticks>:

void timerB_start_ticks(unsigned ticks)
{
    a082:	04 12       	push	r4		
    a084:	04 41       	mov	r1,	r4	
    a086:	24 53       	incd	r4		
    a088:	21 83       	decd	r1		
    a08a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	BCSCTL3 |= LFXT1S_2;	// LFXT1 = VLO
    a08e:	5f 42 53 00 	mov.b	&0x0053,r15	
    a092:	7f d0 20 00 	bis.b	#32,	r15	;#0x0020
    a096:	c2 4f 53 00 	mov.b	r15,	&0x0053	
	TBCCTL0 = CCIE;		// TCCR0 interrupt enabled
    a09a:	b2 40 10 00 	mov	#16,	&0x0182	;#0x0010
    a09e:	82 01 
	TBR = 0;
    a0a0:	82 43 90 01 	mov	#0,	&0x0190	;r3 As==00
	TBCCR0 = ticks;
    a0a4:	92 44 fc ff 	mov	-4(r4),	&0x0192	;0xfffc(r4)
    a0a8:	92 01 
	TBCTL = TBSSEL_1 + MC_1;	// ACLK, upmode
    a0aa:	b2 40 10 01 	mov	#272,	&0x0180	;#0x0110
    a0ae:	80 01 
}
    a0b0:	21 53       	incd	r1		
    a0b2:	34 41       	pop	r4		
    a0b4:	30 41       	ret			

0000a0b6 <timerB_start_milliseconds>:

void timerB_start_milliseconds(unsigned ms)
{
    a0b6:	04 12       	push	r4		
    a0b8:	04 41       	mov	r1,	r4	
    a0ba:	24 53       	incd	r4		
    a0bc:	21 83       	decd	r1		
    a0be:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	timerB_start_ticks(ms * TICKS_IN_MS);
    a0c2:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    a0c6:	0f 4e       	mov	r14,	r15	
    a0c8:	0f 5f       	rla	r15		
    a0ca:	0f 5e       	add	r14,	r15	
    a0cc:	0f 5f       	rla	r15		
    a0ce:	0f 5f       	rla	r15		
    a0d0:	b0 12 82 a0 	call	#0xa082	
}
    a0d4:	21 53       	incd	r1		
    a0d6:	34 41       	pop	r4		
    a0d8:	30 41       	ret			

0000a0da <timerB_stop>:

void timerB_stop(void)
{
    a0da:	04 12       	push	r4		
    a0dc:	04 41       	mov	r1,	r4	
    a0de:	24 53       	incd	r4		
	TBCTL = 0;
    a0e0:	82 43 80 01 	mov	#0,	&0x0180	;r3 As==00
}
    a0e4:	34 41       	pop	r4		
    a0e6:	30 41       	ret			

0000a0e8 <uart_init>:
/* ************************************************** */

static volatile uart_cb_t uart_cb;

void uart_init(int config)
{
    a0e8:	04 12       	push	r4		
    a0ea:	04 41       	mov	r1,	r4	
    a0ec:	24 53       	incd	r4		
    a0ee:	21 83       	decd	r1		
    a0f0:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	P3SEL |= (BIT_TX | BIT_RX);	/* uart   */
    a0f4:	5f 42 1b 00 	mov.b	&0x001b,r15	
    a0f8:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    a0fc:	c2 4f 1b 00 	mov.b	r15,	&0x001b	
	P3DIR |= (BIT_TX);	/* output */
    a100:	5f 42 1a 00 	mov.b	&0x001a,r15	
    a104:	7f d0 10 00 	bis.b	#16,	r15	;#0x0010
    a108:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
	P3DIR &= ~(BIT_RX);	/* input  */
    a10c:	5f 42 1a 00 	mov.b	&0x001a,r15	
    a110:	7f f0 df ff 	and.b	#-33,	r15	;#0xffdf
    a114:	c2 4f 1a 00 	mov.b	r15,	&0x001a	

	switch (config) {
    a118:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    a11c:	1f 93       	cmp	#1,	r15	;r3 As==01
    a11e:	03 24       	jz	$+8      	;abs 0xa126
    a120:	3f 92       	cmp	#8,	r15	;r2 As==11
    a122:	12 24       	jz	$+38     	;abs 0xa148
    a124:	23 3c       	jmp	$+72     	;abs 0xa16c
	case UART_9600_SMCLK_1MHZ:
		UCA0CTL1 = UCSSEL_2;	// SMCLK
    a126:	f2 40 80 ff 	mov.b	#-128,	&0x0061	;#0xff80
    a12a:	61 00 
		UCA0BR0 = 0x68;	// 9600 from 1Mhz
    a12c:	f2 40 68 00 	mov.b	#104,	&0x0062	;#0x0068
    a130:	62 00 
		UCA0BR1 = 0x00;
    a132:	c2 43 63 00 	mov.b	#0,	&0x0063	;r3 As==00
		UCA0MCTL = UCBRS_2;
    a136:	e2 42 64 00 	mov.b	#4,	&0x0064	;r2 As==10
		UCA0CTL1 &= ~UCSWRST;	// **Initialize USCI state machine**
    a13a:	5f 42 61 00 	mov.b	&0x0061,r15	
    a13e:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    a142:	c2 4f 61 00 	mov.b	r15,	&0x0061	
		break;
    a146:	13 3c       	jmp	$+40     	;abs 0xa16e

	case UART_9600_SMCLK_8MHZ:
		UCA0CTL1 = UCSSEL_2;	// SMCLK
    a148:	f2 40 80 ff 	mov.b	#-128,	&0x0061	;#0xff80
    a14c:	61 00 
		UCA0BR0 = 0x41;	// 9600 from 8Mhz
    a14e:	f2 40 41 00 	mov.b	#65,	&0x0062	;#0x0041
    a152:	62 00 
		UCA0BR1 = 0x03;
    a154:	f2 40 03 00 	mov.b	#3,	&0x0063	;#0x0003
    a158:	63 00 
		UCA0MCTL = UCBRS_2;
    a15a:	e2 42 64 00 	mov.b	#4,	&0x0064	;r2 As==10
		UCA0CTL1 &= ~UCSWRST;	// **Initialize USCI state machine**
    a15e:	5f 42 61 00 	mov.b	&0x0061,r15	
    a162:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    a166:	c2 4f 61 00 	mov.b	r15,	&0x0061	
		break;
    a16a:	01 3c       	jmp	$+4      	;abs 0xa16e

	default:
		break;
    a16c:	03 43       	nop			
	}

	uart_cb = NULL;
    a16e:	82 43 98 02 	mov	#0,	&0x0298	;r3 As==00
}
    a172:	21 53       	incd	r1		
    a174:	34 41       	pop	r4		
    a176:	30 41       	ret			

0000a178 <uart_stop>:
/* ************************************************** */
/* ************************************************** */
/* ************************************************** */

void uart_stop(void)
{
    a178:	04 12       	push	r4		
    a17a:	04 41       	mov	r1,	r4	
    a17c:	24 53       	incd	r4		
}
    a17e:	34 41       	pop	r4		
    a180:	30 41       	ret			

0000a182 <putchar>:
/* ************************************************** */
/* ************************************************** */
/* ************************************************** */

int putchar(int c)
{
    a182:	04 12       	push	r4		
    a184:	04 41       	mov	r1,	r4	
    a186:	24 53       	incd	r4		
    a188:	21 83       	decd	r1		
    a18a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	UCA0TXBUF = c;
    a18e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    a192:	4f 4f       	mov.b	r15,	r15	
    a194:	c2 4f 67 00 	mov.b	r15,	&0x0067	
	while (!(IFG2 & UCA0TXIFG)) ;	// USCI_A0 TX buffer ready?
    a198:	03 43       	nop			
    a19a:	5f 42 03 00 	mov.b	&0x0003,r15	
    a19e:	4f 4f       	mov.b	r15,	r15	
    a1a0:	2f f3       	and	#2,	r15	;r3 As==10
    a1a2:	0f 93       	tst	r15		
    a1a4:	fa 27       	jz	$-10     	;abs 0xa19a
	return (unsigned char)c;
    a1a6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    a1aa:	4f 4f       	mov.b	r15,	r15	
    a1ac:	4f 4f       	mov.b	r15,	r15	
}
    a1ae:	21 53       	incd	r1		
    a1b0:	34 41       	pop	r4		
    a1b2:	30 41       	ret			

0000a1b4 <uart_getchar>:

int uart_getchar(void)
{
    a1b4:	04 12       	push	r4		
    a1b6:	04 41       	mov	r1,	r4	
    a1b8:	24 53       	incd	r4		
    a1ba:	21 83       	decd	r1		
	int c;
	c = UCA0RXBUF;
    a1bc:	5f 42 66 00 	mov.b	&0x0066,r15	
    a1c0:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    a1c4:	c4 43 fd ff 	mov.b	#0,	-3(r4)	;r3 As==00, 0xfffd(r4)
	return c;
    a1c8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
}
    a1cc:	21 53       	incd	r1		
    a1ce:	34 41       	pop	r4		
    a1d0:	30 41       	ret			

0000a1d2 <uart_eint>:
/* ************************************************** */
/* ************************************************** */
/* ************************************************** */

void uart_eint(void)
{
    a1d2:	04 12       	push	r4		
    a1d4:	04 41       	mov	r1,	r4	
    a1d6:	24 53       	incd	r4		
	IE2 |= UCA0RXIE;	// Enable USCI_A0 RX interrupt
    a1d8:	5f 42 01 00 	mov.b	&0x0001,r15	
    a1dc:	5f d3       	bis.b	#1,	r15	;r3 As==01
    a1de:	c2 4f 01 00 	mov.b	r15,	&0x0001	
}
    a1e2:	34 41       	pop	r4		
    a1e4:	30 41       	ret			

0000a1e6 <uart_dint>:

void uart_dint(void)
{
    a1e6:	04 12       	push	r4		
    a1e8:	04 41       	mov	r1,	r4	
    a1ea:	24 53       	incd	r4		
	IE2 &= ~UCA0RXIE;
    a1ec:	5f 42 01 00 	mov.b	&0x0001,r15	
    a1f0:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    a1f4:	c2 4f 01 00 	mov.b	r15,	&0x0001	
}
    a1f8:	34 41       	pop	r4		
    a1fa:	30 41       	ret			

0000a1fc <uart_register_cb>:

void uart_register_cb(uart_cb_t cb)
{
    a1fc:	04 12       	push	r4		
    a1fe:	04 41       	mov	r1,	r4	
    a200:	24 53       	incd	r4		
    a202:	21 83       	decd	r1		
    a204:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	uart_cb = cb;
    a208:	92 44 fc ff 	mov	-4(r4),	&0x0298	;0xfffc(r4)
    a20c:	98 02 
	if (cb == NULL) {
    a20e:	84 93 fc ff 	tst	-4(r4)		;0xfffc(r4)
    a212:	03 20       	jnz	$+8      	;abs 0xa21a
		uart_dint();
    a214:	b0 12 e6 a1 	call	#0xa1e6	
    a218:	02 3c       	jmp	$+6      	;abs 0xa21e
	} else {
		uart_eint();
    a21a:	b0 12 d2 a1 	call	#0xa1d2	
	}
}
    a21e:	21 53       	incd	r1		
    a220:	34 41       	pop	r4		
    a222:	30 41       	ret			

0000a224 <usart0irq>:

ISR(USCIAB0RX, usart0irq)
{
    a224:	0f 12       	push	r15		
    a226:	0e 12       	push	r14		
    a228:	0d 12       	push	r13		
    a22a:	0c 12       	push	r12		
    a22c:	04 12       	push	r4		
    a22e:	04 41       	mov	r1,	r4	
    a230:	34 50 0a 00 	add	#10,	r4	;#0x000a
    a234:	21 83       	decd	r1		
	volatile unsigned char dummy;
	/* Check status register for receive errors. */
	if (UCA0STAT & UCRXERR) {
    a236:	5f 42 65 00 	mov.b	&0x0065,r15	
    a23a:	4f 4f       	mov.b	r15,	r15	
    a23c:	2f f2       	and	#4,	r15	;r2 As==10
    a23e:	0f 93       	tst	r15		
    a240:	0a 24       	jz	$+22     	;abs 0xa256
		/* Clear error flags by forcing a dummy read. */
		dummy = UCA0RXBUF;
    a242:	5f 42 66 00 	mov.b	&0x0066,r15	
    a246:	c4 4f f4 ff 	mov.b	r15,	-12(r4)	;0xfff4(r4)
		dummy += 1; /* warning gcc otherwise! */
    a24a:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    a24e:	5f 53       	inc.b	r15		
    a250:	c4 4f f4 ff 	mov.b	r15,	-12(r4)	;0xfff4(r4)
    a254:	0a 3c       	jmp	$+22     	;abs 0xa26a
	} else {
		if (uart_cb(UCA0RXBUF) != 0) {
    a256:	1e 42 98 02 	mov	&0x0298,r14	
    a25a:	5f 42 66 00 	mov.b	&0x0066,r15	
    a25e:	8e 12       	call	r14		
    a260:	0f 93       	tst	r15		
    a262:	03 24       	jz	$+8      	;abs 0xa26a
			LPM_OFF_ON_EXIT;
    a264:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    a268:	00 00 
		}
	}
}
    a26a:	21 53       	incd	r1		
    a26c:	34 41       	pop	r4		
    a26e:	3c 41       	pop	r12		
    a270:	3d 41       	pop	r13		
    a272:	3e 41       	pop	r14		
    a274:	3f 41       	pop	r15		
    a276:	00 13       	reti			

0000a278 <flash_init>:
#include "watchdog.h"
#include "clock.h"
#include "flash.h"

void flash_init()
{
    a278:	04 12       	push	r4		
    a27a:	04 41       	mov	r1,	r4	
    a27c:	24 53       	incd	r4		
	/* Flash timing generator frequency: ideally around 366 Hz
	 *  257 Hz < Fftg < 476 Hz from (datasheet slas504 p55) */
	switch (get_mclk_freq_mhz()) {
    a27e:	b0 12 bc 99 	call	#0x99bc	
    a282:	3f 92       	cmp	#8,	r15	;r2 As==11
    a284:	11 24       	jz	$+36     	;abs 0xa2a8
    a286:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    a28a:	03 34       	jge	$+8      	;abs 0xa292
    a28c:	1f 93       	cmp	#1,	r15	;r3 As==01
    a28e:	08 24       	jz	$+18     	;abs 0xa2a0
    a290:	17 3c       	jmp	$+48     	;abs 0xa2c0
    a292:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    a296:	0c 24       	jz	$+26     	;abs 0xa2b0
    a298:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    a29c:	0d 24       	jz	$+28     	;abs 0xa2b8
    a29e:	10 3c       	jmp	$+34     	;abs 0xa2c0
	case 1:
		FCTL2 = FWKEY | FSSEL_2 | FN1 | FN0;	/* Fftg = MCLK/3 = 333 */
    a2a0:	b2 40 83 a5 	mov	#-23165,&0x012a	;#0xa583
    a2a4:	2a 01 
		break;
    a2a6:	0c 3c       	jmp	$+26     	;abs 0xa2c0
	case 8:
		FCTL2 = FWKEY | FSSEL_2 | FN4 | FN2 | FN1;	/* Fftg = MCLK/22 = 364 */
    a2a8:	b2 40 96 a5 	mov	#-23146,&0x012a	;#0xa596
    a2ac:	2a 01 
		break;
    a2ae:	08 3c       	jmp	$+18     	;abs 0xa2c0
	case 12:
		FCTL2 = FWKEY | FSSEL_2 | FN5 | FN0;	/* Fftg = MCLK/33 = 364 */
    a2b0:	b2 40 a1 a5 	mov	#-23135,&0x012a	;#0xa5a1
    a2b4:	2a 01 
		break;
    a2b6:	04 3c       	jmp	$+10     	;abs 0xa2c0
	case 16:
		FCTL2 = FWKEY | FSSEL_2 | FN5 | FN3 | FN2;	/* Fftg = MCLK/44 = 364 */
    a2b8:	b2 40 ac a5 	mov	#-23124,&0x012a	;#0xa5ac
    a2bc:	2a 01 
		break;
    a2be:	03 43       	nop			
	}
}
    a2c0:	34 41       	pop	r4		
    a2c2:	30 41       	ret			

0000a2c4 <flash_write_byte>:

/* programs 1 byte (8 bit) into the flash memory,
 * returns non 0 if the write failed, that is when a segment erase
 * is needed because the data_ptr location was previously written */
int flash_write_byte(unsigned char *data_ptr, unsigned char byte)
{
    a2c4:	04 12       	push	r4		
    a2c6:	04 41       	mov	r1,	r4	
    a2c8:	24 53       	incd	r4		
    a2ca:	21 82       	sub	#4,	r1	;r2 As==10
    a2cc:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    a2d0:	c4 4e fc ff 	mov.b	r14,	-4(r4)	;0xfffc(r4)
	if (*data_ptr == byte) {
    a2d4:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a2d8:	6f 4f       	mov.b	@r15,	r15	
    a2da:	5f 94 fc ff 	cmp.b	-4(r4),	r15	;0xfffc(r4)
    a2de:	02 20       	jnz	$+6      	;abs 0xa2e4
		return 0;
    a2e0:	0f 43       	clr	r15		
    a2e2:	1f 3c       	jmp	$+64     	;abs 0xa322
	} else if (*data_ptr != 0xFF) {
    a2e4:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a2e8:	6f 4f       	mov.b	@r15,	r15	
    a2ea:	7f 93       	cmp.b	#-1,	r15	;r3 As==11
    a2ec:	02 24       	jz	$+6      	;abs 0xa2f2
		/* don't allow 2 several consecutive writes on the same location */
		return -1;
    a2ee:	3f 43       	mov	#-1,	r15	;r3 As==11
    a2f0:	18 3c       	jmp	$+50     	;abs 0xa322
	}

	flash_init();
    a2f2:	b0 12 78 a2 	call	#0xa278	
	/* interrupts are automatically disabled during
	 * flash operation as EEI = 0 and EEIEX = 0 (FCTL1 bits) */
	watchdog_stop();
    a2f6:	b0 12 ec a3 	call	#0xa3ec	
	FCTL3 = FWKEY;		/* Lock = 0 */
    a2fa:	b2 40 00 a5 	mov	#-23296,&0x012c	;#0xa500
    a2fe:	2c 01 
	FCTL1 = FWKEY | WRT;	/* WRT = 1 */
    a300:	b2 40 40 a5 	mov	#-23232,&0x0128	;#0xa540
    a304:	28 01 
	*data_ptr = byte;	/* program Flash byte */
    a306:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a30a:	df 44 fc ff 	mov.b	-4(r4),	0(r15)	;0xfffc(r4), 0x0000(r15)
    a30e:	00 00 
	FCTL1 = FWKEY;		/* WRT = 0 */
    a310:	b2 40 00 a5 	mov	#-23296,&0x0128	;#0xa500
    a314:	28 01 
	FCTL3 = FWKEY | LOCK;	/* Lock = 1 */
    a316:	b2 40 10 a5 	mov	#-23280,&0x012c	;#0xa510
    a31a:	2c 01 
	watchdog_restore();
    a31c:	b0 12 08 a4 	call	#0xa408	

	return 0;
    a320:	0f 43       	clr	r15		
}
    a322:	21 52       	add	#4,	r1	;r2 As==10
    a324:	34 41       	pop	r4		
    a326:	30 41       	ret			

0000a328 <flash_write_word>:

/* programs 1 word (16 bit) into the flash memory,
 * returns non 0 if the write failed, that is when a segment erase
 * is needed because the data_ptr location was previously written */
int flash_write_word(unsigned int *data_ptr, unsigned int word)
{
    a328:	04 12       	push	r4		
    a32a:	04 41       	mov	r1,	r4	
    a32c:	24 53       	incd	r4		
    a32e:	21 82       	sub	#4,	r1	;r2 As==10
    a330:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    a334:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	if (*data_ptr == word) {
    a338:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a33c:	2f 4f       	mov	@r15,	r15	
    a33e:	1f 94 fc ff 	cmp	-4(r4),	r15	;0xfffc(r4)
    a342:	02 20       	jnz	$+6      	;abs 0xa348
		return 0;
    a344:	0f 43       	clr	r15		
    a346:	1f 3c       	jmp	$+64     	;abs 0xa386
	} else if (*data_ptr != 0xFFFF) {
    a348:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a34c:	2f 4f       	mov	@r15,	r15	
    a34e:	3f 93       	cmp	#-1,	r15	;r3 As==11
    a350:	02 24       	jz	$+6      	;abs 0xa356
		/* don't allow 2 several consecutive writes on the same location */
		return -1;
    a352:	3f 43       	mov	#-1,	r15	;r3 As==11
    a354:	18 3c       	jmp	$+50     	;abs 0xa386
	}

	flash_init();
    a356:	b0 12 78 a2 	call	#0xa278	
	watchdog_stop();
    a35a:	b0 12 ec a3 	call	#0xa3ec	
	FCTL3 = FWKEY;		/* Lock = 0 */
    a35e:	b2 40 00 a5 	mov	#-23296,&0x012c	;#0xa500
    a362:	2c 01 
	FCTL1 = FWKEY | WRT;	/* WRT = 1 */
    a364:	b2 40 40 a5 	mov	#-23232,&0x0128	;#0xa540
    a368:	28 01 
	*data_ptr = word;	/* program Flash word */
    a36a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a36e:	9f 44 fc ff 	mov	-4(r4),	0(r15)	;0xfffc(r4), 0x0000(r15)
    a372:	00 00 
	FCTL1 = FWKEY;		/* WRT = 0 */
    a374:	b2 40 00 a5 	mov	#-23296,&0x0128	;#0xa500
    a378:	28 01 
	FCTL3 = FWKEY | LOCK;	/* Lock = 1 */
    a37a:	b2 40 10 a5 	mov	#-23280,&0x012c	;#0xa510
    a37e:	2c 01 
	watchdog_restore();
    a380:	b0 12 08 a4 	call	#0xa408	

	return 0;
    a384:	0f 43       	clr	r15		
}
    a386:	21 52       	add	#4,	r1	;r2 As==10
    a388:	34 41       	pop	r4		
    a38a:	30 41       	ret			

0000a38c <flash_erase_segment>:

/* erases 1 Segment of flash memory */
void flash_erase_segment(unsigned int *data_ptr)
{
    a38c:	04 12       	push	r4		
    a38e:	04 41       	mov	r1,	r4	
    a390:	24 53       	incd	r4		
    a392:	21 83       	decd	r1		
    a394:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	flash_init();
    a398:	b0 12 78 a2 	call	#0xa278	
	watchdog_stop();
    a39c:	b0 12 ec a3 	call	#0xa3ec	
	FCTL3 = FWKEY;		/* Lock = 0 */
    a3a0:	b2 40 00 a5 	mov	#-23296,&0x012c	;#0xa500
    a3a4:	2c 01 
	FCTL1 = FWKEY | ERASE;	/* ERASE = 1 */
    a3a6:	b2 40 02 a5 	mov	#-23294,&0x0128	;#0xa502
    a3aa:	28 01 
	*data_ptr = 0;		/* erase Flash segment */
    a3ac:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    a3b0:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
	FCTL1 = FWKEY;		/* ERASE = 0 */
    a3b4:	b2 40 00 a5 	mov	#-23296,&0x0128	;#0xa500
    a3b8:	28 01 
	FCTL3 = FWKEY | LOCK;	/* Lock = 1 */
    a3ba:	b2 40 10 a5 	mov	#-23280,&0x012c	;#0xa510
    a3be:	2c 01 
	watchdog_restore();
    a3c0:	b0 12 08 a4 	call	#0xa408	
}
    a3c4:	21 53       	incd	r1		
    a3c6:	34 41       	pop	r4		
    a3c8:	30 41       	ret			

0000a3ca <flash_erase_info_memory>:

void flash_erase_info_memory()
{
    a3ca:	04 12       	push	r4		
    a3cc:	04 41       	mov	r1,	r4	
    a3ce:	24 53       	incd	r4		
	flash_erase_segment((unsigned int *)INFOD_START);
    a3d0:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    a3d4:	b0 12 8c a3 	call	#0xa38c	
	flash_erase_segment((unsigned int *)INFOC_START);
    a3d8:	3f 40 40 10 	mov	#4160,	r15	;#0x1040
    a3dc:	b0 12 8c a3 	call	#0xa38c	
	flash_erase_segment((unsigned int *)INFOB_START);
    a3e0:	3f 40 80 10 	mov	#4224,	r15	;#0x1080
    a3e4:	b0 12 8c a3 	call	#0xa38c	
	/* INFOA contains calibration data and is protected by LOCKA */
}
    a3e8:	34 41       	pop	r4		
    a3ea:	30 41       	ret			

0000a3ec <watchdog_stop>:
#endif

static int watchdog_backup;

void watchdog_stop()
{
    a3ec:	04 12       	push	r4		
    a3ee:	04 41       	mov	r1,	r4	
    a3f0:	24 53       	incd	r4		
	/* the upper 8 bits are a password */
	watchdog_backup = WDTCTL & 0x00FF;
    a3f2:	1f 42 20 01 	mov	&0x0120,r15	
    a3f6:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    a3fa:	82 4f 9a 02 	mov	r15,	&0x029a	
	WDTCTL = WDTPW | WDTHOLD;
    a3fe:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    a402:	20 01 
}
    a404:	34 41       	pop	r4		
    a406:	30 41       	ret			

0000a408 <watchdog_restore>:

void watchdog_restore()
{
    a408:	04 12       	push	r4		
    a40a:	04 41       	mov	r1,	r4	
    a40c:	24 53       	incd	r4		
	WDTCTL = WDTPW | watchdog_backup;
    a40e:	1f 42 9a 02 	mov	&0x029a,r15	
    a412:	3f d0 00 5a 	bis	#23040,	r15	;#0x5a00
    a416:	82 4f 20 01 	mov	r15,	&0x0120	
}
    a41a:	34 41       	pop	r4		
    a41c:	30 41       	ret			

0000a41e <__divhi3>:
    a41e:	0d 43       	clr	r13		
    a420:	0f 93       	tst	r15		
    a422:	04 34       	jge	$+10     	;abs 0xa42c
    a424:	3d 40 03 00 	mov	#3,	r13	;#0x0003
    a428:	3f e3       	inv	r15		
    a42a:	1f 53       	inc	r15		
    a42c:	0e 93       	tst	r14		
    a42e:	03 34       	jge	$+8      	;abs 0xa436
    a430:	5d e3       	xor.b	#1,	r13	;r3 As==01
    a432:	3e e3       	inv	r14		
    a434:	1e 53       	inc	r14		
    a436:	0d 12       	push	r13		
    a438:	b0 12 30 ac 	call	#0xac30	
    a43c:	3d 41       	pop	r13		
    a43e:	6d b3       	bit.b	#2,	r13	;r3 As==10
    a440:	02 24       	jz	$+6      	;abs 0xa446
    a442:	3e e3       	inv	r14		
    a444:	1e 53       	inc	r14		
    a446:	5d b3       	bit.b	#1,	r13	;r3 As==01
    a448:	02 24       	jz	$+6      	;abs 0xa44e
    a44a:	3f e3       	inv	r15		
    a44c:	1f 53       	inc	r15		
    a44e:	30 41       	ret			

0000a450 <__modhi3>:
    a450:	b0 12 1e a4 	call	#0xa41e	
    a454:	0f 4e       	mov	r14,	r15	
    a456:	30 41       	ret			

0000a458 <_fpadd_parts>:
    a458:	0b 12       	push	r11		
    a45a:	0a 12       	push	r10		
    a45c:	09 12       	push	r9		
    a45e:	08 12       	push	r8		
    a460:	07 12       	push	r7		
    a462:	06 12       	push	r6		
    a464:	05 12       	push	r5		
    a466:	04 12       	push	r4		
    a468:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    a46c:	08 4d       	mov	r13,	r8	
    a46e:	6b 4f       	mov.b	@r15,	r11	
    a470:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    a472:	67 28       	jnc	$+208    	;abs 0xa542
    a474:	6c 4e       	mov.b	@r14,	r12	
    a476:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    a478:	e9 28       	jnc	$+468    	;abs 0xa64c
    a47a:	6b 92       	cmp.b	#4,	r11	;r2 As==10
    a47c:	02 20       	jnz	$+6      	;abs 0xa482
    a47e:	30 40 d8 a6 	br	#0xa6d8	
    a482:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    a484:	e3 24       	jz	$+456    	;abs 0xa64c
    a486:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    a488:	bb 24       	jz	$+376    	;abs 0xa600
    a48a:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    a48c:	df 24       	jz	$+448    	;abs 0xa64c
    a48e:	91 4f 02 00 	mov	2(r15),	0(r1)	;0x0002(r15), 0x0000(r1)
    a492:	00 00 
    a494:	1b 4e 02 00 	mov	2(r14),	r11	;0x0002(r14)
    a498:	14 4f 04 00 	mov	4(r15),	r4	;0x0004(r15)
    a49c:	15 4f 06 00 	mov	6(r15),	r5	;0x0006(r15)
    a4a0:	16 4e 04 00 	mov	4(r14),	r6	;0x0004(r14)
    a4a4:	17 4e 06 00 	mov	6(r14),	r7	;0x0006(r14)
    a4a8:	2c 41       	mov	@r1,	r12	
    a4aa:	0c 8b       	sub	r11,	r12	
    a4ac:	09 4c       	mov	r12,	r9	
    a4ae:	0c 93       	tst	r12		
    a4b0:	bf 38       	jl	$+384    	;abs 0xa630
    a4b2:	39 90 20 00 	cmp	#32,	r9	;#0x0020
    a4b6:	50 34       	jge	$+162    	;abs 0xa558
    a4b8:	1c 93       	cmp	#1,	r12	;r3 As==01
    a4ba:	d7 38       	jl	$+432    	;abs 0xa66a
    a4bc:	81 46 02 00 	mov	r6,	2(r1)	;0x0002(r1)
    a4c0:	81 47 04 00 	mov	r7,	4(r1)	;0x0004(r1)
    a4c4:	4c 49       	mov.b	r9,	r12	
    a4c6:	7c f0 1f 00 	and.b	#31,	r12	;#0x001f
    a4ca:	0b 24       	jz	$+24     	;abs 0xa4e2
    a4cc:	0a 46       	mov	r6,	r10	
    a4ce:	0b 47       	mov	r7,	r11	
    a4d0:	12 c3       	clrc			
    a4d2:	0b 10       	rrc	r11		
    a4d4:	0a 10       	rrc	r10		
    a4d6:	7c 53       	add.b	#-1,	r12	;r3 As==11
    a4d8:	fb 23       	jnz	$-8      	;abs 0xa4d0
    a4da:	81 4a 02 00 	mov	r10,	2(r1)	;0x0002(r1)
    a4de:	81 4b 04 00 	mov	r11,	4(r1)	;0x0004(r1)
    a4e2:	1c 43       	mov	#1,	r12	;r3 As==01
    a4e4:	0d 43       	clr	r13		
    a4e6:	79 f0 1f 00 	and.b	#31,	r9	;#0x001f
    a4ea:	04 24       	jz	$+10     	;abs 0xa4f4
    a4ec:	0c 5c       	rla	r12		
    a4ee:	0d 6d       	rlc	r13		
    a4f0:	79 53       	add.b	#-1,	r9	;r3 As==11
    a4f2:	fc 23       	jnz	$-6      	;abs 0xa4ec
    a4f4:	3c 53       	add	#-1,	r12	;r3 As==11
    a4f6:	3d 63       	addc	#-1,	r13	;r3 As==11
    a4f8:	0c f6       	and	r6,	r12	
    a4fa:	0d f7       	and	r7,	r13	
    a4fc:	1a 43       	mov	#1,	r10	;r3 As==01
    a4fe:	0b 43       	clr	r11		
    a500:	0c 93       	tst	r12		
    a502:	02 20       	jnz	$+6      	;abs 0xa508
    a504:	0d 93       	tst	r13		
    a506:	e5 24       	jz	$+460    	;abs 0xa6d2
    a508:	16 41 02 00 	mov	2(r1),	r6	;0x0002(r1)
    a50c:	17 41 04 00 	mov	4(r1),	r7	;0x0004(r1)
    a510:	06 da       	bis	r10,	r6	
    a512:	07 db       	bis	r11,	r7	
    a514:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    a518:	5f 9e 01 00 	cmp.b	1(r14),	r15	;0x0001(r14)
    a51c:	28 20       	jnz	$+82     	;abs 0xa56e
    a51e:	c8 4f 01 00 	mov.b	r15,	1(r8)	;0x0001(r8)
    a522:	a8 41 02 00 	mov	@r1,	2(r8)	;0x0002(r8)
    a526:	0e 46       	mov	r6,	r14	
    a528:	0f 47       	mov	r7,	r15	
    a52a:	0e 54       	add	r4,	r14	
    a52c:	0f 65       	addc	r5,	r15	
    a52e:	88 4e 04 00 	mov	r14,	4(r8)	;0x0004(r8)
    a532:	88 4f 06 00 	mov	r15,	6(r8)	;0x0006(r8)
    a536:	f8 40 03 00 	mov.b	#3,	0(r8)	;#0x0003, 0x0000(r8)
    a53a:	00 00 
    a53c:	0f 93       	tst	r15		
    a53e:	4d 38       	jl	$+156    	;abs 0xa5da
    a540:	0f 48       	mov	r8,	r15	
    a542:	31 50 06 00 	add	#6,	r1	;#0x0006
    a546:	34 41       	pop	r4		
    a548:	35 41       	pop	r5		
    a54a:	36 41       	pop	r6		
    a54c:	37 41       	pop	r7		
    a54e:	38 41       	pop	r8		
    a550:	39 41       	pop	r9		
    a552:	3a 41       	pop	r10		
    a554:	3b 41       	pop	r11		
    a556:	30 41       	ret			
    a558:	2b 91       	cmp	@r1,	r11	
    a55a:	67 38       	jl	$+208    	;abs 0xa62a
    a55c:	81 4b 00 00 	mov	r11,	0(r1)	;0x0000(r1)
    a560:	04 43       	clr	r4		
    a562:	05 43       	clr	r5		
    a564:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    a568:	5f 9e 01 00 	cmp.b	1(r14),	r15	;0x0001(r14)
    a56c:	d8 27       	jz	$-78     	;abs 0xa51e
    a56e:	4f 93       	tst.b	r15		
    a570:	68 24       	jz	$+210    	;abs 0xa642
    a572:	0e 46       	mov	r6,	r14	
    a574:	0f 47       	mov	r7,	r15	
    a576:	0e 84       	sub	r4,	r14	
    a578:	0f 75       	subc	r5,	r15	
    a57a:	0f 93       	tst	r15		
    a57c:	69 38       	jl	$+212    	;abs 0xa650
    a57e:	c8 43 01 00 	mov.b	#0,	1(r8)	;r3 As==00, 0x0001(r8)
    a582:	a8 41 02 00 	mov	@r1,	2(r8)	;0x0002(r8)
    a586:	88 4e 04 00 	mov	r14,	4(r8)	;0x0004(r8)
    a58a:	88 4f 06 00 	mov	r15,	6(r8)	;0x0006(r8)
    a58e:	0c 4e       	mov	r14,	r12	
    a590:	0d 4f       	mov	r15,	r13	
    a592:	3c 53       	add	#-1,	r12	;r3 As==11
    a594:	3d 63       	addc	#-1,	r13	;r3 As==11
    a596:	3d 90 ff 3f 	cmp	#16383,	r13	;#0x3fff
    a59a:	05 28       	jnc	$+12     	;abs 0xa5a6
    a59c:	3d 90 00 40 	cmp	#16384,	r13	;#0x4000
    a5a0:	17 2c       	jc	$+48     	;abs 0xa5d0
    a5a2:	3c 93       	cmp	#-1,	r12	;r3 As==11
    a5a4:	15 2c       	jc	$+44     	;abs 0xa5d0
    a5a6:	1b 48 02 00 	mov	2(r8),	r11	;0x0002(r8)
    a5aa:	3b 53       	add	#-1,	r11	;r3 As==11
    a5ac:	0e 5e       	rla	r14		
    a5ae:	0f 6f       	rlc	r15		
    a5b0:	0a 4b       	mov	r11,	r10	
    a5b2:	3b 53       	add	#-1,	r11	;r3 As==11
    a5b4:	0c 4e       	mov	r14,	r12	
    a5b6:	0d 4f       	mov	r15,	r13	
    a5b8:	3c 53       	add	#-1,	r12	;r3 As==11
    a5ba:	3d 63       	addc	#-1,	r13	;r3 As==11
    a5bc:	3d 90 ff 3f 	cmp	#16383,	r13	;#0x3fff
    a5c0:	f5 2b       	jnc	$-20     	;abs 0xa5ac
    a5c2:	3c 24       	jz	$+122    	;abs 0xa63c
    a5c4:	88 4e 04 00 	mov	r14,	4(r8)	;0x0004(r8)
    a5c8:	88 4f 06 00 	mov	r15,	6(r8)	;0x0006(r8)
    a5cc:	88 4a 02 00 	mov	r10,	2(r8)	;0x0002(r8)
    a5d0:	f8 40 03 00 	mov.b	#3,	0(r8)	;#0x0003, 0x0000(r8)
    a5d4:	00 00 
    a5d6:	0f 93       	tst	r15		
    a5d8:	b3 37       	jge	$-152    	;abs 0xa540
    a5da:	0c 4e       	mov	r14,	r12	
    a5dc:	0d 4f       	mov	r15,	r13	
    a5de:	1c f3       	and	#1,	r12	;r3 As==01
    a5e0:	0d f3       	and	#0,	r13	;r3 As==00
    a5e2:	12 c3       	clrc			
    a5e4:	0f 10       	rrc	r15		
    a5e6:	0e 10       	rrc	r14		
    a5e8:	0a 4c       	mov	r12,	r10	
    a5ea:	0b 4d       	mov	r13,	r11	
    a5ec:	0a de       	bis	r14,	r10	
    a5ee:	0b df       	bis	r15,	r11	
    a5f0:	88 4a 04 00 	mov	r10,	4(r8)	;0x0004(r8)
    a5f4:	88 4b 06 00 	mov	r11,	6(r8)	;0x0006(r8)
    a5f8:	98 53 02 00 	inc	2(r8)		;0x0002(r8)
    a5fc:	0f 48       	mov	r8,	r15	
    a5fe:	a1 3f       	jmp	$-188    	;abs 0xa542
    a600:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    a602:	9f 23       	jnz	$-192    	;abs 0xa542
    a604:	ad 4f 00 00 	mov	@r15,	0(r13)	;0x0000(r13)
    a608:	9d 4f 02 00 	mov	2(r15),	2(r13)	;0x0002(r15), 0x0002(r13)
    a60c:	02 00 
    a60e:	9d 4f 04 00 	mov	4(r15),	4(r13)	;0x0004(r15), 0x0004(r13)
    a612:	04 00 
    a614:	9d 4f 06 00 	mov	6(r15),	6(r13)	;0x0006(r15), 0x0006(r13)
    a618:	06 00 
    a61a:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    a61e:	5e ff 01 00 	and.b	1(r15),	r14	;0x0001(r15)
    a622:	cd 4e 01 00 	mov.b	r14,	1(r13)	;0x0001(r13)
    a626:	0f 4d       	mov	r13,	r15	
    a628:	8c 3f       	jmp	$-230    	;abs 0xa542
    a62a:	06 43       	clr	r6		
    a62c:	07 43       	clr	r7		
    a62e:	9a 3f       	jmp	$-202    	;abs 0xa564
    a630:	39 e3       	inv	r9		
    a632:	19 53       	inc	r9		
    a634:	39 90 20 00 	cmp	#32,	r9	;#0x0020
    a638:	8f 37       	jge	$-224    	;abs 0xa558
    a63a:	3e 3f       	jmp	$-386    	;abs 0xa4b8
    a63c:	3c 93       	cmp	#-1,	r12	;r3 As==11
    a63e:	b6 2b       	jnc	$-146    	;abs 0xa5ac
    a640:	c1 3f       	jmp	$-124    	;abs 0xa5c4
    a642:	0e 44       	mov	r4,	r14	
    a644:	0f 45       	mov	r5,	r15	
    a646:	0e 86       	sub	r6,	r14	
    a648:	0f 77       	subc	r7,	r15	
    a64a:	97 3f       	jmp	$-208    	;abs 0xa57a
    a64c:	0f 4e       	mov	r14,	r15	
    a64e:	79 3f       	jmp	$-268    	;abs 0xa542
    a650:	d8 43 01 00 	mov.b	#1,	1(r8)	;r3 As==01, 0x0001(r8)
    a654:	a8 41 02 00 	mov	@r1,	2(r8)	;0x0002(r8)
    a658:	3e e3       	inv	r14		
    a65a:	3f e3       	inv	r15		
    a65c:	1e 53       	inc	r14		
    a65e:	0f 63       	adc	r15		
    a660:	88 4e 04 00 	mov	r14,	4(r8)	;0x0004(r8)
    a664:	88 4f 06 00 	mov	r15,	6(r8)	;0x0006(r8)
    a668:	92 3f       	jmp	$-218    	;abs 0xa58e
    a66a:	0c 93       	tst	r12		
    a66c:	7b 27       	jz	$-264    	;abs 0xa564
    a66e:	81 59 00 00 	add	r9,	0(r1)	;0x0000(r1)
    a672:	81 44 02 00 	mov	r4,	2(r1)	;0x0002(r1)
    a676:	81 45 04 00 	mov	r5,	4(r1)	;0x0004(r1)
    a67a:	4d 49       	mov.b	r9,	r13	
    a67c:	7d f0 1f 00 	and.b	#31,	r13	;#0x001f
    a680:	0c 24       	jz	$+26     	;abs 0xa69a
    a682:	4b 4d       	mov.b	r13,	r11	
    a684:	0c 44       	mov	r4,	r12	
    a686:	0d 45       	mov	r5,	r13	
    a688:	12 c3       	clrc			
    a68a:	0d 10       	rrc	r13		
    a68c:	0c 10       	rrc	r12		
    a68e:	7b 53       	add.b	#-1,	r11	;r3 As==11
    a690:	fb 23       	jnz	$-8      	;abs 0xa688
    a692:	81 4c 02 00 	mov	r12,	2(r1)	;0x0002(r1)
    a696:	81 4d 04 00 	mov	r13,	4(r1)	;0x0004(r1)
    a69a:	1c 43       	mov	#1,	r12	;r3 As==01
    a69c:	0d 43       	clr	r13		
    a69e:	79 f0 1f 00 	and.b	#31,	r9	;#0x001f
    a6a2:	04 24       	jz	$+10     	;abs 0xa6ac
    a6a4:	0c 5c       	rla	r12		
    a6a6:	0d 6d       	rlc	r13		
    a6a8:	79 53       	add.b	#-1,	r9	;r3 As==11
    a6aa:	fc 23       	jnz	$-6      	;abs 0xa6a4
    a6ac:	3c 53       	add	#-1,	r12	;r3 As==11
    a6ae:	3d 63       	addc	#-1,	r13	;r3 As==11
    a6b0:	0c f4       	and	r4,	r12	
    a6b2:	0d f5       	and	r5,	r13	
    a6b4:	1a 43       	mov	#1,	r10	;r3 As==01
    a6b6:	0b 43       	clr	r11		
    a6b8:	0c 93       	tst	r12		
    a6ba:	04 20       	jnz	$+10     	;abs 0xa6c4
    a6bc:	0d 93       	tst	r13		
    a6be:	02 20       	jnz	$+6      	;abs 0xa6c4
    a6c0:	0a 43       	clr	r10		
    a6c2:	0b 43       	clr	r11		
    a6c4:	14 41 02 00 	mov	2(r1),	r4	;0x0002(r1)
    a6c8:	15 41 04 00 	mov	4(r1),	r5	;0x0004(r1)
    a6cc:	04 da       	bis	r10,	r4	
    a6ce:	05 db       	bis	r11,	r5	
    a6d0:	49 3f       	jmp	$-364    	;abs 0xa564
    a6d2:	0a 43       	clr	r10		
    a6d4:	0b 43       	clr	r11		
    a6d6:	18 3f       	jmp	$-462    	;abs 0xa508
    a6d8:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    a6da:	33 23       	jnz	$-408    	;abs 0xa542
    a6dc:	df 9e 01 00 	cmp.b	1(r14),	1(r15)	;0x0001(r14), 0x0001(r15)
    a6e0:	01 00 
    a6e2:	2f 27       	jz	$-416    	;abs 0xa542
    a6e4:	3f 40 82 bc 	mov	#-17278,r15	;#0xbc82
    a6e8:	2c 3f       	jmp	$-422    	;abs 0xa542

0000a6ea <__addsf3>:
    a6ea:	31 50 e0 ff 	add	#-32,	r1	;#0xffe0
    a6ee:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    a6f2:	81 4f 06 00 	mov	r15,	6(r1)	;0x0006(r1)
    a6f6:	81 4c 00 00 	mov	r12,	0(r1)	;0x0000(r1)
    a6fa:	81 4d 02 00 	mov	r13,	2(r1)	;0x0002(r1)
    a6fe:	0e 41       	mov	r1,	r14	
    a700:	3e 50 18 00 	add	#24,	r14	;#0x0018
    a704:	0f 41       	mov	r1,	r15	
    a706:	2f 52       	add	#4,	r15	;r2 As==10
    a708:	b0 12 a2 ae 	call	#0xaea2	
    a70c:	0e 41       	mov	r1,	r14	
    a70e:	3e 50 10 00 	add	#16,	r14	;#0x0010
    a712:	0f 41       	mov	r1,	r15	
    a714:	b0 12 a2 ae 	call	#0xaea2	
    a718:	0d 41       	mov	r1,	r13	
    a71a:	3d 52       	add	#8,	r13	;r2 As==11
    a71c:	0e 41       	mov	r1,	r14	
    a71e:	3e 50 10 00 	add	#16,	r14	;#0x0010
    a722:	0f 41       	mov	r1,	r15	
    a724:	3f 50 18 00 	add	#24,	r15	;#0x0018
    a728:	b0 12 58 a4 	call	#0xa458	
    a72c:	b0 12 c4 ac 	call	#0xacc4	
    a730:	31 50 20 00 	add	#32,	r1	;#0x0020
    a734:	30 41       	ret			

0000a736 <__subsf3>:
    a736:	31 50 e0 ff 	add	#-32,	r1	;#0xffe0
    a73a:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    a73e:	81 4f 06 00 	mov	r15,	6(r1)	;0x0006(r1)
    a742:	81 4c 00 00 	mov	r12,	0(r1)	;0x0000(r1)
    a746:	81 4d 02 00 	mov	r13,	2(r1)	;0x0002(r1)
    a74a:	0e 41       	mov	r1,	r14	
    a74c:	3e 50 18 00 	add	#24,	r14	;#0x0018
    a750:	0f 41       	mov	r1,	r15	
    a752:	2f 52       	add	#4,	r15	;r2 As==10
    a754:	b0 12 a2 ae 	call	#0xaea2	
    a758:	0e 41       	mov	r1,	r14	
    a75a:	3e 50 10 00 	add	#16,	r14	;#0x0010
    a75e:	0f 41       	mov	r1,	r15	
    a760:	b0 12 a2 ae 	call	#0xaea2	
    a764:	d1 e3 11 00 	xor.b	#1,	17(r1)	;r3 As==01, 0x0011(r1)
    a768:	0d 41       	mov	r1,	r13	
    a76a:	3d 52       	add	#8,	r13	;r2 As==11
    a76c:	0e 41       	mov	r1,	r14	
    a76e:	3e 50 10 00 	add	#16,	r14	;#0x0010
    a772:	0f 41       	mov	r1,	r15	
    a774:	3f 50 18 00 	add	#24,	r15	;#0x0018
    a778:	b0 12 58 a4 	call	#0xa458	
    a77c:	b0 12 c4 ac 	call	#0xacc4	
    a780:	31 50 20 00 	add	#32,	r1	;#0x0020
    a784:	30 41       	ret			

0000a786 <__mulsf3>:
    a786:	0b 12       	push	r11		
    a788:	0a 12       	push	r10		
    a78a:	09 12       	push	r9		
    a78c:	08 12       	push	r8		
    a78e:	07 12       	push	r7		
    a790:	06 12       	push	r6		
    a792:	05 12       	push	r5		
    a794:	04 12       	push	r4		
    a796:	31 50 dc ff 	add	#-36,	r1	;#0xffdc
    a79a:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    a79e:	81 4f 06 00 	mov	r15,	6(r1)	;0x0006(r1)
    a7a2:	81 4c 00 00 	mov	r12,	0(r1)	;0x0000(r1)
    a7a6:	81 4d 02 00 	mov	r13,	2(r1)	;0x0002(r1)
    a7aa:	0e 41       	mov	r1,	r14	
    a7ac:	3e 50 18 00 	add	#24,	r14	;#0x0018
    a7b0:	0f 41       	mov	r1,	r15	
    a7b2:	2f 52       	add	#4,	r15	;r2 As==10
    a7b4:	b0 12 a2 ae 	call	#0xaea2	
    a7b8:	0e 41       	mov	r1,	r14	
    a7ba:	3e 50 10 00 	add	#16,	r14	;#0x0010
    a7be:	0f 41       	mov	r1,	r15	
    a7c0:	b0 12 a2 ae 	call	#0xaea2	
    a7c4:	5f 41 18 00 	mov.b	24(r1),	r15	;0x0018(r1)
    a7c8:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    a7ca:	b6 28       	jnc	$+366    	;abs 0xa938
    a7cc:	5e 41 10 00 	mov.b	16(r1),	r14	;0x0010(r1)
    a7d0:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    a7d2:	d9 28       	jnc	$+436    	;abs 0xa986
    a7d4:	6f 92       	cmp.b	#4,	r15	;r2 As==10
    a7d6:	ae 24       	jz	$+350    	;abs 0xa934
    a7d8:	6e 92       	cmp.b	#4,	r14	;r2 As==10
    a7da:	e2 24       	jz	$+454    	;abs 0xa9a0
    a7dc:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    a7de:	ac 24       	jz	$+346    	;abs 0xa938
    a7e0:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    a7e2:	d1 24       	jz	$+420    	;abs 0xa986
    a7e4:	14 41 1c 00 	mov	28(r1),	r4	;0x001c(r1)
    a7e8:	15 41 1e 00 	mov	30(r1),	r5	;0x001e(r1)
    a7ec:	18 41 14 00 	mov	20(r1),	r8	;0x0014(r1)
    a7f0:	19 41 16 00 	mov	22(r1),	r9	;0x0016(r1)
    a7f4:	3c 40 20 00 	mov	#32,	r12	;#0x0020
    a7f8:	0e 43       	clr	r14		
    a7fa:	0f 43       	clr	r15		
    a7fc:	06 43       	clr	r6		
    a7fe:	07 43       	clr	r7		
    a800:	81 43 20 00 	mov	#0,	32(r1)	;r3 As==00, 0x0020(r1)
    a804:	81 43 22 00 	mov	#0,	34(r1)	;r3 As==00, 0x0022(r1)
    a808:	0a 43       	clr	r10		
    a80a:	0b 43       	clr	r11		
    a80c:	81 4c 20 00 	mov	r12,	32(r1)	;0x0020(r1)
    a810:	08 3c       	jmp	$+18     	;abs 0xa822
    a812:	08 58       	rla	r8		
    a814:	09 69       	rlc	r9		
    a816:	12 c3       	clrc			
    a818:	05 10       	rrc	r5		
    a81a:	04 10       	rrc	r4		
    a81c:	b1 53 20 00 	add	#-1,	32(r1)	;r3 As==11, 0x0020(r1)
    a820:	19 24       	jz	$+52     	;abs 0xa854
    a822:	14 b3       	bit	#1,	r4	;r3 As==01
    a824:	0d 24       	jz	$+28     	;abs 0xa840
    a826:	0a 58       	add	r8,	r10	
    a828:	0b 69       	addc	r9,	r11	
    a82a:	0e 56       	add	r6,	r14	
    a82c:	0f 67       	addc	r7,	r15	
    a82e:	1c 43       	mov	#1,	r12	;r3 As==01
    a830:	0d 43       	clr	r13		
    a832:	0b 99       	cmp	r9,	r11	
    a834:	03 28       	jnc	$+8      	;abs 0xa83c
    a836:	0b 24       	jz	$+24     	;abs 0xa84e
    a838:	0c 43       	clr	r12		
    a83a:	0d 43       	clr	r13		
    a83c:	0e 5c       	add	r12,	r14	
    a83e:	0f 6d       	addc	r13,	r15	
    a840:	06 56       	rla	r6		
    a842:	07 67       	rlc	r7		
    a844:	09 93       	tst	r9		
    a846:	e5 37       	jge	$-52     	;abs 0xa812
    a848:	16 d3       	bis	#1,	r6	;r3 As==01
    a84a:	07 d3       	bis	#0,	r7	;r3 As==00
    a84c:	e2 3f       	jmp	$-58     	;abs 0xa812
    a84e:	0a 98       	cmp	r8,	r10	
    a850:	f5 2b       	jnc	$-20     	;abs 0xa83c
    a852:	f2 3f       	jmp	$-26     	;abs 0xa838
    a854:	81 4a 20 00 	mov	r10,	32(r1)	;0x0020(r1)
    a858:	81 4b 22 00 	mov	r11,	34(r1)	;0x0022(r1)
    a85c:	0c 4f       	mov	r15,	r12	
    a85e:	1a 41 1a 00 	mov	26(r1),	r10	;0x001a(r1)
    a862:	1a 51 12 00 	add	18(r1),	r10	;0x0012(r1)
    a866:	06 4a       	mov	r10,	r6	
    a868:	26 53       	incd	r6		
    a86a:	81 46 0a 00 	mov	r6,	10(r1)	;0x000a(r1)
    a86e:	5d 43       	mov.b	#1,	r13	;r3 As==01
    a870:	d1 91 11 00 	cmp.b	17(r1),	25(r1)	;0x0011(r1), 0x0019(r1)
    a874:	19 00 
    a876:	83 24       	jz	$+264    	;abs 0xa97e
    a878:	c1 4d 09 00 	mov.b	r13,	9(r1)	;0x0009(r1)
    a87c:	0c 93       	tst	r12		
    a87e:	3c 38       	jl	$+122    	;abs 0xa8f8
    a880:	3f 90 00 40 	cmp	#16384,	r15	;#0x4000
    a884:	18 2c       	jc	$+50     	;abs 0xa8b6
    a886:	1d 41 0a 00 	mov	10(r1),	r13	;0x000a(r1)
    a88a:	3d 53       	add	#-1,	r13	;r3 As==11
    a88c:	1a 41 20 00 	mov	32(r1),	r10	;0x0020(r1)
    a890:	1b 41 22 00 	mov	34(r1),	r11	;0x0022(r1)
    a894:	0c 4d       	mov	r13,	r12	
    a896:	0e 5e       	rla	r14		
    a898:	0f 6f       	rlc	r15		
    a89a:	0b 93       	tst	r11		
    a89c:	2a 38       	jl	$+86     	;abs 0xa8f2
    a89e:	0a 5a       	rla	r10		
    a8a0:	0b 6b       	rlc	r11		
    a8a2:	3d 53       	add	#-1,	r13	;r3 As==11
    a8a4:	3f 90 00 40 	cmp	#16384,	r15	;#0x4000
    a8a8:	f5 2b       	jnc	$-20     	;abs 0xa894
    a8aa:	81 4a 20 00 	mov	r10,	32(r1)	;0x0020(r1)
    a8ae:	81 4b 22 00 	mov	r11,	34(r1)	;0x0022(r1)
    a8b2:	81 4c 0a 00 	mov	r12,	10(r1)	;0x000a(r1)
    a8b6:	0c 4e       	mov	r14,	r12	
    a8b8:	0d 4f       	mov	r15,	r13	
    a8ba:	3c f0 7f 00 	and	#127,	r12	;#0x007f
    a8be:	0d f3       	and	#0,	r13	;r3 As==00
    a8c0:	3c 90 40 00 	cmp	#64,	r12	;#0x0040
    a8c4:	44 24       	jz	$+138    	;abs 0xa94e
    a8c6:	81 4e 0c 00 	mov	r14,	12(r1)	;0x000c(r1)
    a8ca:	81 4f 0e 00 	mov	r15,	14(r1)	;0x000e(r1)
    a8ce:	f1 40 03 00 	mov.b	#3,	8(r1)	;#0x0003, 0x0008(r1)
    a8d2:	08 00 
    a8d4:	0f 41       	mov	r1,	r15	
    a8d6:	3f 52       	add	#8,	r15	;r2 As==11
    a8d8:	b0 12 c4 ac 	call	#0xacc4	
    a8dc:	31 50 24 00 	add	#36,	r1	;#0x0024
    a8e0:	34 41       	pop	r4		
    a8e2:	35 41       	pop	r5		
    a8e4:	36 41       	pop	r6		
    a8e6:	37 41       	pop	r7		
    a8e8:	38 41       	pop	r8		
    a8ea:	39 41       	pop	r9		
    a8ec:	3a 41       	pop	r10		
    a8ee:	3b 41       	pop	r11		
    a8f0:	30 41       	ret			
    a8f2:	1e d3       	bis	#1,	r14	;r3 As==01
    a8f4:	0f d3       	bis	#0,	r15	;r3 As==00
    a8f6:	d3 3f       	jmp	$-88     	;abs 0xa89e
    a8f8:	3a 50 03 00 	add	#3,	r10	;#0x0003
    a8fc:	08 4a       	mov	r10,	r8	
    a8fe:	1e b3       	bit	#1,	r14	;r3 As==01
    a900:	10 24       	jz	$+34     	;abs 0xa922
    a902:	1c 41 20 00 	mov	32(r1),	r12	;0x0020(r1)
    a906:	1d 41 22 00 	mov	34(r1),	r13	;0x0022(r1)
    a90a:	12 c3       	clrc			
    a90c:	0d 10       	rrc	r13		
    a90e:	0c 10       	rrc	r12		
    a910:	06 4c       	mov	r12,	r6	
    a912:	07 4d       	mov	r13,	r7	
    a914:	06 d3       	bis	#0,	r6	;r3 As==00
    a916:	37 d0 00 80 	bis	#-32768,r7	;#0x8000
    a91a:	81 46 20 00 	mov	r6,	32(r1)	;0x0020(r1)
    a91e:	81 47 22 00 	mov	r7,	34(r1)	;0x0022(r1)
    a922:	12 c3       	clrc			
    a924:	0f 10       	rrc	r15		
    a926:	0e 10       	rrc	r14		
    a928:	1a 53       	inc	r10		
    a92a:	0f 93       	tst	r15		
    a92c:	e7 3b       	jl	$-48     	;abs 0xa8fc
    a92e:	81 48 0a 00 	mov	r8,	10(r1)	;0x000a(r1)
    a932:	a6 3f       	jmp	$-178    	;abs 0xa880
    a934:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    a936:	36 24       	jz	$+110    	;abs 0xa9a4
    a938:	5f 43       	mov.b	#1,	r15	;r3 As==01
    a93a:	d1 91 11 00 	cmp.b	17(r1),	25(r1)	;0x0011(r1), 0x0019(r1)
    a93e:	19 00 
    a940:	20 24       	jz	$+66     	;abs 0xa982
    a942:	c1 4f 19 00 	mov.b	r15,	25(r1)	;0x0019(r1)
    a946:	0f 41       	mov	r1,	r15	
    a948:	3f 50 18 00 	add	#24,	r15	;#0x0018
    a94c:	c5 3f       	jmp	$-116    	;abs 0xa8d8
    a94e:	0d 93       	tst	r13		
    a950:	ba 23       	jnz	$-138    	;abs 0xa8c6
    a952:	0c 4e       	mov	r14,	r12	
    a954:	0d 4f       	mov	r15,	r13	
    a956:	3c f0 80 00 	and	#128,	r12	;#0x0080
    a95a:	0d f3       	and	#0,	r13	;r3 As==00
    a95c:	0c 93       	tst	r12		
    a95e:	b3 23       	jnz	$-152    	;abs 0xa8c6
    a960:	0d 93       	tst	r13		
    a962:	b1 23       	jnz	$-156    	;abs 0xa8c6
    a964:	81 93 20 00 	tst	32(r1)		;0x0020(r1)
    a968:	03 20       	jnz	$+8      	;abs 0xa970
    a96a:	81 93 22 00 	tst	34(r1)		;0x0022(r1)
    a96e:	ab 27       	jz	$-168    	;abs 0xa8c6
    a970:	3e 50 40 00 	add	#64,	r14	;#0x0040
    a974:	0f 63       	adc	r15		
    a976:	3e f0 80 ff 	and	#-128,	r14	;#0xff80
    a97a:	3f f3       	and	#-1,	r15	;r3 As==11
    a97c:	a4 3f       	jmp	$-182    	;abs 0xa8c6
    a97e:	4d 43       	clr.b	r13		
    a980:	7b 3f       	jmp	$-264    	;abs 0xa878
    a982:	4f 43       	clr.b	r15		
    a984:	de 3f       	jmp	$-66     	;abs 0xa942
    a986:	5f 43       	mov.b	#1,	r15	;r3 As==01
    a988:	d1 91 11 00 	cmp.b	17(r1),	25(r1)	;0x0011(r1), 0x0019(r1)
    a98c:	19 00 
    a98e:	06 24       	jz	$+14     	;abs 0xa99c
    a990:	c1 4f 11 00 	mov.b	r15,	17(r1)	;0x0011(r1)
    a994:	0f 41       	mov	r1,	r15	
    a996:	3f 50 10 00 	add	#16,	r15	;#0x0010
    a99a:	9e 3f       	jmp	$-194    	;abs 0xa8d8
    a99c:	4f 43       	clr.b	r15		
    a99e:	f8 3f       	jmp	$-14     	;abs 0xa990
    a9a0:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    a9a2:	f1 23       	jnz	$-28     	;abs 0xa986
    a9a4:	3f 40 82 bc 	mov	#-17278,r15	;#0xbc82
    a9a8:	97 3f       	jmp	$-208    	;abs 0xa8d8

0000a9aa <__divsf3>:
    a9aa:	0b 12       	push	r11		
    a9ac:	0a 12       	push	r10		
    a9ae:	09 12       	push	r9		
    a9b0:	08 12       	push	r8		
    a9b2:	07 12       	push	r7		
    a9b4:	31 50 e8 ff 	add	#-24,	r1	;#0xffe8
    a9b8:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    a9bc:	81 4f 06 00 	mov	r15,	6(r1)	;0x0006(r1)
    a9c0:	81 4c 00 00 	mov	r12,	0(r1)	;0x0000(r1)
    a9c4:	81 4d 02 00 	mov	r13,	2(r1)	;0x0002(r1)
    a9c8:	0e 41       	mov	r1,	r14	
    a9ca:	3e 50 10 00 	add	#16,	r14	;#0x0010
    a9ce:	0f 41       	mov	r1,	r15	
    a9d0:	2f 52       	add	#4,	r15	;r2 As==10
    a9d2:	b0 12 a2 ae 	call	#0xaea2	
    a9d6:	0e 41       	mov	r1,	r14	
    a9d8:	3e 52       	add	#8,	r14	;r2 As==11
    a9da:	0f 41       	mov	r1,	r15	
    a9dc:	b0 12 a2 ae 	call	#0xaea2	
    a9e0:	5f 41 10 00 	mov.b	16(r1),	r15	;0x0010(r1)
    a9e4:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    a9e6:	5d 28       	jnc	$+188    	;abs 0xaaa2
    a9e8:	5e 41 08 00 	mov.b	8(r1),	r14	;0x0008(r1)
    a9ec:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    a9ee:	82 28       	jnc	$+262    	;abs 0xaaf4
    a9f0:	d1 e1 09 00 	xor.b	9(r1),	17(r1)	;0x0009(r1), 0x0011(r1)
    a9f4:	11 00 
    a9f6:	6f 92       	cmp.b	#4,	r15	;r2 As==10
    a9f8:	58 24       	jz	$+178    	;abs 0xaaaa
    a9fa:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    a9fc:	56 24       	jz	$+174    	;abs 0xaaaa
    a9fe:	6e 92       	cmp.b	#4,	r14	;r2 As==10
    aa00:	6f 24       	jz	$+224    	;abs 0xaae0
    aa02:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    aa04:	4c 24       	jz	$+154    	;abs 0xaa9e
    aa06:	1d 41 12 00 	mov	18(r1),	r13	;0x0012(r1)
    aa0a:	1d 81 0a 00 	sub	10(r1),	r13	;0x000a(r1)
    aa0e:	81 4d 12 00 	mov	r13,	18(r1)	;0x0012(r1)
    aa12:	1e 41 14 00 	mov	20(r1),	r14	;0x0014(r1)
    aa16:	1f 41 16 00 	mov	22(r1),	r15	;0x0016(r1)
    aa1a:	18 41 0c 00 	mov	12(r1),	r8	;0x000c(r1)
    aa1e:	19 41 0e 00 	mov	14(r1),	r9	;0x000e(r1)
    aa22:	0f 99       	cmp	r9,	r15	
    aa24:	1e 2c       	jc	$+62     	;abs 0xaa62
    aa26:	0e 5e       	rla	r14		
    aa28:	0f 6f       	rlc	r15		
    aa2a:	3d 53       	add	#-1,	r13	;r3 As==11
    aa2c:	81 4d 12 00 	mov	r13,	18(r1)	;0x0012(r1)
    aa30:	37 40 1f 00 	mov	#31,	r7	;#0x001f
    aa34:	0c 43       	clr	r12		
    aa36:	3d 40 00 40 	mov	#16384,	r13	;#0x4000
    aa3a:	0a 43       	clr	r10		
    aa3c:	0b 43       	clr	r11		
    aa3e:	0b 3c       	jmp	$+24     	;abs 0xaa56
    aa40:	0a dc       	bis	r12,	r10	
    aa42:	0b dd       	bis	r13,	r11	
    aa44:	0e 88       	sub	r8,	r14	
    aa46:	0f 79       	subc	r9,	r15	
    aa48:	12 c3       	clrc			
    aa4a:	0d 10       	rrc	r13		
    aa4c:	0c 10       	rrc	r12		
    aa4e:	0e 5e       	rla	r14		
    aa50:	0f 6f       	rlc	r15		
    aa52:	37 53       	add	#-1,	r7	;r3 As==11
    aa54:	0b 24       	jz	$+24     	;abs 0xaa6c
    aa56:	0f 99       	cmp	r9,	r15	
    aa58:	f7 2b       	jnc	$-16     	;abs 0xaa48
    aa5a:	f2 23       	jnz	$-26     	;abs 0xaa40
    aa5c:	0e 98       	cmp	r8,	r14	
    aa5e:	f4 2b       	jnc	$-22     	;abs 0xaa48
    aa60:	ef 3f       	jmp	$-32     	;abs 0xaa40
    aa62:	09 9f       	cmp	r15,	r9	
    aa64:	e5 2b       	jnc	$-52     	;abs 0xaa30
    aa66:	0e 98       	cmp	r8,	r14	
    aa68:	e3 2f       	jc	$-56     	;abs 0xaa30
    aa6a:	dd 3f       	jmp	$-68     	;abs 0xaa26
    aa6c:	0c 4a       	mov	r10,	r12	
    aa6e:	0d 4b       	mov	r11,	r13	
    aa70:	3c f0 7f 00 	and	#127,	r12	;#0x007f
    aa74:	0d f3       	and	#0,	r13	;r3 As==00
    aa76:	3c 90 40 00 	cmp	#64,	r12	;#0x0040
    aa7a:	1c 24       	jz	$+58     	;abs 0xaab4
    aa7c:	81 4a 14 00 	mov	r10,	20(r1)	;0x0014(r1)
    aa80:	81 4b 16 00 	mov	r11,	22(r1)	;0x0016(r1)
    aa84:	0f 41       	mov	r1,	r15	
    aa86:	3f 50 10 00 	add	#16,	r15	;#0x0010
    aa8a:	b0 12 c4 ac 	call	#0xacc4	
    aa8e:	31 50 18 00 	add	#24,	r1	;#0x0018
    aa92:	37 41       	pop	r7		
    aa94:	38 41       	pop	r8		
    aa96:	39 41       	pop	r9		
    aa98:	3a 41       	pop	r10		
    aa9a:	3b 41       	pop	r11		
    aa9c:	30 41       	ret			
    aa9e:	e1 42 10 00 	mov.b	#4,	16(r1)	;r2 As==10, 0x0010(r1)
    aaa2:	0f 41       	mov	r1,	r15	
    aaa4:	3f 50 10 00 	add	#16,	r15	;#0x0010
    aaa8:	f0 3f       	jmp	$-30     	;abs 0xaa8a
    aaaa:	4f 9e       	cmp.b	r14,	r15	
    aaac:	fa 23       	jnz	$-10     	;abs 0xaaa2
    aaae:	3f 40 82 bc 	mov	#-17278,r15	;#0xbc82
    aab2:	eb 3f       	jmp	$-40     	;abs 0xaa8a
    aab4:	0d 93       	tst	r13		
    aab6:	e2 23       	jnz	$-58     	;abs 0xaa7c
    aab8:	0c 4a       	mov	r10,	r12	
    aaba:	0d 4b       	mov	r11,	r13	
    aabc:	3c f0 80 00 	and	#128,	r12	;#0x0080
    aac0:	0d f3       	and	#0,	r13	;r3 As==00
    aac2:	0c 93       	tst	r12		
    aac4:	db 23       	jnz	$-72     	;abs 0xaa7c
    aac6:	0d 93       	tst	r13		
    aac8:	d9 23       	jnz	$-76     	;abs 0xaa7c
    aaca:	0e 93       	tst	r14		
    aacc:	02 20       	jnz	$+6      	;abs 0xaad2
    aace:	0f 93       	tst	r15		
    aad0:	d5 27       	jz	$-84     	;abs 0xaa7c
    aad2:	3a 50 40 00 	add	#64,	r10	;#0x0040
    aad6:	0b 63       	adc	r11		
    aad8:	3a f0 80 ff 	and	#-128,	r10	;#0xff80
    aadc:	3b f3       	and	#-1,	r11	;r3 As==11
    aade:	ce 3f       	jmp	$-98     	;abs 0xaa7c
    aae0:	81 43 14 00 	mov	#0,	20(r1)	;r3 As==00, 0x0014(r1)
    aae4:	81 43 16 00 	mov	#0,	22(r1)	;r3 As==00, 0x0016(r1)
    aae8:	81 43 12 00 	mov	#0,	18(r1)	;r3 As==00, 0x0012(r1)
    aaec:	0f 41       	mov	r1,	r15	
    aaee:	3f 50 10 00 	add	#16,	r15	;#0x0010
    aaf2:	cb 3f       	jmp	$-104    	;abs 0xaa8a
    aaf4:	0f 41       	mov	r1,	r15	
    aaf6:	3f 52       	add	#8,	r15	;r2 As==11
    aaf8:	c8 3f       	jmp	$-110    	;abs 0xaa8a

0000aafa <__floatsisf>:
    aafa:	0b 12       	push	r11		
    aafc:	0a 12       	push	r10		
    aafe:	31 82       	sub	#8,	r1	;r2 As==11
    ab00:	f1 40 03 00 	mov.b	#3,	0(r1)	;#0x0003, 0x0000(r1)
    ab04:	00 00 
    ab06:	0d 4f       	mov	r15,	r13	
    ab08:	0d 5d       	rla	r13		
    ab0a:	0d 43       	clr	r13		
    ab0c:	0d 6d       	rlc	r13		
    ab0e:	4c 4d       	mov.b	r13,	r12	
    ab10:	c1 4d 01 00 	mov.b	r13,	1(r1)	;0x0001(r1)
    ab14:	0e 93       	tst	r14		
    ab16:	0b 20       	jnz	$+24     	;abs 0xab2e
    ab18:	0f 93       	tst	r15		
    ab1a:	09 20       	jnz	$+20     	;abs 0xab2e
    ab1c:	e1 43 00 00 	mov.b	#2,	0(r1)	;r3 As==10, 0x0000(r1)
    ab20:	0f 41       	mov	r1,	r15	
    ab22:	b0 12 c4 ac 	call	#0xacc4	
    ab26:	31 52       	add	#8,	r1	;r2 As==11
    ab28:	3a 41       	pop	r10		
    ab2a:	3b 41       	pop	r11		
    ab2c:	30 41       	ret			
    ab2e:	b1 40 1e 00 	mov	#30,	2(r1)	;#0x001e, 0x0002(r1)
    ab32:	02 00 
    ab34:	4c 93       	tst.b	r12		
    ab36:	1b 20       	jnz	$+56     	;abs 0xab6e
    ab38:	0a 4e       	mov	r14,	r10	
    ab3a:	0b 4f       	mov	r15,	r11	
    ab3c:	81 4a 04 00 	mov	r10,	4(r1)	;0x0004(r1)
    ab40:	81 4b 06 00 	mov	r11,	6(r1)	;0x0006(r1)
    ab44:	0e 4a       	mov	r10,	r14	
    ab46:	0f 4b       	mov	r11,	r15	
    ab48:	b0 12 52 ac 	call	#0xac52	
    ab4c:	3f 53       	add	#-1,	r15	;r3 As==11
    ab4e:	1f 93       	cmp	#1,	r15	;r3 As==01
    ab50:	e7 3b       	jl	$-48     	;abs 0xab20
    ab52:	81 4a 04 00 	mov	r10,	4(r1)	;0x0004(r1)
    ab56:	81 4b 06 00 	mov	r11,	6(r1)	;0x0006(r1)
    ab5a:	4e 4f       	mov.b	r15,	r14	
    ab5c:	7e f0 1f 00 	and.b	#31,	r14	;#0x001f
    ab60:	0f 20       	jnz	$+32     	;abs 0xab80
    ab62:	3e 40 1e 00 	mov	#30,	r14	;#0x001e
    ab66:	0e 8f       	sub	r15,	r14	
    ab68:	81 4e 02 00 	mov	r14,	2(r1)	;0x0002(r1)
    ab6c:	d9 3f       	jmp	$-76     	;abs 0xab20
    ab6e:	0e 93       	tst	r14		
    ab70:	10 24       	jz	$+34     	;abs 0xab92
    ab72:	0a 4e       	mov	r14,	r10	
    ab74:	0b 4f       	mov	r15,	r11	
    ab76:	3a e3       	inv	r10		
    ab78:	3b e3       	inv	r11		
    ab7a:	1a 53       	inc	r10		
    ab7c:	0b 63       	adc	r11		
    ab7e:	de 3f       	jmp	$-66     	;abs 0xab3c
    ab80:	91 51 04 00 	rla	4(r1)		;0x0004(r1)
    ab84:	04 00 
    ab86:	91 61 06 00 	rlc	6(r1)		;0x0006(r1)
    ab8a:	06 00 
    ab8c:	7e 53       	add.b	#-1,	r14	;r3 As==11
    ab8e:	f8 23       	jnz	$-14     	;abs 0xab80
    ab90:	e8 3f       	jmp	$-46     	;abs 0xab62
    ab92:	3f 90 00 80 	cmp	#-32768,r15	;#0x8000
    ab96:	ed 23       	jnz	$-36     	;abs 0xab72
    ab98:	0e 43       	clr	r14		
    ab9a:	3f 40 00 cf 	mov	#-12544,r15	;#0xcf00
    ab9e:	c3 3f       	jmp	$-120    	;abs 0xab26

0000aba0 <__fixsfsi>:
    aba0:	31 50 f4 ff 	add	#-12,	r1	;#0xfff4
    aba4:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    aba8:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    abac:	0e 41       	mov	r1,	r14	
    abae:	2e 52       	add	#4,	r14	;r2 As==10
    abb0:	0f 41       	mov	r1,	r15	
    abb2:	b0 12 a2 ae 	call	#0xaea2	
    abb6:	5f 41 04 00 	mov.b	4(r1),	r15	;0x0004(r1)
    abba:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    abbc:	28 24       	jz	$+82     	;abs 0xac0e
    abbe:	27 28       	jnc	$+80     	;abs 0xac0e
    abc0:	6f 92       	cmp.b	#4,	r15	;r2 As==10
    abc2:	07 24       	jz	$+16     	;abs 0xabd2
    abc4:	1d 41 06 00 	mov	6(r1),	r13	;0x0006(r1)
    abc8:	0d 93       	tst	r13		
    abca:	21 38       	jl	$+68     	;abs 0xac0e
    abcc:	3d 90 1f 00 	cmp	#31,	r13	;#0x001f
    abd0:	09 38       	jl	$+20     	;abs 0xabe4
    abd2:	c1 93 05 00 	tst.b	5(r1)		;0x0005(r1)
    abd6:	26 20       	jnz	$+78     	;abs 0xac24
    abd8:	3e 43       	mov	#-1,	r14	;r3 As==11
    abda:	3f 40 ff 7f 	mov	#32767,	r15	;#0x7fff
    abde:	31 50 0c 00 	add	#12,	r1	;#0x000c
    abe2:	30 41       	ret			
    abe4:	1e 41 08 00 	mov	8(r1),	r14	;0x0008(r1)
    abe8:	1f 41 0a 00 	mov	10(r1),	r15	;0x000a(r1)
    abec:	3c 40 1e 00 	mov	#30,	r12	;#0x001e
    abf0:	4c 8d       	sub.b	r13,	r12	
    abf2:	4d 4c       	mov.b	r12,	r13	
    abf4:	7d f0 1f 00 	and.b	#31,	r13	;#0x001f
    abf8:	0f 20       	jnz	$+32     	;abs 0xac18
    abfa:	c1 93 05 00 	tst.b	5(r1)		;0x0005(r1)
    abfe:	ef 27       	jz	$-32     	;abs 0xabde
    ac00:	3e e3       	inv	r14		
    ac02:	3f e3       	inv	r15		
    ac04:	1e 53       	inc	r14		
    ac06:	0f 63       	adc	r15		
    ac08:	31 50 0c 00 	add	#12,	r1	;#0x000c
    ac0c:	30 41       	ret			
    ac0e:	0e 43       	clr	r14		
    ac10:	0f 43       	clr	r15		
    ac12:	31 50 0c 00 	add	#12,	r1	;#0x000c
    ac16:	30 41       	ret			
    ac18:	12 c3       	clrc			
    ac1a:	0f 10       	rrc	r15		
    ac1c:	0e 10       	rrc	r14		
    ac1e:	7d 53       	add.b	#-1,	r13	;r3 As==11
    ac20:	fb 23       	jnz	$-8      	;abs 0xac18
    ac22:	eb 3f       	jmp	$-40     	;abs 0xabfa
    ac24:	0e 43       	clr	r14		
    ac26:	3f 40 00 80 	mov	#-32768,r15	;#0x8000
    ac2a:	31 50 0c 00 	add	#12,	r1	;#0x000c
    ac2e:	30 41       	ret			

0000ac30 <__udivhi3>:
    ac30:	7c 40 10 00 	mov.b	#16,	r12	;#0x0010
    ac34:	0d 4e       	mov	r14,	r13	
    ac36:	0e 43       	clr	r14		
    ac38:	0f 5f       	rla	r15		
    ac3a:	0e 6e       	rlc	r14		
    ac3c:	0e 9d       	cmp	r13,	r14	
    ac3e:	02 28       	jnc	$+6      	;abs 0xac44
    ac40:	0e 8d       	sub	r13,	r14	
    ac42:	1f d3       	bis	#1,	r15	;r3 As==01
    ac44:	1c 83       	dec	r12		
    ac46:	f8 23       	jnz	$-14     	;abs 0xac38
    ac48:	30 41       	ret			

0000ac4a <__umodhi3>:
    ac4a:	b0 12 30 ac 	call	#0xac30	
    ac4e:	0f 4e       	mov	r14,	r15	
    ac50:	30 41       	ret			

0000ac52 <__clzsi2>:
    ac52:	0b 12       	push	r11		
    ac54:	0a 12       	push	r10		
    ac56:	09 12       	push	r9		
    ac58:	1f 93       	cmp	#1,	r15	;r3 As==01
    ac5a:	17 2c       	jc	$+48     	;abs 0xac8a
    ac5c:	3e 90 00 01 	cmp	#256,	r14	;#0x0100
    ac60:	2c 28       	jnc	$+90     	;abs 0xacba
    ac62:	3a 40 18 00 	mov	#24,	r10	;#0x0018
    ac66:	0b 43       	clr	r11		
    ac68:	39 42       	mov	#8,	r9	;r2 As==11
    ac6a:	0c 4e       	mov	r14,	r12	
    ac6c:	0d 4f       	mov	r15,	r13	
    ac6e:	4f 49       	mov.b	r9,	r15	
    ac70:	4f 93       	tst.b	r15		
    ac72:	17 20       	jnz	$+48     	;abs 0xaca2
    ac74:	3c 50 8a bc 	add	#-17270,r12	;#0xbc8a
    ac78:	6e 4c       	mov.b	@r12,	r14	
    ac7a:	0f 43       	clr	r15		
    ac7c:	0a 8e       	sub	r14,	r10	
    ac7e:	0b 7f       	subc	r15,	r11	
    ac80:	0f 4a       	mov	r10,	r15	
    ac82:	39 41       	pop	r9		
    ac84:	3a 41       	pop	r10		
    ac86:	3b 41       	pop	r11		
    ac88:	30 41       	ret			
    ac8a:	3f 90 00 01 	cmp	#256,	r15	;#0x0100
    ac8e:	0f 28       	jnc	$+32     	;abs 0xacae
    ac90:	3a 42       	mov	#8,	r10	;r2 As==11
    ac92:	0b 43       	clr	r11		
    ac94:	39 40 18 00 	mov	#24,	r9	;#0x0018
    ac98:	0c 4e       	mov	r14,	r12	
    ac9a:	0d 4f       	mov	r15,	r13	
    ac9c:	4f 49       	mov.b	r9,	r15	
    ac9e:	4f 93       	tst.b	r15		
    aca0:	e9 27       	jz	$-44     	;abs 0xac74
    aca2:	12 c3       	clrc			
    aca4:	0d 10       	rrc	r13		
    aca6:	0c 10       	rrc	r12		
    aca8:	7f 53       	add.b	#-1,	r15	;r3 As==11
    acaa:	fb 23       	jnz	$-8      	;abs 0xaca2
    acac:	e3 3f       	jmp	$-56     	;abs 0xac74
    acae:	3a 40 10 00 	mov	#16,	r10	;#0x0010
    acb2:	0b 43       	clr	r11		
    acb4:	39 40 10 00 	mov	#16,	r9	;#0x0010
    acb8:	ef 3f       	jmp	$-32     	;abs 0xac98
    acba:	3a 40 20 00 	mov	#32,	r10	;#0x0020
    acbe:	0b 43       	clr	r11		
    acc0:	09 43       	clr	r9		
    acc2:	ea 3f       	jmp	$-42     	;abs 0xac98

0000acc4 <__pack_f>:
    acc4:	0b 12       	push	r11		
    acc6:	0a 12       	push	r10		
    acc8:	09 12       	push	r9		
    acca:	08 12       	push	r8		
    accc:	07 12       	push	r7		
    acce:	0d 4f       	mov	r15,	r13	
    acd0:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    acd4:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    acd8:	5a 4d 01 00 	mov.b	1(r13),	r10	;0x0001(r13)
    acdc:	6c 4d       	mov.b	@r13,	r12	
    acde:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    ace0:	70 28       	jnc	$+226    	;abs 0xadc2
    ace2:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    ace4:	6a 24       	jz	$+214    	;abs 0xadba
    ace6:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    ace8:	36 24       	jz	$+110    	;abs 0xad56
    acea:	0e 93       	tst	r14		
    acec:	32 24       	jz	$+102    	;abs 0xad52
    acee:	1b 4d 02 00 	mov	2(r13),	r11	;0x0002(r13)
    acf2:	3b 90 82 ff 	cmp	#-126,	r11	;#0xff82
    acf6:	6d 38       	jl	$+220    	;abs 0xadd2
    acf8:	3b 90 80 00 	cmp	#128,	r11	;#0x0080
    acfc:	5e 34       	jge	$+190    	;abs 0xadba
    acfe:	0c 4e       	mov	r14,	r12	
    ad00:	0d 4f       	mov	r15,	r13	
    ad02:	3c f0 7f 00 	and	#127,	r12	;#0x007f
    ad06:	0d f3       	and	#0,	r13	;r3 As==00
    ad08:	3c 90 40 00 	cmp	#64,	r12	;#0x0040
    ad0c:	40 24       	jz	$+130    	;abs 0xad8e
    ad0e:	3e 50 3f 00 	add	#63,	r14	;#0x003f
    ad12:	0f 63       	adc	r15		
    ad14:	0f 93       	tst	r15		
    ad16:	4a 38       	jl	$+150    	;abs 0xadac
    ad18:	0d 4b       	mov	r11,	r13	
    ad1a:	3d 50 7f 00 	add	#127,	r13	;#0x007f
    ad1e:	12 c3       	clrc			
    ad20:	0f 10       	rrc	r15		
    ad22:	0e 10       	rrc	r14		
    ad24:	12 c3       	clrc			
    ad26:	0f 10       	rrc	r15		
    ad28:	0e 10       	rrc	r14		
    ad2a:	12 c3       	clrc			
    ad2c:	0f 10       	rrc	r15		
    ad2e:	0e 10       	rrc	r14		
    ad30:	12 c3       	clrc			
    ad32:	0f 10       	rrc	r15		
    ad34:	0e 10       	rrc	r14		
    ad36:	12 c3       	clrc			
    ad38:	0f 10       	rrc	r15		
    ad3a:	0e 10       	rrc	r14		
    ad3c:	12 c3       	clrc			
    ad3e:	0f 10       	rrc	r15		
    ad40:	0e 10       	rrc	r14		
    ad42:	12 c3       	clrc			
    ad44:	0f 10       	rrc	r15		
    ad46:	0e 10       	rrc	r14		
    ad48:	3e f3       	and	#-1,	r14	;r3 As==11
    ad4a:	3f f0 7f 00 	and	#127,	r15	;#0x007f
    ad4e:	4d 4d       	mov.b	r13,	r13	
    ad50:	05 3c       	jmp	$+12     	;abs 0xad5c
    ad52:	0f 93       	tst	r15		
    ad54:	cc 23       	jnz	$-102    	;abs 0xacee
    ad56:	4d 43       	clr.b	r13		
    ad58:	0e 43       	clr	r14		
    ad5a:	0f 43       	clr	r15		
    ad5c:	4d 4d       	mov.b	r13,	r13	
    ad5e:	0d 5d       	rla	r13		
    ad60:	0d 5d       	rla	r13		
    ad62:	0d 5d       	rla	r13		
    ad64:	0d 5d       	rla	r13		
    ad66:	0d 5d       	rla	r13		
    ad68:	0d 5d       	rla	r13		
    ad6a:	0d 5d       	rla	r13		
    ad6c:	0c 4f       	mov	r15,	r12	
    ad6e:	3c f0 7f 00 	and	#127,	r12	;#0x007f
    ad72:	0c dd       	bis	r13,	r12	
    ad74:	4f 4a       	mov.b	r10,	r15	
    ad76:	0f 11       	rra	r15		
    ad78:	0f 43       	clr	r15		
    ad7a:	0f 10       	rrc	r15		
    ad7c:	0d 4c       	mov	r12,	r13	
    ad7e:	0d df       	bis	r15,	r13	
    ad80:	0f 4d       	mov	r13,	r15	
    ad82:	37 41       	pop	r7		
    ad84:	38 41       	pop	r8		
    ad86:	39 41       	pop	r9		
    ad88:	3a 41       	pop	r10		
    ad8a:	3b 41       	pop	r11		
    ad8c:	30 41       	ret			
    ad8e:	0d 93       	tst	r13		
    ad90:	be 23       	jnz	$-130    	;abs 0xad0e
    ad92:	0c 4e       	mov	r14,	r12	
    ad94:	0d 4f       	mov	r15,	r13	
    ad96:	3c f0 80 00 	and	#128,	r12	;#0x0080
    ad9a:	0d f3       	and	#0,	r13	;r3 As==00
    ad9c:	0c 93       	tst	r12		
    ad9e:	02 20       	jnz	$+6      	;abs 0xada4
    ada0:	0d 93       	tst	r13		
    ada2:	b8 27       	jz	$-142    	;abs 0xad14
    ada4:	3e 50 40 00 	add	#64,	r14	;#0x0040
    ada8:	0f 63       	adc	r15		
    adaa:	b4 3f       	jmp	$-150    	;abs 0xad14
    adac:	12 c3       	clrc			
    adae:	0f 10       	rrc	r15		
    adb0:	0e 10       	rrc	r14		
    adb2:	0d 4b       	mov	r11,	r13	
    adb4:	3d 50 80 00 	add	#128,	r13	;#0x0080
    adb8:	b2 3f       	jmp	$-154    	;abs 0xad1e
    adba:	7d 43       	mov.b	#-1,	r13	;r3 As==11
    adbc:	0e 43       	clr	r14		
    adbe:	0f 43       	clr	r15		
    adc0:	cd 3f       	jmp	$-100    	;abs 0xad5c
    adc2:	0e d3       	bis	#0,	r14	;r3 As==00
    adc4:	3f d0 10 00 	bis	#16,	r15	;#0x0010
    adc8:	3e f3       	and	#-1,	r14	;r3 As==11
    adca:	3f f0 7f 00 	and	#127,	r15	;#0x007f
    adce:	7d 43       	mov.b	#-1,	r13	;r3 As==11
    add0:	c5 3f       	jmp	$-116    	;abs 0xad5c
    add2:	37 40 82 ff 	mov	#-126,	r7	;#0xff82
    add6:	07 8b       	sub	r11,	r7	
    add8:	37 90 1a 00 	cmp	#26,	r7	;#0x001a
    addc:	4f 34       	jge	$+160    	;abs 0xae7c
    adde:	0c 4e       	mov	r14,	r12	
    ade0:	0d 4f       	mov	r15,	r13	
    ade2:	4b 47       	mov.b	r7,	r11	
    ade4:	7b f0 1f 00 	and.b	#31,	r11	;#0x001f
    ade8:	05 24       	jz	$+12     	;abs 0xadf4
    adea:	12 c3       	clrc			
    adec:	0d 10       	rrc	r13		
    adee:	0c 10       	rrc	r12		
    adf0:	7b 53       	add.b	#-1,	r11	;r3 As==11
    adf2:	fb 23       	jnz	$-8      	;abs 0xadea
    adf4:	18 43       	mov	#1,	r8	;r3 As==01
    adf6:	09 43       	clr	r9		
    adf8:	77 f0 1f 00 	and.b	#31,	r7	;#0x001f
    adfc:	04 24       	jz	$+10     	;abs 0xae06
    adfe:	08 58       	rla	r8		
    ae00:	09 69       	rlc	r9		
    ae02:	77 53       	add.b	#-1,	r7	;r3 As==11
    ae04:	fc 23       	jnz	$-6      	;abs 0xadfe
    ae06:	38 53       	add	#-1,	r8	;r3 As==11
    ae08:	39 63       	addc	#-1,	r9	;r3 As==11
    ae0a:	08 fe       	and	r14,	r8	
    ae0c:	09 ff       	and	r15,	r9	
    ae0e:	1e 43       	mov	#1,	r14	;r3 As==01
    ae10:	0f 43       	clr	r15		
    ae12:	08 93       	tst	r8		
    ae14:	04 20       	jnz	$+10     	;abs 0xae1e
    ae16:	09 93       	tst	r9		
    ae18:	02 20       	jnz	$+6      	;abs 0xae1e
    ae1a:	0e 43       	clr	r14		
    ae1c:	0f 43       	clr	r15		
    ae1e:	08 4e       	mov	r14,	r8	
    ae20:	09 4f       	mov	r15,	r9	
    ae22:	08 dc       	bis	r12,	r8	
    ae24:	09 dd       	bis	r13,	r9	
    ae26:	0e 48       	mov	r8,	r14	
    ae28:	0f 49       	mov	r9,	r15	
    ae2a:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    ae2e:	0f f3       	and	#0,	r15	;r3 As==00
    ae30:	3e 90 40 00 	cmp	#64,	r14	;#0x0040
    ae34:	26 24       	jz	$+78     	;abs 0xae82
    ae36:	38 50 3f 00 	add	#63,	r8	;#0x003f
    ae3a:	09 63       	adc	r9		
    ae3c:	0e 48       	mov	r8,	r14	
    ae3e:	0f 49       	mov	r9,	r15	
    ae40:	12 c3       	clrc			
    ae42:	0f 10       	rrc	r15		
    ae44:	0e 10       	rrc	r14		
    ae46:	12 c3       	clrc			
    ae48:	0f 10       	rrc	r15		
    ae4a:	0e 10       	rrc	r14		
    ae4c:	12 c3       	clrc			
    ae4e:	0f 10       	rrc	r15		
    ae50:	0e 10       	rrc	r14		
    ae52:	12 c3       	clrc			
    ae54:	0f 10       	rrc	r15		
    ae56:	0e 10       	rrc	r14		
    ae58:	12 c3       	clrc			
    ae5a:	0f 10       	rrc	r15		
    ae5c:	0e 10       	rrc	r14		
    ae5e:	12 c3       	clrc			
    ae60:	0f 10       	rrc	r15		
    ae62:	0e 10       	rrc	r14		
    ae64:	12 c3       	clrc			
    ae66:	0f 10       	rrc	r15		
    ae68:	0e 10       	rrc	r14		
    ae6a:	3e f3       	and	#-1,	r14	;r3 As==11
    ae6c:	3f f0 7f 00 	and	#127,	r15	;#0x007f
    ae70:	5d 43       	mov.b	#1,	r13	;r3 As==01
    ae72:	39 90 00 40 	cmp	#16384,	r9	;#0x4000
    ae76:	72 2f       	jc	$-282    	;abs 0xad5c
    ae78:	4d 43       	clr.b	r13		
    ae7a:	70 3f       	jmp	$-286    	;abs 0xad5c
    ae7c:	08 43       	clr	r8		
    ae7e:	09 43       	clr	r9		
    ae80:	da 3f       	jmp	$-74     	;abs 0xae36
    ae82:	0f 93       	tst	r15		
    ae84:	d8 23       	jnz	$-78     	;abs 0xae36
    ae86:	0e 48       	mov	r8,	r14	
    ae88:	0f 49       	mov	r9,	r15	
    ae8a:	3e f0 80 00 	and	#128,	r14	;#0x0080
    ae8e:	0f f3       	and	#0,	r15	;r3 As==00
    ae90:	0e 93       	tst	r14		
    ae92:	04 24       	jz	$+10     	;abs 0xae9c
    ae94:	38 50 40 00 	add	#64,	r8	;#0x0040
    ae98:	09 63       	adc	r9		
    ae9a:	d0 3f       	jmp	$-94     	;abs 0xae3c
    ae9c:	0f 93       	tst	r15		
    ae9e:	ce 27       	jz	$-98     	;abs 0xae3c
    aea0:	f9 3f       	jmp	$-12     	;abs 0xae94

0000aea2 <__unpack_f>:
    aea2:	0b 12       	push	r11		
    aea4:	0a 12       	push	r10		
    aea6:	2a 4f       	mov	@r15,	r10	
    aea8:	5b 4f 02 00 	mov.b	2(r15),	r11	;0x0002(r15)
    aeac:	3b f0 7f 00 	and	#127,	r11	;#0x007f
    aeb0:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    aeb4:	12 c3       	clrc			
    aeb6:	0d 10       	rrc	r13		
    aeb8:	12 c3       	clrc			
    aeba:	0d 10       	rrc	r13		
    aebc:	12 c3       	clrc			
    aebe:	0d 10       	rrc	r13		
    aec0:	12 c3       	clrc			
    aec2:	0d 10       	rrc	r13		
    aec4:	12 c3       	clrc			
    aec6:	0d 10       	rrc	r13		
    aec8:	12 c3       	clrc			
    aeca:	0d 10       	rrc	r13		
    aecc:	12 c3       	clrc			
    aece:	0d 10       	rrc	r13		
    aed0:	4d 4d       	mov.b	r13,	r13	
    aed2:	5f 4f 03 00 	mov.b	3(r15),	r15	;0x0003(r15)
    aed6:	3f b0 80 00 	bit	#128,	r15	;#0x0080
    aeda:	0f 43       	clr	r15		
    aedc:	0f 6f       	rlc	r15		
    aede:	ce 4f 01 00 	mov.b	r15,	1(r14)	;0x0001(r14)
    aee2:	0d 93       	tst	r13		
    aee4:	2d 20       	jnz	$+92     	;abs 0xaf40
    aee6:	0a 93       	tst	r10		
    aee8:	51 24       	jz	$+164    	;abs 0xaf8c
    aeea:	be 40 82 ff 	mov	#-126,	2(r14)	;#0xff82, 0x0002(r14)
    aeee:	02 00 
    aef0:	0c 4a       	mov	r10,	r12	
    aef2:	0d 4b       	mov	r11,	r13	
    aef4:	0c 5c       	rla	r12		
    aef6:	0d 6d       	rlc	r13		
    aef8:	0c 5c       	rla	r12		
    aefa:	0d 6d       	rlc	r13		
    aefc:	0c 5c       	rla	r12		
    aefe:	0d 6d       	rlc	r13		
    af00:	0c 5c       	rla	r12		
    af02:	0d 6d       	rlc	r13		
    af04:	0c 5c       	rla	r12		
    af06:	0d 6d       	rlc	r13		
    af08:	0c 5c       	rla	r12		
    af0a:	0d 6d       	rlc	r13		
    af0c:	0c 5c       	rla	r12		
    af0e:	0d 6d       	rlc	r13		
    af10:	fe 40 03 00 	mov.b	#3,	0(r14)	;#0x0003, 0x0000(r14)
    af14:	00 00 
    af16:	3d 90 00 40 	cmp	#16384,	r13	;#0x4000
    af1a:	0b 2c       	jc	$+24     	;abs 0xaf32
    af1c:	3f 40 81 ff 	mov	#-127,	r15	;#0xff81
    af20:	0c 5c       	rla	r12		
    af22:	0d 6d       	rlc	r13		
    af24:	0a 4f       	mov	r15,	r10	
    af26:	3f 53       	add	#-1,	r15	;r3 As==11
    af28:	3d 90 00 40 	cmp	#16384,	r13	;#0x4000
    af2c:	f9 2b       	jnc	$-12     	;abs 0xaf20
    af2e:	8e 4a 02 00 	mov	r10,	2(r14)	;0x0002(r14)
    af32:	8e 4c 04 00 	mov	r12,	4(r14)	;0x0004(r14)
    af36:	8e 4d 06 00 	mov	r13,	6(r14)	;0x0006(r14)
    af3a:	3a 41       	pop	r10		
    af3c:	3b 41       	pop	r11		
    af3e:	30 41       	ret			
    af40:	3d 90 ff 00 	cmp	#255,	r13	;#0x00ff
    af44:	2a 24       	jz	$+86     	;abs 0xaf9a
    af46:	3d 50 81 ff 	add	#-127,	r13	;#0xff81
    af4a:	8e 4d 02 00 	mov	r13,	2(r14)	;0x0002(r14)
    af4e:	fe 40 03 00 	mov.b	#3,	0(r14)	;#0x0003, 0x0000(r14)
    af52:	00 00 
    af54:	0c 4a       	mov	r10,	r12	
    af56:	0d 4b       	mov	r11,	r13	
    af58:	0c 5c       	rla	r12		
    af5a:	0d 6d       	rlc	r13		
    af5c:	0c 5c       	rla	r12		
    af5e:	0d 6d       	rlc	r13		
    af60:	0c 5c       	rla	r12		
    af62:	0d 6d       	rlc	r13		
    af64:	0c 5c       	rla	r12		
    af66:	0d 6d       	rlc	r13		
    af68:	0c 5c       	rla	r12		
    af6a:	0d 6d       	rlc	r13		
    af6c:	0c 5c       	rla	r12		
    af6e:	0d 6d       	rlc	r13		
    af70:	0c 5c       	rla	r12		
    af72:	0d 6d       	rlc	r13		
    af74:	0a 4c       	mov	r12,	r10	
    af76:	0b 4d       	mov	r13,	r11	
    af78:	0a d3       	bis	#0,	r10	;r3 As==00
    af7a:	3b d0 00 40 	bis	#16384,	r11	;#0x4000
    af7e:	8e 4a 04 00 	mov	r10,	4(r14)	;0x0004(r14)
    af82:	8e 4b 06 00 	mov	r11,	6(r14)	;0x0006(r14)
    af86:	3a 41       	pop	r10		
    af88:	3b 41       	pop	r11		
    af8a:	30 41       	ret			
    af8c:	0b 93       	tst	r11		
    af8e:	ad 23       	jnz	$-164    	;abs 0xaeea
    af90:	ee 43 00 00 	mov.b	#2,	0(r14)	;r3 As==10, 0x0000(r14)
    af94:	3a 41       	pop	r10		
    af96:	3b 41       	pop	r11		
    af98:	30 41       	ret			
    af9a:	0a 93       	tst	r10		
    af9c:	0c 24       	jz	$+26     	;abs 0xafb6
    af9e:	0c 4a       	mov	r10,	r12	
    afa0:	0d 4b       	mov	r11,	r13	
    afa2:	0c f3       	and	#0,	r12	;r3 As==00
    afa4:	3d f0 10 00 	and	#16,	r13	;#0x0010
    afa8:	0c 93       	tst	r12		
    afaa:	02 20       	jnz	$+6      	;abs 0xafb0
    afac:	0d 93       	tst	r13		
    afae:	08 24       	jz	$+18     	;abs 0xafc0
    afb0:	de 43 00 00 	mov.b	#1,	0(r14)	;r3 As==01, 0x0000(r14)
    afb4:	e4 3f       	jmp	$-54     	;abs 0xaf7e
    afb6:	0b 93       	tst	r11		
    afb8:	f2 23       	jnz	$-26     	;abs 0xaf9e
    afba:	ee 42 00 00 	mov.b	#4,	0(r14)	;r2 As==10, 0x0000(r14)
    afbe:	e3 3f       	jmp	$-56     	;abs 0xaf86
    afc0:	ce 43 00 00 	mov.b	#0,	0(r14)	;r3 As==00, 0x0000(r14)
    afc4:	dc 3f       	jmp	$-70     	;abs 0xaf7e

0000afc6 <memcpy>:
    afc6:	0b 12       	push	r11		
    afc8:	0a 12       	push	r10		
    afca:	09 12       	push	r9		
    afcc:	08 12       	push	r8		
    afce:	07 12       	push	r7		
    afd0:	0d 93       	tst	r13		
    afd2:	70 24       	jz	$+226    	;abs 0xb0b4
    afd4:	0f 9e       	cmp	r14,	r15	
    afd6:	6e 24       	jz	$+222    	;abs 0xb0b4
    afd8:	34 2c       	jc	$+106    	;abs 0xb042
    afda:	0c 4e       	mov	r14,	r12	
    afdc:	0c df       	bis	r15,	r12	
    afde:	1c f3       	and	#1,	r12	;r3 As==01
    afe0:	1b 24       	jz	$+56     	;abs 0xb018
    afe2:	0c 4e       	mov	r14,	r12	
    afe4:	0c ef       	xor	r15,	r12	
    afe6:	1c f3       	and	#1,	r12	;r3 As==01
    afe8:	07 20       	jnz	$+16     	;abs 0xaff8
    afea:	2d 93       	cmp	#2,	r13	;r3 As==10
    afec:	07 28       	jnc	$+16     	;abs 0xaffc
    afee:	0b 4e       	mov	r14,	r11	
    aff0:	1b f3       	and	#1,	r11	;r3 As==01
    aff2:	2c 43       	mov	#2,	r12	;r3 As==10
    aff4:	0c 8b       	sub	r11,	r12	
    aff6:	03 3c       	jmp	$+8      	;abs 0xaffe
    aff8:	0c 4d       	mov	r13,	r12	
    affa:	01 3c       	jmp	$+4      	;abs 0xaffe
    affc:	1c 43       	mov	#1,	r12	;r3 As==01
    affe:	0d 8c       	sub	r12,	r13	
    b000:	0a 4c       	mov	r12,	r10	
    b002:	09 4e       	mov	r14,	r9	
    b004:	0b 4f       	mov	r15,	r11	
    b006:	fb 49 00 00 	mov.b	@r9+,	0(r11)	;0x0000(r11)
    b00a:	1b 53       	inc	r11		
    b00c:	3a 53       	add	#-1,	r10	;r3 As==11
    b00e:	fb 23       	jnz	$-8      	;abs 0xb006
    b010:	0a 4f       	mov	r15,	r10	
    b012:	0a 5c       	add	r12,	r10	
    b014:	0e 5c       	add	r12,	r14	
    b016:	01 3c       	jmp	$+4      	;abs 0xb01a
    b018:	0a 4f       	mov	r15,	r10	
    b01a:	0b 4d       	mov	r13,	r11	
    b01c:	12 c3       	clrc			
    b01e:	0b 10       	rrc	r11		
    b020:	0b 24       	jz	$+24     	;abs 0xb038
    b022:	09 4b       	mov	r11,	r9	
    b024:	08 4e       	mov	r14,	r8	
    b026:	0c 4a       	mov	r10,	r12	
    b028:	bc 48 00 00 	mov	@r8+,	0(r12)	;0x0000(r12)
    b02c:	2c 53       	incd	r12		
    b02e:	39 53       	add	#-1,	r9	;r3 As==11
    b030:	fb 23       	jnz	$-8      	;abs 0xb028
    b032:	0b 5b       	rla	r11		
    b034:	0e 5b       	add	r11,	r14	
    b036:	0a 5b       	add	r11,	r10	
    b038:	1d f3       	and	#1,	r13	;r3 As==01
    b03a:	3c 24       	jz	$+122    	;abs 0xb0b4
    b03c:	ea 4e 00 00 	mov.b	@r14,	0(r10)	;0x0000(r10)
    b040:	39 3c       	jmp	$+116    	;abs 0xb0b4
    b042:	0e 5d       	add	r13,	r14	
    b044:	0c 4f       	mov	r15,	r12	
    b046:	0c 5d       	add	r13,	r12	
    b048:	0b 4c       	mov	r12,	r11	
    b04a:	0b de       	bis	r14,	r11	
    b04c:	1b f3       	and	#1,	r11	;r3 As==01
    b04e:	1b 24       	jz	$+56     	;abs 0xb086
    b050:	0b 4c       	mov	r12,	r11	
    b052:	0b ee       	xor	r14,	r11	
    b054:	1b f3       	and	#1,	r11	;r3 As==01
    b056:	06 20       	jnz	$+14     	;abs 0xb064
    b058:	3d 90 03 00 	cmp	#3,	r13	;#0x0003
    b05c:	03 28       	jnc	$+8      	;abs 0xb064
    b05e:	0b 4e       	mov	r14,	r11	
    b060:	1b f3       	and	#1,	r11	;r3 As==01
    b062:	01 3c       	jmp	$+4      	;abs 0xb066
    b064:	0b 4d       	mov	r13,	r11	
    b066:	0d 8b       	sub	r11,	r13	
    b068:	09 4e       	mov	r14,	r9	
    b06a:	0a 4c       	mov	r12,	r10	
    b06c:	08 4b       	mov	r11,	r8	
    b06e:	08 8c       	sub	r12,	r8	
    b070:	3a 53       	add	#-1,	r10	;r3 As==11
    b072:	39 53       	add	#-1,	r9	;r3 As==11
    b074:	ea 49 00 00 	mov.b	@r9,	0(r10)	;0x0000(r10)
    b078:	07 4a       	mov	r10,	r7	
    b07a:	07 58       	add	r8,	r7	
    b07c:	f9 23       	jnz	$-12     	;abs 0xb070
    b07e:	3b e3       	inv	r11		
    b080:	1b 53       	inc	r11		
    b082:	0c 5b       	add	r11,	r12	
    b084:	0e 5b       	add	r11,	r14	
    b086:	0b 4d       	mov	r13,	r11	
    b088:	12 c3       	clrc			
    b08a:	0b 10       	rrc	r11		
    b08c:	0e 24       	jz	$+30     	;abs 0xb0aa
    b08e:	0a 4b       	mov	r11,	r10	
    b090:	08 4e       	mov	r14,	r8	
    b092:	09 4c       	mov	r12,	r9	
    b094:	28 83       	decd	r8		
    b096:	29 83       	decd	r9		
    b098:	a9 48 00 00 	mov	@r8,	0(r9)	;0x0000(r9)
    b09c:	3a 53       	add	#-1,	r10	;r3 As==11
    b09e:	fa 23       	jnz	$-10     	;abs 0xb094
    b0a0:	0a 8b       	sub	r11,	r10	
    b0a2:	0b 4a       	mov	r10,	r11	
    b0a4:	0b 5b       	rla	r11		
    b0a6:	0e 5b       	add	r11,	r14	
    b0a8:	0c 5b       	add	r11,	r12	
    b0aa:	1d f3       	and	#1,	r13	;r3 As==01
    b0ac:	03 24       	jz	$+8      	;abs 0xb0b4
    b0ae:	dc 4e ff ff 	mov.b	-1(r14),-1(r12)	;0xffff(r14), 0xffff(r12)
    b0b2:	ff ff 
    b0b4:	37 41       	pop	r7		
    b0b6:	38 41       	pop	r8		
    b0b8:	39 41       	pop	r9		
    b0ba:	3a 41       	pop	r10		
    b0bc:	3b 41       	pop	r11		
    b0be:	30 41       	ret			

0000b0c0 <printf>:
    b0c0:	0d 41       	mov	r1,	r13	
    b0c2:	2d 53       	incd	r13		
    b0c4:	3e 4d       	mov	@r13+,	r14	
    b0c6:	3f 40 82 a1 	mov	#-24190,r15	;#0xa182
    b0ca:	b0 12 32 b3 	call	#0xb332	
    b0ce:	30 41       	ret			

0000b0d0 <vprintf>:
    b0d0:	0d 4e       	mov	r14,	r13	
    b0d2:	0e 4f       	mov	r15,	r14	
    b0d4:	3f 40 82 a1 	mov	#-24190,r15	;#0xa182
    b0d8:	b0 12 32 b3 	call	#0xb332	
    b0dc:	30 41       	ret			

0000b0de <append>:
    b0de:	1e 42 9e 02 	mov	&0x029e,r14	
    b0e2:	1e 93       	cmp	#1,	r14	;r3 As==01
    b0e4:	0b 38       	jl	$+24     	;abs 0xb0fc
    b0e6:	1d 42 9c 02 	mov	&0x029c,r13	
    b0ea:	cd 4f 00 00 	mov.b	r15,	0(r13)	;0x0000(r13)
    b0ee:	1d 53       	inc	r13		
    b0f0:	82 4d 9c 02 	mov	r13,	&0x029c	
    b0f4:	3e 53       	add	#-1,	r14	;r3 As==11
    b0f6:	82 4e 9e 02 	mov	r14,	&0x029e	
    b0fa:	30 41       	ret			
    b0fc:	3f 43       	mov	#-1,	r15	;r3 As==11
    b0fe:	30 41       	ret			

0000b100 <call_vuprintf>:
    b100:	0b 12       	push	r11		
    b102:	0a 12       	push	r10		
    b104:	21 83       	decd	r1		
    b106:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    b10a:	1a 42 9c 02 	mov	&0x029c,r10	
    b10e:	1b 42 9e 02 	mov	&0x029e,r11	
    b112:	0d 4e       	mov	r14,	r13	
    b114:	0e 4f       	mov	r15,	r14	
    b116:	3f 40 de b0 	mov	#-20258,r15	;#0xb0de
    b11a:	b0 12 32 b3 	call	#0xb332	
    b11e:	0f 9b       	cmp	r11,	r15	
    b120:	05 38       	jl	$+12     	;abs 0xb12c
    b122:	0e 4a       	mov	r10,	r14	
    b124:	0e 5b       	add	r11,	r14	
    b126:	ce 43 ff ff 	mov.b	#0,	-1(r14)	;r3 As==00, 0xffff(r14)
    b12a:	04 3c       	jmp	$+10     	;abs 0xb134
    b12c:	1e 42 9c 02 	mov	&0x029c,r14	
    b130:	ce 43 00 00 	mov.b	#0,	0(r14)	;r3 As==00, 0x0000(r14)
    b134:	21 53       	incd	r1		
    b136:	3a 41       	pop	r10		
    b138:	3b 41       	pop	r11		
    b13a:	30 41       	ret			

0000b13c <sprintf>:
    b13c:	92 41 02 00 	mov	2(r1),	&0x029c	;0x0002(r1)
    b140:	9c 02 
    b142:	b2 40 ff 7f 	mov	#32767,	&0x029e	;#0x7fff
    b146:	9e 02 
    b148:	0e 41       	mov	r1,	r14	
    b14a:	3e 50 06 00 	add	#6,	r14	;#0x0006
    b14e:	1f 41 04 00 	mov	4(r1),	r15	;0x0004(r1)
    b152:	b0 12 00 b1 	call	#0xb100	
    b156:	30 41       	ret			

0000b158 <snprintf>:
    b158:	92 41 02 00 	mov	2(r1),	&0x029c	;0x0002(r1)
    b15c:	9c 02 
    b15e:	92 41 04 00 	mov	4(r1),	&0x029e	;0x0004(r1)
    b162:	9e 02 
    b164:	0e 41       	mov	r1,	r14	
    b166:	3e 52       	add	#8,	r14	;r2 As==11
    b168:	1f 41 06 00 	mov	6(r1),	r15	;0x0006(r1)
    b16c:	b0 12 00 b1 	call	#0xb100	
    b170:	30 41       	ret			

0000b172 <vsprintf>:
    b172:	0c 4e       	mov	r14,	r12	
    b174:	82 4f 9c 02 	mov	r15,	&0x029c	
    b178:	b2 40 ff 7f 	mov	#32767,	&0x029e	;#0x7fff
    b17c:	9e 02 
    b17e:	0e 4d       	mov	r13,	r14	
    b180:	0f 4c       	mov	r12,	r15	
    b182:	b0 12 00 b1 	call	#0xb100	
    b186:	30 41       	ret			

0000b188 <vsnprintf>:
    b188:	82 4f 9c 02 	mov	r15,	&0x029c	
    b18c:	82 4e 9e 02 	mov	r14,	&0x029e	
    b190:	0e 4c       	mov	r12,	r14	
    b192:	0f 4d       	mov	r13,	r15	
    b194:	b0 12 00 b1 	call	#0xb100	
    b198:	30 41       	ret			

0000b19a <print_field>:
    b19a:	0b 12       	push	r11		
    b19c:	0a 12       	push	r10		
    b19e:	09 12       	push	r9		
    b1a0:	08 12       	push	r8		
    b1a2:	07 12       	push	r7		
    b1a4:	06 12       	push	r6		
    b1a6:	05 12       	push	r5		
    b1a8:	04 12       	push	r4		
    b1aa:	31 82       	sub	#8,	r1	;r2 As==11
    b1ac:	08 4f       	mov	r15,	r8	
    b1ae:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    b1b2:	09 4d       	mov	r13,	r9	
    b1b4:	1f 41 1a 00 	mov	26(r1),	r15	;0x001a(r1)
    b1b8:	1d 41 1c 00 	mov	28(r1),	r13	;0x001c(r1)
    b1bc:	4c 4d       	mov.b	r13,	r12	
    b1be:	04 4d       	mov	r13,	r4	
    b1c0:	84 10       	swpb	r4		
    b1c2:	45 44       	mov.b	r4,	r5	
    b1c4:	4e 4f       	mov.b	r15,	r14	
    b1c6:	7e b0 40 00 	bit.b	#64,	r14	;#0x0040
    b1ca:	11 24       	jz	$+36     	;abs 0xb1ee
    b1cc:	f1 40 30 00 	mov.b	#48,	0(r1)	;#0x0030, 0x0000(r1)
    b1d0:	00 00 
    b1d2:	0e 4f       	mov	r15,	r14	
    b1d4:	8e 10       	swpb	r14		
    b1d6:	5e f3       	and.b	#1,	r14	;r3 As==01
    b1d8:	03 24       	jz	$+8      	;abs 0xb1e0
    b1da:	7e 40 58 00 	mov.b	#88,	r14	;#0x0058
    b1de:	02 3c       	jmp	$+6      	;abs 0xb1e4
    b1e0:	7e 40 78 00 	mov.b	#120,	r14	;#0x0078
    b1e4:	c1 4e 01 00 	mov.b	r14,	1(r1)	;0x0001(r1)
    b1e8:	0c 41       	mov	r1,	r12	
    b1ea:	2c 53       	incd	r12		
    b1ec:	0f 3c       	jmp	$+32     	;abs 0xb20c
    b1ee:	7e f0 20 00 	and.b	#32,	r14	;#0x0020
    b1f2:	04 24       	jz	$+10     	;abs 0xb1fc
    b1f4:	f1 40 30 00 	mov.b	#48,	0(r1)	;#0x0030, 0x0000(r1)
    b1f8:	00 00 
    b1fa:	04 3c       	jmp	$+10     	;abs 0xb204
    b1fc:	4c 93       	tst.b	r12		
    b1fe:	05 24       	jz	$+12     	;abs 0xb20a
    b200:	c1 4d 00 00 	mov.b	r13,	0(r1)	;0x0000(r1)
    b204:	0c 41       	mov	r1,	r12	
    b206:	1c 53       	inc	r12		
    b208:	01 3c       	jmp	$+4      	;abs 0xb20c
    b20a:	0c 41       	mov	r1,	r12	
    b20c:	0a 4c       	mov	r12,	r10	
    b20e:	8c 10       	swpb	r12		
    b210:	8c 11       	sxt	r12		
    b212:	8c 10       	swpb	r12		
    b214:	8c 11       	sxt	r12		
    b216:	0b 4c       	mov	r12,	r11	
    b218:	06 41       	mov	r1,	r6	
    b21a:	0c 41       	mov	r1,	r12	
    b21c:	8c 10       	swpb	r12		
    b21e:	8c 11       	sxt	r12		
    b220:	8c 10       	swpb	r12		
    b222:	8c 11       	sxt	r12		
    b224:	07 4c       	mov	r12,	r7	
    b226:	0a 86       	sub	r6,	r10	
    b228:	0b 77       	subc	r7,	r11	
    b22a:	0e 4f       	mov	r15,	r14	
    b22c:	8e 10       	swpb	r14		
    b22e:	c1 4e 02 00 	mov.b	r14,	2(r1)	;0x0002(r1)
    b232:	6e f2       	and.b	#4,	r14	;r2 As==10
    b234:	02 24       	jz	$+6      	;abs 0xb23a
    b236:	07 45       	mov	r5,	r7	
    b238:	01 3c       	jmp	$+4      	;abs 0xb23c
    b23a:	37 43       	mov	#-1,	r7	;r3 As==11
    b23c:	4f 4f       	mov.b	r15,	r15	
    b23e:	7f b0 10 00 	bit.b	#16,	r15	;#0x0010
    b242:	3c 20       	jnz	$+122    	;abs 0xb2bc
    b244:	1d 41 04 00 	mov	4(r1),	r13	;0x0004(r1)
    b248:	3d 53       	add	#-1,	r13	;r3 As==11
    b24a:	1d 53       	inc	r13		
    b24c:	cd 93 00 00 	tst.b	0(r13)		;0x0000(r13)
    b250:	fc 23       	jnz	$-6      	;abs 0xb24a
    b252:	1d 81 04 00 	sub	4(r1),	r13	;0x0004(r1)
    b256:	09 9a       	cmp	r10,	r9	
    b258:	02 28       	jnc	$+6      	;abs 0xb25e
    b25a:	09 8a       	sub	r10,	r9	
    b25c:	01 3c       	jmp	$+4      	;abs 0xb260
    b25e:	09 43       	clr	r9		
    b260:	e1 b3 02 00 	bit.b	#2,	2(r1)	;r3 As==10, 0x0002(r1)
    b264:	05 24       	jz	$+12     	;abs 0xb270
    b266:	09 95       	cmp	r5,	r9	
    b268:	02 28       	jnc	$+6      	;abs 0xb26e
    b26a:	09 85       	sub	r5,	r9	
    b26c:	01 3c       	jmp	$+4      	;abs 0xb270
    b26e:	09 43       	clr	r9		
    b270:	05 4d       	mov	r13,	r5	
    b272:	07 9d       	cmp	r13,	r7	
    b274:	01 2c       	jc	$+4      	;abs 0xb278
    b276:	05 47       	mov	r7,	r5	
    b278:	4f 93       	tst.b	r15		
    b27a:	0d 38       	jl	$+28     	;abs 0xb296
    b27c:	f1 40 20 00 	mov.b	#32,	6(r1)	;#0x0020, 0x0006(r1)
    b280:	06 00 
    b282:	06 43       	clr	r6		
    b284:	0b 43       	clr	r11		
    b286:	0e 3c       	jmp	$+30     	;abs 0xb2a4
    b288:	0f 41       	mov	r1,	r15	
    b28a:	0f 56       	add	r6,	r15	
    b28c:	6f 4f       	mov.b	@r15,	r15	
    b28e:	8f 11       	sxt	r15		
    b290:	16 53       	inc	r6		
    b292:	88 12       	call	r8		
    b294:	01 3c       	jmp	$+4      	;abs 0xb298
    b296:	06 43       	clr	r6		
    b298:	06 9a       	cmp	r10,	r6	
    b29a:	f6 3b       	jl	$-18     	;abs 0xb288
    b29c:	0b 4a       	mov	r10,	r11	
    b29e:	f1 40 30 00 	mov.b	#48,	6(r1)	;#0x0030, 0x0006(r1)
    b2a2:	06 00 
    b2a4:	05 8b       	sub	r11,	r5	
    b2a6:	05 3c       	jmp	$+12     	;abs 0xb2b2
    b2a8:	5f 41 06 00 	mov.b	6(r1),	r15	;0x0006(r1)
    b2ac:	8f 11       	sxt	r15		
    b2ae:	88 12       	call	r8		
    b2b0:	1b 53       	inc	r11		
    b2b2:	0f 45       	mov	r5,	r15	
    b2b4:	0f 5b       	add	r11,	r15	
    b2b6:	0f 99       	cmp	r9,	r15	
    b2b8:	f7 2b       	jnc	$-16     	;abs 0xb2a8
    b2ba:	0a 3c       	jmp	$+22     	;abs 0xb2d0
    b2bc:	06 43       	clr	r6		
    b2be:	0b 43       	clr	r11		
    b2c0:	07 3c       	jmp	$+16     	;abs 0xb2d0
    b2c2:	1b 53       	inc	r11		
    b2c4:	0f 41       	mov	r1,	r15	
    b2c6:	0f 56       	add	r6,	r15	
    b2c8:	6f 4f       	mov.b	@r15,	r15	
    b2ca:	8f 11       	sxt	r15		
    b2cc:	16 53       	inc	r6		
    b2ce:	88 12       	call	r8		
    b2d0:	06 9a       	cmp	r10,	r6	
    b2d2:	f7 3b       	jl	$-16     	;abs 0xb2c2
    b2d4:	e1 b3 02 00 	bit.b	#2,	2(r1)	;r3 As==10, 0x0002(r1)
    b2d8:	02 24       	jz	$+6      	;abs 0xb2de
    b2da:	4a 44       	mov.b	r4,	r10	
    b2dc:	08 3c       	jmp	$+18     	;abs 0xb2ee
    b2de:	1a 41 04 00 	mov	4(r1),	r10	;0x0004(r1)
    b2e2:	0a 8b       	sub	r11,	r10	
    b2e4:	0d 3c       	jmp	$+28     	;abs 0xb300
    b2e6:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    b2ea:	88 12       	call	r8		
    b2ec:	7a 53       	add.b	#-1,	r10	;r3 As==11
    b2ee:	4a 93       	tst.b	r10		
    b2f0:	fa 23       	jnz	$-10     	;abs 0xb2e6
    b2f2:	44 44       	mov.b	r4,	r4	
    b2f4:	0b 54       	add	r4,	r11	
    b2f6:	f3 3f       	jmp	$-24     	;abs 0xb2de
    b2f8:	37 53       	add	#-1,	r7	;r3 As==11
    b2fa:	8f 11       	sxt	r15		
    b2fc:	88 12       	call	r8		
    b2fe:	1b 53       	inc	r11		
    b300:	0f 4a       	mov	r10,	r15	
    b302:	0f 5b       	add	r11,	r15	
    b304:	6f 4f       	mov.b	@r15,	r15	
    b306:	4f 93       	tst.b	r15		
    b308:	07 24       	jz	$+16     	;abs 0xb318
    b30a:	07 93       	tst	r7		
    b30c:	f5 23       	jnz	$-20     	;abs 0xb2f8
    b30e:	04 3c       	jmp	$+10     	;abs 0xb318
    b310:	3f 40 20 00 	mov	#32,	r15	;#0x0020
    b314:	88 12       	call	r8		
    b316:	1b 53       	inc	r11		
    b318:	0b 99       	cmp	r9,	r11	
    b31a:	fa 2b       	jnc	$-10     	;abs 0xb310
    b31c:	0f 4b       	mov	r11,	r15	
    b31e:	31 52       	add	#8,	r1	;r2 As==11
    b320:	34 41       	pop	r4		
    b322:	35 41       	pop	r5		
    b324:	36 41       	pop	r6		
    b326:	37 41       	pop	r7		
    b328:	38 41       	pop	r8		
    b32a:	39 41       	pop	r9		
    b32c:	3a 41       	pop	r10		
    b32e:	3b 41       	pop	r11		
    b330:	30 41       	ret			

0000b332 <vuprintf>:
    b332:	0b 12       	push	r11		
    b334:	0a 12       	push	r10		
    b336:	09 12       	push	r9		
    b338:	08 12       	push	r8		
    b33a:	07 12       	push	r7		
    b33c:	06 12       	push	r6		
    b33e:	05 12       	push	r5		
    b340:	04 12       	push	r4		
    b342:	31 50 b6 ff 	add	#-74,	r1	;#0xffb6
    b346:	81 4f 3a 00 	mov	r15,	58(r1)	;0x003a(r1)
    b34a:	06 4e       	mov	r14,	r6	
    b34c:	05 4d       	mov	r13,	r5	
    b34e:	81 4e 3e 00 	mov	r14,	62(r1)	;0x003e(r1)
    b352:	c1 43 2f 00 	mov.b	#0,	47(r1)	;r3 As==00, 0x002f(r1)
    b356:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    b35a:	c1 43 2e 00 	mov.b	#0,	46(r1)	;r3 As==00, 0x002e(r1)
    b35e:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    b362:	81 43 30 00 	mov	#0,	48(r1)	;r3 As==00, 0x0030(r1)
    b366:	81 43 26 00 	mov	#0,	38(r1)	;r3 As==00, 0x0026(r1)
    b36a:	07 43       	clr	r7		
    b36c:	81 43 2c 00 	mov	#0,	44(r1)	;r3 As==00, 0x002c(r1)
    b370:	0e 41       	mov	r1,	r14	
    b372:	3e 50 1c 00 	add	#28,	r14	;#0x001c
    b376:	81 4e 1c 00 	mov	r14,	28(r1)	;0x001c(r1)
    b37a:	30 40 ac b9 	br	#0xb9ac	
    b37e:	0f 46       	mov	r6,	r15	
    b380:	1f 53       	inc	r15		
    b382:	81 4f 40 00 	mov	r15,	64(r1)	;0x0040(r1)
    b386:	07 93       	tst	r7		
    b388:	1e 20       	jnz	$+62     	;abs 0xb3c6
    b38a:	7e 90 25 00 	cmp.b	#37,	r14	;#0x0025
    b38e:	13 20       	jnz	$+40     	;abs 0xb3b6
    b390:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00, 0x0000(r1)
    b394:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00, 0x0002(r1)
    b398:	81 46 3e 00 	mov	r6,	62(r1)	;0x003e(r1)
    b39c:	c1 43 2f 00 	mov.b	#0,	47(r1)	;r3 As==00, 0x002f(r1)
    b3a0:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    b3a4:	c1 43 2e 00 	mov.b	#0,	46(r1)	;r3 As==00, 0x002e(r1)
    b3a8:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    b3ac:	81 43 30 00 	mov	#0,	48(r1)	;r3 As==00, 0x0030(r1)
    b3b0:	30 40 a2 b9 	br	#0xb9a2	
    b3b4:	05 47       	mov	r7,	r5	
    b3b6:	8e 11       	sxt	r14		
    b3b8:	0f 4e       	mov	r14,	r15	
    b3ba:	91 12 3c 00 	call	60(r1)		;0x003c(r1)
    b3be:	91 53 2c 00 	inc	44(r1)		;0x002c(r1)
    b3c2:	30 40 88 b9 	br	#0xb988	
    b3c6:	7e 90 63 00 	cmp.b	#99,	r14	;#0x0063
    b3ca:	c5 24       	jz	$+396    	;abs 0xb556
    b3cc:	7e 90 64 00 	cmp.b	#100,	r14	;#0x0064
    b3d0:	27 34       	jge	$+80     	;abs 0xb420
    b3d2:	7e 90 30 00 	cmp.b	#48,	r14	;#0x0030
    b3d6:	94 24       	jz	$+298    	;abs 0xb500
    b3d8:	7e 90 31 00 	cmp.b	#49,	r14	;#0x0031
    b3dc:	1a 34       	jge	$+54     	;abs 0xb412
    b3de:	7e 90 2a 00 	cmp.b	#42,	r14	;#0x002a
    b3e2:	77 24       	jz	$+240    	;abs 0xb4d2
    b3e4:	7e 90 2b 00 	cmp.b	#43,	r14	;#0x002b
    b3e8:	0a 34       	jge	$+22     	;abs 0xb3fe
    b3ea:	7e 90 23 00 	cmp.b	#35,	r14	;#0x0023
    b3ee:	42 24       	jz	$+134    	;abs 0xb474
    b3f0:	7e 90 25 00 	cmp.b	#37,	r14	;#0x0025
    b3f4:	e0 27       	jz	$-62     	;abs 0xb3b6
    b3f6:	7e 90 20 00 	cmp.b	#32,	r14	;#0x0020
    b3fa:	32 20       	jnz	$+102    	;abs 0xb460
    b3fc:	56 3c       	jmp	$+174    	;abs 0xb4aa
    b3fe:	7e 90 2d 00 	cmp.b	#45,	r14	;#0x002d
    b402:	49 24       	jz	$+148    	;abs 0xb496
    b404:	7e 90 2e 00 	cmp.b	#46,	r14	;#0x002e
    b408:	5b 24       	jz	$+184    	;abs 0xb4c0
    b40a:	7e 90 2b 00 	cmp.b	#43,	r14	;#0x002b
    b40e:	28 20       	jnz	$+82     	;abs 0xb460
    b410:	47 3c       	jmp	$+144    	;abs 0xb4a0
    b412:	7e 90 3a 00 	cmp.b	#58,	r14	;#0x003a
    b416:	8c 38       	jl	$+282    	;abs 0xb530
    b418:	7e 90 58 00 	cmp.b	#88,	r14	;#0x0058
    b41c:	21 20       	jnz	$+68     	;abs 0xb460
    b41e:	e9 3c       	jmp	$+468    	;abs 0xb5f2
    b420:	7e 90 6f 00 	cmp.b	#111,	r14	;#0x006f
    b424:	24 24       	jz	$+74     	;abs 0xb46e
    b426:	7e 90 70 00 	cmp.b	#112,	r14	;#0x0070
    b42a:	0a 34       	jge	$+22     	;abs 0xb440
    b42c:	7e 90 69 00 	cmp.b	#105,	r14	;#0x0069
    b430:	e3 24       	jz	$+456    	;abs 0xb5f8
    b432:	7e 90 6c 00 	cmp.b	#108,	r14	;#0x006c
    b436:	22 24       	jz	$+70     	;abs 0xb47c
    b438:	7e 90 64 00 	cmp.b	#100,	r14	;#0x0064
    b43c:	11 20       	jnz	$+36     	;abs 0xb460
    b43e:	dc 3c       	jmp	$+442    	;abs 0xb5f8
    b440:	7e 90 73 00 	cmp.b	#115,	r14	;#0x0073
    b444:	98 24       	jz	$+306    	;abs 0xb576
    b446:	7e 90 74 00 	cmp.b	#116,	r14	;#0x0074
    b44a:	04 34       	jge	$+10     	;abs 0xb454
    b44c:	7e 90 70 00 	cmp.b	#112,	r14	;#0x0070
    b450:	07 20       	jnz	$+16     	;abs 0xb460
    b452:	b8 3c       	jmp	$+370    	;abs 0xb5c4
    b454:	7e 90 75 00 	cmp.b	#117,	r14	;#0x0075
    b458:	d1 24       	jz	$+420    	;abs 0xb5fc
    b45a:	7e 90 78 00 	cmp.b	#120,	r14	;#0x0078
    b45e:	d2 24       	jz	$+422    	;abs 0xb604
    b460:	19 41 3e 00 	mov	62(r1),	r9	;0x003e(r1)
    b464:	18 41 2c 00 	mov	44(r1),	r8	;0x002c(r1)
    b468:	08 89       	sub	r9,	r8	
    b46a:	30 40 76 b9 	br	#0xb976	
    b46e:	b1 42 28 00 	mov	#8,	40(r1)	;r2 As==11, 0x0028(r1)
    b472:	cb 3c       	jmp	$+408    	;abs 0xb60a
    b474:	f1 d2 00 00 	bis.b	#8,	0(r1)	;r2 As==11, 0x0000(r1)
    b478:	30 40 a6 b9 	br	#0xb9a6	
    b47c:	69 41       	mov.b	@r1,	r9	
    b47e:	59 f3       	and.b	#1,	r9	;r3 As==01
    b480:	6e 41       	mov.b	@r1,	r14	
    b482:	04 24       	jz	$+10     	;abs 0xb48c
    b484:	7e f0 fe ff 	and.b	#-2,	r14	;#0xfffe
    b488:	6e d3       	bis.b	#2,	r14	;r3 As==10
    b48a:	01 3c       	jmp	$+4      	;abs 0xb48e
    b48c:	5e d3       	bis.b	#1,	r14	;r3 As==01
    b48e:	c1 4e 00 00 	mov.b	r14,	0(r1)	;0x0000(r1)
    b492:	30 40 a6 b9 	br	#0xb9a6	
    b496:	f1 d0 10 00 	bis.b	#16,	0(r1)	;#0x0010, 0x0000(r1)
    b49a:	00 00 
    b49c:	30 40 a6 b9 	br	#0xb9a6	
    b4a0:	f1 40 2b 00 	mov.b	#43,	2(r1)	;#0x002b, 0x0002(r1)
    b4a4:	02 00 
    b4a6:	30 40 a6 b9 	br	#0xb9a6	
    b4aa:	f1 90 2b 00 	cmp.b	#43,	2(r1)	;#0x002b, 0x0002(r1)
    b4ae:	02 00 
    b4b0:	02 20       	jnz	$+6      	;abs 0xb4b6
    b4b2:	30 40 a6 b9 	br	#0xb9a6	
    b4b6:	f1 40 20 00 	mov.b	#32,	2(r1)	;#0x0020, 0x0002(r1)
    b4ba:	02 00 
    b4bc:	30 40 a6 b9 	br	#0xb9a6	
    b4c0:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    b4c4:	02 24       	jz	$+6      	;abs 0xb4ca
    b4c6:	30 40 8c b9 	br	#0xb98c	
    b4ca:	d1 43 2e 00 	mov.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    b4ce:	30 40 a6 b9 	br	#0xb9a6	
    b4d2:	0e 45       	mov	r5,	r14	
    b4d4:	2e 53       	incd	r14		
    b4d6:	2a 45       	mov	@r5,	r10	
    b4d8:	0a 93       	tst	r10		
    b4da:	03 38       	jl	$+8      	;abs 0xb4e2
    b4dc:	81 4a 26 00 	mov	r10,	38(r1)	;0x0026(r1)
    b4e0:	0d 3c       	jmp	$+28     	;abs 0xb4fc
    b4e2:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    b4e6:	02 24       	jz	$+6      	;abs 0xb4ec
    b4e8:	30 40 9c b9 	br	#0xb99c	
    b4ec:	f1 d0 10 00 	bis.b	#16,	0(r1)	;#0x0010, 0x0000(r1)
    b4f0:	00 00 
    b4f2:	3a e3       	inv	r10		
    b4f4:	81 4a 26 00 	mov	r10,	38(r1)	;0x0026(r1)
    b4f8:	91 53 26 00 	inc	38(r1)		;0x0026(r1)
    b4fc:	05 4e       	mov	r14,	r5	
    b4fe:	27 3c       	jmp	$+80     	;abs 0xb54e
    b500:	81 93 26 00 	tst	38(r1)		;0x0026(r1)
    b504:	15 20       	jnz	$+44     	;abs 0xb530
    b506:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    b50a:	12 20       	jnz	$+38     	;abs 0xb530
    b50c:	69 41       	mov.b	@r1,	r9	
    b50e:	79 f0 10 00 	and.b	#16,	r9	;#0x0010
    b512:	5e 43       	mov.b	#1,	r14	;r3 As==01
    b514:	01 24       	jz	$+4      	;abs 0xb518
    b516:	4e 43       	clr.b	r14		
    b518:	4e 4e       	mov.b	r14,	r14	
    b51a:	0e 11       	rra	r14		
    b51c:	0e 43       	clr	r14		
    b51e:	4e 10       	rrc.b	r14		
    b520:	6a 41       	mov.b	@r1,	r10	
    b522:	7a f0 7f 00 	and.b	#127,	r10	;#0x007f
    b526:	4a de       	bis.b	r14,	r10	
    b528:	c1 4a 00 00 	mov.b	r10,	0(r1)	;0x0000(r1)
    b52c:	30 40 a6 b9 	br	#0xb9a6	
    b530:	1a 41 26 00 	mov	38(r1),	r10	;0x0026(r1)
    b534:	0a 5a       	rla	r10		
    b536:	0c 4a       	mov	r10,	r12	
    b538:	0c 5c       	rla	r12		
    b53a:	0c 5c       	rla	r12		
    b53c:	0a 5c       	add	r12,	r10	
    b53e:	81 4a 26 00 	mov	r10,	38(r1)	;0x0026(r1)
    b542:	b1 50 d0 ff 	add	#-48,	38(r1)	;#0xffd0, 0x0026(r1)
    b546:	26 00 
    b548:	8e 11       	sxt	r14		
    b54a:	81 5e 26 00 	add	r14,	38(r1)	;0x0026(r1)
    b54e:	d1 43 2a 00 	mov.b	#1,	42(r1)	;r3 As==01, 0x002a(r1)
    b552:	30 40 a6 b9 	br	#0xb9a6	
    b556:	07 45       	mov	r5,	r7	
    b558:	27 53       	incd	r7		
    b55a:	6e 45       	mov.b	@r5,	r14	
    b55c:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    b560:	03 20       	jnz	$+8      	;abs 0xb568
    b562:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    b566:	26 27       	jz	$-434    	;abs 0xb3b4
    b568:	c1 4e 04 00 	mov.b	r14,	4(r1)	;0x0004(r1)
    b56c:	c1 43 05 00 	mov.b	#0,	5(r1)	;r3 As==00, 0x0005(r1)
    b570:	0e 41       	mov	r1,	r14	
    b572:	2e 52       	add	#4,	r14	;r2 As==10
    b574:	03 3c       	jmp	$+8      	;abs 0xb57c
    b576:	07 45       	mov	r5,	r7	
    b578:	27 53       	incd	r7		
    b57a:	2e 45       	mov	@r5,	r14	
    b57c:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    b580:	07 24       	jz	$+16     	;abs 0xb590
    b582:	e1 d2 01 00 	bis.b	#4,	1(r1)	;r2 As==10, 0x0001(r1)
    b586:	1f 41 26 00 	mov	38(r1),	r15	;0x0026(r1)
    b58a:	c1 4f 03 00 	mov.b	r15,	3(r1)	;0x0003(r1)
    b58e:	06 3c       	jmp	$+14     	;abs 0xb59c
    b590:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    b594:	03 24       	jz	$+8      	;abs 0xb59c
    b596:	91 41 26 00 	mov	38(r1),	48(r1)	;0x0026(r1), 0x0030(r1)
    b59a:	30 00 
    b59c:	0e 93       	tst	r14		
    b59e:	02 20       	jnz	$+6      	;abs 0xb5a4
    b5a0:	3e 40 8a bd 	mov	#-17014,r14	;#0xbd8a
    b5a4:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    b5a8:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    b5ac:	1d 41 34 00 	mov	52(r1),	r13	;0x0034(r1)
    b5b0:	1f 41 3e 00 	mov	62(r1),	r15	;0x003e(r1)
    b5b4:	b0 12 9a b1 	call	#0xb19a	
    b5b8:	21 52       	add	#4,	r1	;r2 As==10
    b5ba:	81 5f 2c 00 	add	r15,	44(r1)	;0x002c(r1)
    b5be:	05 47       	mov	r7,	r5	
    b5c0:	30 40 88 b9 	br	#0xb988	
    b5c4:	07 45       	mov	r5,	r7	
    b5c6:	27 53       	incd	r7		
    b5c8:	29 45       	mov	@r5,	r9	
    b5ca:	81 49 1e 00 	mov	r9,	30(r1)	;0x001e(r1)
    b5ce:	5e 43       	mov.b	#1,	r14	;r3 As==01
    b5d0:	09 93       	tst	r9		
    b5d2:	01 20       	jnz	$+4      	;abs 0xb5d6
    b5d4:	4e 43       	clr.b	r14		
    b5d6:	4e 5e       	rla.b	r14		
    b5d8:	4e 5e       	rla.b	r14		
    b5da:	4e 5e       	rla.b	r14		
    b5dc:	6a 41       	mov.b	@r1,	r10	
    b5de:	7a f0 f7 ff 	and.b	#-9,	r10	;#0xfff7
    b5e2:	4a de       	bis.b	r14,	r10	
    b5e4:	c1 4a 00 00 	mov.b	r10,	0(r1)	;0x0000(r1)
    b5e8:	05 47       	mov	r7,	r5	
    b5ea:	b1 40 10 00 	mov	#16,	40(r1)	;#0x0010, 0x0028(r1)
    b5ee:	28 00 
    b5f0:	53 3c       	jmp	$+168    	;abs 0xb698
    b5f2:	d1 d3 01 00 	bis.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    b5f6:	06 3c       	jmp	$+14     	;abs 0xb604
    b5f8:	e1 d2 00 00 	bis.b	#4,	0(r1)	;r2 As==10, 0x0000(r1)
    b5fc:	b1 40 0a 00 	mov	#10,	40(r1)	;#0x000a, 0x0028(r1)
    b600:	28 00 
    b602:	03 3c       	jmp	$+8      	;abs 0xb60a
    b604:	b1 40 10 00 	mov	#16,	40(r1)	;#0x0010, 0x0028(r1)
    b608:	28 00 
    b60a:	6b 41       	mov.b	@r1,	r11	
    b60c:	6b b3       	bit.b	#2,	r11	;r3 As==10
    b60e:	24 24       	jz	$+74     	;abs 0xb658
    b610:	0c 45       	mov	r5,	r12	
    b612:	3c 52       	add	#8,	r12	;r2 As==11
    b614:	28 45       	mov	@r5,	r8	
    b616:	17 45 02 00 	mov	2(r5),	r7	;0x0002(r5)
    b61a:	16 45 04 00 	mov	4(r5),	r6	;0x0004(r5)
    b61e:	1b 45 06 00 	mov	6(r5),	r11	;0x0006(r5)
    b622:	81 48 1e 00 	mov	r8,	30(r1)	;0x001e(r1)
    b626:	81 47 20 00 	mov	r7,	32(r1)	;0x0020(r1)
    b62a:	81 46 22 00 	mov	r6,	34(r1)	;0x0022(r1)
    b62e:	81 4b 24 00 	mov	r11,	36(r1)	;0x0024(r1)
    b632:	d1 43 2b 00 	mov.b	#1,	43(r1)	;r3 As==01, 0x002b(r1)
    b636:	08 93       	tst	r8		
    b638:	06 20       	jnz	$+14     	;abs 0xb646
    b63a:	07 93       	tst	r7		
    b63c:	04 20       	jnz	$+10     	;abs 0xb646
    b63e:	06 93       	tst	r6		
    b640:	02 20       	jnz	$+6      	;abs 0xb646
    b642:	0b 93       	tst	r11		
    b644:	02 24       	jz	$+6      	;abs 0xb64a
    b646:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    b64a:	0b 5b       	rla	r11		
    b64c:	0b 43       	clr	r11		
    b64e:	0b 6b       	rlc	r11		
    b650:	c1 4b 2f 00 	mov.b	r11,	47(r1)	;0x002f(r1)
    b654:	05 4c       	mov	r12,	r5	
    b656:	20 3c       	jmp	$+66     	;abs 0xb698
    b658:	5b f3       	and.b	#1,	r11	;r3 As==01
    b65a:	07 45       	mov	r5,	r7	
    b65c:	0d 24       	jz	$+28     	;abs 0xb678
    b65e:	27 52       	add	#4,	r7	;r2 As==10
    b660:	28 45       	mov	@r5,	r8	
    b662:	1b 45 02 00 	mov	2(r5),	r11	;0x0002(r5)
    b666:	81 48 1e 00 	mov	r8,	30(r1)	;0x001e(r1)
    b66a:	81 4b 20 00 	mov	r11,	32(r1)	;0x0020(r1)
    b66e:	d1 43 2b 00 	mov.b	#1,	43(r1)	;r3 As==01, 0x002b(r1)
    b672:	08 93       	tst	r8		
    b674:	09 20       	jnz	$+20     	;abs 0xb688
    b676:	06 3c       	jmp	$+14     	;abs 0xb684
    b678:	27 53       	incd	r7		
    b67a:	2b 45       	mov	@r5,	r11	
    b67c:	81 4b 1e 00 	mov	r11,	30(r1)	;0x001e(r1)
    b680:	d1 43 2b 00 	mov.b	#1,	43(r1)	;r3 As==01, 0x002b(r1)
    b684:	0b 93       	tst	r11		
    b686:	02 24       	jz	$+6      	;abs 0xb68c
    b688:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    b68c:	0b 5b       	rla	r11		
    b68e:	0b 43       	clr	r11		
    b690:	0b 6b       	rlc	r11		
    b692:	c1 4b 2f 00 	mov.b	r11,	47(r1)	;0x002f(r1)
    b696:	05 47       	mov	r7,	r5	
    b698:	f1 b2 00 00 	bit.b	#8,	0(r1)	;r2 As==11, 0x0000(r1)
    b69c:	12 24       	jz	$+38     	;abs 0xb6c2
    b69e:	c1 93 2b 00 	tst.b	43(r1)		;0x002b(r1)
    b6a2:	0f 20       	jnz	$+32     	;abs 0xb6c2
    b6a4:	68 41       	mov.b	@r1,	r8	
    b6a6:	b1 90 10 00 	cmp	#16,	40(r1)	;#0x0010, 0x0028(r1)
    b6aa:	28 00 
    b6ac:	03 20       	jnz	$+8      	;abs 0xb6b4
    b6ae:	78 d0 40 00 	bis.b	#64,	r8	;#0x0040
    b6b2:	05 3c       	jmp	$+12     	;abs 0xb6be
    b6b4:	b1 92 28 00 	cmp	#8,	40(r1)	;r2 As==11, 0x0028(r1)
    b6b8:	04 20       	jnz	$+10     	;abs 0xb6c2
    b6ba:	78 d0 20 00 	bis.b	#32,	r8	;#0x0020
    b6be:	c1 48 00 00 	mov.b	r8,	0(r1)	;0x0000(r1)
    b6c2:	68 41       	mov.b	@r1,	r8	
    b6c4:	68 b2       	bit.b	#4,	r8	;r2 As==10
    b6c6:	30 24       	jz	$+98     	;abs 0xb728
    b6c8:	c1 93 2f 00 	tst.b	47(r1)		;0x002f(r1)
    b6cc:	2d 24       	jz	$+92     	;abs 0xb728
    b6ce:	f1 40 2d 00 	mov.b	#45,	2(r1)	;#0x002d, 0x0002(r1)
    b6d2:	02 00 
    b6d4:	68 b3       	bit.b	#2,	r8	;r3 As==10
    b6d6:	11 24       	jz	$+36     	;abs 0xb6fa
    b6d8:	b1 e3 1e 00 	xor	#-1,	30(r1)	;r3 As==11, 0x001e(r1)
    b6dc:	b1 e3 20 00 	xor	#-1,	32(r1)	;r3 As==11, 0x0020(r1)
    b6e0:	b1 e3 22 00 	xor	#-1,	34(r1)	;r3 As==11, 0x0022(r1)
    b6e4:	b1 e3 24 00 	xor	#-1,	36(r1)	;r3 As==11, 0x0024(r1)
    b6e8:	91 53 1e 00 	inc	30(r1)		;0x001e(r1)
    b6ec:	81 63 20 00 	adc	32(r1)		;0x0020(r1)
    b6f0:	81 63 22 00 	adc	34(r1)		;0x0022(r1)
    b6f4:	81 63 24 00 	adc	36(r1)		;0x0024(r1)
    b6f8:	17 3c       	jmp	$+48     	;abs 0xb728
    b6fa:	58 b3       	bit.b	#1,	r8	;r3 As==01
    b6fc:	0f 24       	jz	$+32     	;abs 0xb71c
    b6fe:	1a 41 1e 00 	mov	30(r1),	r10	;0x001e(r1)
    b702:	1b 41 20 00 	mov	32(r1),	r11	;0x0020(r1)
    b706:	3a e3       	inv	r10		
    b708:	3b e3       	inv	r11		
    b70a:	0e 4a       	mov	r10,	r14	
    b70c:	0f 4b       	mov	r11,	r15	
    b70e:	1e 53       	inc	r14		
    b710:	0f 63       	adc	r15		
    b712:	81 4e 1e 00 	mov	r14,	30(r1)	;0x001e(r1)
    b716:	81 4f 20 00 	mov	r15,	32(r1)	;0x0020(r1)
    b71a:	06 3c       	jmp	$+14     	;abs 0xb728
    b71c:	1a 41 1e 00 	mov	30(r1),	r10	;0x001e(r1)
    b720:	3a e3       	inv	r10		
    b722:	1a 53       	inc	r10		
    b724:	81 4a 1e 00 	mov	r10,	30(r1)	;0x001e(r1)
    b728:	c1 43 1b 00 	mov.b	#0,	27(r1)	;r3 As==00, 0x001b(r1)
    b72c:	68 b3       	bit.b	#2,	r8	;r3 As==10
    b72e:	6a 24       	jz	$+214    	;abs 0xb804
    b730:	16 41 1e 00 	mov	30(r1),	r6	;0x001e(r1)
    b734:	91 41 20 00 	mov	32(r1),	60(r1)	;0x0020(r1), 0x003c(r1)
    b738:	3c 00 
    b73a:	18 41 22 00 	mov	34(r1),	r8	;0x0022(r1)
    b73e:	14 41 24 00 	mov	36(r1),	r4	;0x0024(r1)
    b742:	07 41       	mov	r1,	r7	
    b744:	37 50 1a 00 	add	#26,	r7	;#0x001a
    b748:	09 46       	mov	r6,	r9	
    b74a:	91 41 28 00 	mov	40(r1),	50(r1)	;0x0028(r1), 0x0032(r1)
    b74e:	32 00 
    b750:	1b 41 28 00 	mov	40(r1),	r11	;0x0028(r1)
    b754:	8b 10       	swpb	r11		
    b756:	8b 11       	sxt	r11		
    b758:	8b 10       	swpb	r11		
    b75a:	8b 11       	sxt	r11		
    b75c:	81 4b 34 00 	mov	r11,	52(r1)	;0x0034(r1)
    b760:	81 4b 36 00 	mov	r11,	54(r1)	;0x0036(r1)
    b764:	81 4b 38 00 	mov	r11,	56(r1)	;0x0038(r1)
    b768:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    b76c:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    b770:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    b774:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    b778:	0c 49       	mov	r9,	r12	
    b77a:	1d 41 44 00 	mov	68(r1),	r13	;0x0044(r1)
    b77e:	0e 48       	mov	r8,	r14	
    b780:	0f 44       	mov	r4,	r15	
    b782:	b0 12 c0 ba 	call	#0xbac0	
    b786:	31 52       	add	#8,	r1	;r2 As==11
    b788:	0b 4c       	mov	r12,	r11	
    b78a:	3c 90 0a 00 	cmp	#10,	r12	;#0x000a
    b78e:	05 34       	jge	$+12     	;abs 0xb79a
    b790:	7b 50 30 00 	add.b	#48,	r11	;#0x0030
    b794:	c7 4b 00 00 	mov.b	r11,	0(r7)	;0x0000(r7)
    b798:	0c 3c       	jmp	$+26     	;abs 0xb7b2
    b79a:	4b 4c       	mov.b	r12,	r11	
    b79c:	d1 b3 01 00 	bit.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    b7a0:	03 24       	jz	$+8      	;abs 0xb7a8
    b7a2:	7a 40 37 00 	mov.b	#55,	r10	;#0x0037
    b7a6:	02 3c       	jmp	$+6      	;abs 0xb7ac
    b7a8:	7a 40 57 00 	mov.b	#87,	r10	;#0x0057
    b7ac:	4a 5b       	add.b	r11,	r10	
    b7ae:	c7 4a 00 00 	mov.b	r10,	0(r7)	;0x0000(r7)
    b7b2:	06 47       	mov	r7,	r6	
    b7b4:	36 53       	add	#-1,	r6	;r3 As==11
    b7b6:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    b7ba:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    b7be:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    b7c2:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    b7c6:	0c 49       	mov	r9,	r12	
    b7c8:	1d 41 44 00 	mov	68(r1),	r13	;0x0044(r1)
    b7cc:	0e 48       	mov	r8,	r14	
    b7ce:	0f 44       	mov	r4,	r15	
    b7d0:	b0 12 9a ba 	call	#0xba9a	
    b7d4:	31 52       	add	#8,	r1	;r2 As==11
    b7d6:	09 4c       	mov	r12,	r9	
    b7d8:	81 4d 3c 00 	mov	r13,	60(r1)	;0x003c(r1)
    b7dc:	08 4e       	mov	r14,	r8	
    b7de:	04 4f       	mov	r15,	r4	
    b7e0:	37 53       	add	#-1,	r7	;r3 As==11
    b7e2:	0c 93       	tst	r12		
    b7e4:	b2 23       	jnz	$-154    	;abs 0xb74a
    b7e6:	0d 93       	tst	r13		
    b7e8:	b0 23       	jnz	$-158    	;abs 0xb74a
    b7ea:	0e 93       	tst	r14		
    b7ec:	ae 23       	jnz	$-162    	;abs 0xb74a
    b7ee:	0f 93       	tst	r15		
    b7f0:	ac 23       	jnz	$-166    	;abs 0xb74a
    b7f2:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e(r1)
    b7f6:	81 43 20 00 	mov	#0,	32(r1)	;r3 As==00, 0x0020(r1)
    b7fa:	81 43 22 00 	mov	#0,	34(r1)	;r3 As==00, 0x0022(r1)
    b7fe:	81 43 24 00 	mov	#0,	36(r1)	;r3 As==00, 0x0024(r1)
    b802:	6c 3c       	jmp	$+218    	;abs 0xb8dc
    b804:	58 b3       	bit.b	#1,	r8	;r3 As==01
    b806:	3e 24       	jz	$+126    	;abs 0xb884
    b808:	14 41 1e 00 	mov	30(r1),	r4	;0x001e(r1)
    b80c:	17 41 20 00 	mov	32(r1),	r7	;0x0020(r1)
    b810:	08 41       	mov	r1,	r8	
    b812:	38 50 1a 00 	add	#26,	r8	;#0x001a
    b816:	19 41 28 00 	mov	40(r1),	r9	;0x0028(r1)
    b81a:	89 10       	swpb	r9		
    b81c:	89 11       	sxt	r9		
    b81e:	89 10       	swpb	r9		
    b820:	89 11       	sxt	r9		
    b822:	1c 41 28 00 	mov	40(r1),	r12	;0x0028(r1)
    b826:	0d 49       	mov	r9,	r13	
    b828:	0e 44       	mov	r4,	r14	
    b82a:	0f 47       	mov	r7,	r15	
    b82c:	b0 12 32 ba 	call	#0xba32	
    b830:	0b 4e       	mov	r14,	r11	
    b832:	3e 90 0a 00 	cmp	#10,	r14	;#0x000a
    b836:	05 34       	jge	$+12     	;abs 0xb842
    b838:	7b 50 30 00 	add.b	#48,	r11	;#0x0030
    b83c:	c8 4b 00 00 	mov.b	r11,	0(r8)	;0x0000(r8)
    b840:	0c 3c       	jmp	$+26     	;abs 0xb85a
    b842:	4b 4e       	mov.b	r14,	r11	
    b844:	d1 b3 01 00 	bit.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    b848:	03 24       	jz	$+8      	;abs 0xb850
    b84a:	7a 40 37 00 	mov.b	#55,	r10	;#0x0037
    b84e:	02 3c       	jmp	$+6      	;abs 0xb854
    b850:	7a 40 57 00 	mov.b	#87,	r10	;#0x0057
    b854:	4a 5b       	add.b	r11,	r10	
    b856:	c8 4a 00 00 	mov.b	r10,	0(r8)	;0x0000(r8)
    b85a:	06 48       	mov	r8,	r6	
    b85c:	36 53       	add	#-1,	r6	;r3 As==11
    b85e:	1c 41 28 00 	mov	40(r1),	r12	;0x0028(r1)
    b862:	0d 49       	mov	r9,	r13	
    b864:	0e 44       	mov	r4,	r14	
    b866:	0f 47       	mov	r7,	r15	
    b868:	b0 12 fc b9 	call	#0xb9fc	
    b86c:	04 4e       	mov	r14,	r4	
    b86e:	07 4f       	mov	r15,	r7	
    b870:	38 53       	add	#-1,	r8	;r3 As==11
    b872:	0e 93       	tst	r14		
    b874:	d0 23       	jnz	$-94     	;abs 0xb816
    b876:	0f 93       	tst	r15		
    b878:	ce 23       	jnz	$-98     	;abs 0xb816
    b87a:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e(r1)
    b87e:	81 43 20 00 	mov	#0,	32(r1)	;r3 As==00, 0x0020(r1)
    b882:	2c 3c       	jmp	$+90     	;abs 0xb8dc
    b884:	17 41 1e 00 	mov	30(r1),	r7	;0x001e(r1)
    b888:	08 41       	mov	r1,	r8	
    b88a:	38 50 1a 00 	add	#26,	r8	;#0x001a
    b88e:	1e 41 28 00 	mov	40(r1),	r14	;0x0028(r1)
    b892:	0f 47       	mov	r7,	r15	
    b894:	b0 12 4a ac 	call	#0xac4a	
    b898:	0d 4f       	mov	r15,	r13	
    b89a:	3f 90 0a 00 	cmp	#10,	r15	;#0x000a
    b89e:	05 34       	jge	$+12     	;abs 0xb8aa
    b8a0:	7d 50 30 00 	add.b	#48,	r13	;#0x0030
    b8a4:	c8 4d 00 00 	mov.b	r13,	0(r8)	;0x0000(r8)
    b8a8:	0c 3c       	jmp	$+26     	;abs 0xb8c2
    b8aa:	4d 4f       	mov.b	r15,	r13	
    b8ac:	d1 b3 01 00 	bit.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    b8b0:	03 24       	jz	$+8      	;abs 0xb8b8
    b8b2:	7c 40 37 00 	mov.b	#55,	r12	;#0x0037
    b8b6:	02 3c       	jmp	$+6      	;abs 0xb8bc
    b8b8:	7c 40 57 00 	mov.b	#87,	r12	;#0x0057
    b8bc:	4c 5d       	add.b	r13,	r12	
    b8be:	c8 4c 00 00 	mov.b	r12,	0(r8)	;0x0000(r8)
    b8c2:	06 48       	mov	r8,	r6	
    b8c4:	36 53       	add	#-1,	r6	;r3 As==11
    b8c6:	1e 41 28 00 	mov	40(r1),	r14	;0x0028(r1)
    b8ca:	0f 47       	mov	r7,	r15	
    b8cc:	b0 12 30 ac 	call	#0xac30	
    b8d0:	07 4f       	mov	r15,	r7	
    b8d2:	38 53       	add	#-1,	r8	;r3 As==11
    b8d4:	0f 93       	tst	r15		
    b8d6:	db 23       	jnz	$-72     	;abs 0xb88e
    b8d8:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e(r1)
    b8dc:	b1 90 0a 00 	cmp	#10,	40(r1)	;#0x000a, 0x0028(r1)
    b8e0:	28 00 
    b8e2:	02 24       	jz	$+6      	;abs 0xb8e8
    b8e4:	c1 43 02 00 	mov.b	#0,	2(r1)	;r3 As==00, 0x0002(r1)
    b8e8:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    b8ec:	2a 24       	jz	$+86     	;abs 0xb942
    b8ee:	0f 41       	mov	r1,	r15	
    b8f0:	3f 50 1c 00 	add	#28,	r15	;#0x001c
    b8f4:	81 4f 42 00 	mov	r15,	66(r1)	;0x0042(r1)
    b8f8:	1a 41 1c 00 	mov	28(r1),	r10	;0x001c(r1)
    b8fc:	8a 10       	swpb	r10		
    b8fe:	8a 11       	sxt	r10		
    b900:	8a 10       	swpb	r10		
    b902:	8a 11       	sxt	r10		
    b904:	81 4a 44 00 	mov	r10,	68(r1)	;0x0044(r1)
    b908:	81 46 46 00 	mov	r6,	70(r1)	;0x0046(r1)
    b90c:	0a 46       	mov	r6,	r10	
    b90e:	8a 10       	swpb	r10		
    b910:	8a 11       	sxt	r10		
    b912:	8a 10       	swpb	r10		
    b914:	8a 11       	sxt	r10		
    b916:	81 4a 48 00 	mov	r10,	72(r1)	;0x0048(r1)
    b91a:	1c 41 42 00 	mov	66(r1),	r12	;0x0042(r1)
    b91e:	1d 41 44 00 	mov	68(r1),	r13	;0x0044(r1)
    b922:	1c 81 46 00 	sub	70(r1),	r12	;0x0046(r1)
    b926:	1d 71 48 00 	subc	72(r1),	r13	;0x0048(r1)
    b92a:	2c 83       	decd	r12		
    b92c:	1c 91 26 00 	cmp	38(r1),	r12	;0x0026(r1)
    b930:	0e 2c       	jc	$+30     	;abs 0xb94e
    b932:	e1 d3 01 00 	bis.b	#2,	1(r1)	;r3 As==10, 0x0001(r1)
    b936:	5e 41 26 00 	mov.b	38(r1),	r14	;0x0026(r1)
    b93a:	4e 8c       	sub.b	r12,	r14	
    b93c:	c1 4e 03 00 	mov.b	r14,	3(r1)	;0x0003(r1)
    b940:	06 3c       	jmp	$+14     	;abs 0xb94e
    b942:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    b946:	03 24       	jz	$+8      	;abs 0xb94e
    b948:	91 41 26 00 	mov	38(r1),	48(r1)	;0x0026(r1), 0x0030(r1)
    b94c:	30 00 
    b94e:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    b952:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    b956:	1d 41 34 00 	mov	52(r1),	r13	;0x0034(r1)
    b95a:	0e 46       	mov	r6,	r14	
    b95c:	1e 53       	inc	r14		
    b95e:	1f 41 3e 00 	mov	62(r1),	r15	;0x003e(r1)
    b962:	b0 12 9a b1 	call	#0xb19a	
    b966:	21 52       	add	#4,	r1	;r2 As==10
    b968:	81 5f 2c 00 	add	r15,	44(r1)	;0x002c(r1)
    b96c:	0d 3c       	jmp	$+28     	;abs 0xb988
    b96e:	7f 49       	mov.b	@r9+,	r15	
    b970:	8f 11       	sxt	r15		
    b972:	91 12 3c 00 	call	60(r1)		;0x003c(r1)
    b976:	0e 49       	mov	r9,	r14	
    b978:	0e 58       	add	r8,	r14	
    b97a:	19 91 40 00 	cmp	64(r1),	r9	;0x0040(r1)
    b97e:	f7 2b       	jnc	$-16     	;abs 0xb96e
    b980:	81 49 3e 00 	mov	r9,	62(r1)	;0x003e(r1)
    b984:	81 4e 2c 00 	mov	r14,	44(r1)	;0x002c(r1)
    b988:	07 43       	clr	r7		
    b98a:	0e 3c       	jmp	$+30     	;abs 0xb9a8
    b98c:	91 41 26 00 	mov	38(r1),	48(r1)	;0x0026(r1), 0x0030(r1)
    b990:	30 00 
    b992:	d1 43 2e 00 	mov.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    b996:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    b99a:	03 3c       	jmp	$+8      	;abs 0xb9a2
    b99c:	05 4e       	mov	r14,	r5	
    b99e:	d1 43 2a 00 	mov.b	#1,	42(r1)	;r3 As==01, 0x002a(r1)
    b9a2:	81 43 26 00 	mov	#0,	38(r1)	;r3 As==00, 0x0026(r1)
    b9a6:	17 43       	mov	#1,	r7	;r3 As==01
    b9a8:	16 41 40 00 	mov	64(r1),	r6	;0x0040(r1)
    b9ac:	6e 46       	mov.b	@r6,	r14	
    b9ae:	4e 93       	tst.b	r14		
    b9b0:	02 24       	jz	$+6      	;abs 0xb9b6
    b9b2:	30 40 7e b3 	br	#0xb37e	
    b9b6:	1f 41 2c 00 	mov	44(r1),	r15	;0x002c(r1)
    b9ba:	31 50 4a 00 	add	#74,	r1	;#0x004a
    b9be:	34 41       	pop	r4		
    b9c0:	35 41       	pop	r5		
    b9c2:	36 41       	pop	r6		
    b9c4:	37 41       	pop	r7		
    b9c6:	38 41       	pop	r8		
    b9c8:	39 41       	pop	r9		
    b9ca:	3a 41       	pop	r10		
    b9cc:	3b 41       	pop	r11		
    b9ce:	30 41       	ret			

0000b9d0 <puts>:
    b9d0:	0b 12       	push	r11		
    b9d2:	0b 4f       	mov	r15,	r11	
    b9d4:	6f 4b       	mov.b	@r11,	r15	
    b9d6:	4f 93       	tst.b	r15		
    b9d8:	06 24       	jz	$+14     	;abs 0xb9e6
    b9da:	1b 53       	inc	r11		
    b9dc:	8f 11       	sxt	r15		
    b9de:	b0 12 82 a1 	call	#0xa182	
    b9e2:	0f 93       	tst	r15		
    b9e4:	f7 37       	jge	$-16     	;abs 0xb9d4
    b9e6:	cb 93 00 00 	tst.b	0(r11)		;0x0000(r11)
    b9ea:	05 20       	jnz	$+12     	;abs 0xb9f6
    b9ec:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    b9f0:	b0 12 82 a1 	call	#0xa182	
    b9f4:	01 3c       	jmp	$+4      	;abs 0xb9f8
    b9f6:	3f 43       	mov	#-1,	r15	;r3 As==11
    b9f8:	3b 41       	pop	r11		
    b9fa:	30 41       	ret			

0000b9fc <__udivsi3>:
    b9fc:	0b 12       	push	r11		
    b9fe:	0a 12       	push	r10		
    ba00:	09 12       	push	r9		
    ba02:	79 40 20 00 	mov.b	#32,	r9	;#0x0020
    ba06:	0a 4c       	mov	r12,	r10	
    ba08:	0b 4d       	mov	r13,	r11	
    ba0a:	0c 43       	clr	r12		
    ba0c:	0d 43       	clr	r13		
    ba0e:	0e 5e       	rla	r14		
    ba10:	0f 6f       	rlc	r15		
    ba12:	0c 6c       	rlc	r12		
    ba14:	0d 6d       	rlc	r13		
    ba16:	0d 9b       	cmp	r11,	r13	
    ba18:	06 28       	jnc	$+14     	;abs 0xba26
    ba1a:	02 20       	jnz	$+6      	;abs 0xba20
    ba1c:	0c 9a       	cmp	r10,	r12	
    ba1e:	03 28       	jnc	$+8      	;abs 0xba26
    ba20:	0c 8a       	sub	r10,	r12	
    ba22:	0d 7b       	subc	r11,	r13	
    ba24:	1e d3       	bis	#1,	r14	;r3 As==01
    ba26:	19 83       	dec	r9		
    ba28:	f2 23       	jnz	$-26     	;abs 0xba0e
    ba2a:	39 41       	pop	r9		
    ba2c:	3a 41       	pop	r10		
    ba2e:	3b 41       	pop	r11		
    ba30:	30 41       	ret			

0000ba32 <__umodsi3>:
    ba32:	b0 12 fc b9 	call	#0xb9fc	
    ba36:	0e 4c       	mov	r12,	r14	
    ba38:	0f 4d       	mov	r13,	r15	
    ba3a:	30 41       	ret			

0000ba3c <__xabi_udivmod64>:
    ba3c:	07 12       	push	r7		
    ba3e:	06 12       	push	r6		
    ba40:	05 12       	push	r5		
    ba42:	04 12       	push	r4		
    ba44:	30 12 40 00 	push	#64		;#0x0040
    ba48:	04 48       	mov	r8,	r4	
    ba4a:	05 49       	mov	r9,	r5	
    ba4c:	06 4a       	mov	r10,	r6	
    ba4e:	07 4b       	mov	r11,	r7	
    ba50:	08 43       	clr	r8		
    ba52:	09 43       	clr	r9		
    ba54:	0a 43       	clr	r10		
    ba56:	0b 43       	clr	r11		
    ba58:	0c 5c       	rla	r12		
    ba5a:	0d 6d       	rlc	r13		
    ba5c:	0e 6e       	rlc	r14		
    ba5e:	0f 6f       	rlc	r15		
    ba60:	08 68       	rlc	r8		
    ba62:	09 69       	rlc	r9		
    ba64:	0a 6a       	rlc	r10		
    ba66:	0b 6b       	rlc	r11		
    ba68:	0b 97       	cmp	r7,	r11	
    ba6a:	0e 28       	jnc	$+30     	;abs 0xba88
    ba6c:	08 20       	jnz	$+18     	;abs 0xba7e
    ba6e:	0a 96       	cmp	r6,	r10	
    ba70:	0b 28       	jnc	$+24     	;abs 0xba88
    ba72:	05 20       	jnz	$+12     	;abs 0xba7e
    ba74:	09 95       	cmp	r5,	r9	
    ba76:	08 28       	jnc	$+18     	;abs 0xba88
    ba78:	02 20       	jnz	$+6      	;abs 0xba7e
    ba7a:	08 94       	cmp	r4,	r8	
    ba7c:	05 28       	jnc	$+12     	;abs 0xba88
    ba7e:	08 84       	sub	r4,	r8	
    ba80:	09 75       	subc	r5,	r9	
    ba82:	0a 76       	subc	r6,	r10	
    ba84:	0b 77       	subc	r7,	r11	
    ba86:	1c d3       	bis	#1,	r12	;r3 As==01
    ba88:	91 83 00 00 	dec	0(r1)		;0x0000(r1)
    ba8c:	e5 23       	jnz	$-52     	;abs 0xba58
    ba8e:	21 53       	incd	r1		
    ba90:	34 41       	pop	r4		
    ba92:	35 41       	pop	r5		
    ba94:	36 41       	pop	r6		
    ba96:	37 41       	pop	r7		
    ba98:	30 41       	ret			

0000ba9a <__udivdi3>:
    ba9a:	0b 12       	push	r11		
    ba9c:	0a 12       	push	r10		
    ba9e:	09 12       	push	r9		
    baa0:	08 12       	push	r8		
    baa2:	18 41 0a 00 	mov	10(r1),	r8	;0x000a(r1)
    baa6:	19 41 0c 00 	mov	12(r1),	r9	;0x000c(r1)
    baaa:	1a 41 0e 00 	mov	14(r1),	r10	;0x000e(r1)
    baae:	1b 41 10 00 	mov	16(r1),	r11	;0x0010(r1)
    bab2:	b0 12 3c ba 	call	#0xba3c	
    bab6:	38 41       	pop	r8		
    bab8:	39 41       	pop	r9		
    baba:	3a 41       	pop	r10		
    babc:	3b 41       	pop	r11		
    babe:	30 41       	ret			

0000bac0 <__umoddi3>:
    bac0:	0b 12       	push	r11		
    bac2:	0a 12       	push	r10		
    bac4:	09 12       	push	r9		
    bac6:	08 12       	push	r8		
    bac8:	18 41 0a 00 	mov	10(r1),	r8	;0x000a(r1)
    bacc:	19 41 0c 00 	mov	12(r1),	r9	;0x000c(r1)
    bad0:	1a 41 0e 00 	mov	14(r1),	r10	;0x000e(r1)
    bad4:	1b 41 10 00 	mov	16(r1),	r11	;0x0010(r1)
    bad8:	b0 12 3c ba 	call	#0xba3c	
    badc:	0c 48       	mov	r8,	r12	
    bade:	0d 49       	mov	r9,	r13	
    bae0:	0e 4a       	mov	r10,	r14	
    bae2:	0f 4b       	mov	r11,	r15	
    bae4:	38 41       	pop	r8		
    bae6:	39 41       	pop	r9		
    bae8:	3a 41       	pop	r10		
    baea:	3b 41       	pop	r11		
    baec:	30 41       	ret			

0000baee <__udivmoddi4>:
    baee:	0b 12       	push	r11		
    baf0:	0a 12       	push	r10		
    baf2:	09 12       	push	r9		
    baf4:	08 12       	push	r8		
    baf6:	07 12       	push	r7		
    baf8:	18 41 0c 00 	mov	12(r1),	r8	;0x000c(r1)
    bafc:	19 41 0e 00 	mov	14(r1),	r9	;0x000e(r1)
    bb00:	1a 41 10 00 	mov	16(r1),	r10	;0x0010(r1)
    bb04:	1b 41 12 00 	mov	18(r1),	r11	;0x0012(r1)
    bb08:	b0 12 3c ba 	call	#0xba3c	
    bb0c:	17 41 14 00 	mov	20(r1),	r7	;0x0014(r1)
    bb10:	87 48 00 00 	mov	r8,	0(r7)	;0x0000(r7)
    bb14:	87 49 02 00 	mov	r9,	2(r7)	;0x0002(r7)
    bb18:	87 4a 04 00 	mov	r10,	4(r7)	;0x0004(r7)
    bb1c:	87 4b 06 00 	mov	r11,	6(r7)	;0x0006(r7)
    bb20:	37 41       	pop	r7		
    bb22:	38 41       	pop	r8		
    bb24:	39 41       	pop	r9		
    bb26:	3a 41       	pop	r10		
    bb28:	3b 41       	pop	r11		
    bb2a:	30 41       	ret			

0000bb2c <_unexpected_>:
    bb2c:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	16 81 16 81 16 81 22 99 16 81 50 8b 16 81 24 a2     ......"...P...$.
    fff0:	16 81 20 9f 16 81 16 81 16 81 04 a0 16 81 00 80     .. .............
