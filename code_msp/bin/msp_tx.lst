
bin/msp_tx.elf:     file format elf32-msp430

SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
0000b76e l    d  .rodata	00000000 .rodata
00000200 l    d  .bss	00000000 .bss
0000028a l    d  .noinit	00000000 .noinit
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 msp_tx.c
00000200 l     O .bss	00000002 node_id
00000202 l     O .bss	0000000e timer
00000210 l     O .bss	00000002 led_green_duration
00000212 l     O .bss	00000002 led_green_flag
00000214 l     O .bss	00000002 led_red_duration
00000216 l     O .bss	00000002 led_red_flag
00000218 l     O .bss	00000008 pt
00000220 l     O .bss	0000001c radio_tx_buffer
0000023c l     O .bss	0000001c radio_rx_buffer
00000258 l     O .bss	00000002 radio_rx_flag
0000025a l     O .bss	00000002 periodic_send_flag
0000025c l     O .bss	00000002 periodic_temp_flag
0000025e l     O .bss	00000002 current_buffer_pt
00000260 l     O .bss	00000002 uart_flag
00000262 l     O .bss	00000002 uart_data
00000264 l     O .bss	00000002 room_flag
00000266 l     O .bss	00000001 room
0000812a l     F .text	00000048 printhex
00008172 l     F .text	00000050 init_message
000081c2 l     F .text	00000076 set_node_id
000082a8 l     F .text	0000001c led_green_blink
000082c4 l     F .text	0000001c led_red_blink
000082e0 l     F .text	00000080 thread_led_green
00008360 l     F .text	000000b4 thread_led_red
00008414 l     F .text	00000078 radio_send_message
00008514 l     F .text	00000076 register_temperature
0000864e l     F .text	0000007a thread_uart
000086c8 l     F .text	0000008e thread_periodic_send
00008756 l     F .text	0000008a thread_periodic_temperature
00008126 l       .text	00000000 __br_unexpected_
00000000 l    df *ABS*	00000000 adc10.c
00000268 l     O .bss	00000002 coeff_1
0000026a l     O .bss	00000002 coeff_2
00000000 l    df *ABS*	00000000 cc2500.c
00008a16 l     F .text	00000016 CC2500_HW_GDO0_IRQ_ON_ASSERT
00008a2c l     F .text	00000016 CC2500_HW_GDO2_IRQ_ON_ASSERT
00008a42 l     F .text	00000016 CC2500_HW_GDO0_DINT
00008a58 l     F .text	00000016 CC2500_HW_GDO2_DINT
00008a6e l     F .text	00000016 CC2500_HW_GDO0_EINT
00008a84 l     F .text	00000016 CC2500_HW_GDO0_CLEAR_FLAG
00008a9a l     F .text	00000016 CC2500_HW_GDO2_CLEAR_FLAG
00008ab0 l     F .text	00000016 CONFIG_GDO0_PIN_AS_INPUT
00008ac6 l     F .text	00000052 CC2500_HW_INIT
00008dfe l     F .text	00000048 cc2500_check_tx_underflow
00008e46 l     F .text	0000004a cc2500_check_rx_overflow
00000000 l    df *ABS*	00000000 clock.c
00000270 l     O .bss	00000002 mclk_freq_mhz
000096b8 l     F .text	000000c0 set_mcu_speed
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 spi.c
00000000 l    df *ABS*	00000000 timer.c
00000272 l     O .bss	00000002 timerA_cb
00000274 l     O .bss	00000002 timerA_wakeup
00000276 l     O .bss	00000002 timerB_cb
00000278 l     O .bss	00000002 timerB_wakeup
00000000 l    df *ABS*	00000000 uart.c
0000027a l     O .bss	00000002 uart_cb
00000000 l    df *ABS*	00000000 button.c
0000027c l     O .bss	00000002 cb
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 watchdog.c
0000027e l     O .bss	00000002 watchdog_backup
00000000 l    df *ABS*	00000000 fp-bit.c
0000a24e l     F .text	00000292 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vuprintf.c
0000adb8 l     F .text	00000198 print_field
00000000 l    df *ABS*	00000000 puts.c
00009e70 g     F .text	00000032 putchar
00000057 g       *ABS*	00000000 __BCSCTL1
00009822 g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_16MHz
00000280 g     O .bss	00000001 cc2500_gdo2_cfg
00000174 g       *ABS*	00000000 __TACCR1
00009472 g     F .text	00000024 cc2500_idle
00000000 g       *ABS*	00000000 __data_size
00008126  w      .text	00000000 __isr_14
00000128 g       *ABS*	00000000 __FCTL1
000094e6 g     F .text	0000001a cc2500_variables_bootstrap
000097fa g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_3MHz
00000024 g       *ABS*	00000000 __P1IES
0000884e g     F .text	00000106 adc10_sample_temp
0000004b g       *ABS*	00000000 __ADC10AE1
00009610 g     F .text	0000009a port2_irq_handler
0000ad9a g     F .text	00000010 printf
00000069 g       *ABS*	00000000 __UCB0CTL1
00008126  w      .text	00000000 __isr_4
00000002 g       *ABS*	00000000 __IFG1
00009be4 g     F .text	00000016 spi_select_radio
00000060 g       *ABS*	00000000 __UCA0CTL0
000091ee g     F .text	0000006a cc2500_utx
0000a7a0 g     F .text	00000150 __divsf3
0000a0f4 g     F .text	00000064 flash_write_byte
0000979c g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_4MHz
00009d40 g     F .text	00000018 timerB_register_cb
0000012e g       *ABS*	00000000 __TAIV
00009b3a g     F .text	00000012 spi_check_miso_high
00009e66 g     F .text	0000000a uart_stop
0000a996 g     F .text	00000090 __fixsfsi
00009f66 g     F .text	0000005c button_init
00008b5a g     F .text	0000002e CC2500_SPI_WREG
0000026e g     O .bss	00000001 cc2500_rx_length
00000000 g       .vectors	00000000 _efartext
00009b00 g     F .text	0000003a spi_tx_rx
0000b61a g     F .text	00000000 __udivhi3
00000001 g       *ABS*	00000000 __IE2
0000002b g       *ABS*	00000000 __P2IFG
0000001a g       *ABS*	00000000 __P3DIR
00008d10 g     F .text	0000001e CC2500_SPI_RX_FIFO_BYTE
0000ba16 g       *ABS*	00000000 _etext
00000190 g       *ABS*	00000000 __TBR
00009c0e g     F .text	00000038 Timer_A
00009512 g     F .text	000000dc cc2500_init
000010f8 g       *ABS*	00000000 __CALDCO_16MHZ
000093ee g     F .text	00000018 cc2500_rx_register_cb
0000a1fa g     F .text	00000022 flash_erase_info_memory
0000a52c g     F .text	00000050 __subsf3
0000001d g       *ABS*	00000000 __P4OUT
0000008a g       *ABS*	00000000 __bss_size
000010fd g       *ABS*	00000000 __CALBC1_8MHZ
00009872 g     F .text	00000010 loop_4_cycles
00008000  w      .text	00000000 __watchdog_support
00008da2 g     F .text	00000030 cc2500_gdo2_set_signal
00008120  w      .text	00000000 __stop_progExec__
0000002d g       *ABS*	00000000 __P2IE
0000b5ee g     F .text	0000002c puts
00009ec0 g     F .text	00000014 uart_eint
00008cae g     F .text	00000062 CC2500_SPI_RX_BURST
00000192 g       *ABS*	00000000 __TBCCR0
00008126  w      .text	00000000 __isr_11
00009bfa g     F .text	00000014 spi_deselect_radio
00000186 g       *ABS*	00000000 __TBCCTL2
000097e6 g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_6MHz
0000b63c g     F .text	00000000 __udivsi3
00000025 g       *ABS*	00000000 __P1IE
0000006b g       *ABS*	00000000 __UCB0BR1
00009a90 g     F .text	00000062 spi_init
00009dc8 g     F .text	0000000e timerB_stop
00000049 g       *ABS*	00000000 __ADC10DTC1
00008c58 g     F .text	00000056 CC2500_SPI_TX_BURST
0000026c g     O .bss	00000001 cc2500_rx_offset
00000066 g       *ABS*	00000000 __UCA0RXBUF
00000061 g       *ABS*	00000000 __UCA0CTL1
0000883e g     F .text	00000010 adc10irq
000097c0 g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_1MHz
0000b72e g       .text	00000000 __udivmoddi4
000091d2 g     F .text	0000001c cc2500_calibrate
0000984a g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_4MHz
00008dd2 g     F .text	0000002c cc2500_set_fifo_threshold
00008b18 g     F .text	00000020 CC2500_SPI_TX
00000182 g       *ABS*	00000000 __TBCCTL0
00008d2e g     F .text	00000044 cc2500_wait_status
000092b6 g     F .text	00000138 cc2500_rx_pkt_eop
0000006d g       *ABS*	00000000 __UCB0STAT
0000883e g       .text	00000000 __isr_5
00008b88 g     F .text	00000036 CC2500_SPI_RREG
000087f6 g     F .text	00000032 adc10_calibrate
00000063 g       *ABS*	00000000 __UCA0BR1
0000b700 g     F .text	00000000 __umoddi3
0000ba16 g       *ABS*	00000000 __data_load_start
00009a48 g     F .text	00000016 leds_on
00008126 g       .text	00000000 __dtors_end
00000053 g       *ABS*	00000000 __BCSCTL3
00009406 g     F .text	0000001e cc2500_packet_status
000099e0 g     F .text	00000014 led_green_switch
0000a1bc g     F .text	0000003e flash_erase_segment
000001bc g       *ABS*	00000000 __ADC10SA
0000a0a8 g     F .text	0000004c flash_init
00000166 g       *ABS*	00000000 __TACCTL2
00008286 g     F .text	00000022 timer_reached
0000b6da g     F .text	00000000 __udivdi3
00000065 g       *ABS*	00000000 __UCA0STAT
000099b6 g     F .text	00000016 led_green_off
00009496 g     F .text	00000012 cc2500_sleep
00009424 g     F .text	00000030 cc2500_cca
0000a066 g       .text	00000000 __isr_2
00000160 g       *ABS*	00000000 __TACTL
0000012c g       *ABS*	00000000 __FCTL3
00009c5c g     F .text	00000018 timerA_register_cb
00008126  w      .text	00000000 __isr_10
00000282 g     O .bss	00000002 radio_rx_cb
000096aa g     F .text	0000000e get_mclk_freq_mhz
0000002e g       *ABS*	00000000 __P2SEL
00000180 g       *ABS*	00000000 __TBCTL
00009cc0 g     F .text	00000024 timerA_start_milliseconds
000097ae g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_2MHz
00008c22 g     F .text	00000036 CC2500_SPI_RX_BYTE
000010f9 g       *ABS*	00000000 __CALBC1_16MHZ
000000c3 g       *ABS*	00000000 __OA1CTL1
00000023 g       *ABS*	00000000 __P1IFG
00009b4c g     F .text	0000004a spi_tx_burst
000010fb g       *ABS*	00000000 __CALBC1_12MHZ
0000ac76 g     F .text	00000124 __unpack_f
0000004a g       *ABS*	00000000 __ADC10AE0
0000011a g       *ABS*	00000000 __UCB0I2CSA
00009a0a g     F .text	00000014 led_red_on
00000172 g       *ABS*	00000000 __TACCR0
00009a32 g     F .text	00000016 leds_off
00000056 g       *ABS*	00000000 __DCOCTL
00000003 g       *ABS*	00000000 __IFG2
0000028a g     O .noinit	00000002 __wdt_clear_value
0000848c g     F .text	00000088 radio_cb
00009ea2 g     F .text	0000001e uart_getchar
0000001b g       *ABS*	00000000 __P3SEL
00009ce4 g     F .text	0000000e timerA_stop
000094c0 g     F .text	00000026 cc2500_wakeup
00009f12 g       .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
0000a050 g     F .text	00000016 button_disable_interrupt
0000006c g       *ABS*	00000000 __UCB0I2CIE
0000006a g       *ABS*	00000000 __UCB0BR0
0000b672 g     F .text	00000000 __umodsi3
00009500 g     F .text	00000012 CC_ASSERT
0000adaa g     F .text	0000000e vprintf
00000028 g       *ABS*	00000000 __P2IN
00009c74 g     F .text	00000018 timerA_set_wakeup
0000a066 g     F .text	00000042 port1_irq_handler
0000aa98 g     F .text	000001de __pack_f
00000118 g       *ABS*	00000000 __UCB0I2COA
00000184 g       *ABS*	00000000 __TBCCTL1
000001b4 g       *ABS*	00000000 __ADC10MEM
00000284 g     O .bss	00000001 cc2500_gdo0_cfg
000099f4 g     F .text	00000016 led_red_off
0000b634 g     F .text	00000000 __umodhi3
00008126  w      .text	00000000 __isr_0
00000029 g       *ABS*	00000000 __P2OUT
0000aa26 g     F .text	00000072 __clzsi2
0000012a g       *ABS*	00000000 __FCTL2
00000064 g       *ABS*	00000000 __UCA0MCTL
00009b96 g     F .text	0000004e spi_rx_burst
00009dd6 g     F .text	00000090 uart_init
00008028  w      .text	00000000 __do_clear_bss
00009ed4 g     F .text	00000016 uart_dint
0000858a g     F .text	000000c4 uart_cb
00000021 g       *ABS*	00000000 __P1OUT
0000002c g       *ABS*	00000000 __P2IES
00000026 g       *ABS*	00000000 __P1SEL
00009836 g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_8MHz
0000a21c g     F .text	0000001c watchdog_stop
00009778 g     F .text	00000012 set_mcu_speed_dco_mclk_1MHz_smclk_1MHz
0000a8f0 g     F .text	000000a6 __floatsisf
0000980e g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_1_5MHz
00008828 g     F .text	00000016 adc10_stop
0000b63c g       .text	00000000 __ext_udivmod32
00009d2a g     F .text	00000016 timerB_init
00008d72 g     F .text	00000030 cc2500_gdo0_set_signal
00000027 g       *ABS*	00000000 __P1REN
00009eea g     F .text	00000028 uart_register_cb
000000c0 g       *ABS*	00000000 __OA0CTL0
00009286 g     F .text	00000030 cc2500_rx_enter
0000985e g     F .text	00000014 set_mcu_speed_dco_mclk_16MHz_smclk_2MHz
0000b76c  w      .text	00000000 _unexpected_
00008126  w      .text	00000000 __isr_8
00009610 g       .text	00000000 __isr_3
0000af50 g     F .text	0000069e vuprintf
00009a1e g     F .text	00000014 led_red_switch
000010fc g       *ABS*	00000000 __CALDCO_8MHZ
0000b61a g       .text	00000000 __ext_udivmod16
00008000  w      .text	00000000 _reset_vector__
00008126 g       .text	00000000 __ctors_start
0000b67c g       .text	00000000 __xabi_udivmod64
00008126  w      .text	00000000 __isr_12
000010fa g       *ABS*	00000000 __CALDCO_12MHZ
0000b906 g     O .rodata	00000008 __thenan_sf
00000018 g       *ABS*	00000000 __P3IN
00008010  w      .text	00000000 __do_copy_data
0000a008 g     F .text	0000001c button_is_pressed
00000200 g       .bss	00000000 __bss_start
0000803e g     F .text	000000e2 main
00000176 g       *ABS*	00000000 __TACCR2
00009928 g     F .text	0000008e delay_ms
000000c2 g       *ABS*	00000000 __OA1CTL0
00009cf2 g       .text	00000000 __isr_13
00009882 g     F .text	000000a6 delay_usec
00000170 g       *ABS*	00000000 __TAR
0000001e g       *ABS*	00000000 __P4DIR
00009c46 g     F .text	00000016 timerA_init
00009f12 g     F .text	00000054 usart0irq
00000162 g       *ABS*	00000000 __TACCTL0
00010000 g       .vectors	00000000 _vectors_end
0000a57c g     F .text	00000224 __mulsf3
00009d58 g     F .text	00000018 timerB_set_wakeup
0000002a g       *ABS*	00000000 __P2DIR
00000068 g       *ABS*	00000000 __UCB0CTL0
0000002f g       *ABS*	00000000 __P2REN
00008954 g     F .text	000000c2 adc10_sample_avcc
0000b90e g     O .rodata	00000100 __clz_tab
00009cf2 g     F .text	00000038 Timer_B
00009454 g     F .text	0000001e cc2500_get_rssi
000094a8 g     F .text	00000018 cc2500_reset
0000006e g       *ABS*	00000000 __UCB0RXBUF
000001b0 g       *ABS*	00000000 __ADC10CTL0
00008bbe g     F .text	00000036 CC2500_SPI_ROREG
0000b8e2 g     O .rodata	00000024 rfSettings_default_config
00009c0e g       .text	00000000 __isr_9
0000005e g       *ABS*	00000000 __UCA0IRTCTL
000010fe g       *ABS*	00000000 __CALDCO_1MHZ
00000067 g       *ABS*	00000000 __UCA0TXBUF
0000800c  w      .text	00000000 __init_stack
0000005d g       *ABS*	00000000 __UCA0ABCTL
00009c8c g     F .text	00000034 timerA_start_ticks
00000019 g       *ABS*	00000000 __P3OUT
000000c1 g       *ABS*	00000000 __OA0CTL1
000097d2 g     F .text	00000014 set_mcu_speed_dco_mclk_12MHz_smclk_12MHz
00008b38 g     F .text	00000022 CC2500_SPI_STROBE
00008126 g       .text	00000000 __dtors_start
00008126  w      .text	00000000 __isr_6
00008126 g       .text	00000000 __ctors_end
00000062 g       *ABS*	00000000 __UCA0BR0
00000600 g       *ABS*	00000000 __stack
0000978a g     F .text	00000012 set_mcu_speed_dco_mclk_8MHz_smclk_8MHz
00008126  w      .text	00000000 __isr_1
0000a03c g     F .text	00000014 button_enable_interrupt
00000200 g       .rodata	00000000 _edata
0000028c g       *ABS*	00000000 _end
00000194 g       *ABS*	00000000 __TBCCR1
00000286 g     O .bss	00000002 cc2500_rx_packet
00000048 g       *ABS*	00000000 __ADC10DTC0
0000011e g       *ABS*	00000000 __TBIV
000001b2 g       *ABS*	00000000 __ADC10CTL1
00000288 g     O .bss	00000001 cc2500_status_register
000099cc g     F .text	00000014 led_green_on
00008eba g     F .text	000002f8 cc2500_configure
00008238 g     F .text	0000004e timer_tick_cb
0000a238 g     F .text	00000016 watchdog_restore
00000058 g       *ABS*	00000000 __BCSCTL2
00008120  w      .text	00000000 _endless_loop__
0000001f g       *ABS*	00000000 __P4SEL
00000196 g       *ABS*	00000000 __TBCCR2
0000a024 g     F .text	00000018 button_register_cb
00000022 g       *ABS*	00000000 __P1DIR
000091b2 g     F .text	00000020 cc2500_set_channel
00009fc2 g     F .text	00000046 button_stop
00009258 g     F .text	0000002e cc2500_rx_register_buffer
0000005f g       *ABS*	00000000 __UCA0IRRCTL
00000010 g       *ABS*	00000000 __P3REN
00000164 g       *ABS*	00000000 __TACCTL1
0000006f g       *ABS*	00000000 __UCB0TXBUF
00009d70 g     F .text	00000034 timerB_start_ticks
000010ff g       *ABS*	00000000 __CALBC1_1MHZ
00008010  w      .text	00000000 __low_level_init
00000011 g       *ABS*	00000000 __P4REN
000087e0 g     F .text	00000016 adc10_start
00000200 g       .rodata	00000000 __data_start
00009da4 g     F .text	00000024 timerB_start_milliseconds
000095ee g     F .text	00000022 cc2500_gdox_signal_handler
00000120 g       *ABS*	00000000 __WDTCTL
00000000 g       *ABS*	00000000 __IE1
00008bf4 g     F .text	0000002e CC2500_SPI_TX_BYTE
00008e90 g     F .text	0000002a cc2500_check_fifo_xflow_flush
00000020 g       *ABS*	00000000 __P1IN
0000001c g       *ABS*	00000000 __P4IN
00009af2 g     F .text	0000000e spi_clear_rx_IFG
0000a4e0 g     F .text	0000004c __addsf3
0000a158 g     F .text	00000064 flash_write_word
00009a5e g     F .text	00000032 leds_init



Disassembly of section .text:

00008000 <__watchdog_support>:
    8000:	55 42 20 01 	mov.b	&0x0120,r5	
    8004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    8008:	82 45 8a 02 	mov	r5,	&0x028a	

0000800c <__init_stack>:
    800c:	31 40 00 06 	mov	#1536,	r1	;#0x0600

00008010 <__do_copy_data>:
    8010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    8014:	0f 93       	tst	r15		
    8016:	08 24       	jz	$+18     	;abs 0x8028
    8018:	92 42 8a 02 	mov	&0x028a,&0x0120	
    801c:	20 01 
    801e:	2f 83       	decd	r15		
    8020:	9f 4f 16 ba 	mov	-17898(r15),512(r15);0xba16(r15), 0x0200(r15)
    8024:	00 02 
    8026:	f8 23       	jnz	$-14     	;abs 0x8018

00008028 <__do_clear_bss>:
    8028:	3f 40 8a 00 	mov	#138,	r15	;#0x008a
    802c:	0f 93       	tst	r15		
    802e:	07 24       	jz	$+16     	;abs 0x803e
    8030:	92 42 8a 02 	mov	&0x028a,&0x0120	
    8034:	20 01 
    8036:	1f 83       	dec	r15		
    8038:	cf 43 00 02 	mov.b	#0,	512(r15);r3 As==00, 0x0200(r15)
    803c:	f9 23       	jnz	$-12     	;abs 0x8030

0000803e <main>:
 * main

 */

int main(int argc, char *argv[])
{
    803e:	04 41       	mov	r1,	r4	
    8040:	24 53       	incd	r4		
    8042:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    8046:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    804a:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    watchdog_stop();
    804e:	b0 12 1c a2 	call	#0xa21c	

    TIMER_ID_INPUT = UINT_MAX;
    8052:	b2 43 0a 02 	mov	#-1,	&0x020a	;r3 As==11
    node_id = NODE_ID_UNDEFINED;
    8056:	82 43 00 02 	mov	#0,	&0x0200	;r3 As==00

    /* protothreads init */
    int i;
    for(i = 0; i < NUM_PT; i++)
    805a:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    805e:	09 3c       	jmp	$+20     	;abs 0x8072
    {
        PT_INIT(&pt[i]);
    8060:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    8064:	0f 5f       	rla	r15		
    8066:	3f 50 18 02 	add	#536,	r15	;#0x0218
    806a:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    TIMER_ID_INPUT = UINT_MAX;
    node_id = NODE_ID_UNDEFINED;

    /* protothreads init */
    int i;
    for(i = 0; i < NUM_PT; i++)
    806e:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    8072:	a4 92 f8 ff 	cmp	#4,	-8(r4)	;r2 As==10, 0xfff8(r4)
    8076:	f4 3b       	jl	$-22     	;abs 0x8060
    {
        PT_INIT(&pt[i]);
    }

    /* LEDs init */
    leds_init();
    8078:	b0 12 5e 9a 	call	#0x9a5e	
    led_green_flag = 0;
    807c:	82 43 12 02 	mov	#0,	&0x0212	;r3 As==00
    led_red_flag = 0;
    8080:	82 43 16 02 	mov	#0,	&0x0216	;r3 As==00

    /* clock init */
    set_mcu_speed_dco_mclk_16MHz_smclk_8MHz();
    8084:	b0 12 36 98 	call	#0x9836	

    /* timer init */
    timerA_init();
    8088:	b0 12 46 9c 	call	#0x9c46	
    timerA_register_cb(&timer_tick_cb);
    808c:	3f 40 38 82 	mov	#-32200,r15	;#0x8238
    8090:	b0 12 5c 9c 	call	#0x9c5c	
    timerA_start_milliseconds(TIMER_PERIOD_MS);
    8094:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    8098:	b0 12 c0 9c 	call	#0x9cc0	

    /* UART init (serial link) */
    uart_init(UART_9600_SMCLK_8MHZ);
    809c:	3f 42       	mov	#8,	r15	;r2 As==11
    809e:	b0 12 d6 9d 	call	#0x9dd6	
    uart_register_cb(uart_cb);
    80a2:	3f 40 8a 85 	mov	#-31350,r15	;#0x858a
    80a6:	b0 12 ea 9e 	call	#0x9eea	
    uart_flag = 0;
    80aa:	82 43 60 02 	mov	#0,	&0x0260	;r3 As==00
    uart_data = 0x0000;
    80ae:	82 43 62 02 	mov	#0,	&0x0262	;r3 As==00
    room = 0;
    80b2:	c2 43 66 02 	mov.b	#0,	&0x0266	;r3 As==00
    room_flag = 0;
    80b6:	82 43 64 02 	mov	#0,	&0x0264	;r3 As==00

    /* ADC10 init (temperature) */
    adc10_start();
    80ba:	b0 12 e0 87 	call	#0x87e0	
    current_buffer_pt=0;
    80be:	82 43 5e 02 	mov	#0,	&0x025e	;r3 As==00

    /* radio init */
    spi_init();
    80c2:	b0 12 90 9a 	call	#0x9a90	
    cc2500_init();
    80c6:	b0 12 12 95 	call	#0x9512	
    cc2500_rx_register_buffer(radio_tx_buffer, PKTLEN);
    80ca:	7e 40 1c 00 	mov.b	#28,	r14	;#0x001c
    80ce:	3f 40 20 02 	mov	#544,	r15	;#0x0220
    80d2:	b0 12 58 92 	call	#0x9258	
    cc2500_rx_register_cb(radio_cb);
    80d6:	3f 40 8c 84 	mov	#-31604,r15	;#0x848c
    80da:	b0 12 ee 93 	call	#0x93ee	
    cc2500_rx_enter();
    80de:	b0 12 86 92 	call	#0x9286	
    radio_rx_flag = 0;
    80e2:	82 43 58 02 	mov	#0,	&0x0258	;r3 As==00
    

    button_enable_interrupt();
    80e6:	b0 12 3c a0 	call	#0xa03c	
    __enable_interrupt();
    80ea:	32 d2       	eint			


    //Connection init
    uart_flag = 0;
    80ec:	82 43 60 02 	mov	#0,	&0x0260	;r3 As==00
    periodic_send_flag=1;
    80f0:	92 43 5a 02 	mov	#1,	&0x025a	;r3 As==01
    periodic_temp_flag=1;
    80f4:	92 43 5c 02 	mov	#1,	&0x025c	;r3 As==01
    set_node_id(0);
    80f8:	0f 43       	clr	r15		
    80fa:	b0 12 c2 81 	call	#0x81c2	

    /* simple cycle scheduling */
    while(1) {
        thread_led_red(&pt[0]);
    80fe:	3f 40 18 02 	mov	#536,	r15	;#0x0218
    8102:	b0 12 60 83 	call	#0x8360	
        thread_uart(&pt[1]);
    8106:	3f 40 1a 02 	mov	#538,	r15	;#0x021a
    810a:	b0 12 4e 86 	call	#0x864e	
        thread_periodic_send(&pt[2]);
    810e:	3f 40 1c 02 	mov	#540,	r15	;#0x021c
    8112:	b0 12 c8 86 	call	#0x86c8	
        thread_periodic_temperature(&pt[3]);
    8116:	3f 40 1e 02 	mov	#542,	r15	;#0x021e
    811a:	b0 12 56 87 	call	#0x8756	
    }
    811e:	ef 3f       	jmp	$-32     	;abs 0x80fe

00008120 <__stop_progExec__>:
    8120:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    8124:	fd 3f       	jmp	$-4      	;abs 0x8120

00008126 <__ctors_end>:
    8126:	30 40 6c b7 	br	#0xb76c	

0000812a <printhex>:
static uint16_t uart_data;
static int room_flag;
static uint8_t room;

static void printhex(char *buffer, unsigned int len)
{
    812a:	04 12       	push	r4		
    812c:	04 41       	mov	r1,	r4	
    812e:	24 53       	incd	r4		
    8130:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    8134:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8138:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    unsigned int i;
    for(i = 0; i < len; i++)
    813c:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    8140:	10 3c       	jmp	$+34     	;abs 0x8162
    {
        printf("%02X ", (buffer[i]&0xFF));
    8142:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    8146:	1f 54 f8 ff 	add	-8(r4),	r15	;0xfff8(r4)
    814a:	6f 4f       	mov.b	@r15,	r15	
    814c:	8f 11       	sxt	r15		
    814e:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    8152:	0f 12       	push	r15		
    8154:	30 12 6e b7 	push	#-18578	;#0xb76e
    8158:	b0 12 9a ad 	call	#0xad9a	
    815c:	21 52       	add	#4,	r1	;r2 As==10
static uint8_t room;

static void printhex(char *buffer, unsigned int len)
{
    unsigned int i;
    for(i = 0; i < len; i++)
    815e:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    8162:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    8166:	f8 ff 
    8168:	ec 2b       	jnc	$-38     	;abs 0x8142
    {
        printf("%02X ", (buffer[i]&0xFF));
    }
}
    816a:	31 50 06 00 	add	#6,	r1	;#0x0006
    816e:	34 41       	pop	r4		
    8170:	30 41       	ret			

00008172 <init_message>:

static void init_message()
{
    8172:	04 12       	push	r4		
    8174:	04 41       	mov	r1,	r4	
    8176:	24 53       	incd	r4		
    8178:	21 83       	decd	r1		
    unsigned int i;
    for(i = 0; i < PKTLEN; i++)
    817a:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc(r4)
    817e:	08 3c       	jmp	$+18     	;abs 0x8190
    {
        radio_tx_buffer[i] = 0x00;
    8180:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8184:	3f 50 20 02 	add	#544,	r15	;#0x0220
    8188:	cf 43 00 00 	mov.b	#0,	0(r15)	;r3 As==00, 0x0000(r15)
}

static void init_message()
{
    unsigned int i;
    for(i = 0; i < PKTLEN; i++)
    818c:	94 53 fc ff 	inc	-4(r4)		;0xfffc(r4)
    8190:	b4 90 1c 00 	cmp	#28,	-4(r4)	;#0x001c, 0xfffc(r4)
    8194:	fc ff 
    8196:	f4 2b       	jnc	$-22     	;abs 0x8180
    {
        radio_tx_buffer[i] = 0x00;
    }
    radio_tx_buffer[0] = (node_id>>8) &0xFF;
    8198:	1f 42 00 02 	mov	&0x0200,r15	
    819c:	8f 10       	swpb	r15		
    819e:	4f 4f       	mov.b	r15,	r15	
    81a0:	4f 4f       	mov.b	r15,	r15	
    81a2:	c2 4f 20 02 	mov.b	r15,	&0x0220	
    radio_tx_buffer[1] = node_id & 0xFF;
    81a6:	1f 42 00 02 	mov	&0x0200,r15	
    81aa:	4f 4f       	mov.b	r15,	r15	
    81ac:	c2 4f 21 02 	mov.b	r15,	&0x0221	
    radio_tx_buffer[2] = 0x20;//hex code for SPACE char
    81b0:	f2 40 20 00 	mov.b	#32,	&0x0222	;#0x0020
    81b4:	22 02 
    current_buffer_pt = 3;
    81b6:	b2 40 03 00 	mov	#3,	&0x025e	;#0x0003
    81ba:	5e 02 
}
    81bc:	21 53       	incd	r1		
    81be:	34 41       	pop	r4		
    81c0:	30 41       	ret			

000081c2 <set_node_id>:


/* returns 1 if the id was expected and set, 0 otherwise */
static void set_node_id(unsigned int id)
{
    81c2:	04 12       	push	r4		
    81c4:	04 41       	mov	r1,	r4	
    81c6:	24 53       	incd	r4		
    81c8:	21 83       	decd	r1		
    81ca:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    TIMER_ID_INPUT = UINT_MAX;
    81ce:	b2 43 0a 02 	mov	#-1,	&0x020a	;r3 As==11
    if(id!=0){
    81d2:	84 93 fc ff 	tst	-4(r4)		;0xfffc(r4)
    81d6:	20 24       	jz	$+66     	;abs 0x8218
        if(flash_write_byte((unsigned char *) NODE_ID_LOCATION, id) != 0)
    81d8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    81dc:	4f 4f       	mov.b	r15,	r15	
    81de:	4e 4f       	mov.b	r15,	r14	
    81e0:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    81e4:	b0 12 f4 a0 	call	#0xa0f4	
    81e8:	0f 93       	tst	r15		
    81ea:	23 24       	jz	$+72     	;abs 0x8232
        {
            flash_erase_segment((unsigned int *) NODE_ID_LOCATION);
    81ec:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    81f0:	b0 12 bc a1 	call	#0xa1bc	
            flash_write_word((unsigned int *) NODE_ID_LOCATION, id);
    81f4:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    81f8:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    81fc:	b0 12 58 a1 	call	#0xa158	
            node_id = id;
    8200:	92 44 fc ff 	mov	-4(r4),	&0x0200	;0xfffc(r4)
    8204:	00 02 
            printf("node id set to: %x\n", node_id);
    8206:	1f 42 00 02 	mov	&0x0200,r15	
    820a:	0f 12       	push	r15		
    820c:	30 12 74 b7 	push	#-18572	;#0xb774
    8210:	b0 12 9a ad 	call	#0xad9a	
    8214:	21 52       	add	#4,	r1	;r2 As==10
    8216:	0d 3c       	jmp	$+28     	;abs 0x8232
        }
    } 
    else{
        /* retrieve node id from flash */
        node_id = *((unsigned int *) NODE_ID_LOCATION);
    8218:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    821c:	2f 4f       	mov	@r15,	r15	
    821e:	82 4f 00 02 	mov	r15,	&0x0200	
        printf("node id retrieved from flash:  %x\n", node_id);
    8222:	1f 42 00 02 	mov	&0x0200,r15	
    8226:	0f 12       	push	r15		
    8228:	30 12 88 b7 	push	#-18552	;#0xb788
    822c:	b0 12 9a ad 	call	#0xad9a	
    8230:	21 52       	add	#4,	r1	;r2 As==10
    }
}
    8232:	21 53       	incd	r1		
    8234:	34 41       	pop	r4		
    8236:	30 41       	ret			

00008238 <timer_tick_cb>:

/*
 * Timer
 */

void timer_tick_cb() {
    8238:	04 12       	push	r4		
    823a:	04 41       	mov	r1,	r4	
    823c:	24 53       	incd	r4		
    823e:	21 83       	decd	r1		
    int i;
    for(i = 0; i < NUM_TIMERS; i++)
    8240:	84 43 fc ff 	mov	#0,	-4(r4)	;r3 As==00, 0xfffc(r4)
    8244:	19 3c       	jmp	$+52     	;abs 0x8278
    {
        if(timer[i] != UINT_MAX) {
    8246:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    824a:	0f 5f       	rla	r15		
    824c:	3f 50 02 02 	add	#514,	r15	;#0x0202
    8250:	2f 4f       	mov	@r15,	r15	
    8252:	3f 93       	cmp	#-1,	r15	;r3 As==11
    8254:	0f 24       	jz	$+32     	;abs 0x8274
            timer[i]++;
    8256:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    825a:	0f 5f       	rla	r15		
    825c:	3f 50 02 02 	add	#514,	r15	;#0x0202
    8260:	2f 4f       	mov	@r15,	r15	
    8262:	0e 4f       	mov	r15,	r14	
    8264:	1e 53       	inc	r14		
    8266:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    826a:	0f 5f       	rla	r15		
    826c:	3f 50 02 02 	add	#514,	r15	;#0x0202
    8270:	8f 4e 00 00 	mov	r14,	0(r15)	;0x0000(r15)
 * Timer
 */

void timer_tick_cb() {
    int i;
    for(i = 0; i < NUM_TIMERS; i++)
    8274:	94 53 fc ff 	inc	-4(r4)		;0xfffc(r4)
    8278:	b4 90 07 00 	cmp	#7,	-4(r4)	;#0x0007, 0xfffc(r4)
    827c:	fc ff 
    827e:	e3 3b       	jl	$-56     	;abs 0x8246
    {
        if(timer[i] != UINT_MAX) {
            timer[i]++;
        }
    }
}
    8280:	21 53       	incd	r1		
    8282:	34 41       	pop	r4		
    8284:	30 41       	ret			

00008286 <timer_reached>:

int timer_reached(uint16_t timer, uint16_t count) {
    8286:	04 12       	push	r4		
    8288:	04 41       	mov	r1,	r4	
    828a:	24 53       	incd	r4		
    828c:	21 82       	sub	#4,	r1	;r2 As==10
    828e:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8292:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
    return (timer >= count);
    8296:	1f 43       	mov	#1,	r15	;r3 As==01
    8298:	94 94 fc ff 	cmp	-4(r4),	-6(r4)	;0xfffc(r4), 0xfffa(r4)
    829c:	fa ff 
    829e:	01 2c       	jc	$+4      	;abs 0x82a2
    82a0:	0f 43       	clr	r15		
}
    82a2:	21 52       	add	#4,	r1	;r2 As==10
    82a4:	34 41       	pop	r4		
    82a6:	30 41       	ret			

000082a8 <led_green_blink>:
 * LEDs
 */

/* asynchronous */
static void led_green_blink(int duration)
{
    82a8:	04 12       	push	r4		
    82aa:	04 41       	mov	r1,	r4	
    82ac:	24 53       	incd	r4		
    82ae:	21 83       	decd	r1		
    82b0:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    led_green_duration = duration;
    82b4:	92 44 fc ff 	mov	-4(r4),	&0x0210	;0xfffc(r4)
    82b8:	10 02 
    led_green_flag = 1;
    82ba:	92 43 12 02 	mov	#1,	&0x0212	;r3 As==01
}
    82be:	21 53       	incd	r1		
    82c0:	34 41       	pop	r4		
    82c2:	30 41       	ret			

000082c4 <led_red_blink>:

static void led_red_blink(int duration)
{
    82c4:	04 12       	push	r4		
    82c6:	04 41       	mov	r1,	r4	
    82c8:	24 53       	incd	r4		
    82ca:	21 83       	decd	r1		
    82cc:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    led_red_duration = duration;
    82d0:	92 44 fc ff 	mov	-4(r4),	&0x0214	;0xfffc(r4)
    82d4:	14 02 
    led_red_flag = 1;
    82d6:	92 43 16 02 	mov	#1,	&0x0216	;r3 As==01
}
    82da:	21 53       	incd	r1		
    82dc:	34 41       	pop	r4		
    82de:	30 41       	ret			

000082e0 <thread_led_green>:

static PT_THREAD(thread_led_green(struct pt *pt))
{
    82e0:	04 12       	push	r4		
    82e2:	04 41       	mov	r1,	r4	
    82e4:	24 53       	incd	r4		
    82e6:	21 82       	sub	#4,	r1	;r2 As==10
    82e8:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    82ec:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    82f0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    82f4:	2f 4f       	mov	@r15,	r15	
    82f6:	3f 90 c4 00 	cmp	#196,	r15	;#0x00c4
    82fa:	0a 24       	jz	$+22     	;abs 0x8310
    82fc:	3f 90 c8 00 	cmp	#200,	r15	;#0x00c8
    8300:	16 24       	jz	$+46     	;abs 0x832e
    8302:	0f 93       	tst	r15		
    8304:	22 20       	jnz	$+70     	;abs 0x834a

    while(1)
    {
        PT_WAIT_UNTIL(pt, led_green_flag);
    8306:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    830a:	bf 40 c4 00 	mov	#196,	0(r15)	;#0x00c4, 0x0000(r15)
    830e:	00 00 
    8310:	1f 42 12 02 	mov	&0x0212,r15	
    8314:	0f 93       	tst	r15		
    8316:	02 20       	jnz	$+6      	;abs 0x831c
    8318:	4f 43       	clr.b	r15		
    831a:	1f 3c       	jmp	$+64     	;abs 0x835a
        led_green_on();
    831c:	b0 12 cc 99 	call	#0x99cc	
        TIMER_LED_GREEN_ON = 0;
    8320:	82 43 04 02 	mov	#0,	&0x0204	;r3 As==00
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_GREEN_ON,
    8324:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8328:	bf 40 c8 00 	mov	#200,	0(r15)	;#0x00c8, 0x0000(r15)
    832c:	00 00 
    832e:	1f 42 10 02 	mov	&0x0210,r15	
    8332:	0e 4f       	mov	r15,	r14	
    8334:	1f 42 04 02 	mov	&0x0204,r15	
    8338:	b0 12 86 82 	call	#0x8286	
    833c:	0f 93       	tst	r15		
    833e:	02 20       	jnz	$+6      	;abs 0x8344
    8340:	4f 43       	clr.b	r15		
    8342:	0b 3c       	jmp	$+24     	;abs 0x835a
          led_green_duration));
        led_green_off();
    8344:	b0 12 b6 99 	call	#0x99b6	
    }
    8348:	de 3f       	jmp	$-66     	;abs 0x8306

    PT_END(pt);
    834a:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    834e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8352:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    8356:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    835a:	21 52       	add	#4,	r1	;r2 As==10
    835c:	34 41       	pop	r4		
    835e:	30 41       	ret			

00008360 <thread_led_red>:

static PT_THREAD(thread_led_red(struct pt *pt))
{
    8360:	04 12       	push	r4		
    8362:	04 41       	mov	r1,	r4	
    8364:	24 53       	incd	r4		
    8366:	21 82       	sub	#4,	r1	;r2 As==10
    8368:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    836c:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    8370:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8374:	2f 4f       	mov	@r15,	r15	
    8376:	3f 90 d4 00 	cmp	#212,	r15	;#0x00d4
    837a:	13 24       	jz	$+40     	;abs 0x83a2
    837c:	3f 90 d5 00 	cmp	#213,	r15	;#0x00d5
    8380:	03 2c       	jc	$+8      	;abs 0x8388
    8382:	0f 93       	tst	r15		
    8384:	09 24       	jz	$+20     	;abs 0x8398
    8386:	3b 3c       	jmp	$+120    	;abs 0x83fe
    8388:	3f 90 d8 00 	cmp	#216,	r15	;#0x00d8
    838c:	19 24       	jz	$+52     	;abs 0x83c0
    838e:	3f 90 dc 00 	cmp	#220,	r15	;#0x00dc
    8392:	2a 24       	jz	$+86     	;abs 0x83e8
    8394:	34 3c       	jmp	$+106    	;abs 0x83fe
          led_red_duration));
        led_red_off();
        TIMER_LED_RED_ON = 0;
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_RED_ON,
          led_red_duration));
    }
    8396:	03 43       	nop			
static PT_THREAD(thread_led_red(struct pt *pt))
{
    PT_BEGIN(pt);
    while(1)
    {
        PT_WAIT_UNTIL(pt, led_red_flag);
    8398:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    839c:	bf 40 d4 00 	mov	#212,	0(r15)	;#0x00d4, 0x0000(r15)
    83a0:	00 00 
    83a2:	1f 42 16 02 	mov	&0x0216,r15	
    83a6:	0f 93       	tst	r15		
    83a8:	02 20       	jnz	$+6      	;abs 0x83ae
    83aa:	4f 43       	clr.b	r15		
    83ac:	30 3c       	jmp	$+98     	;abs 0x840e
        led_red_on();
    83ae:	b0 12 0a 9a 	call	#0x9a0a	
        TIMER_LED_RED_ON = 0;
    83b2:	82 43 02 02 	mov	#0,	&0x0202	;r3 As==00
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_RED_ON,
    83b6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    83ba:	bf 40 d8 00 	mov	#216,	0(r15)	;#0x00d8, 0x0000(r15)
    83be:	00 00 
    83c0:	1f 42 14 02 	mov	&0x0214,r15	
    83c4:	0e 4f       	mov	r15,	r14	
    83c6:	1f 42 02 02 	mov	&0x0202,r15	
    83ca:	b0 12 86 82 	call	#0x8286	
    83ce:	0f 93       	tst	r15		
    83d0:	02 20       	jnz	$+6      	;abs 0x83d6
    83d2:	4f 43       	clr.b	r15		
    83d4:	1c 3c       	jmp	$+58     	;abs 0x840e
          led_red_duration));
        led_red_off();
    83d6:	b0 12 f4 99 	call	#0x99f4	
        TIMER_LED_RED_ON = 0;
    83da:	82 43 02 02 	mov	#0,	&0x0202	;r3 As==00
        PT_WAIT_UNTIL(pt, timer_reached(TIMER_LED_RED_ON,
    83de:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    83e2:	bf 40 dc 00 	mov	#220,	0(r15)	;#0x00dc, 0x0000(r15)
    83e6:	00 00 
    83e8:	1f 42 14 02 	mov	&0x0214,r15	
    83ec:	0e 4f       	mov	r15,	r14	
    83ee:	1f 42 02 02 	mov	&0x0202,r15	
    83f2:	b0 12 86 82 	call	#0x8286	
    83f6:	0f 93       	tst	r15		
    83f8:	ce 23       	jnz	$-98     	;abs 0x8396
    83fa:	4f 43       	clr.b	r15		
    83fc:	08 3c       	jmp	$+18     	;abs 0x840e
          led_red_duration));
    }

    PT_END(pt);
    83fe:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8402:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8406:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    840a:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    840e:	21 52       	add	#4,	r1	;r2 As==10
    8410:	34 41       	pop	r4		
    8412:	30 41       	ret			

00008414 <radio_send_message>:
static char radio_rx_buffer[PKTLEN];
static int radio_rx_flag;


static void radio_send_message()
{
    8414:	04 12       	push	r4		
    8416:	04 41       	mov	r1,	r4	
    8418:	24 53       	incd	r4		
    //finish the sending buffer with a dot 
    radio_tx_buffer[current_buffer_pt] = 0x2E; //dot hex code
    841a:	1f 42 5e 02 	mov	&0x025e,r15	
    841e:	ff 40 2e 00 	mov.b	#46,	544(r15);#0x002e, 0x0220(r15)
    8422:	20 02 
    current_buffer_pt = 0;
    8424:	82 43 5e 02 	mov	#0,	&0x025e	;r3 As==00
    led_green_on();
    8428:	b0 12 cc 99 	call	#0x99cc	
    cc2500_utx(radio_tx_buffer, PKTLEN);
    842c:	7e 40 1c 00 	mov.b	#28,	r14	;#0x001c
    8430:	3f 40 20 02 	mov	#544,	r15	;#0x0220
    8434:	b0 12 ee 91 	call	#0x91ee	
    printf("Node id: %c%c\n", (node_id>>8) &0xFF,node_id & 0xFF);//room number + sensor number 
    8438:	1f 42 00 02 	mov	&0x0200,r15	
    843c:	0e 4f       	mov	r15,	r14	
    843e:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    8442:	1f 42 00 02 	mov	&0x0200,r15	
    8446:	8f 10       	swpb	r15		
    8448:	4f 4f       	mov.b	r15,	r15	
    844a:	0e 12       	push	r14		
    844c:	0f 12       	push	r15		
    844e:	30 12 ab b7 	push	#-18517	;#0xb7ab
    8452:	b0 12 9a ad 	call	#0xad9a	
    8456:	31 50 06 00 	add	#6,	r1	;#0x0006
    printf("sent: ");
    845a:	30 12 ba b7 	push	#-18502	;#0xb7ba
    845e:	b0 12 9a ad 	call	#0xad9a	
    8462:	21 53       	incd	r1		
    printhex(radio_tx_buffer, PKTLEN);
    8464:	3e 40 1c 00 	mov	#28,	r14	;#0x001c
    8468:	3f 40 20 02 	mov	#544,	r15	;#0x0220
    846c:	b0 12 2a 81 	call	#0x812a	
    putchar('\r');
    8470:	3f 40 0d 00 	mov	#13,	r15	;#0x000d
    8474:	b0 12 70 9e 	call	#0x9e70	
    putchar('\n');
    8478:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    847c:	b0 12 70 9e 	call	#0x9e70	
    led_green_off();
    8480:	b0 12 b6 99 	call	#0x99b6	
    cc2500_rx_enter();
    8484:	b0 12 86 92 	call	#0x9286	
}
    8488:	34 41       	pop	r4		
    848a:	30 41       	ret			

0000848c <radio_cb>:




void radio_cb(uint8_t *buffer, int size, int8_t rssi)
{
    848c:	04 12       	push	r4		
    848e:	04 41       	mov	r1,	r4	
    8490:	24 53       	incd	r4		
    8492:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    8496:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    849a:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    849e:	c4 4d fc ff 	mov.b	r13,	-4(r4)	;0xfffc(r4)
    led_green_blink(10); /* 10 timer ticks = 100 ms */
    84a2:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    84a6:	b0 12 a8 82 	call	#0x82a8	
    //DBG_PRINTF("radio_cb :: ");
    switch (size)
    84aa:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    84ae:	2f 52       	add	#4,	r15	;r2 As==10
    84b0:	3f 90 05 00 	cmp	#5,	r15	;#0x0005
    84b4:	1e 2c       	jc	$+62     	;abs 0x84f2
    84b6:	0f 5f       	rla	r15		
    84b8:	3f 50 2e b8 	add	#-18386,r15	;#0xb82e
    84bc:	2f 4f       	mov	@r15,	r15	
    84be:	00 4f       	br	r15		
    {
        case 0:
            DBG_PRINTF("msg siNode idze 0\r\n");
    84c0:	3f 40 c1 b7 	mov	#-18495,r15	;#0xb7c1
    84c4:	b0 12 ee b5 	call	#0xb5ee	
            break;
    84c8:	1f 3c       	jmp	$+64     	;abs 0x8508
        case -EEMPTY:
            DBG_PRINTF("msg emptyr\r\n");
    84ca:	3f 40 d4 b7 	mov	#-18476,r15	;#0xb7d4
    84ce:	b0 12 ee b5 	call	#0xb5ee	
            break;
    84d2:	1a 3c       	jmp	$+54     	;abs 0x8508
        case -ERXFLOW:
            DBG_PRINTF("msg rx overflow\r\n");
    84d4:	3f 40 e0 b7 	mov	#-18464,r15	;#0xb7e0
    84d8:	b0 12 ee b5 	call	#0xb5ee	
            break;
    84dc:	15 3c       	jmp	$+44     	;abs 0x8508
        case -ERXBADCRC:
            DBG_PRINTF("msg rx bad CRC\r\n");
    84de:	3f 40 f1 b7 	mov	#-18447,r15	;#0xb7f1
    84e2:	b0 12 ee b5 	call	#0xb5ee	
            break;
    84e6:	10 3c       	jmp	$+34     	;abs 0x8508
        case -ETXFLOW:
            DBG_PRINTF("msg tx overflow\r\n");
    84e8:	3f 40 01 b8 	mov	#-18431,r15	;#0xb801
    84ec:	b0 12 ee b5 	call	#0xb5ee	
            break;
    84f0:	0b 3c       	jmp	$+24     	;abs 0x8508
        default:
            if (size > 0)
    84f2:	94 93 fa ff 	cmp	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    84f6:	07 34       	jge	$+16     	;abs 0x8506
                //FIXME what if radio_rx_flag == 1 already?
                //radio_rx_flag = 1;
            }
            else
            {
                DBG_PRINTF("msg packet error size=%d\r\n",size);
    84f8:	14 12 fa ff 	push	-6(r4)		;0xfffa(r4)
    84fc:	30 12 12 b8 	push	#-18414	;#0xb812
    8500:	b0 12 9a ad 	call	#0xad9a	
    8504:	21 52       	add	#4,	r1	;r2 As==10
            }
            break;
    8506:	03 43       	nop			
    }

    cc2500_rx_enter();
    8508:	b0 12 86 92 	call	#0x9286	
}
    850c:	31 50 06 00 	add	#6,	r1	;#0x0006
    8510:	34 41       	pop	r4		
    8512:	30 41       	ret			

00008514 <register_temperature>:
 * TEMP SENSOR
 */
 
 /* to be called from within a protothread */
static void register_temperature()
{
    8514:	04 12       	push	r4		
    8516:	04 41       	mov	r1,	r4	
    8518:	24 53       	incd	r4		
    851a:	21 82       	sub	#4,	r1	;r2 As==10
    
    int temperature = adc10_sample_temp();
    851c:	b0 12 4e 88 	call	#0x884e	
    8520:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    printf("temperature: %d, hex:", temperature);
    8524:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8528:	0f 12       	push	r15		
    852a:	30 12 38 b8 	push	#-18376	;#0xb838
    852e:	b0 12 9a ad 	call	#0xad9a	
    8532:	21 52       	add	#4,	r1	;r2 As==10
    printhex((char *) &temperature, 2);
    8534:	0f 44       	mov	r4,	r15	
    8536:	2f 82       	sub	#4,	r15	;r2 As==10
    8538:	2e 43       	mov	#2,	r14	;r3 As==10
    853a:	b0 12 2a 81 	call	#0x812a	
    putchar('\r');
    853e:	3f 40 0d 00 	mov	#13,	r15	;#0x000d
    8542:	b0 12 70 9e 	call	#0x9e70	
    putchar('\n');
    8546:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    854a:	b0 12 70 9e 	call	#0x9e70	
    /* msp430 is little endian, convert temperature to network order */
    char *pt = (char *) &temperature;
    854e:	3f 40 fa ff 	mov	#-6,	r15	;#0xfffa
    8552:	0f 54       	add	r4,	r15	
    8554:	2f 53       	incd	r15		
    8556:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    radio_tx_buffer[current_buffer_pt++] = pt[1];
    855a:	1f 42 5e 02 	mov	&0x025e,r15	
    855e:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    8562:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    8566:	cf 4e 20 02 	mov.b	r14,	544(r15);0x0220(r15)
    856a:	1f 53       	inc	r15		
    856c:	82 4f 5e 02 	mov	r15,	&0x025e	
    radio_tx_buffer[current_buffer_pt++] = pt[0];
    8570:	1f 42 5e 02 	mov	&0x025e,r15	
    8574:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    8578:	6e 4e       	mov.b	@r14,	r14	
    857a:	cf 4e 20 02 	mov.b	r14,	544(r15);0x0220(r15)
    857e:	1f 53       	inc	r15		
    8580:	82 4f 5e 02 	mov	r15,	&0x025e	
    
}
    8584:	21 52       	add	#4,	r1	;r2 As==10
    8586:	34 41       	pop	r4		
    8588:	30 41       	ret			

0000858a <uart_cb>:
 * UART
 */


int uart_cb(uint8_t data)
{
    858a:	04 12       	push	r4		
    858c:	04 41       	mov	r1,	r4	
    858e:	24 53       	incd	r4		
    8590:	21 83       	decd	r1		
    8592:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    
    if(data == 27 && uart_flag==0){ //27 is ESC ascii code (decimal) 
    8596:	f4 90 1b 00 	cmp.b	#27,	-4(r4)	;#0x001b, 0xfffc(r4)
    859a:	fc ff 
    859c:	13 20       	jnz	$+40     	;abs 0x85c4
    859e:	1f 42 60 02 	mov	&0x0260,r15	
    85a2:	0f 93       	tst	r15		
    85a4:	0f 20       	jnz	$+32     	;abs 0x85c4
        printf("Enter new id starting with the room number and then the sensor number. Press enter to accept\n");
    85a6:	3f 40 4e b8 	mov	#-18354,r15	;#0xb84e
    85aa:	b0 12 ee b5 	call	#0xb5ee	
        room_flag = 0;
    85ae:	82 43 64 02 	mov	#0,	&0x0264	;r3 As==00
        uart_data = 0;
    85b2:	82 43 62 02 	mov	#0,	&0x0262	;r3 As==00
        uart_flag=1;
    85b6:	92 43 60 02 	mov	#1,	&0x0260	;r3 As==01
        periodic_send_flag=0;
    85ba:	82 43 5a 02 	mov	#0,	&0x025a	;r3 As==00
        periodic_temp_flag=0;
    85be:	82 43 5c 02 	mov	#0,	&0x025c	;r3 As==00
    85c2:	41 3c       	jmp	$+132    	;abs 0x8646
    }
    else if(data == 13 && uart_flag==1){ //13 is return/enter ascii code
    85c4:	f4 90 0d 00 	cmp.b	#13,	-4(r4)	;#0x000d, 0xfffc(r4)
    85c8:	fc ff 
    85ca:	0b 20       	jnz	$+24     	;abs 0x85e2
    85cc:	1f 42 60 02 	mov	&0x0260,r15	
    85d0:	1f 93       	cmp	#1,	r15	;r3 As==01
    85d2:	07 20       	jnz	$+16     	;abs 0x85e2
        uart_flag=0;
    85d4:	82 43 60 02 	mov	#0,	&0x0260	;r3 As==00
        periodic_send_flag=1;
    85d8:	92 43 5a 02 	mov	#1,	&0x025a	;r3 As==01
        periodic_temp_flag=1;
    85dc:	92 43 5c 02 	mov	#1,	&0x025c	;r3 As==01
    85e0:	32 3c       	jmp	$+102    	;abs 0x8646
    }
    else {
    	if(room_flag == 0){
    85e2:	1f 42 64 02 	mov	&0x0264,r15	
    85e6:	0f 93       	tst	r15		
    85e8:	12 20       	jnz	$+38     	;abs 0x860e
    		printf("room : %c (hex code : %x)\n",data, data);
    85ea:	5e 44 fc ff 	mov.b	-4(r4),	r14	;0xfffc(r4)
    85ee:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    85f2:	0e 12       	push	r14		
    85f4:	0f 12       	push	r15		
    85f6:	30 12 ab b8 	push	#-18261	;#0xb8ab
    85fa:	b0 12 9a ad 	call	#0xad9a	
    85fe:	31 50 06 00 	add	#6,	r1	;#0x0006
    		room = data;
    8602:	d2 44 fc ff 	mov.b	-4(r4),	&0x0266	;0xfffc(r4)
    8606:	66 02 
    		room_flag=1;
    8608:	92 43 64 02 	mov	#1,	&0x0264	;r3 As==01
    860c:	1c 3c       	jmp	$+58     	;abs 0x8646
    		
    	}
        else if (room_flag == 1){
    860e:	1f 42 64 02 	mov	&0x0264,r15	
    8612:	1f 93       	cmp	#1,	r15	;r3 As==01
    8614:	18 20       	jnz	$+50     	;abs 0x8646
        	printf("sensor: %c (hex code : %x)\n",data,data);
    8616:	5e 44 fc ff 	mov.b	-4(r4),	r14	;0xfffc(r4)
    861a:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    861e:	0e 12       	push	r14		
    8620:	0f 12       	push	r15		
    8622:	30 12 c6 b8 	push	#-18234	;#0xb8c6
    8626:	b0 12 9a ad 	call	#0xad9a	
    862a:	31 50 06 00 	add	#6,	r1	;#0x0006
        	uart_data = ((room & 0xFF) <<8) | (data & 0xFF) ;
    862e:	5f 42 66 02 	mov.b	&0x0266,r15	
    8632:	4f 4f       	mov.b	r15,	r15	
    8634:	4f 4f       	mov.b	r15,	r15	
    8636:	8f 10       	swpb	r15		
    8638:	5e 44 fc ff 	mov.b	-4(r4),	r14	;0xfffc(r4)
    863c:	0f de       	bis	r14,	r15	
    863e:	82 4f 62 02 	mov	r15,	&0x0262	
        	//printf("uart_data : %x \n",uart_data);
        	room_flag = 0;
    8642:	82 43 64 02 	mov	#0,	&0x0264	;r3 As==00
        }      
    }
        
    return 0;
    8646:	0f 43       	clr	r15		
}
    8648:	21 53       	incd	r1		
    864a:	34 41       	pop	r4		
    864c:	30 41       	ret			

0000864e <thread_uart>:


static PT_THREAD(thread_uart(struct pt *pt))
{
    864e:	04 12       	push	r4		
    8650:	04 41       	mov	r1,	r4	
    8652:	24 53       	incd	r4		
    8654:	21 82       	sub	#4,	r1	;r2 As==10
    8656:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    865a:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    865e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8662:	2f 4f       	mov	@r15,	r15	
    8664:	3f 90 6c 01 	cmp	#364,	r15	;#0x016c
    8668:	0a 24       	jz	$+22     	;abs 0x867e
    866a:	3f 90 6e 01 	cmp	#366,	r15	;#0x016e
    866e:	14 24       	jz	$+42     	;abs 0x8698
    8670:	0f 93       	tst	r15		
    8672:	1f 20       	jnz	$+64     	;abs 0x86b2

    while(1)
    {
        PT_WAIT_UNTIL(pt, uart_flag==1);
    8674:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8678:	bf 40 6c 01 	mov	#364,	0(r15)	;#0x016c, 0x0000(r15)
    867c:	00 00 
    867e:	1f 42 60 02 	mov	&0x0260,r15	
    8682:	1f 93       	cmp	#1,	r15	;r3 As==01
    8684:	02 24       	jz	$+6      	;abs 0x868a
    8686:	4f 43       	clr.b	r15		
    8688:	1c 3c       	jmp	$+58     	;abs 0x86c2
        led_red_on();
    868a:	b0 12 0a 9a 	call	#0x9a0a	
        PT_WAIT_UNTIL(pt,uart_flag==0);
    868e:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8692:	bf 40 6e 01 	mov	#366,	0(r15)	;#0x016e, 0x0000(r15)
    8696:	00 00 
    8698:	1f 42 60 02 	mov	&0x0260,r15	
    869c:	0f 93       	tst	r15		
    869e:	02 24       	jz	$+6      	;abs 0x86a4
    86a0:	4f 43       	clr.b	r15		
    86a2:	0f 3c       	jmp	$+32     	;abs 0x86c2
        set_node_id(uart_data);
    86a4:	1f 42 62 02 	mov	&0x0262,r15	
    86a8:	b0 12 c2 81 	call	#0x81c2	
        led_red_off();
    86ac:	b0 12 f4 99 	call	#0x99f4	
    }
    86b0:	e1 3f       	jmp	$-60     	;abs 0x8674

    PT_END(pt);
    86b2:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    86b6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    86ba:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    86be:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    86c2:	21 52       	add	#4,	r1	;r2 As==10
    86c4:	34 41       	pop	r4		
    86c6:	30 41       	ret			

000086c8 <thread_periodic_send>:

static PT_THREAD(thread_periodic_send(struct pt *pt))
{
    86c8:	04 12       	push	r4		
    86ca:	04 41       	mov	r1,	r4	
    86cc:	24 53       	incd	r4		
    86ce:	21 82       	sub	#4,	r1	;r2 As==10
    86d0:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    86d4:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    86d8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    86dc:	2f 4f       	mov	@r15,	r15	
    86de:	3f 90 7c 01 	cmp	#380,	r15	;#0x017c
    86e2:	0a 24       	jz	$+22     	;abs 0x86f8
    86e4:	3f 90 7f 01 	cmp	#383,	r15	;#0x017f
    86e8:	16 24       	jz	$+46     	;abs 0x8716
    86ea:	0f 93       	tst	r15		
    86ec:	29 20       	jnz	$+84     	;abs 0x8740

    while(1)
    {
        PT_WAIT_UNTIL(pt,periodic_send_flag==1);
    86ee:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    86f2:	bf 40 7c 01 	mov	#380,	0(r15)	;#0x017c, 0x0000(r15)
    86f6:	00 00 
    86f8:	1f 42 5a 02 	mov	&0x025a,r15	
    86fc:	1f 93       	cmp	#1,	r15	;r3 As==01
    86fe:	02 24       	jz	$+6      	;abs 0x8704
    8700:	4f 43       	clr.b	r15		
    8702:	26 3c       	jmp	$+78     	;abs 0x8750
        TIMER_RADIO_SEND = 0;
    8704:	82 43 08 02 	mov	#0,	&0x0208	;r3 As==00
        init_message();
    8708:	b0 12 72 81 	call	#0x8172	
        PT_WAIT_UNTIL(pt, node_id != NODE_ID_UNDEFINED && timer_reached( TIMER_RADIO_SEND, TIMER_SEND) && periodic_send_flag==1);
    870c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8710:	bf 40 7f 01 	mov	#383,	0(r15)	;#0x017f, 0x0000(r15)
    8714:	00 00 
    8716:	1f 42 00 02 	mov	&0x0200,r15	
    871a:	0f 93       	tst	r15		
    871c:	0c 24       	jz	$+26     	;abs 0x8736
    871e:	1f 42 08 02 	mov	&0x0208,r15	
    8722:	3e 40 71 17 	mov	#6001,	r14	;#0x1771
    8726:	b0 12 86 82 	call	#0x8286	
    872a:	0f 93       	tst	r15		
    872c:	04 24       	jz	$+10     	;abs 0x8736
    872e:	1f 42 5a 02 	mov	&0x025a,r15	
    8732:	1f 93       	cmp	#1,	r15	;r3 As==01
    8734:	02 24       	jz	$+6      	;abs 0x873a
    8736:	4f 43       	clr.b	r15		
    8738:	0b 3c       	jmp	$+24     	;abs 0x8750
        radio_send_message();
    873a:	b0 12 14 84 	call	#0x8414	
    }
    873e:	d7 3f       	jmp	$-80     	;abs 0x86ee

    PT_END(pt);
    8740:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    8744:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8748:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    874c:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    8750:	21 52       	add	#4,	r1	;r2 As==10
    8752:	34 41       	pop	r4		
    8754:	30 41       	ret			

00008756 <thread_periodic_temperature>:


static PT_THREAD(thread_periodic_temperature(struct pt *pt))
{
    8756:	04 12       	push	r4		
    8758:	04 41       	mov	r1,	r4	
    875a:	24 53       	incd	r4		
    875c:	21 82       	sub	#4,	r1	;r2 As==10
    875e:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
    PT_BEGIN(pt);
    8762:	d4 43 fa ff 	mov.b	#1,	-6(r4)	;r3 As==01, 0xfffa(r4)
    8766:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    876a:	2f 4f       	mov	@r15,	r15	
    876c:	3f 90 8d 01 	cmp	#397,	r15	;#0x018d
    8770:	0a 24       	jz	$+22     	;abs 0x8786
    8772:	3f 90 8f 01 	cmp	#399,	r15	;#0x018f
    8776:	14 24       	jz	$+42     	;abs 0x87a0
    8778:	0f 93       	tst	r15		
    877a:	27 20       	jnz	$+80     	;abs 0x87ca

    while(1)
    {
        PT_WAIT_UNTIL(pt,periodic_temp_flag==1);
    877c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8780:	bf 40 8d 01 	mov	#397,	0(r15)	;#0x018d, 0x0000(r15)
    8784:	00 00 
    8786:	1f 42 5c 02 	mov	&0x025c,r15	
    878a:	1f 93       	cmp	#1,	r15	;r3 As==01
    878c:	02 24       	jz	$+6      	;abs 0x8792
    878e:	4f 43       	clr.b	r15		
    8790:	24 3c       	jmp	$+74     	;abs 0x87da
        TIMER_TEMP = 0;
    8792:	82 43 0e 02 	mov	#0,	&0x020e	;r3 As==00
        PT_WAIT_UNTIL(pt, node_id != NODE_ID_UNDEFINED && timer_reached( TIMER_TEMP, TIMER_SENSING_TEMP) && periodic_temp_flag==1);
    8796:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    879a:	bf 40 8f 01 	mov	#399,	0(r15)	;#0x018f, 0x0000(r15)
    879e:	00 00 
    87a0:	1f 42 00 02 	mov	&0x0200,r15	
    87a4:	0f 93       	tst	r15		
    87a6:	0c 24       	jz	$+26     	;abs 0x87c0
    87a8:	1f 42 0e 02 	mov	&0x020e,r15	
    87ac:	3e 40 58 02 	mov	#600,	r14	;#0x0258
    87b0:	b0 12 86 82 	call	#0x8286	
    87b4:	0f 93       	tst	r15		
    87b6:	04 24       	jz	$+10     	;abs 0x87c0
    87b8:	1f 42 5c 02 	mov	&0x025c,r15	
    87bc:	1f 93       	cmp	#1,	r15	;r3 As==01
    87be:	02 24       	jz	$+6      	;abs 0x87c4
    87c0:	4f 43       	clr.b	r15		
    87c2:	0b 3c       	jmp	$+24     	;abs 0x87da
        register_temperature();
    87c4:	b0 12 14 85 	call	#0x8514	
    }
    87c8:	d9 3f       	jmp	$-76     	;abs 0x877c

    PT_END(pt);
    87ca:	c4 43 fa ff 	mov.b	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
    87ce:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    87d2:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
    87d6:	7f 40 03 00 	mov.b	#3,	r15	;#0x0003
}
    87da:	21 52       	add	#4,	r1	;r2 As==10
    87dc:	34 41       	pop	r4		
    87de:	30 41       	ret			

000087e0 <adc10_start>:
/* **************************************************
 * 
 * **************************************************/

void adc10_start(void)
{
    87e0:	04 12       	push	r4		
    87e2:	04 41       	mov	r1,	r4	
    87e4:	24 53       	incd	r4		
		coeff_1 = 355;//slope in 10-² mV
    87e6:	b2 40 63 01 	mov	#355,	&0x0268	;#0x0163
    87ea:	68 02 
		coeff_2 = 986;//origin point
    87ec:	b2 40 da 03 	mov	#986,	&0x026a	;#0x03da
    87f0:	6a 02 
}
    87f2:	34 41       	pop	r4		
    87f4:	30 41       	ret			

000087f6 <adc10_calibrate>:

void adc10_calibrate(uint16_t coeff1, uint16_t coeff2) {
    87f6:	04 12       	push	r4		
    87f8:	04 41       	mov	r1,	r4	
    87fa:	24 53       	incd	r4		
    87fc:	21 82       	sub	#4,	r1	;r2 As==10
    87fe:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8802:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	if (coeff1 !=0){
    8806:	84 93 fa ff 	tst	-6(r4)		;0xfffa(r4)
    880a:	04 24       	jz	$+10     	;abs 0x8814
		coeff_1 = coeff1;
    880c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    8810:	82 4f 68 02 	mov	r15,	&0x0268	
	}
	if (coeff2 !=0){
    8814:	84 93 fc ff 	tst	-4(r4)		;0xfffc(r4)
    8818:	04 24       	jz	$+10     	;abs 0x8822
		coeff_2 = coeff2;
    881a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    881e:	82 4f 6a 02 	mov	r15,	&0x026a	
	}
}
    8822:	21 52       	add	#4,	r1	;r2 As==10
    8824:	34 41       	pop	r4		
    8826:	30 41       	ret			

00008828 <adc10_stop>:
/* **************************************************
 * 
 * **************************************************/

void adc10_stop(void)
{
    8828:	04 12       	push	r4		
    882a:	04 41       	mov	r1,	r4	
    882c:	24 53       	incd	r4		
	//  ADC10CTL0  = 0;
	ADC10CTL0 &= ~(REFON + ADC10ON);	// turn off A/D to save power
    882e:	1f 42 b0 01 	mov	&0x01b0,r15	
    8832:	3f f0 cf ff 	and	#-49,	r15	;#0xffcf
    8836:	82 4f b0 01 	mov	r15,	&0x01b0	
}
    883a:	34 41       	pop	r4		
    883c:	30 41       	ret			

0000883e <adc10irq>:
/* **************************************************
 * 
 * **************************************************/

ISR(ADC10, adc10irq)
{
    883e:	04 12       	push	r4		
    8840:	04 41       	mov	r1,	r4	
    8842:	24 53       	incd	r4		
	LPM_OFF_ON_EXIT;
    8844:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    8848:	00 00 
}
    884a:	34 41       	pop	r4		
    884c:	00 13       	reti			

0000884e <adc10_sample_temp>:

#define TEMPOFFSET_ 0x10F4
SFRB(TEMPOFFSET, TEMPOFFSET_);

int adc10_sample_temp(void)
{
    884e:	0b 12       	push	r11		
    8850:	0a 12       	push	r10		
    8852:	09 12       	push	r9		
    8854:	08 12       	push	r8		
    8856:	07 12       	push	r7		
    8858:	06 12       	push	r6		
    885a:	04 12       	push	r4		
    885c:	04 41       	mov	r1,	r4	
    885e:	34 50 0e 00 	add	#14,	r4	;#0x000e
    8862:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
	volatile long result;
	int degC;

	ADC10CTL1 = INCH_10 + ADC10DIV_4;	// Temp Sensor ADC10CLK/3
    8866:	b2 40 80 a0 	mov	#-24448,&0x01b2	;#0xa080
    886a:	b2 01 
	ADC10CTL0 = SREF_1 + ADC10SHT_3 + REFON + ADC10ON + ADC10IE + ADC10SR;
    886c:	b2 40 38 3c 	mov	#15416,	&0x01b0	;#0x3c38
    8870:	b0 01 
    //here we supposed Vref =1.5V since there is no REF2_5V used
	loop_4_cycles(60);	// delay to allow reference to settle (240 cycles)
    8872:	3e 40 3c 00 	mov	#60,	r14	;#0x003c
    8876:	0f 43       	clr	r15		
    8878:	b0 12 72 98 	call	#0x9872	
	ADC10CTL0 |= ENC + ADC10SC;	// Sampling and conversion start
    887c:	1f 42 b0 01 	mov	&0x01b0,r15	
    8880:	3f d0 03 00 	bis	#3,	r15	;#0x0003
    8884:	82 4f b0 01 	mov	r15,	&0x01b0	

	LPM(0);
    8888:	32 d0 10 00 	bis	#16,	r2	;#0x0010

	result = ADC10MEM;
    888c:	1f 42 b4 01 	mov	&0x01b4,r15	
    8890:	06 4f       	mov	r15,	r6	
    8892:	07 43       	clr	r7		
    8894:	84 46 ee ff 	mov	r6,	-18(r4)	;0xffee(r4)
    8898:	84 47 f0 ff 	mov	r7,	-16(r4)	;0xfff0(r4)
	ADC10CTL0 &= ~ENC;
    889c:	1f 42 b0 01 	mov	&0x01b0,r15	
    88a0:	3f f0 fd ff 	and	#-3,	r15	;#0xfffd
    88a4:	82 4f b0 01 	mov	r15,	&0x01b0	
	ADC10CTL0 &= ~(REFON + ADC10ON);	// turn off A/D to save power
    88a8:	1f 42 b0 01 	mov	&0x01b0,r15	
    88ac:	3f f0 cf ff 	and	#-49,	r15	;#0xffcf
    88b0:	82 4f b0 01 	mov	r15,	&0x01b0	
	// oC = ((A10*1500/1024-986mV)*100/355
	// VTEMP=0.00355(TEMPC)+0.986

    //1000 for 1/10-²mv*10 to have  temperature transmitted as an integer 321 for 32.1

    degC = ((float)result*1500/1024-coeff_2)*1000/coeff_1;
    88b4:	1e 44 ee ff 	mov	-18(r4),r14	;0xffee(r4)
    88b8:	1f 44 f0 ff 	mov	-16(r4),r15	;0xfff0(r4)
    88bc:	b0 12 f0 a8 	call	#0xa8f0	
    88c0:	3c 40 00 80 	mov	#-32768,r12	;#0x8000
    88c4:	3d 40 bb 44 	mov	#17595,	r13	;#0x44bb
    88c8:	b0 12 7c a5 	call	#0xa57c	
    88cc:	0c 43       	clr	r12		
    88ce:	3d 40 80 44 	mov	#17536,	r13	;#0x4480
    88d2:	b0 12 a0 a7 	call	#0xa7a0	
    88d6:	06 4e       	mov	r14,	r6	
    88d8:	07 4f       	mov	r15,	r7	
    88da:	1f 42 6a 02 	mov	&0x026a,r15	
    88de:	08 4f       	mov	r15,	r8	
    88e0:	0f 48       	mov	r8,	r15	
    88e2:	8f 10       	swpb	r15		
    88e4:	8f 11       	sxt	r15		
    88e6:	8f 10       	swpb	r15		
    88e8:	8f 11       	sxt	r15		
    88ea:	09 4f       	mov	r15,	r9	
    88ec:	0e 48       	mov	r8,	r14	
    88ee:	0f 49       	mov	r9,	r15	
    88f0:	b0 12 f0 a8 	call	#0xa8f0	
    88f4:	0c 4e       	mov	r14,	r12	
    88f6:	0d 4f       	mov	r15,	r13	
    88f8:	0e 46       	mov	r6,	r14	
    88fa:	0f 47       	mov	r7,	r15	
    88fc:	b0 12 2c a5 	call	#0xa52c	
    8900:	0c 43       	clr	r12		
    8902:	3d 40 7a 44 	mov	#17530,	r13	;#0x447a
    8906:	b0 12 7c a5 	call	#0xa57c	
    890a:	08 4e       	mov	r14,	r8	
    890c:	09 4f       	mov	r15,	r9	
    890e:	1f 42 68 02 	mov	&0x0268,r15	
    8912:	0a 4f       	mov	r15,	r10	
    8914:	0f 4a       	mov	r10,	r15	
    8916:	8f 10       	swpb	r15		
    8918:	8f 11       	sxt	r15		
    891a:	8f 10       	swpb	r15		
    891c:	8f 11       	sxt	r15		
    891e:	0b 4f       	mov	r15,	r11	
    8920:	0e 4a       	mov	r10,	r14	
    8922:	0f 4b       	mov	r11,	r15	
    8924:	b0 12 f0 a8 	call	#0xa8f0	
    8928:	0c 4e       	mov	r14,	r12	
    892a:	0d 4f       	mov	r15,	r13	
    892c:	0e 48       	mov	r8,	r14	
    892e:	0f 49       	mov	r9,	r15	
    8930:	b0 12 a0 a7 	call	#0xa7a0	
    8934:	b0 12 96 a9 	call	#0xa996	
    8938:	84 4e ec ff 	mov	r14,	-20(r4)	;0xffec(r4)
	degC = ((temp - 673) * 4230) / 1024;

	   if( TEMPOFFSET != 0xFFFF )
	   degC += TEMPOFFSET;
	printf("degC after offset : ", degC);*/
	return degC;
    893c:	1f 44 ec ff 	mov	-20(r4),r15	;0xffec(r4)
}
    8940:	31 50 06 00 	add	#6,	r1	;#0x0006
    8944:	34 41       	pop	r4		
    8946:	36 41       	pop	r6		
    8948:	37 41       	pop	r7		
    894a:	38 41       	pop	r8		
    894c:	39 41       	pop	r9		
    894e:	3a 41       	pop	r10		
    8950:	3b 41       	pop	r11		
    8952:	30 41       	ret			

00008954 <adc10_sample_avcc>:
/* **************************************************
 * 
 * **************************************************/

int adc10_sample_avcc(void)
{
    8954:	0b 12       	push	r11		
    8956:	0a 12       	push	r10		
    8958:	04 12       	push	r4		
    895a:	04 41       	mov	r1,	r4	
    895c:	34 50 06 00 	add	#6,	r4	;#0x0006
    8960:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
	volatile long result;
	unsigned int volt;

	ADC10CTL1 = INCH_11;	// AVcc/2
    8964:	b2 40 00 b0 	mov	#-20480,&0x01b2	;#0xb000
    8968:	b2 01 
	ADC10CTL0 = SREF_1 + ADC10SHT_2 + REFON + ADC10ON + ADC10IE + REF2_5V;
    896a:	b2 40 78 30 	mov	#12408,	&0x01b0	;#0x3078
    896e:	b0 01 

	loop_4_cycles(60);	// delay to allow reference to settle (240 cycles)
    8970:	3e 40 3c 00 	mov	#60,	r14	;#0x003c
    8974:	0f 43       	clr	r15		
    8976:	b0 12 72 98 	call	#0x9872	

	ADC10CTL0 |= ENC + ADC10SC;	// Sampling and conversion start
    897a:	1f 42 b0 01 	mov	&0x01b0,r15	
    897e:	3f d0 03 00 	bis	#3,	r15	;#0x0003
    8982:	82 4f b0 01 	mov	r15,	&0x01b0	

	LPM(0);
    8986:	32 d0 10 00 	bis	#16,	r2	;#0x0010

	result = ADC10MEM;
    898a:	1f 42 b4 01 	mov	&0x01b4,r15	
    898e:	0a 4f       	mov	r15,	r10	
    8990:	0b 43       	clr	r11		
    8992:	84 4a f6 ff 	mov	r10,	-10(r4)	;0xfff6(r4)
    8996:	84 4b f8 ff 	mov	r11,	-8(r4)	;0xfff8(r4)
	ADC10CTL0 &= ~ENC;
    899a:	1f 42 b0 01 	mov	&0x01b0,r15	
    899e:	3f f0 fd ff 	and	#-3,	r15	;#0xfffd
    89a2:	82 4f b0 01 	mov	r15,	&0x01b0	
	ADC10CTL0 &= ~(REFON + ADC10ON);	// turn off A/D to save power
    89a6:	1f 42 b0 01 	mov	&0x01b0,r15	
    89aa:	3f f0 cf ff 	and	#-49,	r15	;#0xffcf
    89ae:	82 4f b0 01 	mov	r15,	&0x01b0	

	volt = (result * 25) / 512;
    89b2:	1a 44 f6 ff 	mov	-10(r4),r10	;0xfff6(r4)
    89b6:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    89ba:	0c 4a       	mov	r10,	r12	
    89bc:	0d 4b       	mov	r11,	r13	
    89be:	0e 4c       	mov	r12,	r14	
    89c0:	0f 4d       	mov	r13,	r15	
    89c2:	0e 5e       	rla	r14		
    89c4:	0f 6f       	rlc	r15		
    89c6:	0e 5e       	rla	r14		
    89c8:	0f 6f       	rlc	r15		
    89ca:	0c 4e       	mov	r14,	r12	
    89cc:	0d 4f       	mov	r15,	r13	
    89ce:	0c 5a       	add	r10,	r12	
    89d0:	0d 6b       	addc	r11,	r13	
    89d2:	0e 4c       	mov	r12,	r14	
    89d4:	0f 4d       	mov	r13,	r15	
    89d6:	0e 5e       	rla	r14		
    89d8:	0f 6f       	rlc	r15		
    89da:	0e 5e       	rla	r14		
    89dc:	0f 6f       	rlc	r15		
    89de:	0e 5c       	add	r12,	r14	
    89e0:	0f 6d       	addc	r13,	r15	
    89e2:	0f 93       	tst	r15		
    89e4:	04 38       	jl	$+10     	;abs 0x89ee
    89e6:	1f 93       	cmp	#1,	r15	;r3 As==01
    89e8:	05 34       	jge	$+12     	;abs 0x89f4
    89ea:	0e 93       	tst	r14		
    89ec:	03 2c       	jc	$+8      	;abs 0x89f4
    89ee:	3e 50 ff 01 	add	#511,	r14	;#0x01ff
    89f2:	0f 63       	adc	r15		
    89f4:	8e 10       	swpb	r14		
    89f6:	8f 10       	swpb	r15		
    89f8:	4e ef       	xor.b	r15,	r14	
    89fa:	0e ef       	xor	r15,	r14	
    89fc:	8f 11       	sxt	r15		
    89fe:	0f 11       	rra	r15		
    8a00:	0e 10       	rrc	r14		
    8a02:	84 4e f4 ff 	mov	r14,	-12(r4)	;0xfff4(r4)
	return volt;
    8a06:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
}
    8a0a:	31 50 06 00 	add	#6,	r1	;#0x0006
    8a0e:	34 41       	pop	r4		
    8a10:	3a 41       	pop	r10		
    8a12:	3b 41       	pop	r11		
    8a14:	30 41       	ret			

00008a16 <CC2500_HW_GDO0_IRQ_ON_ASSERT>:
#define SIIF static inline int

#define GDOPORT(x) P2##x

SIVF CC2500_HW_GDO0_IRQ_ON_ASSERT(void)
{
    8a16:	04 12       	push	r4		
    8a18:	04 41       	mov	r1,	r4	
    8a1a:	24 53       	incd	r4		
	GDOPORT(IES) &= ~(GDO0_MASK);
    8a1c:	5f 42 2c 00 	mov.b	&0x002c,r15	
    8a20:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8a24:	c2 4f 2c 00 	mov.b	r15,	&0x002c	
}
    8a28:	34 41       	pop	r4		
    8a2a:	30 41       	ret			

00008a2c <CC2500_HW_GDO2_IRQ_ON_ASSERT>:

SIVF CC2500_HW_GDO2_IRQ_ON_ASSERT(void)
{
    8a2c:	04 12       	push	r4		
    8a2e:	04 41       	mov	r1,	r4	
    8a30:	24 53       	incd	r4		
	GDOPORT(IES) &= ~(GDO2_MASK);
    8a32:	5f 42 2c 00 	mov.b	&0x002c,r15	
    8a36:	7f f0 7f 00 	and.b	#127,	r15	;#0x007f
    8a3a:	c2 4f 2c 00 	mov.b	r15,	&0x002c	
}
    8a3e:	34 41       	pop	r4		
    8a40:	30 41       	ret			

00008a42 <CC2500_HW_GDO0_DINT>:
{
	GDOPORT(IES) |= GDO2_MASK;
}

SIVF CC2500_HW_GDO0_DINT(void)
{
    8a42:	04 12       	push	r4		
    8a44:	04 41       	mov	r1,	r4	
    8a46:	24 53       	incd	r4		
	GDOPORT(IE) &= ~(GDO0_MASK);
    8a48:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8a4c:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8a50:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
}
    8a54:	34 41       	pop	r4		
    8a56:	30 41       	ret			

00008a58 <CC2500_HW_GDO2_DINT>:

SIVF CC2500_HW_GDO2_DINT(void)
{
    8a58:	04 12       	push	r4		
    8a5a:	04 41       	mov	r1,	r4	
    8a5c:	24 53       	incd	r4		
	GDOPORT(IE) &= ~(GDO2_MASK);
    8a5e:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8a62:	7f f0 7f 00 	and.b	#127,	r15	;#0x007f
    8a66:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
}
    8a6a:	34 41       	pop	r4		
    8a6c:	30 41       	ret			

00008a6e <CC2500_HW_GDO0_EINT>:

SIVF CC2500_HW_GDO0_EINT(void)
{
    8a6e:	04 12       	push	r4		
    8a70:	04 41       	mov	r1,	r4	
    8a72:	24 53       	incd	r4		
	GDOPORT(IE) |= GDO0_MASK;
    8a74:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8a78:	7f d0 40 00 	bis.b	#64,	r15	;#0x0040
    8a7c:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
}
    8a80:	34 41       	pop	r4		
    8a82:	30 41       	ret			

00008a84 <CC2500_HW_GDO0_CLEAR_FLAG>:
{
	GDOPORT(IE) |= GDO2_MASK;
}

SIVF CC2500_HW_GDO0_CLEAR_FLAG(void)
{
    8a84:	04 12       	push	r4		
    8a86:	04 41       	mov	r1,	r4	
    8a88:	24 53       	incd	r4		
	GDOPORT(IFG) &= ~(GDO0_MASK);
    8a8a:	5f 42 2b 00 	mov.b	&0x002b,r15	
    8a8e:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8a92:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
}
    8a96:	34 41       	pop	r4		
    8a98:	30 41       	ret			

00008a9a <CC2500_HW_GDO2_CLEAR_FLAG>:

SIVF CC2500_HW_GDO2_CLEAR_FLAG(void)
{
    8a9a:	04 12       	push	r4		
    8a9c:	04 41       	mov	r1,	r4	
    8a9e:	24 53       	incd	r4		
	GDOPORT(IFG) &= ~(GDO2_MASK);
    8aa0:	5f 42 2b 00 	mov.b	&0x002b,r15	
    8aa4:	7f f0 7f 00 	and.b	#127,	r15	;#0x007f
    8aa8:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
}
    8aac:	34 41       	pop	r4		
    8aae:	30 41       	ret			

00008ab0 <CONFIG_GDO0_PIN_AS_INPUT>:
{
	return (GDOPORT(IN) >> GDO2_SHIFT) & 0x1;
}

SIVF CONFIG_GDO0_PIN_AS_INPUT(void)
{
    8ab0:	04 12       	push	r4		
    8ab2:	04 41       	mov	r1,	r4	
    8ab4:	24 53       	incd	r4		
	GDOPORT(SEL) &= ~(GDO0_MASK);
    8ab6:	5f 42 2e 00 	mov.b	&0x002e,r15	
    8aba:	7f f0 bf ff 	and.b	#-65,	r15	;#0xffbf
    8abe:	c2 4f 2e 00 	mov.b	r15,	&0x002e	
}
    8ac2:	34 41       	pop	r4		
    8ac4:	30 41       	ret			

00008ac6 <CC2500_HW_INIT>:
{
	return (GDOPORT(IN) & GDO0_MASK);
}

SIVF CC2500_HW_INIT(void)
{
    8ac6:	04 12       	push	r4		
    8ac8:	04 41       	mov	r1,	r4	
    8aca:	24 53       	incd	r4		
	GDOPORT(SEL) &= ~(GDO0_MASK | GDO2_MASK);
    8acc:	5f 42 2e 00 	mov.b	&0x002e,r15	
    8ad0:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8ad4:	c2 4f 2e 00 	mov.b	r15,	&0x002e	
	GDOPORT(DIR) &= ~(GDO0_MASK | GDO2_MASK);
    8ad8:	5f 42 2a 00 	mov.b	&0x002a,r15	
    8adc:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8ae0:	c2 4f 2a 00 	mov.b	r15,	&0x002a	
	GDOPORT(IE) &= ~(GDO0_MASK | GDO2_MASK);
    8ae4:	5f 42 2d 00 	mov.b	&0x002d,r15	
    8ae8:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8aec:	c2 4f 2d 00 	mov.b	r15,	&0x002d	
	GDOPORT(IES) &= ~(GDO0_MASK | GDO2_MASK);
    8af0:	5f 42 2c 00 	mov.b	&0x002c,r15	
    8af4:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8af8:	c2 4f 2c 00 	mov.b	r15,	&0x002c	
	GDOPORT(IFG) &= ~(GDO0_MASK | GDO2_MASK);
    8afc:	5f 42 2b 00 	mov.b	&0x002b,r15	
    8b00:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8b04:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
	GDOPORT(REN) |= (GDO0_MASK | GDO2_MASK);
    8b08:	5f 42 2f 00 	mov.b	&0x002f,r15	
    8b0c:	7f d0 c0 ff 	bis.b	#-64,	r15	;#0xffc0
    8b10:	c2 4f 2f 00 	mov.b	r15,	&0x002f	
}
    8b14:	34 41       	pop	r4		
    8b16:	30 41       	ret			

00008b18 <CC2500_SPI_TX>:
#define CC2500_SPI_ENABLE()         spi_select_radio()
#define CC2500_SPI_DISABLE()        spi_deselect_radio()
#define CC2500_HW_CHECK_MISO_HIGH() spi_check_miso_high()

void CC2500_SPI_TX(int x)
{
    8b18:	04 12       	push	r4		
    8b1a:	04 41       	mov	r1,	r4	
    8b1c:	24 53       	incd	r4		
    8b1e:	21 83       	decd	r1		
    8b20:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	cc2500_status_register = spi_tx_rx(x);
    8b24:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8b28:	b0 12 00 9b 	call	#0x9b00	
    8b2c:	4f 4f       	mov.b	r15,	r15	
    8b2e:	c2 4f 88 02 	mov.b	r15,	&0x0288	
}
    8b32:	21 53       	incd	r1		
    8b34:	34 41       	pop	r4		
    8b36:	30 41       	ret			

00008b38 <CC2500_SPI_STROBE>:

#define CC2500_SPI_RX() spi_rx()

void CC2500_SPI_STROBE(int s)
{
    8b38:	04 12       	push	r4		
    8b3a:	04 41       	mov	r1,	r4	
    8b3c:	24 53       	incd	r4		
    8b3e:	21 83       	decd	r1		
    8b40:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	CC2500_SPI_ENABLE();
    8b44:	b0 12 e4 9b 	call	#0x9be4	
	CC2500_SPI_TX(s | CC2500_REG_ACCESS_OP_WRITE |
    8b48:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8b4c:	b0 12 18 8b 	call	#0x8b18	
		      CC2500_REG_ACCESS_NOBURST);
	CC2500_SPI_DISABLE();
    8b50:	b0 12 fa 9b 	call	#0x9bfa	
}
    8b54:	21 53       	incd	r1		
    8b56:	34 41       	pop	r4		
    8b58:	30 41       	ret			

00008b5a <CC2500_SPI_WREG>:

void CC2500_SPI_WREG(int a, int v)
{
    8b5a:	04 12       	push	r4		
    8b5c:	04 41       	mov	r1,	r4	
    8b5e:	24 53       	incd	r4		
    8b60:	21 82       	sub	#4,	r1	;r2 As==10
    8b62:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8b66:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	CC2500_SPI_ENABLE();
    8b6a:	b0 12 e4 9b 	call	#0x9be4	
	CC2500_SPI_TX(a | CC2500_REG_ACCESS_OP_WRITE |
    8b6e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    8b72:	b0 12 18 8b 	call	#0x8b18	
		      CC2500_REG_ACCESS_NOBURST);
	CC2500_SPI_TX(v);
    8b76:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8b7a:	b0 12 18 8b 	call	#0x8b18	
	CC2500_SPI_DISABLE();
    8b7e:	b0 12 fa 9b 	call	#0x9bfa	
}
    8b82:	21 52       	add	#4,	r1	;r2 As==10
    8b84:	34 41       	pop	r4		
    8b86:	30 41       	ret			

00008b88 <CC2500_SPI_RREG>:

char CC2500_SPI_RREG(int a)
{
    8b88:	04 12       	push	r4		
    8b8a:	04 41       	mov	r1,	r4	
    8b8c:	24 53       	incd	r4		
    8b8e:	21 82       	sub	#4,	r1	;r2 As==10
    8b90:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	char r;
	CC2500_SPI_ENABLE();
    8b94:	b0 12 e4 9b 	call	#0x9be4	
	CC2500_SPI_TX(a | CC2500_REG_ACCESS_OP_READ |
    8b98:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8b9c:	3f d0 80 00 	bis	#128,	r15	;#0x0080
    8ba0:	b0 12 18 8b 	call	#0x8b18	
		      CC2500_REG_ACCESS_NOBURST);
	r = CC2500_SPI_RX();
    8ba4:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8ba8:	b0 12 00 9b 	call	#0x9b00	
    8bac:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
	CC2500_SPI_DISABLE();
    8bb0:	b0 12 fa 9b 	call	#0x9bfa	
	return r;
    8bb4:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
}
    8bb8:	21 52       	add	#4,	r1	;r2 As==10
    8bba:	34 41       	pop	r4		
    8bbc:	30 41       	ret			

00008bbe <CC2500_SPI_ROREG>:

char CC2500_SPI_ROREG(int a)
{
    8bbe:	04 12       	push	r4		
    8bc0:	04 41       	mov	r1,	r4	
    8bc2:	24 53       	incd	r4		
    8bc4:	21 82       	sub	#4,	r1	;r2 As==10
    8bc6:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	char r;
	CC2500_SPI_ENABLE();
    8bca:	b0 12 e4 9b 	call	#0x9be4	
	CC2500_SPI_TX(a | CC2500_REG_ACCESS_OP_READ | CC2500_REG_ACCESS_BURST);
    8bce:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8bd2:	3f d0 c0 00 	bis	#192,	r15	;#0x00c0
    8bd6:	b0 12 18 8b 	call	#0x8b18	
	r = CC2500_SPI_RX();
    8bda:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8bde:	b0 12 00 9b 	call	#0x9b00	
    8be2:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
	CC2500_SPI_DISABLE();
    8be6:	b0 12 fa 9b 	call	#0x9bfa	
	return r;
    8bea:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
}
    8bee:	21 52       	add	#4,	r1	;r2 As==10
    8bf0:	34 41       	pop	r4		
    8bf2:	30 41       	ret			

00008bf4 <CC2500_SPI_TX_BYTE>:

void CC2500_SPI_TX_BYTE(int a, int v)
{
    8bf4:	04 12       	push	r4		
    8bf6:	04 41       	mov	r1,	r4	
    8bf8:	24 53       	incd	r4		
    8bfa:	21 82       	sub	#4,	r1	;r2 As==10
    8bfc:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    8c00:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	CC2500_SPI_ENABLE();
    8c04:	b0 12 e4 9b 	call	#0x9be4	
	CC2500_SPI_TX(a);
    8c08:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    8c0c:	b0 12 18 8b 	call	#0x8b18	
	CC2500_SPI_TX(v);
    8c10:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8c14:	b0 12 18 8b 	call	#0x8b18	
	CC2500_SPI_DISABLE();
    8c18:	b0 12 fa 9b 	call	#0x9bfa	
}
    8c1c:	21 52       	add	#4,	r1	;r2 As==10
    8c1e:	34 41       	pop	r4		
    8c20:	30 41       	ret			

00008c22 <CC2500_SPI_RX_BYTE>:

char CC2500_SPI_RX_BYTE(int a)
{
    8c22:	04 12       	push	r4		
    8c24:	04 41       	mov	r1,	r4	
    8c26:	24 53       	incd	r4		
    8c28:	21 82       	sub	#4,	r1	;r2 As==10
    8c2a:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	char r;
	CC2500_SPI_ENABLE();
    8c2e:	b0 12 e4 9b 	call	#0x9be4	
	CC2500_SPI_TX(a | CC2500_REG_ACCESS_OP_READ);
    8c32:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8c36:	3f d0 80 00 	bis	#128,	r15	;#0x0080
    8c3a:	b0 12 18 8b 	call	#0x8b18	
	r = CC2500_SPI_RX();
    8c3e:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8c42:	b0 12 00 9b 	call	#0x9b00	
    8c46:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
	CC2500_SPI_DISABLE();
    8c4a:	b0 12 fa 9b 	call	#0x9bfa	
	return r;
    8c4e:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
}
    8c52:	21 52       	add	#4,	r1	;r2 As==10
    8c54:	34 41       	pop	r4		
    8c56:	30 41       	ret			

00008c58 <CC2500_SPI_TX_BURST>:

void CC2500_SPI_TX_BURST(int addr, const char *val, int len)
{
    8c58:	04 12       	push	r4		
    8c5a:	04 41       	mov	r1,	r4	
    8c5c:	24 53       	incd	r4		
    8c5e:	31 82       	sub	#8,	r1	;r2 As==11
    8c60:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    8c64:	84 4e fa ff 	mov	r14,	-6(r4)	;0xfffa(r4)
    8c68:	84 4d fc ff 	mov	r13,	-4(r4)	;0xfffc(r4)
	uint8_t cnt = 0;
    8c6c:	c4 43 f6 ff 	mov.b	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
	CC2500_SPI_ENABLE();
    8c70:	b0 12 e4 9b 	call	#0x9be4	
	CC2500_SPI_TX(addr | CC2500_REG_ACCESS_BURST);
    8c74:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    8c78:	3f d0 40 00 	bis	#64,	r15	;#0x0040
    8c7c:	b0 12 18 8b 	call	#0x8b18	
	for (cnt = 0; cnt < (len); cnt++) {
    8c80:	c4 43 f6 ff 	mov.b	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    8c84:	0a 3c       	jmp	$+22     	;abs 0x8c9a
		CC2500_SPI_TX(val[cnt]);
    8c86:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    8c8a:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    8c8e:	6f 4f       	mov.b	@r15,	r15	
    8c90:	8f 11       	sxt	r15		
    8c92:	b0 12 18 8b 	call	#0x8b18	
void CC2500_SPI_TX_BURST(int addr, const char *val, int len)
{
	uint8_t cnt = 0;
	CC2500_SPI_ENABLE();
	CC2500_SPI_TX(addr | CC2500_REG_ACCESS_BURST);
	for (cnt = 0; cnt < (len); cnt++) {
    8c96:	d4 53 f6 ff 	inc.b	-10(r4)	;0xfff6(r4)
    8c9a:	5f 44 f6 ff 	mov.b	-10(r4),r15	;0xfff6(r4)
    8c9e:	1f 94 fc ff 	cmp	-4(r4),	r15	;0xfffc(r4)
    8ca2:	f1 3b       	jl	$-28     	;abs 0x8c86
		CC2500_SPI_TX(val[cnt]);
	}
	CC2500_SPI_DISABLE();
    8ca4:	b0 12 fa 9b 	call	#0x9bfa	
}
    8ca8:	31 52       	add	#8,	r1	;r2 As==11
    8caa:	34 41       	pop	r4		
    8cac:	30 41       	ret			

00008cae <CC2500_SPI_RX_BURST>:

void CC2500_SPI_RX_BURST(int addr, uint8_t * val, int len)
{
    8cae:	0b 12       	push	r11		
    8cb0:	04 12       	push	r4		
    8cb2:	04 41       	mov	r1,	r4	
    8cb4:	24 52       	add	#4,	r4	;r2 As==10
    8cb6:	31 82       	sub	#8,	r1	;r2 As==11
    8cb8:	84 4f f6 ff 	mov	r15,	-10(r4)	;0xfff6(r4)
    8cbc:	84 4e f8 ff 	mov	r14,	-8(r4)	;0xfff8(r4)
    8cc0:	84 4d fa ff 	mov	r13,	-6(r4)	;0xfffa(r4)
	uint8_t cnt = 0;
    8cc4:	c4 43 f4 ff 	mov.b	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
	CC2500_SPI_ENABLE();
    8cc8:	b0 12 e4 9b 	call	#0x9be4	
	CC2500_SPI_TX(addr | CC2500_REG_ACCESS_OP_READ |
    8ccc:	1f 44 f6 ff 	mov	-10(r4),r15	;0xfff6(r4)
    8cd0:	3f d0 c0 00 	bis	#192,	r15	;#0x00c0
    8cd4:	b0 12 18 8b 	call	#0x8b18	
		      CC2500_REG_ACCESS_BURST);
	for (cnt = 0; cnt < (len); cnt++) {
    8cd8:	c4 43 f4 ff 	mov.b	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
    8cdc:	0e 3c       	jmp	$+30     	;abs 0x8cfa
		val[cnt] = (uint8_t) CC2500_SPI_RX();
    8cde:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    8ce2:	1b 44 f8 ff 	mov	-8(r4),	r11	;0xfff8(r4)
    8ce6:	0b 5f       	add	r15,	r11	
    8ce8:	3f 40 55 00 	mov	#85,	r15	;#0x0055
    8cec:	b0 12 00 9b 	call	#0x9b00	
    8cf0:	4f 4f       	mov.b	r15,	r15	
    8cf2:	cb 4f 00 00 	mov.b	r15,	0(r11)	;0x0000(r11)
{
	uint8_t cnt = 0;
	CC2500_SPI_ENABLE();
	CC2500_SPI_TX(addr | CC2500_REG_ACCESS_OP_READ |
		      CC2500_REG_ACCESS_BURST);
	for (cnt = 0; cnt < (len); cnt++) {
    8cf6:	d4 53 f4 ff 	inc.b	-12(r4)	;0xfff4(r4)
    8cfa:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    8cfe:	1f 94 fa ff 	cmp	-6(r4),	r15	;0xfffa(r4)
    8d02:	ed 3b       	jl	$-36     	;abs 0x8cde
		val[cnt] = (uint8_t) CC2500_SPI_RX();
	}
	CC2500_SPI_DISABLE();
    8d04:	b0 12 fa 9b 	call	#0x9bfa	
}
    8d08:	31 52       	add	#8,	r1	;r2 As==11
    8d0a:	34 41       	pop	r4		
    8d0c:	3b 41       	pop	r11		
    8d0e:	30 41       	ret			

00008d10 <CC2500_SPI_RX_FIFO_BYTE>:

#define CC2500_SPI_TX_FIFO_BYTE(val)      CC2500_SPI_TX_BYTE (CC2500_DATA_FIFO_ADDR,val)
#define CC2500_SPI_TX_FIFO_BURST(val,len) CC2500_SPI_TX_BURST(CC2500_DATA_FIFO_ADDR,val,len)

char CC2500_SPI_RX_FIFO_BYTE()
{
    8d10:	04 12       	push	r4		
    8d12:	04 41       	mov	r1,	r4	
    8d14:	24 53       	incd	r4		
    8d16:	21 83       	decd	r1		
	unsigned char r;
	r = CC2500_SPI_RX_BYTE(CC2500_DATA_FIFO_ADDR);
    8d18:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    8d1c:	b0 12 22 8c 	call	#0x8c22	
    8d20:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	return r;
    8d24:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
}
    8d28:	21 53       	incd	r1		
    8d2a:	34 41       	pop	r4		
    8d2c:	30 41       	ret			

00008d2e <cc2500_wait_status>:

#define cc2500_get_state_from_status()   ((cc2500_status_register >> 4) & 0x07)
#define cc2500_update_status()           CC2500_SPI_STROBE(CC2500_STROBE_SNOP)

void cc2500_wait_status(uint8_t state)
{
    8d2e:	04 12       	push	r4		
    8d30:	04 41       	mov	r1,	r4	
    8d32:	24 53       	incd	r4		
    8d34:	21 82       	sub	#4,	r1	;r2 As==10
    8d36:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	uint8_t s;
	do {
		cc2500_update_status();
    8d3a:	3f 40 3d 00 	mov	#61,	r15	;#0x003d
    8d3e:	b0 12 38 8b 	call	#0x8b38	
		s = cc2500_get_state_from_status();
    8d42:	5f 42 88 02 	mov.b	&0x0288,r15	
    8d46:	4f 4f       	mov.b	r15,	r15	
    8d48:	4f 4f       	mov.b	r15,	r15	
    8d4a:	12 c3       	clrc			
    8d4c:	4f 10       	rrc.b	r15		
    8d4e:	12 c3       	clrc			
    8d50:	4f 10       	rrc.b	r15		
    8d52:	12 c3       	clrc			
    8d54:	4f 10       	rrc.b	r15		
    8d56:	12 c3       	clrc			
    8d58:	4f 10       	rrc.b	r15		
    8d5a:	4e 4f       	mov.b	r15,	r14	
    8d5c:	7e f0 07 00 	and.b	#7,	r14	;#0x0007
    8d60:	c4 4e fa ff 	mov.b	r14,	-6(r4)	;0xfffa(r4)
	} while (s != state);
    8d64:	d4 94 fa ff 	cmp.b	-6(r4),	-4(r4)	;0xfffa(r4), 0xfffc(r4)
    8d68:	fc ff 
    8d6a:	e7 23       	jnz	$-48     	;abs 0x8d3a
}
    8d6c:	21 52       	add	#4,	r1	;r2 As==10
    8d6e:	34 41       	pop	r4		
    8d70:	30 41       	ret			

00008d72 <cc2500_gdo0_set_signal>:

void cc2500_gdo0_set_signal(uint8_t signal)
{
    8d72:	04 12       	push	r4		
    8d74:	04 41       	mov	r1,	r4	
    8d76:	24 53       	incd	r4		
    8d78:	21 82       	sub	#4,	r1	;r2 As==10
    8d7a:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	uint8_t reg = signal & 0x3F;
    8d7e:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    8d82:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8d86:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
	cc2500_gdo0_cfg = reg;
    8d8a:	d2 44 fa ff 	mov.b	-6(r4),	&0x0284	;0xfffa(r4)
    8d8e:	84 02 
	CC2500_SPI_WREG(CC2500_REG_IOCFG0, reg);
    8d90:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    8d94:	0e 4f       	mov	r15,	r14	
    8d96:	2f 43       	mov	#2,	r15	;r3 As==10
    8d98:	b0 12 5a 8b 	call	#0x8b5a	
}
    8d9c:	21 52       	add	#4,	r1	;r2 As==10
    8d9e:	34 41       	pop	r4		
    8da0:	30 41       	ret			

00008da2 <cc2500_gdo2_set_signal>:

void cc2500_gdo2_set_signal(uint8_t signal)
{
    8da2:	04 12       	push	r4		
    8da4:	04 41       	mov	r1,	r4	
    8da6:	24 53       	incd	r4		
    8da8:	21 82       	sub	#4,	r1	;r2 As==10
    8daa:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	uint8_t reg = signal & 0x3F;
    8dae:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    8db2:	7f f0 3f 00 	and.b	#63,	r15	;#0x003f
    8db6:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
	cc2500_gdo2_cfg = reg;
    8dba:	d2 44 fa ff 	mov.b	-6(r4),	&0x0280	;0xfffa(r4)
    8dbe:	80 02 
	CC2500_SPI_WREG(CC2500_REG_IOCFG2, reg);
    8dc0:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    8dc4:	0e 4f       	mov	r15,	r14	
    8dc6:	0f 43       	clr	r15		
    8dc8:	b0 12 5a 8b 	call	#0x8b5a	
}
    8dcc:	21 52       	add	#4,	r1	;r2 As==10
    8dce:	34 41       	pop	r4		
    8dd0:	30 41       	ret			

00008dd2 <cc2500_set_fifo_threshold>:

void cc2500_set_fifo_threshold(uint8_t thr)
{
    8dd2:	04 12       	push	r4		
    8dd4:	04 41       	mov	r1,	r4	
    8dd6:	24 53       	incd	r4		
    8dd8:	21 82       	sub	#4,	r1	;r2 As==10
    8dda:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	uint8_t reg;
	reg = (thr & 0x0F);
    8dde:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    8de2:	7f f0 0f 00 	and.b	#15,	r15	;#0x000f
    8de6:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
	CC2500_SPI_WREG(CC2500_REG_FIFOTHR, reg);
    8dea:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    8dee:	0e 4f       	mov	r15,	r14	
    8df0:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    8df4:	b0 12 5a 8b 	call	#0x8b5a	
}
    8df8:	21 52       	add	#4,	r1	;r2 As==10
    8dfa:	34 41       	pop	r4		
    8dfc:	30 41       	ret			

00008dfe <cc2500_check_tx_underflow>:
/* **************************************************
 * RX overflow / TX underflow
 * **************************************************/

static inline int cc2500_check_tx_underflow(void)
{
    8dfe:	04 12       	push	r4		
    8e00:	04 41       	mov	r1,	r4	
    8e02:	24 53       	incd	r4		
    8e04:	21 83       	decd	r1		
	int ret;
	cc2500_update_status();
    8e06:	3f 40 3d 00 	mov	#61,	r15	;#0x003d
    8e0a:	b0 12 38 8b 	call	#0x8b38	
	ret =
	    (cc2500_get_state_from_status() == CC2500_STATUS_TXFIFO_UNDERFLOW);
    8e0e:	5f 42 88 02 	mov.b	&0x0288,r15	
    8e12:	4f 4f       	mov.b	r15,	r15	
    8e14:	4f 4f       	mov.b	r15,	r15	
    8e16:	12 c3       	clrc			
    8e18:	4f 10       	rrc.b	r15		
    8e1a:	12 c3       	clrc			
    8e1c:	4f 10       	rrc.b	r15		
    8e1e:	12 c3       	clrc			
    8e20:	4f 10       	rrc.b	r15		
    8e22:	12 c3       	clrc			
    8e24:	4f 10       	rrc.b	r15		
    8e26:	4f 4f       	mov.b	r15,	r15	
    8e28:	0e 4f       	mov	r15,	r14	
    8e2a:	3e f0 07 00 	and	#7,	r14	;#0x0007

static inline int cc2500_check_tx_underflow(void)
{
	int ret;
	cc2500_update_status();
	ret =
    8e2e:	1f 43       	mov	#1,	r15	;r3 As==01
    8e30:	3e 90 07 00 	cmp	#7,	r14	;#0x0007
    8e34:	01 24       	jz	$+4      	;abs 0x8e38
    8e36:	0f 43       	clr	r15		
    8e38:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	    (cc2500_get_state_from_status() == CC2500_STATUS_TXFIFO_UNDERFLOW);
	return ret;
    8e3c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
}
    8e40:	21 53       	incd	r1		
    8e42:	34 41       	pop	r4		
    8e44:	30 41       	ret			

00008e46 <cc2500_check_rx_overflow>:

static inline int cc2500_check_rx_overflow(void)
{
    8e46:	04 12       	push	r4		
    8e48:	04 41       	mov	r1,	r4	
    8e4a:	24 53       	incd	r4		
    8e4c:	21 83       	decd	r1		
	char ret;
	cc2500_update_status();
    8e4e:	3f 40 3d 00 	mov	#61,	r15	;#0x003d
    8e52:	b0 12 38 8b 	call	#0x8b38	
	ret = (cc2500_get_state_from_status() == CC2500_STATUS_RXFIFO_OVERFLOW);
    8e56:	5f 42 88 02 	mov.b	&0x0288,r15	
    8e5a:	4f 4f       	mov.b	r15,	r15	
    8e5c:	4f 4f       	mov.b	r15,	r15	
    8e5e:	12 c3       	clrc			
    8e60:	4f 10       	rrc.b	r15		
    8e62:	12 c3       	clrc			
    8e64:	4f 10       	rrc.b	r15		
    8e66:	12 c3       	clrc			
    8e68:	4f 10       	rrc.b	r15		
    8e6a:	12 c3       	clrc			
    8e6c:	4f 10       	rrc.b	r15		
    8e6e:	4f 4f       	mov.b	r15,	r15	
    8e70:	0e 4f       	mov	r15,	r14	
    8e72:	3e f0 07 00 	and	#7,	r14	;#0x0007
    8e76:	5f 43       	mov.b	#1,	r15	;r3 As==01
    8e78:	3e 90 06 00 	cmp	#6,	r14	;#0x0006
    8e7c:	01 24       	jz	$+4      	;abs 0x8e80
    8e7e:	4f 43       	clr.b	r15		
    8e80:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	return ret;
    8e84:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    8e88:	8f 11       	sxt	r15		
}
    8e8a:	21 53       	incd	r1		
    8e8c:	34 41       	pop	r4		
    8e8e:	30 41       	ret			

00008e90 <cc2500_check_fifo_xflow_flush>:

#define CC2500_FLUSH_RX()  CC2500_SPI_STROBE(CC2500_STROBE_SFRX)
#define CC2500_FLUSH_TX()  CC2500_SPI_STROBE(CC2500_STROBE_SFTX)

void cc2500_check_fifo_xflow_flush(void)
{
    8e90:	04 12       	push	r4		
    8e92:	04 41       	mov	r1,	r4	
    8e94:	24 53       	incd	r4		
	if (cc2500_check_tx_underflow()) {
    8e96:	b0 12 fe 8d 	call	#0x8dfe	
    8e9a:	0f 93       	tst	r15		
    8e9c:	04 24       	jz	$+10     	;abs 0x8ea6
		CC2500_FLUSH_TX();
    8e9e:	3f 40 3b 00 	mov	#59,	r15	;#0x003b
    8ea2:	b0 12 38 8b 	call	#0x8b38	
	}
	if (cc2500_check_rx_overflow()) {
    8ea6:	b0 12 46 8e 	call	#0x8e46	
    8eaa:	0f 93       	tst	r15		
    8eac:	04 24       	jz	$+10     	;abs 0x8eb6
		CC2500_FLUSH_RX();
    8eae:	3f 40 3a 00 	mov	#58,	r15	;#0x003a
    8eb2:	b0 12 38 8b 	call	#0x8b38	
	}
}
    8eb6:	34 41       	pop	r4		
    8eb8:	30 41       	ret			

00008eba <cc2500_configure>:
 ***************************************************************/

#define PATABLE_VALUE     0xFE

void cc2500_configure(RF_SETTINGS const *cfg)
{
    8eba:	04 12       	push	r4		
    8ebc:	04 41       	mov	r1,	r4	
    8ebe:	24 53       	incd	r4		
    8ec0:	21 83       	decd	r1		
    8ec2:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	/* */
	CC2500_SPI_WREG(CC2500_REG_FSCTRL1, cfg->fsctrl1);
    8ec6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8eca:	6f 4f       	mov.b	@r15,	r15	
    8ecc:	4f 4f       	mov.b	r15,	r15	
    8ece:	0e 4f       	mov	r15,	r14	
    8ed0:	3f 40 0b 00 	mov	#11,	r15	;#0x000b
    8ed4:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_FSCTRL0, cfg->fsctrl0);
    8ed8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8edc:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    8ee0:	4f 4f       	mov.b	r15,	r15	
    8ee2:	0e 4f       	mov	r15,	r14	
    8ee4:	3f 40 0c 00 	mov	#12,	r15	;#0x000c
    8ee8:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_FREQ2, cfg->freq2);
    8eec:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8ef0:	5f 4f 02 00 	mov.b	2(r15),	r15	;0x0002(r15)
    8ef4:	4f 4f       	mov.b	r15,	r15	
    8ef6:	0e 4f       	mov	r15,	r14	
    8ef8:	3f 40 0d 00 	mov	#13,	r15	;#0x000d
    8efc:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_FREQ1, cfg->freq1);
    8f00:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f04:	5f 4f 03 00 	mov.b	3(r15),	r15	;0x0003(r15)
    8f08:	4f 4f       	mov.b	r15,	r15	
    8f0a:	0e 4f       	mov	r15,	r14	
    8f0c:	3f 40 0e 00 	mov	#14,	r15	;#0x000e
    8f10:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_FREQ0, cfg->freq0);
    8f14:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f18:	5f 4f 04 00 	mov.b	4(r15),	r15	;0x0004(r15)
    8f1c:	4f 4f       	mov.b	r15,	r15	
    8f1e:	0e 4f       	mov	r15,	r14	
    8f20:	3f 40 0f 00 	mov	#15,	r15	;#0x000f
    8f24:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_MDMCFG4, cfg->mdmcfg4);
    8f28:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f2c:	5f 4f 05 00 	mov.b	5(r15),	r15	;0x0005(r15)
    8f30:	4f 4f       	mov.b	r15,	r15	
    8f32:	0e 4f       	mov	r15,	r14	
    8f34:	3f 40 10 00 	mov	#16,	r15	;#0x0010
    8f38:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_MDMCFG3, cfg->mdmcfg3);
    8f3c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f40:	5f 4f 06 00 	mov.b	6(r15),	r15	;0x0006(r15)
    8f44:	4f 4f       	mov.b	r15,	r15	
    8f46:	0e 4f       	mov	r15,	r14	
    8f48:	3f 40 11 00 	mov	#17,	r15	;#0x0011
    8f4c:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_MDMCFG2, cfg->mdmcfg2);
    8f50:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f54:	5f 4f 07 00 	mov.b	7(r15),	r15	;0x0007(r15)
    8f58:	4f 4f       	mov.b	r15,	r15	
    8f5a:	0e 4f       	mov	r15,	r14	
    8f5c:	3f 40 12 00 	mov	#18,	r15	;#0x0012
    8f60:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_MDMCFG1, cfg->mdmcfg1);
    8f64:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f68:	5f 4f 08 00 	mov.b	8(r15),	r15	;0x0008(r15)
    8f6c:	4f 4f       	mov.b	r15,	r15	
    8f6e:	0e 4f       	mov	r15,	r14	
    8f70:	3f 40 13 00 	mov	#19,	r15	;#0x0013
    8f74:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_MDMCFG0, cfg->mdmcfg0);
    8f78:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f7c:	5f 4f 09 00 	mov.b	9(r15),	r15	;0x0009(r15)
    8f80:	4f 4f       	mov.b	r15,	r15	
    8f82:	0e 4f       	mov	r15,	r14	
    8f84:	3f 40 14 00 	mov	#20,	r15	;#0x0014
    8f88:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_CHANNR, cfg->channr);
    8f8c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8f90:	5f 4f 0a 00 	mov.b	10(r15),r15	;0x000a(r15)
    8f94:	4f 4f       	mov.b	r15,	r15	
    8f96:	0e 4f       	mov	r15,	r14	
    8f98:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    8f9c:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_DEVIATN, cfg->deviatn);
    8fa0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8fa4:	5f 4f 0b 00 	mov.b	11(r15),r15	;0x000b(r15)
    8fa8:	4f 4f       	mov.b	r15,	r15	
    8faa:	0e 4f       	mov	r15,	r14	
    8fac:	3f 40 15 00 	mov	#21,	r15	;#0x0015
    8fb0:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_FREND1, cfg->frend1);
    8fb4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8fb8:	5f 4f 0c 00 	mov.b	12(r15),r15	;0x000c(r15)
    8fbc:	4f 4f       	mov.b	r15,	r15	
    8fbe:	0e 4f       	mov	r15,	r14	
    8fc0:	3f 40 21 00 	mov	#33,	r15	;#0x0021
    8fc4:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_FREND0, cfg->frend0);
    8fc8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8fcc:	5f 4f 0d 00 	mov.b	13(r15),r15	;0x000d(r15)
    8fd0:	4f 4f       	mov.b	r15,	r15	
    8fd2:	0e 4f       	mov	r15,	r14	
    8fd4:	3f 40 22 00 	mov	#34,	r15	;#0x0022
    8fd8:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_MCSM0, cfg->mcsm0);
    8fdc:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8fe0:	5f 4f 0e 00 	mov.b	14(r15),r15	;0x000e(r15)
    8fe4:	4f 4f       	mov.b	r15,	r15	
    8fe6:	0e 4f       	mov	r15,	r14	
    8fe8:	3f 40 18 00 	mov	#24,	r15	;#0x0018
    8fec:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_FOCCFG, cfg->foccfg);
    8ff0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    8ff4:	5f 4f 0f 00 	mov.b	15(r15),r15	;0x000f(r15)
    8ff8:	4f 4f       	mov.b	r15,	r15	
    8ffa:	0e 4f       	mov	r15,	r14	
    8ffc:	3f 40 19 00 	mov	#25,	r15	;#0x0019
    9000:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_BSCFG, cfg->bscfg);
    9004:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9008:	5f 4f 10 00 	mov.b	16(r15),r15	;0x0010(r15)
    900c:	4f 4f       	mov.b	r15,	r15	
    900e:	0e 4f       	mov	r15,	r14	
    9010:	3f 40 1a 00 	mov	#26,	r15	;#0x001a
    9014:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_AGCCTRL2, cfg->agcctrl2);
    9018:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    901c:	5f 4f 11 00 	mov.b	17(r15),r15	;0x0011(r15)
    9020:	4f 4f       	mov.b	r15,	r15	
    9022:	0e 4f       	mov	r15,	r14	
    9024:	3f 40 1b 00 	mov	#27,	r15	;#0x001b
    9028:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_AGCCTRL1, cfg->agcctrl1);
    902c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9030:	5f 4f 12 00 	mov.b	18(r15),r15	;0x0012(r15)
    9034:	4f 4f       	mov.b	r15,	r15	
    9036:	0e 4f       	mov	r15,	r14	
    9038:	3f 40 1c 00 	mov	#28,	r15	;#0x001c
    903c:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_AGCCTRL0, cfg->agcctrl0);
    9040:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9044:	5f 4f 13 00 	mov.b	19(r15),r15	;0x0013(r15)
    9048:	4f 4f       	mov.b	r15,	r15	
    904a:	0e 4f       	mov	r15,	r14	
    904c:	3f 40 1d 00 	mov	#29,	r15	;#0x001d
    9050:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_FSCAL3, cfg->fscal3);
    9054:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9058:	5f 4f 14 00 	mov.b	20(r15),r15	;0x0014(r15)
    905c:	4f 4f       	mov.b	r15,	r15	
    905e:	0e 4f       	mov	r15,	r14	
    9060:	3f 40 23 00 	mov	#35,	r15	;#0x0023
    9064:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_FSCAL2, cfg->fscal2);
    9068:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    906c:	5f 4f 15 00 	mov.b	21(r15),r15	;0x0015(r15)
    9070:	4f 4f       	mov.b	r15,	r15	
    9072:	0e 4f       	mov	r15,	r14	
    9074:	3f 40 24 00 	mov	#36,	r15	;#0x0024
    9078:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_FSCAL1, cfg->fscal1);
    907c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9080:	5f 4f 16 00 	mov.b	22(r15),r15	;0x0016(r15)
    9084:	4f 4f       	mov.b	r15,	r15	
    9086:	0e 4f       	mov	r15,	r14	
    9088:	3f 40 25 00 	mov	#37,	r15	;#0x0025
    908c:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_FSCAL0, cfg->fscal0);
    9090:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9094:	5f 4f 17 00 	mov.b	23(r15),r15	;0x0017(r15)
    9098:	4f 4f       	mov.b	r15,	r15	
    909a:	0e 4f       	mov	r15,	r14	
    909c:	3f 40 26 00 	mov	#38,	r15	;#0x0026
    90a0:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_FSTEST, cfg->fstest);
    90a4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    90a8:	5f 4f 18 00 	mov.b	24(r15),r15	;0x0018(r15)
    90ac:	4f 4f       	mov.b	r15,	r15	
    90ae:	0e 4f       	mov	r15,	r14	
    90b0:	3f 40 29 00 	mov	#41,	r15	;#0x0029
    90b4:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_TEST2, cfg->test2);
    90b8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    90bc:	5f 4f 19 00 	mov.b	25(r15),r15	;0x0019(r15)
    90c0:	4f 4f       	mov.b	r15,	r15	
    90c2:	0e 4f       	mov	r15,	r14	
    90c4:	3f 40 2c 00 	mov	#44,	r15	;#0x002c
    90c8:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_TEST1, cfg->test1);
    90cc:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    90d0:	5f 4f 1a 00 	mov.b	26(r15),r15	;0x001a(r15)
    90d4:	4f 4f       	mov.b	r15,	r15	
    90d6:	0e 4f       	mov	r15,	r14	
    90d8:	3f 40 2d 00 	mov	#45,	r15	;#0x002d
    90dc:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_TEST0, cfg->test0);
    90e0:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    90e4:	5f 4f 1b 00 	mov.b	27(r15),r15	;0x001b(r15)
    90e8:	4f 4f       	mov.b	r15,	r15	
    90ea:	0e 4f       	mov	r15,	r14	
    90ec:	3f 40 2e 00 	mov	#46,	r15	;#0x002e
    90f0:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_FIFOTHR, cfg->fifothr);
    90f4:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    90f8:	5f 4f 1c 00 	mov.b	28(r15),r15	;0x001c(r15)
    90fc:	4f 4f       	mov.b	r15,	r15	
    90fe:	0e 4f       	mov	r15,	r14	
    9100:	3f 40 03 00 	mov	#3,	r15	;#0x0003
    9104:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_IOCFG2, cfg->iocfg2);
    9108:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    910c:	5f 4f 1d 00 	mov.b	29(r15),r15	;0x001d(r15)
    9110:	4f 4f       	mov.b	r15,	r15	
    9112:	0e 4f       	mov	r15,	r14	
    9114:	0f 43       	clr	r15		
    9116:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_IOCFG0, cfg->iocfg0d);
    911a:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    911e:	5f 4f 1e 00 	mov.b	30(r15),r15	;0x001e(r15)
    9122:	4f 4f       	mov.b	r15,	r15	
    9124:	0e 4f       	mov	r15,	r14	
    9126:	2f 43       	mov	#2,	r15	;r3 As==10
    9128:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_PKTCTRL1, cfg->pktctrl1);
    912c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9130:	5f 4f 1f 00 	mov.b	31(r15),r15	;0x001f(r15)
    9134:	4f 4f       	mov.b	r15,	r15	
    9136:	0e 4f       	mov	r15,	r14	
    9138:	3f 40 07 00 	mov	#7,	r15	;#0x0007
    913c:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_PKTCTRL0, cfg->pktctrl0);
    9140:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9144:	5f 4f 20 00 	mov.b	32(r15),r15	;0x0020(r15)
    9148:	4f 4f       	mov.b	r15,	r15	
    914a:	0e 4f       	mov	r15,	r14	
    914c:	3f 42       	mov	#8,	r15	;r2 As==11
    914e:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_ADDR, cfg->addr);
    9152:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9156:	5f 4f 21 00 	mov.b	33(r15),r15	;0x0021(r15)
    915a:	4f 4f       	mov.b	r15,	r15	
    915c:	0e 4f       	mov	r15,	r14	
    915e:	3f 40 09 00 	mov	#9,	r15	;#0x0009
    9162:	b0 12 5a 8b 	call	#0x8b5a	
	CC2500_SPI_WREG(CC2500_REG_PKTLEN, cfg->pktlen);
    9166:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    916a:	5f 4f 22 00 	mov.b	34(r15),r15	;0x0022(r15)
    916e:	4f 4f       	mov.b	r15,	r15	
    9170:	0e 4f       	mov	r15,	r14	
    9172:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    9176:	b0 12 5a 8b 	call	#0x8b5a	

	CC2500_SPI_WREG(CC2500_PATABLE_ADDR, PATABLE_VALUE);
    917a:	3e 40 fe 00 	mov	#254,	r14	;#0x00fe
    917e:	3f 40 3e 00 	mov	#62,	r15	;#0x003e
    9182:	b0 12 5a 8b 	call	#0x8b5a	
     *******************/

	// cc2500_calibrate();

	/* GDO0 asserted when rx fifo above threshold */
	cc2500_set_fifo_threshold(15);
    9186:	7f 40 0f 00 	mov.b	#15,	r15	;#0x000f
    918a:	b0 12 d2 8d 	call	#0x8dd2	
	cc2500_gdo0_set_signal(CC2500_GDOx_RX_FIFO_EOP);
    918e:	5f 43       	mov.b	#1,	r15	;r3 As==01
    9190:	b0 12 72 8d 	call	#0x8d72	
	CC2500_HW_GDO0_IRQ_ON_ASSERT();
    9194:	b0 12 16 8a 	call	#0x8a16	
	CC2500_HW_GDO0_DINT();
    9198:	b0 12 42 8a 	call	#0x8a42	

	/* GDO2 Deasserted when packet rx/tx or fifo xxxflow */
	cc2500_gdo2_set_signal(CC2500_GDOx_SYNC_WORD);
    919c:	7f 40 06 00 	mov.b	#6,	r15	;#0x0006
    91a0:	b0 12 a2 8d 	call	#0x8da2	
	CC2500_HW_GDO2_IRQ_ON_ASSERT();
    91a4:	b0 12 2c 8a 	call	#0x8a2c	
	CC2500_HW_GDO2_DINT();
    91a8:	b0 12 58 8a 	call	#0x8a58	
}
    91ac:	21 53       	incd	r1		
    91ae:	34 41       	pop	r4		
    91b0:	30 41       	ret			

000091b2 <cc2500_set_channel>:

void cc2500_set_channel(uint8_t chan)
{
    91b2:	04 12       	push	r4		
    91b4:	04 41       	mov	r1,	r4	
    91b6:	24 53       	incd	r4		
    91b8:	21 83       	decd	r1		
    91ba:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	CC2500_SPI_WREG(CC2500_REG_CHANNR, chan);
    91be:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    91c2:	0e 4f       	mov	r15,	r14	
    91c4:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    91c8:	b0 12 5a 8b 	call	#0x8b5a	
}
    91cc:	21 53       	incd	r1		
    91ce:	34 41       	pop	r4		
    91d0:	30 41       	ret			

000091d2 <cc2500_calibrate>:

void cc2500_calibrate(void)
{
    91d2:	04 12       	push	r4		
    91d4:	04 41       	mov	r1,	r4	
    91d6:	24 53       	incd	r4		
	cc2500_idle();
    91d8:	b0 12 72 94 	call	#0x9472	
	CC2500_SPI_STROBE(CC2500_STROBE_SCAL);
    91dc:	3f 40 33 00 	mov	#51,	r15	;#0x0033
    91e0:	b0 12 38 8b 	call	#0x8b38	
	cc2500_wait_status(CC2500_STATUS_IDLE);
    91e4:	4f 43       	clr.b	r15		
    91e6:	b0 12 2e 8d 	call	#0x8d2e	
}
    91ea:	34 41       	pop	r4		
    91ec:	30 41       	ret			

000091ee <cc2500_utx>:
/* this function does not require any interrupt handler  */
/* both modes wtr. READ_TX_FIFO_BYTE should work equally */
/* although register read might be cleaner               */

void cc2500_utx(const char *buffer, const uint8_t length)
{
    91ee:	04 12       	push	r4		
    91f0:	04 41       	mov	r1,	r4	
    91f2:	24 53       	incd	r4		
    91f4:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    91f8:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    91fc:	c4 4e fc ff 	mov.b	r14,	-4(r4)	;0xfffc(r4)
	DBG_PRINTF("utx_enter\n");
	cc2500_idle();
    9200:	b0 12 72 94 	call	#0x9472	

	CC2500_HW_GDO2_DINT();
    9204:	b0 12 58 8a 	call	#0x8a58	

	/* Fill tx fifo */
	CC2500_SPI_TX_FIFO_BYTE(length);
    9208:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    920c:	0e 4f       	mov	r15,	r14	
    920e:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    9212:	b0 12 f4 8b 	call	#0x8bf4	
	CC2500_SPI_TX_FIFO_BURST(buffer, length);
    9216:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    921a:	0d 4f       	mov	r15,	r13	
    921c:	1e 44 fa ff 	mov	-6(r4),	r14	;0xfffa(r4)
    9220:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    9224:	b0 12 58 8c 	call	#0x8c58	
	DBG_PRINTF("utx 1\n");

	/* Send packet and wait for complete */
	CC2500_SPI_STROBE(CC2500_STROBE_STX);
    9228:	3f 40 35 00 	mov	#53,	r15	;#0x0035
    922c:	b0 12 38 8b 	call	#0x8b38	
#define     STOP_READ_TX_FIFO_BYTES
#if defined(STOP_READ_TX_FIFO_BYTES)
	{
		uint8_t txbytes;
		do {
			txbytes = CC2500_SPI_ROREG(CC2500_REG_TXBYTES);
    9230:	3f 40 3a 00 	mov	#58,	r15	;#0x003a
    9234:	b0 12 be 8b 	call	#0x8bbe	
    9238:	c4 4f f8 ff 	mov.b	r15,	-8(r4)	;0xfff8(r4)
		} while ((txbytes & 0x7f) > 0);
    923c:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    9240:	3f f0 7f 00 	and	#127,	r15	;#0x007f
    9244:	1f 93       	cmp	#1,	r15	;r3 As==01
    9246:	f4 37       	jge	$-22     	;abs 0x9230
	DBG_PRINTF("utx 3.1\n");
	while ((CC2500_HW_GDO2_READ()) != 0) ;	/* GDO2 goes low  = EOP     */
	DBG_PRINTF("utx 3.2\n");
#endif

	CC2500_HW_GDO0_CLEAR_FLAG();
    9248:	b0 12 84 8a 	call	#0x8a84	
	CC2500_HW_GDO2_CLEAR_FLAG();
    924c:	b0 12 9a 8a 	call	#0x8a9a	
	DBG_PRINTF("utx out\n");
}
    9250:	31 50 06 00 	add	#6,	r1	;#0x0006
    9254:	34 41       	pop	r4		
    9256:	30 41       	ret			

00009258 <cc2500_rx_register_buffer>:
void cc2500_rx_register_buffer(uint8_t * buffer, uint8_t length);
void cc2500_rx_enter(void);
void cc2500_rx_pkt_eop(void);

void cc2500_rx_register_buffer(uint8_t * buffer, uint8_t length)
{
    9258:	04 12       	push	r4		
    925a:	04 41       	mov	r1,	r4	
    925c:	24 53       	incd	r4		
    925e:	21 82       	sub	#4,	r1	;r2 As==10
    9260:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    9264:	c4 4e fc ff 	mov.b	r14,	-4(r4)	;0xfffc(r4)
	cc2500_rx_packet = buffer;
    9268:	92 44 fa ff 	mov	-6(r4),	&0x0286	;0xfffa(r4)
    926c:	86 02 
	cc2500_rx_offset = 0x00;
    926e:	c2 43 6c 02 	mov.b	#0,	&0x026c	;r3 As==00
	CC2500_SPI_WREG(CC2500_REG_PKTLEN, length); /* simpler than testing in ISR */
    9272:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9276:	0e 4f       	mov	r15,	r14	
    9278:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    927c:	b0 12 5a 8b 	call	#0x8b5a	
}
    9280:	21 52       	add	#4,	r1	;r2 As==10
    9282:	34 41       	pop	r4		
    9284:	30 41       	ret			

00009286 <cc2500_rx_enter>:

void cc2500_rx_enter(void)
{
    9286:	04 12       	push	r4		
    9288:	04 41       	mov	r1,	r4	
    928a:	24 53       	incd	r4		
	cc2500_idle();
    928c:	b0 12 72 94 	call	#0x9472	
	cc2500_rx_offset = 0;
    9290:	c2 43 6c 02 	mov.b	#0,	&0x026c	;r3 As==00

	CC2500_HW_GDO0_CLEAR_FLAG();	/* clear pending irq     */
    9294:	b0 12 84 8a 	call	#0x8a84	
	CC2500_HW_GDO2_CLEAR_FLAG();	/* clear pending irq     */
    9298:	b0 12 9a 8a 	call	#0x8a9a	
	CC2500_HW_GDO0_EINT();
    929c:	b0 12 6e 8a 	call	#0x8a6e	
	CC2500_HW_GDO2_DINT();
    92a0:	b0 12 58 8a 	call	#0x8a58	

	CC2500_SPI_STROBE(CC2500_STROBE_SRX);
    92a4:	3f 40 34 00 	mov	#52,	r15	;#0x0034
    92a8:	b0 12 38 8b 	call	#0x8b38	
	cc2500_wait_status(CC2500_STATUS_RX);
    92ac:	5f 43       	mov.b	#1,	r15	;r3 As==01
    92ae:	b0 12 2e 8d 	call	#0x8d2e	
}
    92b2:	34 41       	pop	r4		
    92b4:	30 41       	ret			

000092b6 <cc2500_rx_pkt_eop>:
/* ****************** */
/* ** RX EOP     **** */
/* ****************** */

void cc2500_rx_pkt_eop(void)
{				/* called from IRQ context */
    92b6:	0b 12       	push	r11		
    92b8:	04 12       	push	r4		
    92ba:	04 41       	mov	r1,	r4	
    92bc:	24 52       	add	#4,	r4	;r2 As==10
    92be:	31 50 f6 ff 	add	#-10,	r1	;#0xfff6
	uint8_t rxbytes;
	int l;

	/* read RX bytes on general registers */
	rxbytes = CC2500_SPI_ROREG(CC2500_REG_RXBYTES);
    92c2:	3f 40 3b 00 	mov	#59,	r15	;#0x003b
    92c6:	b0 12 be 8b 	call	#0x8bbe	
    92ca:	c4 4f f2 ff 	mov.b	r15,	-14(r4)	;0xfff2(r4)
	do {
		l = rxbytes;
    92ce:	d4 44 f2 ff 	mov.b	-14(r4),-10(r4)	;0xfff2(r4), 0xfff6(r4)
    92d2:	f6 ff 
    92d4:	c4 43 f7 ff 	mov.b	#0,	-9(r4)	;r3 As==00, 0xfff7(r4)
		rxbytes = CC2500_SPI_ROREG(CC2500_REG_RXBYTES);
    92d8:	3f 40 3b 00 	mov	#59,	r15	;#0x003b
    92dc:	b0 12 be 8b 	call	#0x8bbe	
    92e0:	c4 4f f2 ff 	mov.b	r15,	-14(r4)	;0xfff2(r4)
	} while (rxbytes < 2 && rxbytes != l);
    92e4:	e4 93 f2 ff 	cmp.b	#2,	-14(r4)	;r3 As==10, 0xfff2(r4)
    92e8:	05 2c       	jc	$+12     	;abs 0x92f4
    92ea:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    92ee:	1f 94 f6 ff 	cmp	-10(r4),r15	;0xfff6(r4)
    92f2:	ed 23       	jnz	$-36     	;abs 0x92ce

	if ((0 < rxbytes)) {
    92f4:	c4 93 f2 ff 	tst.b	-14(r4)	;0xfff2(r4)
    92f8:	68 24       	jz	$+210    	;abs 0x93ca
		if ((rxbytes & 0x80) == 0) {	/* RX overflow == false */
    92fa:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    92fe:	4f 93       	tst.b	r15		
    9300:	59 38       	jl	$+180    	;abs 0x93b4

			/*
			 * This reads the first DATA bytes, this byte should be
			 * equal to rxbytes-1 (rxbytes == size + data))
			 */
			size = CC2500_SPI_RX_FIFO_BYTE();
    9302:	b0 12 10 8d 	call	#0x8d10	
    9306:	c4 4f f8 ff 	mov.b	r15,	-8(r4)	;0xfff8(r4)
			/* 
			 * rxbytes can be different from size+1 
			 * this happens on transmission errors 
			 * (ex: if packets is filled with a serie of bytes eq 0)
			 */
			CC2500_SPI_RX_FIFO_BURST(cc2500_rx_packet, rxbytes - 1);
    930a:	5f 44 f2 ff 	mov.b	-14(r4),r15	;0xfff2(r4)
    930e:	0e 4f       	mov	r15,	r14	
    9310:	3e 53       	add	#-1,	r14	;r3 As==11
    9312:	1f 42 86 02 	mov	&0x0286,r15	
    9316:	0d 4e       	mov	r14,	r13	
    9318:	0e 4f       	mov	r15,	r14	
    931a:	3f 40 3f 00 	mov	#63,	r15	;#0x003f
    931e:	b0 12 ae 8c 	call	#0x8cae	
#define FRAME_LQI_OFFSET  1
#define rssi_offset       72

			int rssi_dec;
			int rssi_dbm;
			rssi_dec = cc2500_rx_packet[size + FRAME_RSSI_OFFSET];
    9322:	1e 42 86 02 	mov	&0x0286,r14	
    9326:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    932a:	0f 5e       	add	r14,	r15	
    932c:	6f 4f       	mov.b	@r15,	r15	
    932e:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
    9332:	c4 43 fb ff 	mov.b	#0,	-5(r4)	;r3 As==00, 0xfffb(r4)
			if (rssi_dec >= 128) {
    9336:	b4 90 80 00 	cmp	#128,	-6(r4)	;#0x0080, 0xfffa(r4)
    933a:	fa ff 
    933c:	0e 38       	jl	$+30     	;abs 0x935a
				rssi_dbm = (rssi_dec - 256) / 2 - rssi_offset;
    933e:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    9342:	3f 50 00 ff 	add	#-256,	r15	;#0xff00
    9346:	0f 93       	tst	r15		
    9348:	01 34       	jge	$+4      	;abs 0x934c
    934a:	1f 53       	inc	r15		
    934c:	0f 11       	rra	r15		
    934e:	0e 4f       	mov	r15,	r14	
    9350:	3e 50 b8 ff 	add	#-72,	r14	;#0xffb8
    9354:	84 4e f4 ff 	mov	r14,	-12(r4)	;0xfff4(r4)
    9358:	0b 3c       	jmp	$+24     	;abs 0x9370
			} else {
				rssi_dbm = (rssi_dec) / 2 - rssi_offset;
    935a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    935e:	0f 93       	tst	r15		
    9360:	01 34       	jge	$+4      	;abs 0x9364
    9362:	1f 53       	inc	r15		
    9364:	0f 11       	rra	r15		
    9366:	0e 4f       	mov	r15,	r14	
    9368:	3e 50 b8 ff 	add	#-72,	r14	;#0xffb8
    936c:	84 4e f4 ff 	mov	r14,	-12(r4)	;0xfff4(r4)
			}

			if (cc2500_rx_packet[size + FRAME_LQI_OFFSET] & 0x80) {	/* crc ok */
    9370:	1e 42 86 02 	mov	&0x0286,r14	
    9374:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    9378:	1f 53       	inc	r15		
    937a:	0f 5e       	add	r14,	r15	
    937c:	6f 4f       	mov.b	@r15,	r15	
    937e:	4f 93       	tst.b	r15		
    9380:	0e 34       	jge	$+30     	;abs 0x939e
				/* ok */
				radio_rx_cb(cc2500_rx_packet, size, rssi_dbm);
    9382:	1c 42 82 02 	mov	&0x0282,r12	
    9386:	1f 44 f4 ff 	mov	-12(r4),r15	;0xfff4(r4)
    938a:	4e 4f       	mov.b	r15,	r14	
    938c:	5f 44 f8 ff 	mov.b	-8(r4),	r15	;0xfff8(r4)
    9390:	1b 42 86 02 	mov	&0x0286,r11	
    9394:	4d 4e       	mov.b	r14,	r13	
    9396:	0e 4f       	mov	r15,	r14	
    9398:	0f 4b       	mov	r11,	r15	
    939a:	8c 12       	call	r12		
    939c:	1f 3c       	jmp	$+64     	;abs 0x93dc
			} else {
				cc2500_check_fifo_xflow_flush();
    939e:	b0 12 90 8e 	call	#0x8e90	
				radio_rx_cb(cc2500_rx_packet, -ERXBADCRC, 0);
    93a2:	1c 42 82 02 	mov	&0x0282,r12	
    93a6:	1f 42 86 02 	mov	&0x0286,r15	
    93aa:	4d 43       	clr.b	r13		
    93ac:	3e 40 fd ff 	mov	#-3,	r14	;#0xfffd
    93b0:	8c 12       	call	r12		
    93b2:	14 3c       	jmp	$+42     	;abs 0x93dc
			}
		} else {
			cc2500_check_fifo_xflow_flush();
    93b4:	b0 12 90 8e 	call	#0x8e90	
			radio_rx_cb(cc2500_rx_packet, -ERXFLOW, 0);
    93b8:	1c 42 82 02 	mov	&0x0282,r12	
    93bc:	1f 42 86 02 	mov	&0x0286,r15	
    93c0:	4d 43       	clr.b	r13		
    93c2:	3e 40 fe ff 	mov	#-2,	r14	;#0xfffe
    93c6:	8c 12       	call	r12		
    93c8:	09 3c       	jmp	$+20     	;abs 0x93dc
		}
	} else {
		cc2500_check_fifo_xflow_flush();
    93ca:	b0 12 90 8e 	call	#0x8e90	
		radio_rx_cb(cc2500_rx_packet, -EEMPTY, 0);
    93ce:	1c 42 82 02 	mov	&0x0282,r12	
    93d2:	1f 42 86 02 	mov	&0x0286,r15	
    93d6:	4d 43       	clr.b	r13		
    93d8:	3e 43       	mov	#-1,	r14	;r3 As==11
    93da:	8c 12       	call	r12		
	}

	CC2500_HW_GDO0_CLEAR_FLAG();
    93dc:	b0 12 84 8a 	call	#0x8a84	
	CC2500_HW_GDO2_CLEAR_FLAG();
    93e0:	b0 12 9a 8a 	call	#0x8a9a	
}
    93e4:	31 50 0a 00 	add	#10,	r1	;#0x000a
    93e8:	34 41       	pop	r4		
    93ea:	3b 41       	pop	r11		
    93ec:	30 41       	ret			

000093ee <cc2500_rx_register_cb>:
/* **************************************************
 * utils
 * **************************************************/

void cc2500_rx_register_cb(cc2500_cb_t f)
{
    93ee:	04 12       	push	r4		
    93f0:	04 41       	mov	r1,	r4	
    93f2:	24 53       	incd	r4		
    93f4:	21 83       	decd	r1		
    93f6:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	radio_rx_cb = f;
    93fa:	92 44 fc ff 	mov	-4(r4),	&0x0282	;0xfffc(r4)
    93fe:	82 02 
}
    9400:	21 53       	incd	r1		
    9402:	34 41       	pop	r4		
    9404:	30 41       	ret			

00009406 <cc2500_packet_status>:

uint8_t cc2500_packet_status(void)
{
    9406:	04 12       	push	r4		
    9408:	04 41       	mov	r1,	r4	
    940a:	24 53       	incd	r4		
    940c:	21 83       	decd	r1		
	uint8_t ps;
	ps = CC2500_SPI_ROREG(CC2500_REG_PKTSTATUS);
    940e:	3f 40 38 00 	mov	#56,	r15	;#0x0038
    9412:	b0 12 be 8b 	call	#0x8bbe	
    9416:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	return ps;
    941a:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
}
    941e:	21 53       	incd	r1		
    9420:	34 41       	pop	r4		
    9422:	30 41       	ret			

00009424 <cc2500_cca>:

int cc2500_cca(void)
{
    9424:	04 12       	push	r4		
    9426:	04 41       	mov	r1,	r4	
    9428:	24 53       	incd	r4		
    942a:	21 83       	decd	r1		
	uint8_t cca = cc2500_packet_status();
    942c:	b0 12 06 94 	call	#0x9406	
    9430:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	return (cca >> 4) & 0x01;
    9434:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    9438:	4f 4f       	mov.b	r15,	r15	
    943a:	12 c3       	clrc			
    943c:	4f 10       	rrc.b	r15		
    943e:	12 c3       	clrc			
    9440:	4f 10       	rrc.b	r15		
    9442:	12 c3       	clrc			
    9444:	4f 10       	rrc.b	r15		
    9446:	12 c3       	clrc			
    9448:	4f 10       	rrc.b	r15		
    944a:	4f 4f       	mov.b	r15,	r15	
    944c:	1f f3       	and	#1,	r15	;r3 As==01
}
    944e:	21 53       	incd	r1		
    9450:	34 41       	pop	r4		
    9452:	30 41       	ret			

00009454 <cc2500_get_rssi>:

uint8_t cc2500_get_rssi(void)
{
    9454:	04 12       	push	r4		
    9456:	04 41       	mov	r1,	r4	
    9458:	24 53       	incd	r4		
    945a:	21 83       	decd	r1		
	uint8_t rssi;
	/* cc2500 should be in Rx */
	rssi = CC2500_SPI_ROREG(CC2500_REG_RSSI);
    945c:	3f 40 34 00 	mov	#52,	r15	;#0x0034
    9460:	b0 12 be 8b 	call	#0x8bbe	
    9464:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	return rssi;
    9468:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
}
    946c:	21 53       	incd	r1		
    946e:	34 41       	pop	r4		
    9470:	30 41       	ret			

00009472 <cc2500_idle>:

/* idle mode
 * - wait for idle
 */
void cc2500_idle(void)
{
    9472:	04 12       	push	r4		
    9474:	04 41       	mov	r1,	r4	
    9476:	24 53       	incd	r4		
	CC2500_HW_GDO0_DINT();
    9478:	b0 12 42 8a 	call	#0x8a42	
	CC2500_HW_GDO2_DINT();
    947c:	b0 12 58 8a 	call	#0x8a58	
	cc2500_check_fifo_xflow_flush();
    9480:	b0 12 90 8e 	call	#0x8e90	
	CC2500_SPI_STROBE(CC2500_STROBE_SIDLE);
    9484:	3f 40 36 00 	mov	#54,	r15	;#0x0036
    9488:	b0 12 38 8b 	call	#0x8b38	
	cc2500_wait_status(CC2500_STATUS_IDLE);
    948c:	4f 43       	clr.b	r15		
    948e:	b0 12 2e 8d 	call	#0x8d2e	
}
    9492:	34 41       	pop	r4		
    9494:	30 41       	ret			

00009496 <cc2500_sleep>:
 * - crystal is off
 * - configuration saved except power table and test registers
 * - calibration and power table update needed after sleep
 */
void cc2500_sleep(void)
{
    9496:	04 12       	push	r4		
    9498:	04 41       	mov	r1,	r4	
    949a:	24 53       	incd	r4		
	CC2500_SPI_STROBE(CC2500_STROBE_SPWD);
    949c:	3f 40 39 00 	mov	#57,	r15	;#0x0039
    94a0:	b0 12 38 8b 	call	#0x8b38	
}
    94a4:	34 41       	pop	r4		
    94a6:	30 41       	ret			

000094a8 <cc2500_reset>:
/* **************************************************
 * Init / Reset
 * **************************************************/

void cc2500_reset(void)
{
    94a8:	04 12       	push	r4		
    94aa:	04 41       	mov	r1,	r4	
    94ac:	24 53       	incd	r4		
	CC2500_SPI_STROBE(CC2500_STROBE_SRES);
    94ae:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    94b2:	b0 12 38 8b 	call	#0x8b38	
	cc2500_wait_status(CC2500_STATUS_IDLE);
    94b6:	4f 43       	clr.b	r15		
    94b8:	b0 12 2e 8d 	call	#0x8d2e	
}
    94bc:	34 41       	pop	r4		
    94be:	30 41       	ret			

000094c0 <cc2500_wakeup>:

void cc2500_wakeup(void)
{
    94c0:	04 12       	push	r4		
    94c2:	04 41       	mov	r1,	r4	
    94c4:	24 53       	incd	r4		
	CC2500_SPI_ENABLE();
    94c6:	b0 12 e4 9b 	call	#0x9be4	
	/* wait for MISO to go high indicating the oscillator is stable */
	while (CC2500_HW_CHECK_MISO_HIGH()) ;
    94ca:	03 43       	nop			
    94cc:	b0 12 3a 9b 	call	#0x9b3a	
    94d0:	0f 93       	tst	r15		
    94d2:	fc 23       	jnz	$-6      	;abs 0x94cc
	/* wakeup is complete, drive CSn high and continue */
	CC2500_SPI_DISABLE();
    94d4:	b0 12 fa 9b 	call	#0x9bfa	

	cc2500_idle();
    94d8:	b0 12 72 94 	call	#0x9472	
	cc2500_wait_status(CC2500_STATUS_IDLE);
    94dc:	4f 43       	clr.b	r15		
    94de:	b0 12 2e 8d 	call	#0x8d2e	
}
    94e2:	34 41       	pop	r4		
    94e4:	30 41       	ret			

000094e6 <cc2500_variables_bootstrap>:
/* ************************************************** */
/* ************************************************** */
/* ************************************************** */

void cc2500_variables_bootstrap(void)
{
    94e6:	04 12       	push	r4		
    94e8:	04 41       	mov	r1,	r4	
    94ea:	24 53       	incd	r4		
	/* status */
	cc2500_status_register = 0;
    94ec:	c2 43 88 02 	mov.b	#0,	&0x0288	;r3 As==00

	/* Internal driver variables for tx/rx */
	cc2500_rx_packet = 0x00;
    94f0:	82 43 86 02 	mov	#0,	&0x0286	;r3 As==00
	cc2500_rx_offset = 0x00;
    94f4:	c2 43 6c 02 	mov.b	#0,	&0x026c	;r3 As==00
	cc2500_rx_length = 0x00;
    94f8:	c2 43 6e 02 	mov.b	#0,	&0x026e	;r3 As==00
}
    94fc:	34 41       	pop	r4		
    94fe:	30 41       	ret			

00009500 <CC_ASSERT>:
/* ************************************************** */
/* ************************************************** */
/* ************************************************** */

void CC_ASSERT(int cond)
{
    9500:	04 12       	push	r4		
    9502:	04 41       	mov	r1,	r4	
    9504:	24 53       	incd	r4		
    9506:	21 83       	decd	r1		
    9508:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	if (!cond) {
		//LED_BLINK_ME();
	}
}
    950c:	21 53       	incd	r1		
    950e:	34 41       	pop	r4		
    9510:	30 41       	ret			

00009512 <cc2500_init>:

void cc2500_init(void)
{
    9512:	04 12       	push	r4		
    9514:	04 41       	mov	r1,	r4	
    9516:	24 53       	incd	r4		
    9518:	21 83       	decd	r1		
	/* ------------------------------
	 * Init
	 * ------------------------------ */

	cc2500_variables_bootstrap();	/* bootstrap global cc2500 variables */
    951a:	b0 12 e6 94 	call	#0x94e6	

	DBG_PRINTF("init enter\n");

	CC2500_HW_INIT();
    951e:	b0 12 c6 8a 	call	#0x8ac6	

	DBG_PRINTF("  hw_init ok\n");

	/* initialize GPIO pins */
	CONFIG_GDO0_PIN_AS_INPUT();
    9522:	b0 12 b0 8a 	call	#0x8ab0	
	/* CC_ASSERT(spi_check_miso_high()); */

	DBG_PRINTF("  miso ok\n");

	/* pulse CSn low then high */
	spi_select_radio();
    9526:	b0 12 e4 9b 	call	#0x9be4	
	delay_usec(10);
    952a:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    952e:	b0 12 82 98 	call	#0x9882	
	spi_deselect_radio();
    9532:	b0 12 fa 9b 	call	#0x9bfa	
	/* hold CSn high for at least 40 microseconds */
	delay_usec(40);
    9536:	3f 40 28 00 	mov	#40,	r15	;#0x0028
    953a:	b0 12 82 98 	call	#0x9882	
	/* pull CSn low and wait for SO to go low */

	DBG_PRINTF("  reset 1 ok\n");

	spi_select_radio();
    953e:	b0 12 e4 9b 	call	#0x9be4	
	while (spi_check_miso_high()) ;
    9542:	03 43       	nop			
    9544:	b0 12 3a 9b 	call	#0x9b3a	
    9548:	0f 93       	tst	r15		
    954a:	fc 23       	jnz	$-6      	;abs 0x9544

	/* directly send strobe command - cannot use function as it affects CSn pin */
	spi_tx_rx(CC2500_STROBE_SRES);
    954c:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    9550:	b0 12 00 9b 	call	#0x9b00	

	/* wait for SO to go low again, reset is complete at that point */
	while (spi_check_miso_high()) ;
    9554:	03 43       	nop			
    9556:	b0 12 3a 9b 	call	#0x9b3a	
    955a:	0f 93       	tst	r15		
    955c:	fc 23       	jnz	$-6      	;abs 0x9556

	/* return CSn pin to its default high level */
	spi_deselect_radio();
    955e:	b0 12 fa 9b 	call	#0x9bfa	
	 * ------------------------------ */

	/* verify that SPI is working, PKTLEN is an arbitrary read/write register used for testing */
#define TEST_VALUE 0xA5
	unsigned short v;
	CC2500_SPI_WREG(CC2500_REG_PKTLEN, TEST_VALUE);
    9562:	3e 40 a5 00 	mov	#165,	r14	;#0x00a5
    9566:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    956a:	b0 12 5a 8b 	call	#0x8b5a	
	v = CC2500_SPI_RREG(CC2500_REG_PKTLEN);
    956e:	3f 40 06 00 	mov	#6,	r15	;#0x0006
    9572:	b0 12 88 8b 	call	#0x8b88	
    9576:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    957a:	94 11 fc ff 	sxt	-4(r4)		;0xfffc(r4)
	CC_ASSERT((v & 0xff) == TEST_VALUE);	/* SPI is not responding */
    957e:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    9582:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    9586:	1f 43       	mov	#1,	r15	;r3 As==01
    9588:	3e 90 a5 00 	cmp	#165,	r14	;#0x00a5
    958c:	01 24       	jz	$+4      	;abs 0x9590
    958e:	0f 43       	clr	r15		
    9590:	b0 12 00 95 	call	#0x9500	

	/* verify the correct radio is installed */
#define RADIO_PARTNUM          0x80
#define RADIO_MIN_VERSION      3
#define SETTING_PATABLE0       0xFE
	v = CC2500_SPI_ROREG(CC2500_REG_PARTNUM);
    9594:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    9598:	b0 12 be 8b 	call	#0x8bbe	
    959c:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    95a0:	94 11 fc ff 	sxt	-4(r4)		;0xfffc(r4)
	CC_ASSERT((v & 0xff) == RADIO_PARTNUM);	/* incorrect radio specified */
    95a4:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    95a8:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    95ac:	1f 43       	mov	#1,	r15	;r3 As==01
    95ae:	3e 90 80 00 	cmp	#128,	r14	;#0x0080
    95b2:	01 24       	jz	$+4      	;abs 0x95b6
    95b4:	0f 43       	clr	r15		
    95b6:	b0 12 00 95 	call	#0x9500	
	DBG_PRINTF("  t3 ok\n");

	v = CC2500_SPI_ROREG(CC2500_REG_VERSION);
    95ba:	3f 40 31 00 	mov	#49,	r15	;#0x0031
    95be:	b0 12 be 8b 	call	#0x8bbe	
    95c2:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    95c6:	94 11 fc ff 	sxt	-4(r4)		;0xfffc(r4)
	CC_ASSERT((v & 0xff) >= RADIO_MIN_VERSION);	/* obsolete radio specified  */
    95ca:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    95ce:	3e f0 ff 00 	and	#255,	r14	;#0x00ff
    95d2:	1f 43       	mov	#1,	r15	;r3 As==01
    95d4:	3e 90 03 00 	cmp	#3,	r14	;#0x0003
    95d8:	01 2c       	jc	$+4      	;abs 0x95dc
    95da:	0f 43       	clr	r15		
    95dc:	b0 12 00 95 	call	#0x9500	

	/* ------------------------------
	 * Configuration
	 * ------------------------------ */

	cc2500_configure(&rfSettings_default_config);
    95e0:	3f 40 e2 b8 	mov	#-18206,r15	;#0xb8e2
    95e4:	b0 12 ba 8e 	call	#0x8eba	

	DBG_PRINTF("init done\n");
}
    95e8:	21 53       	incd	r1		
    95ea:	34 41       	pop	r4		
    95ec:	30 41       	ret			

000095ee <cc2500_gdox_signal_handler>:
/* ************************************************** */
/* ************************************************** */
/* ************************************************** */

void cc2500_gdox_signal_handler(uint8_t mask)
{
    95ee:	04 12       	push	r4		
    95f0:	04 41       	mov	r1,	r4	
    95f2:	24 53       	incd	r4		
    95f4:	21 83       	decd	r1		
    95f6:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
	if (mask & CC2500_GDO0) {
    95fa:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    95fe:	1f f3       	and	#1,	r15	;r3 As==01
    9600:	4f 4f       	mov.b	r15,	r15	
    9602:	4f 93       	tst.b	r15		
    9604:	02 24       	jz	$+6      	;abs 0x960a
		/* rx fifo above threshold */
		cc2500_rx_pkt_eop();
    9606:	b0 12 b6 92 	call	#0x92b6	
	}

	if (mask & CC2500_GDO2) {
		/* SYNC_WORD */
	}
}
    960a:	21 53       	incd	r1		
    960c:	34 41       	pop	r4		
    960e:	30 41       	ret			

00009610 <port2_irq_handler>:
/* **************************************************
 * Interupts handler
 * **************************************************/

ISR(PORT2, port2_irq_handler)
{
    9610:	0f 12       	push	r15		
    9612:	0e 12       	push	r14		
    9614:	0d 12       	push	r13		
    9616:	0c 12       	push	r12		
    9618:	04 12       	push	r4		
    961a:	04 41       	mov	r1,	r4	
    961c:	34 50 0a 00 	add	#10,	r4	;#0x000a
    9620:	21 83       	decd	r1		
	uint8_t cc_cmd = 0;
    9622:	c4 43 f4 ff 	mov.b	#0,	-12(r4)	;r3 As==00, 0xfff4(r4)
	uint8_t cc_alive = 0;
    9626:	c4 43 f5 ff 	mov.b	#0,	-11(r4)	;r3 As==00, 0xfff5(r4)

	DBG_PRINTF("port2 irq\n");

	if (P2IFG & (P2IE & GDO0_MASK)) {
    962a:	5f 42 2b 00 	mov.b	&0x002b,r15	
    962e:	4f 4f       	mov.b	r15,	r15	
    9630:	5e 42 2d 00 	mov.b	&0x002d,r14	
    9634:	4e 4e       	mov.b	r14,	r14	
    9636:	3e f0 40 00 	and	#64,	r14	;#0x0040
    963a:	0f fe       	and	r14,	r15	
    963c:	0f 93       	tst	r15		
    963e:	0a 24       	jz	$+22     	;abs 0x9654
		DBG_PRINTF("IRQ GDO0\n");
		cc_cmd |= CC2500_GDO0;
    9640:	d4 d3 f4 ff 	bis.b	#1,	-12(r4)	;r3 As==01, 0xfff4(r4)
		cc_alive |= 1;
    9644:	d4 d3 f5 ff 	bis.b	#1,	-11(r4)	;r3 As==01, 0xfff5(r4)
		P2IFG &= GDO0_MASK;
    9648:	5f 42 2b 00 	mov.b	&0x002b,r15	
    964c:	7f f0 40 00 	and.b	#64,	r15	;#0x0040
    9650:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
	}

	if (P2IFG & (P2IE & GDO2_MASK)) {
    9654:	5f 42 2b 00 	mov.b	&0x002b,r15	
    9658:	4f 4f       	mov.b	r15,	r15	
    965a:	5e 42 2d 00 	mov.b	&0x002d,r14	
    965e:	4e 4e       	mov.b	r14,	r14	
    9660:	3e f0 80 00 	and	#128,	r14	;#0x0080
    9664:	0f fe       	and	r14,	r15	
    9666:	0f 93       	tst	r15		
    9668:	0a 24       	jz	$+22     	;abs 0x967e
		DBG_PRINTF("IRQ GDO2\n");
		cc_cmd |= CC2500_GDO2;
    966a:	e4 d3 f4 ff 	bis.b	#2,	-12(r4)	;r3 As==10, 0xfff4(r4)
		cc_alive |= 1;
    966e:	d4 d3 f5 ff 	bis.b	#1,	-11(r4)	;r3 As==01, 0xfff5(r4)
		P2IFG &= GDO2_MASK;
    9672:	5f 42 2b 00 	mov.b	&0x002b,r15	
    9676:	7f f0 80 ff 	and.b	#-128,	r15	;#0xff80
    967a:	c2 4f 2b 00 	mov.b	r15,	&0x002b	
	}

	if (cc_cmd != 0) {
    967e:	c4 93 f4 ff 	tst.b	-12(r4)	;0xfff4(r4)
    9682:	04 24       	jz	$+10     	;abs 0x968c
		cc2500_gdox_signal_handler(cc_cmd);
    9684:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    9688:	b0 12 ee 95 	call	#0x95ee	
	}

	if (cc_alive) {
    968c:	c4 93 f5 ff 	tst.b	-11(r4)	;0xfff5(r4)
    9690:	03 24       	jz	$+8      	;abs 0x9698
		LPM_OFF_ON_EXIT;
    9692:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    9696:	00 00 
	}

	P2IFG = 0;
    9698:	c2 43 2b 00 	mov.b	#0,	&0x002b	;r3 As==00
}
    969c:	21 53       	incd	r1		
    969e:	34 41       	pop	r4		
    96a0:	3c 41       	pop	r12		
    96a2:	3d 41       	pop	r13		
    96a4:	3e 41       	pop	r14		
    96a6:	3f 41       	pop	r15		
    96a8:	00 13       	reti			

000096aa <get_mclk_freq_mhz>:
 ***************************************************************/

#define WAIT_CRISTAL() do { } while (0)

int get_mclk_freq_mhz()
{
    96aa:	04 12       	push	r4		
    96ac:	04 41       	mov	r1,	r4	
    96ae:	24 53       	incd	r4		
	return mclk_freq_mhz;
    96b0:	1f 42 70 02 	mov	&0x0270,r15	
}
    96b4:	34 41       	pop	r4		
    96b6:	30 41       	ret			

000096b8 <set_mcu_speed>:

static void set_mcu_speed(unsigned char dco_mhz, unsigned char smclk_divider)
{
    96b8:	04 12       	push	r4		
    96ba:	04 41       	mov	r1,	r4	
    96bc:	24 53       	incd	r4		
    96be:	21 83       	decd	r1		
    96c0:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    96c4:	c4 4e fd ff 	mov.b	r14,	-3(r4)	;0xfffd(r4)
	switch (dco_mhz) {
    96c8:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    96cc:	3f 92       	cmp	#8,	r15	;r2 As==11
    96ce:	16 24       	jz	$+46     	;abs 0x96fc
    96d0:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    96d4:	03 34       	jge	$+8      	;abs 0x96dc
    96d6:	1f 93       	cmp	#1,	r15	;r3 As==01
    96d8:	08 24       	jz	$+18     	;abs 0x96ea
    96da:	2b 3c       	jmp	$+88     	;abs 0x9732
    96dc:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    96e0:	16 24       	jz	$+46     	;abs 0x970e
    96e2:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    96e6:	1c 24       	jz	$+58     	;abs 0x9720
    96e8:	24 3c       	jmp	$+74     	;abs 0x9732
	case 1:
		BCSCTL1 = CALBC1_1MHZ;
    96ea:	5f 42 ff 10 	mov.b	&0x10ff,r15	
    96ee:	c2 4f 57 00 	mov.b	r15,	&0x0057	
		DCOCTL = CALDCO_1MHZ;
    96f2:	5f 42 fe 10 	mov.b	&0x10fe,r15	
    96f6:	c2 4f 56 00 	mov.b	r15,	&0x0056	
		break;
    96fa:	1b 3c       	jmp	$+56     	;abs 0x9732
	case 8:
		BCSCTL1 = CALBC1_8MHZ;
    96fc:	5f 42 fd 10 	mov.b	&0x10fd,r15	
    9700:	c2 4f 57 00 	mov.b	r15,	&0x0057	
		DCOCTL = CALDCO_8MHZ;
    9704:	5f 42 fc 10 	mov.b	&0x10fc,r15	
    9708:	c2 4f 56 00 	mov.b	r15,	&0x0056	
		break;
    970c:	12 3c       	jmp	$+38     	;abs 0x9732
	case 12:
		BCSCTL1 = CALBC1_12MHZ;
    970e:	5f 42 fb 10 	mov.b	&0x10fb,r15	
    9712:	c2 4f 57 00 	mov.b	r15,	&0x0057	
		DCOCTL = CALDCO_12MHZ;
    9716:	5f 42 fa 10 	mov.b	&0x10fa,r15	
    971a:	c2 4f 56 00 	mov.b	r15,	&0x0056	
		break;
    971e:	09 3c       	jmp	$+20     	;abs 0x9732
	case 16:
		BCSCTL1 = CALBC1_16MHZ;
    9720:	5f 42 f9 10 	mov.b	&0x10f9,r15	
    9724:	c2 4f 57 00 	mov.b	r15,	&0x0057	
		DCOCTL = CALDCO_16MHZ;
    9728:	5f 42 f8 10 	mov.b	&0x10f8,r15	
    972c:	c2 4f 56 00 	mov.b	r15,	&0x0056	
		break;
    9730:	03 43       	nop			
	}
	switch (smclk_divider) {
    9732:	5f 44 fd ff 	mov.b	-3(r4),	r15	;0xfffd(r4)
    9736:	2f 93       	cmp	#2,	r15	;r3 As==10
    9738:	0e 24       	jz	$+30     	;abs 0x9756
    973a:	3f 90 03 00 	cmp	#3,	r15	;#0x0003
    973e:	03 34       	jge	$+8      	;abs 0x9746
    9740:	1f 93       	cmp	#1,	r15	;r3 As==01
    9742:	06 24       	jz	$+14     	;abs 0x9750
    9744:	12 3c       	jmp	$+38     	;abs 0x976a
    9746:	2f 92       	cmp	#4,	r15	;r2 As==10
    9748:	09 24       	jz	$+20     	;abs 0x975c
    974a:	3f 92       	cmp	#8,	r15	;r2 As==11
    974c:	0a 24       	jz	$+22     	;abs 0x9762
    974e:	0d 3c       	jmp	$+28     	;abs 0x976a
	case 1:
		/* SELM_0: MCL Source Select 0: DCOCLK */
		/* DIVS_1: SMCLK divider /1 */
		BCSCTL2 = SELM_0 | DIVS_0;
    9750:	c2 43 58 00 	mov.b	#0,	&0x0058	;r3 As==00
		break;
    9754:	0a 3c       	jmp	$+22     	;abs 0x976a
	case 2:
		/* DIVS_1: SMCLK divider /2 */
		BCSCTL2 = SELM_0 | DIVS_1;
    9756:	e2 43 58 00 	mov.b	#2,	&0x0058	;r3 As==10
		break;
    975a:	07 3c       	jmp	$+16     	;abs 0x976a
	case 4:
		/* DIVS_2: SMCLK divider /4 */
		BCSCTL2 = SELM_0 | DIVS_2;
    975c:	e2 42 58 00 	mov.b	#4,	&0x0058	;r2 As==10
		break;
    9760:	04 3c       	jmp	$+10     	;abs 0x976a
	case 8:
		/* DIVS_3: SMCLK divider /8 */
		BCSCTL2 = SELM_0 | DIVS_3;
    9762:	f2 40 06 00 	mov.b	#6,	&0x0058	;#0x0006
    9766:	58 00 
		break;
    9768:	03 43       	nop			
	}

	WAIT_CRISTAL();

	mclk_freq_mhz = dco_mhz;
    976a:	5f 44 fc ff 	mov.b	-4(r4),	r15	;0xfffc(r4)
    976e:	82 4f 70 02 	mov	r15,	&0x0270	
}
    9772:	21 53       	incd	r1		
    9774:	34 41       	pop	r4		
    9776:	30 41       	ret			

00009778 <set_mcu_speed_dco_mclk_1MHz_smclk_1MHz>:

void set_mcu_speed_dco_mclk_1MHz_smclk_1MHz()
{
    9778:	04 12       	push	r4		
    977a:	04 41       	mov	r1,	r4	
    977c:	24 53       	incd	r4		
	set_mcu_speed(1, 1);
    977e:	5e 43       	mov.b	#1,	r14	;r3 As==01
    9780:	5f 43       	mov.b	#1,	r15	;r3 As==01
    9782:	b0 12 b8 96 	call	#0x96b8	
}
    9786:	34 41       	pop	r4		
    9788:	30 41       	ret			

0000978a <set_mcu_speed_dco_mclk_8MHz_smclk_8MHz>:

void set_mcu_speed_dco_mclk_8MHz_smclk_8MHz()
{
    978a:	04 12       	push	r4		
    978c:	04 41       	mov	r1,	r4	
    978e:	24 53       	incd	r4		
	set_mcu_speed(8, 1);
    9790:	5e 43       	mov.b	#1,	r14	;r3 As==01
    9792:	7f 42       	mov.b	#8,	r15	;r2 As==11
    9794:	b0 12 b8 96 	call	#0x96b8	
}
    9798:	34 41       	pop	r4		
    979a:	30 41       	ret			

0000979c <set_mcu_speed_dco_mclk_8MHz_smclk_4MHz>:

void set_mcu_speed_dco_mclk_8MHz_smclk_4MHz()
{
    979c:	04 12       	push	r4		
    979e:	04 41       	mov	r1,	r4	
    97a0:	24 53       	incd	r4		
	set_mcu_speed(8, 2);
    97a2:	6e 43       	mov.b	#2,	r14	;r3 As==10
    97a4:	7f 42       	mov.b	#8,	r15	;r2 As==11
    97a6:	b0 12 b8 96 	call	#0x96b8	
}
    97aa:	34 41       	pop	r4		
    97ac:	30 41       	ret			

000097ae <set_mcu_speed_dco_mclk_8MHz_smclk_2MHz>:

void set_mcu_speed_dco_mclk_8MHz_smclk_2MHz()
{
    97ae:	04 12       	push	r4		
    97b0:	04 41       	mov	r1,	r4	
    97b2:	24 53       	incd	r4		
	set_mcu_speed(8, 4);
    97b4:	6e 42       	mov.b	#4,	r14	;r2 As==10
    97b6:	7f 42       	mov.b	#8,	r15	;r2 As==11
    97b8:	b0 12 b8 96 	call	#0x96b8	
}
    97bc:	34 41       	pop	r4		
    97be:	30 41       	ret			

000097c0 <set_mcu_speed_dco_mclk_8MHz_smclk_1MHz>:

void set_mcu_speed_dco_mclk_8MHz_smclk_1MHz()
{
    97c0:	04 12       	push	r4		
    97c2:	04 41       	mov	r1,	r4	
    97c4:	24 53       	incd	r4		
	set_mcu_speed(8, 8);
    97c6:	7e 42       	mov.b	#8,	r14	;r2 As==11
    97c8:	7f 42       	mov.b	#8,	r15	;r2 As==11
    97ca:	b0 12 b8 96 	call	#0x96b8	
}
    97ce:	34 41       	pop	r4		
    97d0:	30 41       	ret			

000097d2 <set_mcu_speed_dco_mclk_12MHz_smclk_12MHz>:

void set_mcu_speed_dco_mclk_12MHz_smclk_12MHz()
{
    97d2:	04 12       	push	r4		
    97d4:	04 41       	mov	r1,	r4	
    97d6:	24 53       	incd	r4		
	set_mcu_speed(12, 1);
    97d8:	5e 43       	mov.b	#1,	r14	;r3 As==01
    97da:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    97de:	b0 12 b8 96 	call	#0x96b8	
}
    97e2:	34 41       	pop	r4		
    97e4:	30 41       	ret			

000097e6 <set_mcu_speed_dco_mclk_12MHz_smclk_6MHz>:

void set_mcu_speed_dco_mclk_12MHz_smclk_6MHz()
{
    97e6:	04 12       	push	r4		
    97e8:	04 41       	mov	r1,	r4	
    97ea:	24 53       	incd	r4		
	set_mcu_speed(12, 2);
    97ec:	6e 43       	mov.b	#2,	r14	;r3 As==10
    97ee:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    97f2:	b0 12 b8 96 	call	#0x96b8	
}
    97f6:	34 41       	pop	r4		
    97f8:	30 41       	ret			

000097fa <set_mcu_speed_dco_mclk_12MHz_smclk_3MHz>:

void set_mcu_speed_dco_mclk_12MHz_smclk_3MHz()
{
    97fa:	04 12       	push	r4		
    97fc:	04 41       	mov	r1,	r4	
    97fe:	24 53       	incd	r4		
	set_mcu_speed(12, 4);
    9800:	6e 42       	mov.b	#4,	r14	;r2 As==10
    9802:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    9806:	b0 12 b8 96 	call	#0x96b8	
}
    980a:	34 41       	pop	r4		
    980c:	30 41       	ret			

0000980e <set_mcu_speed_dco_mclk_12MHz_smclk_1_5MHz>:

void set_mcu_speed_dco_mclk_12MHz_smclk_1_5MHz()
{
    980e:	04 12       	push	r4		
    9810:	04 41       	mov	r1,	r4	
    9812:	24 53       	incd	r4		
	set_mcu_speed(12, 8);
    9814:	7e 42       	mov.b	#8,	r14	;r2 As==11
    9816:	7f 40 0c 00 	mov.b	#12,	r15	;#0x000c
    981a:	b0 12 b8 96 	call	#0x96b8	
}
    981e:	34 41       	pop	r4		
    9820:	30 41       	ret			

00009822 <set_mcu_speed_dco_mclk_16MHz_smclk_16MHz>:

void set_mcu_speed_dco_mclk_16MHz_smclk_16MHz()
{
    9822:	04 12       	push	r4		
    9824:	04 41       	mov	r1,	r4	
    9826:	24 53       	incd	r4		
	set_mcu_speed(16, 1);
    9828:	5e 43       	mov.b	#1,	r14	;r3 As==01
    982a:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    982e:	b0 12 b8 96 	call	#0x96b8	
}
    9832:	34 41       	pop	r4		
    9834:	30 41       	ret			

00009836 <set_mcu_speed_dco_mclk_16MHz_smclk_8MHz>:

void set_mcu_speed_dco_mclk_16MHz_smclk_8MHz()
{
    9836:	04 12       	push	r4		
    9838:	04 41       	mov	r1,	r4	
    983a:	24 53       	incd	r4		
	set_mcu_speed(16, 2);
    983c:	6e 43       	mov.b	#2,	r14	;r3 As==10
    983e:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    9842:	b0 12 b8 96 	call	#0x96b8	
}
    9846:	34 41       	pop	r4		
    9848:	30 41       	ret			

0000984a <set_mcu_speed_dco_mclk_16MHz_smclk_4MHz>:

void set_mcu_speed_dco_mclk_16MHz_smclk_4MHz()
{
    984a:	04 12       	push	r4		
    984c:	04 41       	mov	r1,	r4	
    984e:	24 53       	incd	r4		
	set_mcu_speed(16, 4);
    9850:	6e 42       	mov.b	#4,	r14	;r2 As==10
    9852:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    9856:	b0 12 b8 96 	call	#0x96b8	
}
    985a:	34 41       	pop	r4		
    985c:	30 41       	ret			

0000985e <set_mcu_speed_dco_mclk_16MHz_smclk_2MHz>:

void set_mcu_speed_dco_mclk_16MHz_smclk_2MHz()
{
    985e:	04 12       	push	r4		
    9860:	04 41       	mov	r1,	r4	
    9862:	24 53       	incd	r4		
	set_mcu_speed(16, 8);
    9864:	7e 42       	mov.b	#8,	r14	;r2 As==11
    9866:	7f 40 10 00 	mov.b	#16,	r15	;#0x0010
    986a:	b0 12 b8 96 	call	#0x96b8	
}
    986e:	34 41       	pop	r4		
    9870:	30 41       	ret			

00009872 <loop_4_cycles>:
/* the IAR version of loop_4_cycles is defined in loop_4_cycles.s43 */
#if defined(__GNUC__) && defined(__MSP430__)
/* uint32_t version */
/* will block 4*n cycles + constant (function jump and init) */
void loop_4_cycles(register uint32_t n)
{
    9872:	04 12       	push	r4		
    9874:	04 41       	mov	r1,	r4	
    9876:	24 53       	incd	r4		
	/* C equivalent: do{ n--; } while(n > 0) */
	__asm__ __volatile__("0: \n" "add.w #-1,%A[n] \n"	/* LSB, 1 cycles */
    9878:	3e 53       	add	#-1,	r14	;r3 As==11
    987a:	3f 63       	addc	#-1,	r15	;r3 As==11
    987c:	fd 2f       	jc	$-4      	;abs 0x9878
			     "addc.w #-1,%B[n] \n"	/* MSB, 1 cycles */
			     "jc 0b \n"	/* 2 cycles      */
			     :[n] "+r"((long)n));
}
    987e:	34 41       	pop	r4		
    9880:	30 41       	ret			

00009882 <delay_usec>:
#endif

void inline delay_usec(unsigned int usec)
{
    9882:	04 12       	push	r4		
    9884:	04 41       	mov	r1,	r4	
    9886:	24 53       	incd	r4		
    9888:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    988c:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	uint32_t loops;
	switch (mclk_freq_mhz) {
    9890:	1f 42 70 02 	mov	&0x0270,r15	
    9894:	3f 92       	cmp	#8,	r15	;r2 As==11
    9896:	18 24       	jz	$+50     	;abs 0x98c8
    9898:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    989c:	03 2c       	jc	$+8      	;abs 0x98a4
    989e:	1f 93       	cmp	#1,	r15	;r3 As==01
    98a0:	08 24       	jz	$+18     	;abs 0x98b2
    98a2:	2d 3c       	jmp	$+92     	;abs 0x98fe
    98a4:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    98a8:	17 24       	jz	$+48     	;abs 0x98d8
    98aa:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    98ae:	1e 24       	jz	$+62     	;abs 0x98ec
    98b0:	26 3c       	jmp	$+78     	;abs 0x98fe
	case 1:		// 4 cycles == 4 us
		loops = usec >> 2;
    98b2:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    98b6:	12 c3       	clrc			
    98b8:	0f 10       	rrc	r15		
    98ba:	12 c3       	clrc			
    98bc:	0f 10       	rrc	r15		
    98be:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    98c2:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
		break;
    98c6:	26 3c       	jmp	$+78     	;abs 0x9914
	case 8:		// 4 cycles == 0.5 us
		loops = usec << 1;
    98c8:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    98cc:	0f 5f       	rla	r15		
    98ce:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    98d2:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
		break;
    98d6:	1e 3c       	jmp	$+62     	;abs 0x9914
	case 12:		// 4 cycles == 0.33 us
		loops = usec * 3;
    98d8:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    98dc:	0f 4e       	mov	r14,	r15	
    98de:	0f 5f       	rla	r15		
    98e0:	0f 5e       	add	r14,	r15	
    98e2:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    98e6:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
		break;
    98ea:	14 3c       	jmp	$+42     	;abs 0x9914
	case 16:		// 4 cycles == 0.25 us
		loops = usec << 2;
    98ec:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    98f0:	0f 5f       	rla	r15		
    98f2:	0f 5f       	rla	r15		
    98f4:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    98f8:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
		break;
    98fc:	0b 3c       	jmp	$+24     	;abs 0x9914
	default:
		loops = usec >> 2; /* arbitrary 1MHz */
    98fe:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9902:	12 c3       	clrc			
    9904:	0f 10       	rrc	r15		
    9906:	12 c3       	clrc			
    9908:	0f 10       	rrc	r15		
    990a:	84 4f f8 ff 	mov	r15,	-8(r4)	;0xfff8(r4)
    990e:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
		break;
    9912:	03 43       	nop			
	}
	loop_4_cycles(loops);
    9914:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    9918:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    991c:	b0 12 72 98 	call	#0x9872	
}
    9920:	31 50 06 00 	add	#6,	r1	;#0x0006
    9924:	34 41       	pop	r4		
    9926:	30 41       	ret			

00009928 <delay_ms>:

void delay_ms(unsigned int ms)
{
    9928:	04 12       	push	r4		
    992a:	04 41       	mov	r1,	r4	
    992c:	24 53       	incd	r4		
    992e:	31 82       	sub	#8,	r1	;r2 As==11
    9930:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	unsigned int i;
	uint32_t loops;

	switch (mclk_freq_mhz) {
    9934:	1f 42 70 02 	mov	&0x0270,r15	
    9938:	3f 92       	cmp	#8,	r15	;r2 As==11
    993a:	13 24       	jz	$+40     	;abs 0x9962
    993c:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    9940:	03 2c       	jc	$+8      	;abs 0x9948
    9942:	1f 93       	cmp	#1,	r15	;r3 As==01
    9944:	08 24       	jz	$+18     	;abs 0x9956
    9946:	1f 3c       	jmp	$+64     	;abs 0x9986
    9948:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    994c:	10 24       	jz	$+34     	;abs 0x996e
    994e:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    9952:	13 24       	jz	$+40     	;abs 0x997a
    9954:	18 3c       	jmp	$+50     	;abs 0x9986
	case 1:
		loops = 1000 >> 2;
    9956:	b4 40 fa 00 	mov	#250,	-8(r4)	;#0x00fa, 0xfff8(r4)
    995a:	f8 ff 
    995c:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
		break;
    9960:	18 3c       	jmp	$+50     	;abs 0x9992
	case 8:
		loops = 1000 << 1;
    9962:	b4 40 d0 07 	mov	#2000,	-8(r4)	;#0x07d0, 0xfff8(r4)
    9966:	f8 ff 
    9968:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
		break;
    996c:	12 3c       	jmp	$+38     	;abs 0x9992
	case 12:
		loops = 1000 * 3;
    996e:	b4 40 b8 0b 	mov	#3000,	-8(r4)	;#0x0bb8, 0xfff8(r4)
    9972:	f8 ff 
    9974:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
		break;
    9978:	0c 3c       	jmp	$+26     	;abs 0x9992
	case 16:
		loops = 1000 << 2;
    997a:	b4 40 a0 0f 	mov	#4000,	-8(r4)	;#0x0fa0, 0xfff8(r4)
    997e:	f8 ff 
    9980:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
		break;
    9984:	06 3c       	jmp	$+14     	;abs 0x9992
	default: /* arbitrary value to 1MHZ */
		loops = 1000 >> 2;
    9986:	b4 40 fa 00 	mov	#250,	-8(r4)	;#0x00fa, 0xfff8(r4)
    998a:	f8 ff 
    998c:	84 43 fa ff 	mov	#0,	-6(r4)	;r3 As==00, 0xfffa(r4)
		break;
    9990:	03 43       	nop			
	}

	/* calling delay_usec() introduces an high
	 * clock skew for low mclk frequencies
	 */
	for (i = 0; i < ms; i++) {
    9992:	84 43 f6 ff 	mov	#0,	-10(r4)	;r3 As==00, 0xfff6(r4)
    9996:	08 3c       	jmp	$+18     	;abs 0x99a8
		loop_4_cycles(loops);
    9998:	1e 44 f8 ff 	mov	-8(r4),	r14	;0xfff8(r4)
    999c:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    99a0:	b0 12 72 98 	call	#0x9872	
	}

	/* calling delay_usec() introduces an high
	 * clock skew for low mclk frequencies
	 */
	for (i = 0; i < ms; i++) {
    99a4:	94 53 f6 ff 	inc	-10(r4)	;0xfff6(r4)
    99a8:	94 94 fc ff 	cmp	-4(r4),	-10(r4)	;0xfffc(r4), 0xfff6(r4)
    99ac:	f6 ff 
    99ae:	f4 2b       	jnc	$-22     	;abs 0x9998
		loop_4_cycles(loops);
	}
}
    99b0:	31 52       	add	#8,	r1	;r2 As==11
    99b2:	34 41       	pop	r4		
    99b4:	30 41       	ret			

000099b6 <led_green_off>:
#define LED_PORT       P1OUT
#define BIT_GREEN      BIT1
#define BIT_RED        BIT0

void led_green_off(void)
{
    99b6:	04 12       	push	r4		
    99b8:	04 41       	mov	r1,	r4	
    99ba:	24 53       	incd	r4		
	LED_PORT &= ~BIT_GREEN;
    99bc:	5f 42 21 00 	mov.b	&0x0021,r15	
    99c0:	7f f0 fd ff 	and.b	#-3,	r15	;#0xfffd
    99c4:	c2 4f 21 00 	mov.b	r15,	&0x0021	
}
    99c8:	34 41       	pop	r4		
    99ca:	30 41       	ret			

000099cc <led_green_on>:

void led_green_on(void)
{
    99cc:	04 12       	push	r4		
    99ce:	04 41       	mov	r1,	r4	
    99d0:	24 53       	incd	r4		
	LED_PORT |= BIT_GREEN;
    99d2:	5f 42 21 00 	mov.b	&0x0021,r15	
    99d6:	6f d3       	bis.b	#2,	r15	;r3 As==10
    99d8:	c2 4f 21 00 	mov.b	r15,	&0x0021	
}
    99dc:	34 41       	pop	r4		
    99de:	30 41       	ret			

000099e0 <led_green_switch>:

void led_green_switch(void)
{
    99e0:	04 12       	push	r4		
    99e2:	04 41       	mov	r1,	r4	
    99e4:	24 53       	incd	r4		
	LED_PORT ^= BIT_GREEN;
    99e6:	5f 42 21 00 	mov.b	&0x0021,r15	
    99ea:	6f e3       	xor.b	#2,	r15	;r3 As==10
    99ec:	c2 4f 21 00 	mov.b	r15,	&0x0021	
}
    99f0:	34 41       	pop	r4		
    99f2:	30 41       	ret			

000099f4 <led_red_off>:

void led_red_off(void)
{
    99f4:	04 12       	push	r4		
    99f6:	04 41       	mov	r1,	r4	
    99f8:	24 53       	incd	r4		
	LED_PORT &= ~BIT_RED;
    99fa:	5f 42 21 00 	mov.b	&0x0021,r15	
    99fe:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9a02:	c2 4f 21 00 	mov.b	r15,	&0x0021	
}
    9a06:	34 41       	pop	r4		
    9a08:	30 41       	ret			

00009a0a <led_red_on>:

void led_red_on(void)
{
    9a0a:	04 12       	push	r4		
    9a0c:	04 41       	mov	r1,	r4	
    9a0e:	24 53       	incd	r4		
	LED_PORT |= BIT_RED;
    9a10:	5f 42 21 00 	mov.b	&0x0021,r15	
    9a14:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9a16:	c2 4f 21 00 	mov.b	r15,	&0x0021	
}
    9a1a:	34 41       	pop	r4		
    9a1c:	30 41       	ret			

00009a1e <led_red_switch>:

void led_red_switch(void)
{
    9a1e:	04 12       	push	r4		
    9a20:	04 41       	mov	r1,	r4	
    9a22:	24 53       	incd	r4		
	LED_PORT ^= BIT_RED;
    9a24:	5f 42 21 00 	mov.b	&0x0021,r15	
    9a28:	5f e3       	xor.b	#1,	r15	;r3 As==01
    9a2a:	c2 4f 21 00 	mov.b	r15,	&0x0021	
}
    9a2e:	34 41       	pop	r4		
    9a30:	30 41       	ret			

00009a32 <leds_off>:

void leds_off(void)
{
    9a32:	04 12       	push	r4		
    9a34:	04 41       	mov	r1,	r4	
    9a36:	24 53       	incd	r4		
	LED_PORT &= ~(BIT_GREEN | BIT_RED);
    9a38:	5f 42 21 00 	mov.b	&0x0021,r15	
    9a3c:	7f f0 fc ff 	and.b	#-4,	r15	;#0xfffc
    9a40:	c2 4f 21 00 	mov.b	r15,	&0x0021	
}
    9a44:	34 41       	pop	r4		
    9a46:	30 41       	ret			

00009a48 <leds_on>:

void leds_on(void)
{
    9a48:	04 12       	push	r4		
    9a4a:	04 41       	mov	r1,	r4	
    9a4c:	24 53       	incd	r4		
	LED_PORT |= (BIT_GREEN | BIT_RED);
    9a4e:	5f 42 21 00 	mov.b	&0x0021,r15	
    9a52:	7f d0 03 00 	bis.b	#3,	r15	;#0x0003
    9a56:	c2 4f 21 00 	mov.b	r15,	&0x0021	
}
    9a5a:	34 41       	pop	r4		
    9a5c:	30 41       	ret			

00009a5e <leds_init>:

void leds_init(void)
{
    9a5e:	04 12       	push	r4		
    9a60:	04 41       	mov	r1,	r4	
    9a62:	24 53       	incd	r4		
	P1OUT &= ~(BIT_GREEN | BIT_RED);
    9a64:	5f 42 21 00 	mov.b	&0x0021,r15	
    9a68:	7f f0 fc ff 	and.b	#-4,	r15	;#0xfffc
    9a6c:	c2 4f 21 00 	mov.b	r15,	&0x0021	
	P1DIR |= (BIT_GREEN | BIT_RED);
    9a70:	5f 42 22 00 	mov.b	&0x0022,r15	
    9a74:	7f d0 03 00 	bis.b	#3,	r15	;#0x0003
    9a78:	c2 4f 22 00 	mov.b	r15,	&0x0022	
	P1SEL &= ~(BIT_GREEN | BIT_RED);
    9a7c:	5f 42 26 00 	mov.b	&0x0026,r15	
    9a80:	7f f0 fc ff 	and.b	#-4,	r15	;#0xfffc
    9a84:	c2 4f 26 00 	mov.b	r15,	&0x0026	
	leds_off();
    9a88:	b0 12 32 9a 	call	#0x9a32	
}
    9a8c:	34 41       	pop	r4		
    9a8e:	30 41       	ret			

00009a90 <spi_init>:
            SPI_CONFIG_PORT();				\
            UCB0CTL1 &= ~UCSWRST;                         \
       )

void spi_init(void)
{
    9a90:	04 12       	push	r4		
    9a92:	04 41       	mov	r1,	r4	
    9a94:	24 53       	incd	r4		
	/* configure all SPI related pins */
	SPI_CONFIG_CSN_PIN_AS_OUTPUT();
    9a96:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9a9a:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9a9c:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
	SPI_CONFIG_SCLK_PIN_AS_OUTPUT();
    9aa0:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9aa4:	7f d2       	bis.b	#8,	r15	;r2 As==11
    9aa6:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
	SPI_CONFIG_SI_PIN_AS_OUTPUT();
    9aaa:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9aae:	6f d3       	bis.b	#2,	r15	;r3 As==10
    9ab0:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
	SPI_CONFIG_SO_PIN_AS_INPUT();

	/* set CSn to default high level */
	SPI_DRIVE_CSN_HIGH();
    9ab4:	5f 42 19 00 	mov.b	&0x0019,r15	
    9ab8:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9aba:	c2 4f 19 00 	mov.b	r15,	&0x0019	

	/* initialize the SPI registers */
	SPI_INIT();
    9abe:	d2 43 69 00 	mov.b	#1,	&0x0069	;r3 As==01
    9ac2:	f2 40 81 ff 	mov.b	#-127,	&0x0069	;#0xff81
    9ac6:	69 00 
    9ac8:	f2 40 a9 ff 	mov.b	#-87,	&0x0068	;#0xffa9
    9acc:	68 00 
    9ace:	e2 43 6a 00 	mov.b	#2,	&0x006a	;r3 As==10
    9ad2:	c2 43 6b 00 	mov.b	#0,	&0x006b	;r3 As==00
    9ad6:	5f 42 1b 00 	mov.b	&0x001b,r15	
    9ada:	7f d0 0e 00 	bis.b	#14,	r15	;#0x000e
    9ade:	c2 4f 1b 00 	mov.b	r15,	&0x001b	
    9ae2:	5f 42 69 00 	mov.b	&0x0069,r15	
    9ae6:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9aea:	c2 4f 69 00 	mov.b	r15,	&0x0069	
}
    9aee:	34 41       	pop	r4		
    9af0:	30 41       	ret			

00009af2 <spi_clear_rx_IFG>:

/* ************************************************** */
/* ************************************************** */
/* ************************************************** */

void inline spi_clear_rx_IFG() {
    9af2:	04 12       	push	r4		
    9af4:	04 41       	mov	r1,	r4	
    9af6:	24 53       	incd	r4		
	__asm__ __volatile__("BIC.B #4, &0x3	/* BIC.B #UCB0RXIFG, #IFG2 */ \n");
    9af8:	e2 c2 03 00 	bic.b	#4,	&0x0003	;r2 As==10
}
    9afc:	34 41       	pop	r4		
    9afe:	30 41       	ret			

00009b00 <spi_tx_rx>:

int spi_tx_rx(int data)
{
    9b00:	04 12       	push	r4		
    9b02:	04 41       	mov	r1,	r4	
    9b04:	24 53       	incd	r4		
    9b06:	21 82       	sub	#4,	r1	;r2 As==10
    9b08:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	char res;
	spi_clear_rx_IFG();
    9b0c:	b0 12 f2 9a 	call	#0x9af2	
	SPI_TX = data;
    9b10:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9b14:	4f 4f       	mov.b	r15,	r15	
    9b16:	c2 4f 6f 00 	mov.b	r15,	&0x006f	
	SPI_WAIT_EOR();
    9b1a:	5f 42 03 00 	mov.b	&0x0003,r15	
    9b1e:	4f 4f       	mov.b	r15,	r15	
    9b20:	2f f2       	and	#4,	r15	;r2 As==10
    9b22:	0f 93       	tst	r15		
    9b24:	fa 27       	jz	$-10     	;abs 0x9b1a
	res = SPI_RX;
    9b26:	5f 42 6e 00 	mov.b	&0x006e,r15	
    9b2a:	c4 4f fa ff 	mov.b	r15,	-6(r4)	;0xfffa(r4)
	return res;
    9b2e:	5f 44 fa ff 	mov.b	-6(r4),	r15	;0xfffa(r4)
    9b32:	8f 11       	sxt	r15		
}
    9b34:	21 52       	add	#4,	r1	;r2 As==10
    9b36:	34 41       	pop	r4		
    9b38:	30 41       	ret			

00009b3a <spi_check_miso_high>:



int spi_check_miso_high(void)
{
    9b3a:	04 12       	push	r4		
    9b3c:	04 41       	mov	r1,	r4	
    9b3e:	24 53       	incd	r4		
	return SPI_SO_IS_HIGH();
    9b40:	5f 42 18 00 	mov.b	&0x0018,r15	
    9b44:	4f 4f       	mov.b	r15,	r15	
    9b46:	2f f2       	and	#4,	r15	;r2 As==10
}
    9b48:	34 41       	pop	r4		
    9b4a:	30 41       	ret			

00009b4c <spi_tx_burst>:

void spi_tx_burst(char *data, int len)
{
    9b4c:	04 12       	push	r4		
    9b4e:	04 41       	mov	r1,	r4	
    9b50:	24 53       	incd	r4		
    9b52:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    9b56:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    9b5a:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	int i;
	for (i = 0; i < len; i++) {
    9b5e:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    9b62:	11 3c       	jmp	$+36     	;abs 0x9b86
		spi_clear_rx_IFG();
    9b64:	b0 12 f2 9a 	call	#0x9af2	
		SPI_TX = data[i];
    9b68:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    9b6c:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    9b70:	6f 4f       	mov.b	@r15,	r15	
    9b72:	c2 4f 6f 00 	mov.b	r15,	&0x006f	
		SPI_WAIT_EOR();
    9b76:	5f 42 03 00 	mov.b	&0x0003,r15	
    9b7a:	4f 4f       	mov.b	r15,	r15	
    9b7c:	2f f2       	and	#4,	r15	;r2 As==10
    9b7e:	0f 93       	tst	r15		
    9b80:	fa 27       	jz	$-10     	;abs 0x9b76
}

void spi_tx_burst(char *data, int len)
{
	int i;
	for (i = 0; i < len; i++) {
    9b82:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    9b86:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    9b8a:	f8 ff 
    9b8c:	eb 3b       	jl	$-40     	;abs 0x9b64
		spi_clear_rx_IFG();
		SPI_TX = data[i];
		SPI_WAIT_EOR();
	}
}
    9b8e:	31 50 06 00 	add	#6,	r1	;#0x0006
    9b92:	34 41       	pop	r4		
    9b94:	30 41       	ret			

00009b96 <spi_rx_burst>:

void spi_rx_burst(char *data, int len)
{
    9b96:	04 12       	push	r4		
    9b98:	04 41       	mov	r1,	r4	
    9b9a:	24 53       	incd	r4		
    9b9c:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    9ba0:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    9ba4:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	int i;
	for (i = 0; i < len; i++) {
    9ba8:	84 43 f8 ff 	mov	#0,	-8(r4)	;r3 As==00, 0xfff8(r4)
    9bac:	13 3c       	jmp	$+40     	;abs 0x9bd4
		SPI_TX = SPI_DUMMY_BYTE;
    9bae:	f2 40 55 00 	mov.b	#85,	&0x006f	;#0x0055
    9bb2:	6f 00 
		SPI_WAIT_EOR();
    9bb4:	5f 42 03 00 	mov.b	&0x0003,r15	
    9bb8:	4f 4f       	mov.b	r15,	r15	
    9bba:	2f f2       	and	#4,	r15	;r2 As==10
    9bbc:	0f 93       	tst	r15		
    9bbe:	fa 27       	jz	$-10     	;abs 0x9bb4
		data[i] = SPI_RX;
    9bc0:	1f 44 f8 ff 	mov	-8(r4),	r15	;0xfff8(r4)
    9bc4:	1f 54 fa ff 	add	-6(r4),	r15	;0xfffa(r4)
    9bc8:	5e 42 6e 00 	mov.b	&0x006e,r14	
    9bcc:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
}

void spi_rx_burst(char *data, int len)
{
	int i;
	for (i = 0; i < len; i++) {
    9bd0:	94 53 f8 ff 	inc	-8(r4)		;0xfff8(r4)
    9bd4:	94 94 fc ff 	cmp	-4(r4),	-8(r4)	;0xfffc(r4), 0xfff8(r4)
    9bd8:	f8 ff 
    9bda:	e9 3b       	jl	$-44     	;abs 0x9bae
		SPI_TX = SPI_DUMMY_BYTE;
		SPI_WAIT_EOR();
		data[i] = SPI_RX;
	}
}
    9bdc:	31 50 06 00 	add	#6,	r1	;#0x0006
    9be0:	34 41       	pop	r4		
    9be2:	30 41       	ret			

00009be4 <spi_select_radio>:
/* ************************************************** */
/* ************************************************** */
/* ************************************************** */

void spi_select_radio(void)
{
    9be4:	04 12       	push	r4		
    9be6:	04 41       	mov	r1,	r4	
    9be8:	24 53       	incd	r4		
	RADIO_ENABLE();
    9bea:	5f 42 19 00 	mov.b	&0x0019,r15	
    9bee:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9bf2:	c2 4f 19 00 	mov.b	r15,	&0x0019	
}
    9bf6:	34 41       	pop	r4		
    9bf8:	30 41       	ret			

00009bfa <spi_deselect_radio>:

void spi_deselect_radio(void)
{
    9bfa:	04 12       	push	r4		
    9bfc:	04 41       	mov	r1,	r4	
    9bfe:	24 53       	incd	r4		
	RADIO_DISABLE();
    9c00:	5f 42 19 00 	mov.b	&0x0019,r15	
    9c04:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9c06:	c2 4f 19 00 	mov.b	r15,	&0x0019	
}
    9c0a:	34 41       	pop	r4		
    9c0c:	30 41       	ret			

00009c0e <Timer_A>:

static volatile timer_cb timerA_cb;
static volatile int timerA_wakeup;

ISR(TIMERA0, Timer_A)
{
    9c0e:	0f 12       	push	r15		
    9c10:	0e 12       	push	r14		
    9c12:	0d 12       	push	r13		
    9c14:	0c 12       	push	r12		
    9c16:	04 12       	push	r4		
    9c18:	04 41       	mov	r1,	r4	
    9c1a:	34 50 0a 00 	add	#10,	r4	;#0x000a
	if (timerA_cb != NULL)
    9c1e:	1f 42 72 02 	mov	&0x0272,r15	
    9c22:	0f 93       	tst	r15		
    9c24:	03 24       	jz	$+8      	;abs 0x9c2c
		timerA_cb();
    9c26:	1f 42 72 02 	mov	&0x0272,r15	
    9c2a:	8f 12       	call	r15		

	if (timerA_wakeup == 1)
    9c2c:	1f 42 74 02 	mov	&0x0274,r15	
    9c30:	1f 93       	cmp	#1,	r15	;r3 As==01
    9c32:	03 20       	jnz	$+8      	;abs 0x9c3a
		LPM_OFF_ON_EXIT;
    9c34:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    9c38:	00 00 
}
    9c3a:	34 41       	pop	r4		
    9c3c:	3c 41       	pop	r12		
    9c3e:	3d 41       	pop	r13		
    9c40:	3e 41       	pop	r14		
    9c42:	3f 41       	pop	r15		
    9c44:	00 13       	reti			

00009c46 <timerA_init>:

void timerA_init(void)
{
    9c46:	04 12       	push	r4		
    9c48:	04 41       	mov	r1,	r4	
    9c4a:	24 53       	incd	r4		
	timerA_cb = NULL;
    9c4c:	82 43 72 02 	mov	#0,	&0x0272	;r3 As==00
	timerA_wakeup = 0;
    9c50:	82 43 74 02 	mov	#0,	&0x0274	;r3 As==00
	timerA_stop();
    9c54:	b0 12 e4 9c 	call	#0x9ce4	
}
    9c58:	34 41       	pop	r4		
    9c5a:	30 41       	ret			

00009c5c <timerA_register_cb>:

void timerA_register_cb(timer_cb cb)
{
    9c5c:	04 12       	push	r4		
    9c5e:	04 41       	mov	r1,	r4	
    9c60:	24 53       	incd	r4		
    9c62:	21 83       	decd	r1		
    9c64:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	timerA_cb = cb;
    9c68:	92 44 fc ff 	mov	-4(r4),	&0x0272	;0xfffc(r4)
    9c6c:	72 02 
}
    9c6e:	21 53       	incd	r1		
    9c70:	34 41       	pop	r4		
    9c72:	30 41       	ret			

00009c74 <timerA_set_wakeup>:

void timerA_set_wakeup(int w)
{
    9c74:	04 12       	push	r4		
    9c76:	04 41       	mov	r1,	r4	
    9c78:	24 53       	incd	r4		
    9c7a:	21 83       	decd	r1		
    9c7c:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	timerA_wakeup = w;
    9c80:	92 44 fc ff 	mov	-4(r4),	&0x0274	;0xfffc(r4)
    9c84:	74 02 
}
    9c86:	21 53       	incd	r1		
    9c88:	34 41       	pop	r4		
    9c8a:	30 41       	ret			

00009c8c <timerA_start_ticks>:

void timerA_start_ticks(unsigned ticks)
{
    9c8c:	04 12       	push	r4		
    9c8e:	04 41       	mov	r1,	r4	
    9c90:	24 53       	incd	r4		
    9c92:	21 83       	decd	r1		
    9c94:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	BCSCTL3 |= LFXT1S_2;	// LFXT1 = VLO
    9c98:	5f 42 53 00 	mov.b	&0x0053,r15	
    9c9c:	7f d0 20 00 	bis.b	#32,	r15	;#0x0020
    9ca0:	c2 4f 53 00 	mov.b	r15,	&0x0053	
	TACCTL0 = CCIE;		// TCCR0 interrupt enabled
    9ca4:	b2 40 10 00 	mov	#16,	&0x0162	;#0x0010
    9ca8:	62 01 
	TAR = 0;
    9caa:	82 43 70 01 	mov	#0,	&0x0170	;r3 As==00
	TACCR0 = ticks;
    9cae:	92 44 fc ff 	mov	-4(r4),	&0x0172	;0xfffc(r4)
    9cb2:	72 01 
	TACTL = TASSEL_1 + MC_1;	// ACLK, upmode
    9cb4:	b2 40 10 01 	mov	#272,	&0x0160	;#0x0110
    9cb8:	60 01 
}
    9cba:	21 53       	incd	r1		
    9cbc:	34 41       	pop	r4		
    9cbe:	30 41       	ret			

00009cc0 <timerA_start_milliseconds>:

#define VLO_FREQ 12000
#define TICKS_IN_MS (VLO_FREQ/1000)

void timerA_start_milliseconds(unsigned ms)
{
    9cc0:	04 12       	push	r4		
    9cc2:	04 41       	mov	r1,	r4	
    9cc4:	24 53       	incd	r4		
    9cc6:	21 83       	decd	r1		
    9cc8:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	timerA_start_ticks(ms * TICKS_IN_MS);
    9ccc:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    9cd0:	0f 4e       	mov	r14,	r15	
    9cd2:	0f 5f       	rla	r15		
    9cd4:	0f 5e       	add	r14,	r15	
    9cd6:	0f 5f       	rla	r15		
    9cd8:	0f 5f       	rla	r15		
    9cda:	b0 12 8c 9c 	call	#0x9c8c	
}
    9cde:	21 53       	incd	r1		
    9ce0:	34 41       	pop	r4		
    9ce2:	30 41       	ret			

00009ce4 <timerA_stop>:

void timerA_stop(void)
{
    9ce4:	04 12       	push	r4		
    9ce6:	04 41       	mov	r1,	r4	
    9ce8:	24 53       	incd	r4		
	TACTL = 0;
    9cea:	82 43 60 01 	mov	#0,	&0x0160	;r3 As==00
}
    9cee:	34 41       	pop	r4		
    9cf0:	30 41       	ret			

00009cf2 <Timer_B>:

static volatile timer_cb timerB_cb;
static volatile int timerB_wakeup;

ISR(TIMERB0, Timer_B)
{
    9cf2:	0f 12       	push	r15		
    9cf4:	0e 12       	push	r14		
    9cf6:	0d 12       	push	r13		
    9cf8:	0c 12       	push	r12		
    9cfa:	04 12       	push	r4		
    9cfc:	04 41       	mov	r1,	r4	
    9cfe:	34 50 0a 00 	add	#10,	r4	;#0x000a
	if (timerB_cb != NULL)
    9d02:	1f 42 76 02 	mov	&0x0276,r15	
    9d06:	0f 93       	tst	r15		
    9d08:	03 24       	jz	$+8      	;abs 0x9d10
		timerB_cb();
    9d0a:	1f 42 76 02 	mov	&0x0276,r15	
    9d0e:	8f 12       	call	r15		

	if (timerB_wakeup == 1)
    9d10:	1f 42 78 02 	mov	&0x0278,r15	
    9d14:	1f 93       	cmp	#1,	r15	;r3 As==01
    9d16:	03 20       	jnz	$+8      	;abs 0x9d1e
		LPM_OFF_ON_EXIT;
    9d18:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    9d1c:	00 00 
}
    9d1e:	34 41       	pop	r4		
    9d20:	3c 41       	pop	r12		
    9d22:	3d 41       	pop	r13		
    9d24:	3e 41       	pop	r14		
    9d26:	3f 41       	pop	r15		
    9d28:	00 13       	reti			

00009d2a <timerB_init>:

void timerB_init(void)
{
    9d2a:	04 12       	push	r4		
    9d2c:	04 41       	mov	r1,	r4	
    9d2e:	24 53       	incd	r4		
	timerB_cb = NULL;
    9d30:	82 43 76 02 	mov	#0,	&0x0276	;r3 As==00
	timerB_wakeup = 0;
    9d34:	82 43 78 02 	mov	#0,	&0x0278	;r3 As==00
	timerB_stop();
    9d38:	b0 12 c8 9d 	call	#0x9dc8	
}
    9d3c:	34 41       	pop	r4		
    9d3e:	30 41       	ret			

00009d40 <timerB_register_cb>:

void timerB_register_cb(timer_cb cb)
{
    9d40:	04 12       	push	r4		
    9d42:	04 41       	mov	r1,	r4	
    9d44:	24 53       	incd	r4		
    9d46:	21 83       	decd	r1		
    9d48:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	timerB_cb = cb;
    9d4c:	92 44 fc ff 	mov	-4(r4),	&0x0276	;0xfffc(r4)
    9d50:	76 02 
}
    9d52:	21 53       	incd	r1		
    9d54:	34 41       	pop	r4		
    9d56:	30 41       	ret			

00009d58 <timerB_set_wakeup>:

void timerB_set_wakeup(int w)
{
    9d58:	04 12       	push	r4		
    9d5a:	04 41       	mov	r1,	r4	
    9d5c:	24 53       	incd	r4		
    9d5e:	21 83       	decd	r1		
    9d60:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	timerB_wakeup = w;
    9d64:	92 44 fc ff 	mov	-4(r4),	&0x0278	;0xfffc(r4)
    9d68:	78 02 
}
    9d6a:	21 53       	incd	r1		
    9d6c:	34 41       	pop	r4		
    9d6e:	30 41       	ret			

00009d70 <timerB_start_ticks>:

void timerB_start_ticks(unsigned ticks)
{
    9d70:	04 12       	push	r4		
    9d72:	04 41       	mov	r1,	r4	
    9d74:	24 53       	incd	r4		
    9d76:	21 83       	decd	r1		
    9d78:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	BCSCTL3 |= LFXT1S_2;	// LFXT1 = VLO
    9d7c:	5f 42 53 00 	mov.b	&0x0053,r15	
    9d80:	7f d0 20 00 	bis.b	#32,	r15	;#0x0020
    9d84:	c2 4f 53 00 	mov.b	r15,	&0x0053	
	TBCCTL0 = CCIE;		// TCCR0 interrupt enabled
    9d88:	b2 40 10 00 	mov	#16,	&0x0182	;#0x0010
    9d8c:	82 01 
	TBR = 0;
    9d8e:	82 43 90 01 	mov	#0,	&0x0190	;r3 As==00
	TBCCR0 = ticks;
    9d92:	92 44 fc ff 	mov	-4(r4),	&0x0192	;0xfffc(r4)
    9d96:	92 01 
	TBCTL = TBSSEL_1 + MC_1;	// ACLK, upmode
    9d98:	b2 40 10 01 	mov	#272,	&0x0180	;#0x0110
    9d9c:	80 01 
}
    9d9e:	21 53       	incd	r1		
    9da0:	34 41       	pop	r4		
    9da2:	30 41       	ret			

00009da4 <timerB_start_milliseconds>:

void timerB_start_milliseconds(unsigned ms)
{
    9da4:	04 12       	push	r4		
    9da6:	04 41       	mov	r1,	r4	
    9da8:	24 53       	incd	r4		
    9daa:	21 83       	decd	r1		
    9dac:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	timerB_start_ticks(ms * TICKS_IN_MS);
    9db0:	1e 44 fc ff 	mov	-4(r4),	r14	;0xfffc(r4)
    9db4:	0f 4e       	mov	r14,	r15	
    9db6:	0f 5f       	rla	r15		
    9db8:	0f 5e       	add	r14,	r15	
    9dba:	0f 5f       	rla	r15		
    9dbc:	0f 5f       	rla	r15		
    9dbe:	b0 12 70 9d 	call	#0x9d70	
}
    9dc2:	21 53       	incd	r1		
    9dc4:	34 41       	pop	r4		
    9dc6:	30 41       	ret			

00009dc8 <timerB_stop>:

void timerB_stop(void)
{
    9dc8:	04 12       	push	r4		
    9dca:	04 41       	mov	r1,	r4	
    9dcc:	24 53       	incd	r4		
	TBCTL = 0;
    9dce:	82 43 80 01 	mov	#0,	&0x0180	;r3 As==00
}
    9dd2:	34 41       	pop	r4		
    9dd4:	30 41       	ret			

00009dd6 <uart_init>:
/* ************************************************** */

static volatile uart_cb_t uart_cb;

void uart_init(int config)
{
    9dd6:	04 12       	push	r4		
    9dd8:	04 41       	mov	r1,	r4	
    9dda:	24 53       	incd	r4		
    9ddc:	21 83       	decd	r1		
    9dde:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	P3SEL |= (BIT_TX | BIT_RX);	/* uart   */
    9de2:	5f 42 1b 00 	mov.b	&0x001b,r15	
    9de6:	7f d0 30 00 	bis.b	#48,	r15	;#0x0030
    9dea:	c2 4f 1b 00 	mov.b	r15,	&0x001b	
	P3DIR |= (BIT_TX);	/* output */
    9dee:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9df2:	7f d0 10 00 	bis.b	#16,	r15	;#0x0010
    9df6:	c2 4f 1a 00 	mov.b	r15,	&0x001a	
	P3DIR &= ~(BIT_RX);	/* input  */
    9dfa:	5f 42 1a 00 	mov.b	&0x001a,r15	
    9dfe:	7f f0 df ff 	and.b	#-33,	r15	;#0xffdf
    9e02:	c2 4f 1a 00 	mov.b	r15,	&0x001a	

	switch (config) {
    9e06:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9e0a:	1f 93       	cmp	#1,	r15	;r3 As==01
    9e0c:	03 24       	jz	$+8      	;abs 0x9e14
    9e0e:	3f 92       	cmp	#8,	r15	;r2 As==11
    9e10:	12 24       	jz	$+38     	;abs 0x9e36
    9e12:	23 3c       	jmp	$+72     	;abs 0x9e5a
	case UART_9600_SMCLK_1MHZ:
		UCA0CTL1 = UCSSEL_2;	// SMCLK
    9e14:	f2 40 80 ff 	mov.b	#-128,	&0x0061	;#0xff80
    9e18:	61 00 
		UCA0BR0 = 0x68;	// 9600 from 1Mhz
    9e1a:	f2 40 68 00 	mov.b	#104,	&0x0062	;#0x0068
    9e1e:	62 00 
		UCA0BR1 = 0x00;
    9e20:	c2 43 63 00 	mov.b	#0,	&0x0063	;r3 As==00
		UCA0MCTL = UCBRS_2;
    9e24:	e2 42 64 00 	mov.b	#4,	&0x0064	;r2 As==10
		UCA0CTL1 &= ~UCSWRST;	// **Initialize USCI state machine**
    9e28:	5f 42 61 00 	mov.b	&0x0061,r15	
    9e2c:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9e30:	c2 4f 61 00 	mov.b	r15,	&0x0061	
		break;
    9e34:	13 3c       	jmp	$+40     	;abs 0x9e5c

	case UART_9600_SMCLK_8MHZ:
		UCA0CTL1 = UCSSEL_2;	// SMCLK
    9e36:	f2 40 80 ff 	mov.b	#-128,	&0x0061	;#0xff80
    9e3a:	61 00 
		UCA0BR0 = 0x41;	// 9600 from 8Mhz
    9e3c:	f2 40 41 00 	mov.b	#65,	&0x0062	;#0x0041
    9e40:	62 00 
		UCA0BR1 = 0x03;
    9e42:	f2 40 03 00 	mov.b	#3,	&0x0063	;#0x0003
    9e46:	63 00 
		UCA0MCTL = UCBRS_2;
    9e48:	e2 42 64 00 	mov.b	#4,	&0x0064	;r2 As==10
		UCA0CTL1 &= ~UCSWRST;	// **Initialize USCI state machine**
    9e4c:	5f 42 61 00 	mov.b	&0x0061,r15	
    9e50:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9e54:	c2 4f 61 00 	mov.b	r15,	&0x0061	
		break;
    9e58:	01 3c       	jmp	$+4      	;abs 0x9e5c

	default:
		break;
    9e5a:	03 43       	nop			
	}

	uart_cb = NULL;
    9e5c:	82 43 7a 02 	mov	#0,	&0x027a	;r3 As==00
}
    9e60:	21 53       	incd	r1		
    9e62:	34 41       	pop	r4		
    9e64:	30 41       	ret			

00009e66 <uart_stop>:
/* ************************************************** */
/* ************************************************** */
/* ************************************************** */

void uart_stop(void)
{
    9e66:	04 12       	push	r4		
    9e68:	04 41       	mov	r1,	r4	
    9e6a:	24 53       	incd	r4		
}
    9e6c:	34 41       	pop	r4		
    9e6e:	30 41       	ret			

00009e70 <putchar>:
/* ************************************************** */
/* ************************************************** */
/* ************************************************** */

int putchar(int c)
{
    9e70:	04 12       	push	r4		
    9e72:	04 41       	mov	r1,	r4	
    9e74:	24 53       	incd	r4		
    9e76:	21 83       	decd	r1		
    9e78:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	UCA0TXBUF = c;
    9e7c:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9e80:	4f 4f       	mov.b	r15,	r15	
    9e82:	c2 4f 67 00 	mov.b	r15,	&0x0067	
	while (!(IFG2 & UCA0TXIFG)) ;	// USCI_A0 TX buffer ready?
    9e86:	03 43       	nop			
    9e88:	5f 42 03 00 	mov.b	&0x0003,r15	
    9e8c:	4f 4f       	mov.b	r15,	r15	
    9e8e:	2f f3       	and	#2,	r15	;r3 As==10
    9e90:	0f 93       	tst	r15		
    9e92:	fa 27       	jz	$-10     	;abs 0x9e88
	return (unsigned char)c;
    9e94:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    9e98:	4f 4f       	mov.b	r15,	r15	
    9e9a:	4f 4f       	mov.b	r15,	r15	
}
    9e9c:	21 53       	incd	r1		
    9e9e:	34 41       	pop	r4		
    9ea0:	30 41       	ret			

00009ea2 <uart_getchar>:

int uart_getchar(void)
{
    9ea2:	04 12       	push	r4		
    9ea4:	04 41       	mov	r1,	r4	
    9ea6:	24 53       	incd	r4		
    9ea8:	21 83       	decd	r1		
	int c;
	c = UCA0RXBUF;
    9eaa:	5f 42 66 00 	mov.b	&0x0066,r15	
    9eae:	c4 4f fc ff 	mov.b	r15,	-4(r4)	;0xfffc(r4)
    9eb2:	c4 43 fd ff 	mov.b	#0,	-3(r4)	;r3 As==00, 0xfffd(r4)
	return c;
    9eb6:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
}
    9eba:	21 53       	incd	r1		
    9ebc:	34 41       	pop	r4		
    9ebe:	30 41       	ret			

00009ec0 <uart_eint>:
/* ************************************************** */
/* ************************************************** */
/* ************************************************** */

void uart_eint(void)
{
    9ec0:	04 12       	push	r4		
    9ec2:	04 41       	mov	r1,	r4	
    9ec4:	24 53       	incd	r4		
	IE2 |= UCA0RXIE;	// Enable USCI_A0 RX interrupt
    9ec6:	5f 42 01 00 	mov.b	&0x0001,r15	
    9eca:	5f d3       	bis.b	#1,	r15	;r3 As==01
    9ecc:	c2 4f 01 00 	mov.b	r15,	&0x0001	
}
    9ed0:	34 41       	pop	r4		
    9ed2:	30 41       	ret			

00009ed4 <uart_dint>:

void uart_dint(void)
{
    9ed4:	04 12       	push	r4		
    9ed6:	04 41       	mov	r1,	r4	
    9ed8:	24 53       	incd	r4		
	IE2 &= ~UCA0RXIE;
    9eda:	5f 42 01 00 	mov.b	&0x0001,r15	
    9ede:	7f f0 fe ff 	and.b	#-2,	r15	;#0xfffe
    9ee2:	c2 4f 01 00 	mov.b	r15,	&0x0001	
}
    9ee6:	34 41       	pop	r4		
    9ee8:	30 41       	ret			

00009eea <uart_register_cb>:

void uart_register_cb(uart_cb_t cb)
{
    9eea:	04 12       	push	r4		
    9eec:	04 41       	mov	r1,	r4	
    9eee:	24 53       	incd	r4		
    9ef0:	21 83       	decd	r1		
    9ef2:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	uart_cb = cb;
    9ef6:	92 44 fc ff 	mov	-4(r4),	&0x027a	;0xfffc(r4)
    9efa:	7a 02 
	if (cb == NULL) {
    9efc:	84 93 fc ff 	tst	-4(r4)		;0xfffc(r4)
    9f00:	03 20       	jnz	$+8      	;abs 0x9f08
		uart_dint();
    9f02:	b0 12 d4 9e 	call	#0x9ed4	
    9f06:	02 3c       	jmp	$+6      	;abs 0x9f0c
	} else {
		uart_eint();
    9f08:	b0 12 c0 9e 	call	#0x9ec0	
	}
}
    9f0c:	21 53       	incd	r1		
    9f0e:	34 41       	pop	r4		
    9f10:	30 41       	ret			

00009f12 <usart0irq>:

ISR(USCIAB0RX, usart0irq)
{
    9f12:	0f 12       	push	r15		
    9f14:	0e 12       	push	r14		
    9f16:	0d 12       	push	r13		
    9f18:	0c 12       	push	r12		
    9f1a:	04 12       	push	r4		
    9f1c:	04 41       	mov	r1,	r4	
    9f1e:	34 50 0a 00 	add	#10,	r4	;#0x000a
    9f22:	21 83       	decd	r1		
	volatile unsigned char dummy;
	/* Check status register for receive errors. */
	if (UCA0STAT & UCRXERR) {
    9f24:	5f 42 65 00 	mov.b	&0x0065,r15	
    9f28:	4f 4f       	mov.b	r15,	r15	
    9f2a:	2f f2       	and	#4,	r15	;r2 As==10
    9f2c:	0f 93       	tst	r15		
    9f2e:	0a 24       	jz	$+22     	;abs 0x9f44
		/* Clear error flags by forcing a dummy read. */
		dummy = UCA0RXBUF;
    9f30:	5f 42 66 00 	mov.b	&0x0066,r15	
    9f34:	c4 4f f4 ff 	mov.b	r15,	-12(r4)	;0xfff4(r4)
		dummy += 1; /* warning gcc otherwise! */
    9f38:	5f 44 f4 ff 	mov.b	-12(r4),r15	;0xfff4(r4)
    9f3c:	5f 53       	inc.b	r15		
    9f3e:	c4 4f f4 ff 	mov.b	r15,	-12(r4)	;0xfff4(r4)
    9f42:	0a 3c       	jmp	$+22     	;abs 0x9f58
	} else {
		if (uart_cb(UCA0RXBUF) != 0) {
    9f44:	1e 42 7a 02 	mov	&0x027a,r14	
    9f48:	5f 42 66 00 	mov.b	&0x0066,r15	
    9f4c:	8e 12       	call	r14		
    9f4e:	0f 93       	tst	r15		
    9f50:	03 24       	jz	$+8      	;abs 0x9f58
			LPM_OFF_ON_EXIT;
    9f52:	b4 c0 f0 00 	bic	#240,	0(r4)	;#0x00f0, 0x0000(r4)
    9f56:	00 00 
		}
	}
}
    9f58:	21 53       	incd	r1		
    9f5a:	34 41       	pop	r4		
    9f5c:	3c 41       	pop	r12		
    9f5e:	3d 41       	pop	r13		
    9f60:	3e 41       	pop	r14		
    9f62:	3f 41       	pop	r15		
    9f64:	00 13       	reti			

00009f66 <button_init>:
#define BUTTON_MASK BIT2	/* P1.2 */

static volatile button_cb cb;

void button_init(void)
{
    9f66:	04 12       	push	r4		
    9f68:	04 41       	mov	r1,	r4	
    9f6a:	24 53       	incd	r4		
	cb = NULL;
    9f6c:	82 43 7c 02 	mov	#0,	&0x027c	;r3 As==00
	P1SEL &= ~BUTTON_MASK;
    9f70:	5f 42 26 00 	mov.b	&0x0026,r15	
    9f74:	7f f0 fb ff 	and.b	#-5,	r15	;#0xfffb
    9f78:	c2 4f 26 00 	mov.b	r15,	&0x0026	
	P1DIR &= ~BUTTON_MASK;
    9f7c:	5f 42 22 00 	mov.b	&0x0022,r15	
    9f80:	7f f0 fb ff 	and.b	#-5,	r15	;#0xfffb
    9f84:	c2 4f 22 00 	mov.b	r15,	&0x0022	
	P1IE &= ~BUTTON_MASK;
    9f88:	5f 42 25 00 	mov.b	&0x0025,r15	
    9f8c:	7f f0 fb ff 	and.b	#-5,	r15	;#0xfffb
    9f90:	c2 4f 25 00 	mov.b	r15,	&0x0025	
	P1IES |= BUTTON_MASK;
    9f94:	5f 42 24 00 	mov.b	&0x0024,r15	
    9f98:	6f d2       	bis.b	#4,	r15	;r2 As==10
    9f9a:	c2 4f 24 00 	mov.b	r15,	&0x0024	
	P1IFG &= ~BUTTON_MASK;
    9f9e:	5f 42 23 00 	mov.b	&0x0023,r15	
    9fa2:	7f f0 fb ff 	and.b	#-5,	r15	;#0xfffb
    9fa6:	c2 4f 23 00 	mov.b	r15,	&0x0023	
	P1REN |= BUTTON_MASK;
    9faa:	5f 42 27 00 	mov.b	&0x0027,r15	
    9fae:	6f d2       	bis.b	#4,	r15	;r2 As==10
    9fb0:	c2 4f 27 00 	mov.b	r15,	&0x0027	
	P1OUT |= BUTTON_MASK;
    9fb4:	5f 42 21 00 	mov.b	&0x0021,r15	
    9fb8:	6f d2       	bis.b	#4,	r15	;r2 As==10
    9fba:	c2 4f 21 00 	mov.b	r15,	&0x0021	
}
    9fbe:	34 41       	pop	r4		
    9fc0:	30 41       	ret			

00009fc2 <button_stop>:

void button_stop(void)
{
    9fc2:	04 12       	push	r4		
    9fc4:	04 41       	mov	r1,	r4	
    9fc6:	24 53       	incd	r4		
	P1SEL &= ~BUTTON_MASK;
    9fc8:	5f 42 26 00 	mov.b	&0x0026,r15	
    9fcc:	7f f0 fb ff 	and.b	#-5,	r15	;#0xfffb
    9fd0:	c2 4f 26 00 	mov.b	r15,	&0x0026	
	P1DIR &= ~BUTTON_MASK;
    9fd4:	5f 42 22 00 	mov.b	&0x0022,r15	
    9fd8:	7f f0 fb ff 	and.b	#-5,	r15	;#0xfffb
    9fdc:	c2 4f 22 00 	mov.b	r15,	&0x0022	
	P1IE &= ~BUTTON_MASK;
    9fe0:	5f 42 25 00 	mov.b	&0x0025,r15	
    9fe4:	7f f0 fb ff 	and.b	#-5,	r15	;#0xfffb
    9fe8:	c2 4f 25 00 	mov.b	r15,	&0x0025	
	P1IFG &= ~BUTTON_MASK;
    9fec:	5f 42 23 00 	mov.b	&0x0023,r15	
    9ff0:	7f f0 fb ff 	and.b	#-5,	r15	;#0xfffb
    9ff4:	c2 4f 23 00 	mov.b	r15,	&0x0023	
	P1REN &= ~BUTTON_MASK;
    9ff8:	5f 42 27 00 	mov.b	&0x0027,r15	
    9ffc:	7f f0 fb ff 	and.b	#-5,	r15	;#0xfffb
    a000:	c2 4f 27 00 	mov.b	r15,	&0x0027	
}
    a004:	34 41       	pop	r4		
    a006:	30 41       	ret			

0000a008 <button_is_pressed>:

int button_is_pressed(void)
{
    a008:	04 12       	push	r4		
    a00a:	04 41       	mov	r1,	r4	
    a00c:	24 53       	incd	r4		
	return ((P1IN & BUTTON_MASK) == 0);
    a00e:	5f 42 20 00 	mov.b	&0x0020,r15	
    a012:	4f 4f       	mov.b	r15,	r15	
    a014:	0e 4f       	mov	r15,	r14	
    a016:	2e f2       	and	#4,	r14	;r2 As==10
    a018:	1f 43       	mov	#1,	r15	;r3 As==01
    a01a:	0e 93       	tst	r14		
    a01c:	01 24       	jz	$+4      	;abs 0xa020
    a01e:	0f 43       	clr	r15		
}
    a020:	34 41       	pop	r4		
    a022:	30 41       	ret			

0000a024 <button_register_cb>:

void button_register_cb(button_cb f)
{
    a024:	04 12       	push	r4		
    a026:	04 41       	mov	r1,	r4	
    a028:	24 53       	incd	r4		
    a02a:	21 83       	decd	r1		
    a02c:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	cb = f;
    a030:	92 44 fc ff 	mov	-4(r4),	&0x027c	;0xfffc(r4)
    a034:	7c 02 
}
    a036:	21 53       	incd	r1		
    a038:	34 41       	pop	r4		
    a03a:	30 41       	ret			

0000a03c <button_enable_interrupt>:

void button_enable_interrupt(void)
{
    a03c:	04 12       	push	r4		
    a03e:	04 41       	mov	r1,	r4	
    a040:	24 53       	incd	r4		
	P1IE |= BUTTON_MASK;
    a042:	5f 42 25 00 	mov.b	&0x0025,r15	
    a046:	6f d2       	bis.b	#4,	r15	;r2 As==10
    a048:	c2 4f 25 00 	mov.b	r15,	&0x0025	
}
    a04c:	34 41       	pop	r4		
    a04e:	30 41       	ret			

0000a050 <button_disable_interrupt>:

void button_disable_interrupt(void)
{
    a050:	04 12       	push	r4		
    a052:	04 41       	mov	r1,	r4	
    a054:	24 53       	incd	r4		
	P1IE &= ~BUTTON_MASK;
    a056:	5f 42 25 00 	mov.b	&0x0025,r15	
    a05a:	7f f0 fb ff 	and.b	#-5,	r15	;#0xfffb
    a05e:	c2 4f 25 00 	mov.b	r15,	&0x0025	
}
    a062:	34 41       	pop	r4		
    a064:	30 41       	ret			

0000a066 <port1_irq_handler>:

ISR(PORT1, port1_irq_handler)
{
    a066:	0f 12       	push	r15		
    a068:	0e 12       	push	r14		
    a06a:	0d 12       	push	r13		
    a06c:	0c 12       	push	r12		
    a06e:	04 12       	push	r4		
    a070:	04 41       	mov	r1,	r4	
    a072:	34 50 0a 00 	add	#10,	r4	;#0x000a
	if (P1IFG & (P1IE & (1 << 2))) {
    a076:	5f 42 23 00 	mov.b	&0x0023,r15	
    a07a:	4f 4f       	mov.b	r15,	r15	
    a07c:	5e 42 25 00 	mov.b	&0x0025,r14	
    a080:	4e 4e       	mov.b	r14,	r14	
    a082:	2e f2       	and	#4,	r14	;r2 As==10
    a084:	0f fe       	and	r14,	r15	
    a086:	0f 93       	tst	r15		
    a088:	07 24       	jz	$+16     	;abs 0xa098
		if (cb != NULL) {
    a08a:	1f 42 7c 02 	mov	&0x027c,r15	
    a08e:	0f 93       	tst	r15		
    a090:	03 24       	jz	$+8      	;abs 0xa098
			cb();
    a092:	1f 42 7c 02 	mov	&0x027c,r15	
    a096:	8f 12       	call	r15		
		}
	}
	P1IFG = 0;
    a098:	c2 43 23 00 	mov.b	#0,	&0x0023	;r3 As==00
}
    a09c:	34 41       	pop	r4		
    a09e:	3c 41       	pop	r12		
    a0a0:	3d 41       	pop	r13		
    a0a2:	3e 41       	pop	r14		
    a0a4:	3f 41       	pop	r15		
    a0a6:	00 13       	reti			

0000a0a8 <flash_init>:
#include "watchdog.h"
#include "clock.h"
#include "flash.h"

void flash_init()
{
    a0a8:	04 12       	push	r4		
    a0aa:	04 41       	mov	r1,	r4	
    a0ac:	24 53       	incd	r4		
	/* Flash timing generator frequency: ideally around 366 Hz
	 *  257 Hz < Fftg < 476 Hz from (datasheet slas504 p55) */
	switch (get_mclk_freq_mhz()) {
    a0ae:	b0 12 aa 96 	call	#0x96aa	
    a0b2:	3f 92       	cmp	#8,	r15	;r2 As==11
    a0b4:	11 24       	jz	$+36     	;abs 0xa0d8
    a0b6:	3f 90 09 00 	cmp	#9,	r15	;#0x0009
    a0ba:	03 34       	jge	$+8      	;abs 0xa0c2
    a0bc:	1f 93       	cmp	#1,	r15	;r3 As==01
    a0be:	08 24       	jz	$+18     	;abs 0xa0d0
    a0c0:	17 3c       	jmp	$+48     	;abs 0xa0f0
    a0c2:	3f 90 0c 00 	cmp	#12,	r15	;#0x000c
    a0c6:	0c 24       	jz	$+26     	;abs 0xa0e0
    a0c8:	3f 90 10 00 	cmp	#16,	r15	;#0x0010
    a0cc:	0d 24       	jz	$+28     	;abs 0xa0e8
    a0ce:	10 3c       	jmp	$+34     	;abs 0xa0f0
	case 1:
		FCTL2 = FWKEY | FSSEL_2 | FN1 | FN0;	/* Fftg = MCLK/3 = 333 */
    a0d0:	b2 40 83 a5 	mov	#-23165,&0x012a	;#0xa583
    a0d4:	2a 01 
		break;
    a0d6:	0c 3c       	jmp	$+26     	;abs 0xa0f0
	case 8:
		FCTL2 = FWKEY | FSSEL_2 | FN4 | FN2 | FN1;	/* Fftg = MCLK/22 = 364 */
    a0d8:	b2 40 96 a5 	mov	#-23146,&0x012a	;#0xa596
    a0dc:	2a 01 
		break;
    a0de:	08 3c       	jmp	$+18     	;abs 0xa0f0
	case 12:
		FCTL2 = FWKEY | FSSEL_2 | FN5 | FN0;	/* Fftg = MCLK/33 = 364 */
    a0e0:	b2 40 a1 a5 	mov	#-23135,&0x012a	;#0xa5a1
    a0e4:	2a 01 
		break;
    a0e6:	04 3c       	jmp	$+10     	;abs 0xa0f0
	case 16:
		FCTL2 = FWKEY | FSSEL_2 | FN5 | FN3 | FN2;	/* Fftg = MCLK/44 = 364 */
    a0e8:	b2 40 ac a5 	mov	#-23124,&0x012a	;#0xa5ac
    a0ec:	2a 01 
		break;
    a0ee:	03 43       	nop			
	}
}
    a0f0:	34 41       	pop	r4		
    a0f2:	30 41       	ret			

0000a0f4 <flash_write_byte>:

/* programs 1 byte (8 bit) into the flash memory,
 * returns non 0 if the write failed, that is when a segment erase
 * is needed because the data_ptr location was previously written */
int flash_write_byte(unsigned char *data_ptr, unsigned char byte)
{
    a0f4:	04 12       	push	r4		
    a0f6:	04 41       	mov	r1,	r4	
    a0f8:	24 53       	incd	r4		
    a0fa:	21 82       	sub	#4,	r1	;r2 As==10
    a0fc:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    a100:	c4 4e fc ff 	mov.b	r14,	-4(r4)	;0xfffc(r4)
	if (*data_ptr == byte) {
    a104:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a108:	6f 4f       	mov.b	@r15,	r15	
    a10a:	5f 94 fc ff 	cmp.b	-4(r4),	r15	;0xfffc(r4)
    a10e:	02 20       	jnz	$+6      	;abs 0xa114
		return 0;
    a110:	0f 43       	clr	r15		
    a112:	1f 3c       	jmp	$+64     	;abs 0xa152
	} else if (*data_ptr != 0xFF) {
    a114:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a118:	6f 4f       	mov.b	@r15,	r15	
    a11a:	7f 93       	cmp.b	#-1,	r15	;r3 As==11
    a11c:	02 24       	jz	$+6      	;abs 0xa122
		/* don't allow 2 several consecutive writes on the same location */
		return -1;
    a11e:	3f 43       	mov	#-1,	r15	;r3 As==11
    a120:	18 3c       	jmp	$+50     	;abs 0xa152
	}

	flash_init();
    a122:	b0 12 a8 a0 	call	#0xa0a8	
	/* interrupts are automatically disabled during
	 * flash operation as EEI = 0 and EEIEX = 0 (FCTL1 bits) */
	watchdog_stop();
    a126:	b0 12 1c a2 	call	#0xa21c	
	FCTL3 = FWKEY;		/* Lock = 0 */
    a12a:	b2 40 00 a5 	mov	#-23296,&0x012c	;#0xa500
    a12e:	2c 01 
	FCTL1 = FWKEY | WRT;	/* WRT = 1 */
    a130:	b2 40 40 a5 	mov	#-23232,&0x0128	;#0xa540
    a134:	28 01 
	*data_ptr = byte;	/* program Flash byte */
    a136:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a13a:	df 44 fc ff 	mov.b	-4(r4),	0(r15)	;0xfffc(r4), 0x0000(r15)
    a13e:	00 00 
	FCTL1 = FWKEY;		/* WRT = 0 */
    a140:	b2 40 00 a5 	mov	#-23296,&0x0128	;#0xa500
    a144:	28 01 
	FCTL3 = FWKEY | LOCK;	/* Lock = 1 */
    a146:	b2 40 10 a5 	mov	#-23280,&0x012c	;#0xa510
    a14a:	2c 01 
	watchdog_restore();
    a14c:	b0 12 38 a2 	call	#0xa238	

	return 0;
    a150:	0f 43       	clr	r15		
}
    a152:	21 52       	add	#4,	r1	;r2 As==10
    a154:	34 41       	pop	r4		
    a156:	30 41       	ret			

0000a158 <flash_write_word>:

/* programs 1 word (16 bit) into the flash memory,
 * returns non 0 if the write failed, that is when a segment erase
 * is needed because the data_ptr location was previously written */
int flash_write_word(unsigned int *data_ptr, unsigned int word)
{
    a158:	04 12       	push	r4		
    a15a:	04 41       	mov	r1,	r4	
    a15c:	24 53       	incd	r4		
    a15e:	21 82       	sub	#4,	r1	;r2 As==10
    a160:	84 4f fa ff 	mov	r15,	-6(r4)	;0xfffa(r4)
    a164:	84 4e fc ff 	mov	r14,	-4(r4)	;0xfffc(r4)
	if (*data_ptr == word) {
    a168:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a16c:	2f 4f       	mov	@r15,	r15	
    a16e:	1f 94 fc ff 	cmp	-4(r4),	r15	;0xfffc(r4)
    a172:	02 20       	jnz	$+6      	;abs 0xa178
		return 0;
    a174:	0f 43       	clr	r15		
    a176:	1f 3c       	jmp	$+64     	;abs 0xa1b6
	} else if (*data_ptr != 0xFFFF) {
    a178:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a17c:	2f 4f       	mov	@r15,	r15	
    a17e:	3f 93       	cmp	#-1,	r15	;r3 As==11
    a180:	02 24       	jz	$+6      	;abs 0xa186
		/* don't allow 2 several consecutive writes on the same location */
		return -1;
    a182:	3f 43       	mov	#-1,	r15	;r3 As==11
    a184:	18 3c       	jmp	$+50     	;abs 0xa1b6
	}

	flash_init();
    a186:	b0 12 a8 a0 	call	#0xa0a8	
	watchdog_stop();
    a18a:	b0 12 1c a2 	call	#0xa21c	
	FCTL3 = FWKEY;		/* Lock = 0 */
    a18e:	b2 40 00 a5 	mov	#-23296,&0x012c	;#0xa500
    a192:	2c 01 
	FCTL1 = FWKEY | WRT;	/* WRT = 1 */
    a194:	b2 40 40 a5 	mov	#-23232,&0x0128	;#0xa540
    a198:	28 01 
	*data_ptr = word;	/* program Flash word */
    a19a:	1f 44 fa ff 	mov	-6(r4),	r15	;0xfffa(r4)
    a19e:	9f 44 fc ff 	mov	-4(r4),	0(r15)	;0xfffc(r4), 0x0000(r15)
    a1a2:	00 00 
	FCTL1 = FWKEY;		/* WRT = 0 */
    a1a4:	b2 40 00 a5 	mov	#-23296,&0x0128	;#0xa500
    a1a8:	28 01 
	FCTL3 = FWKEY | LOCK;	/* Lock = 1 */
    a1aa:	b2 40 10 a5 	mov	#-23280,&0x012c	;#0xa510
    a1ae:	2c 01 
	watchdog_restore();
    a1b0:	b0 12 38 a2 	call	#0xa238	

	return 0;
    a1b4:	0f 43       	clr	r15		
}
    a1b6:	21 52       	add	#4,	r1	;r2 As==10
    a1b8:	34 41       	pop	r4		
    a1ba:	30 41       	ret			

0000a1bc <flash_erase_segment>:

/* erases 1 Segment of flash memory */
void flash_erase_segment(unsigned int *data_ptr)
{
    a1bc:	04 12       	push	r4		
    a1be:	04 41       	mov	r1,	r4	
    a1c0:	24 53       	incd	r4		
    a1c2:	21 83       	decd	r1		
    a1c4:	84 4f fc ff 	mov	r15,	-4(r4)	;0xfffc(r4)
	flash_init();
    a1c8:	b0 12 a8 a0 	call	#0xa0a8	
	watchdog_stop();
    a1cc:	b0 12 1c a2 	call	#0xa21c	
	FCTL3 = FWKEY;		/* Lock = 0 */
    a1d0:	b2 40 00 a5 	mov	#-23296,&0x012c	;#0xa500
    a1d4:	2c 01 
	FCTL1 = FWKEY | ERASE;	/* ERASE = 1 */
    a1d6:	b2 40 02 a5 	mov	#-23294,&0x0128	;#0xa502
    a1da:	28 01 
	*data_ptr = 0;		/* erase Flash segment */
    a1dc:	1f 44 fc ff 	mov	-4(r4),	r15	;0xfffc(r4)
    a1e0:	8f 43 00 00 	mov	#0,	0(r15)	;r3 As==00, 0x0000(r15)
	FCTL1 = FWKEY;		/* ERASE = 0 */
    a1e4:	b2 40 00 a5 	mov	#-23296,&0x0128	;#0xa500
    a1e8:	28 01 
	FCTL3 = FWKEY | LOCK;	/* Lock = 1 */
    a1ea:	b2 40 10 a5 	mov	#-23280,&0x012c	;#0xa510
    a1ee:	2c 01 
	watchdog_restore();
    a1f0:	b0 12 38 a2 	call	#0xa238	
}
    a1f4:	21 53       	incd	r1		
    a1f6:	34 41       	pop	r4		
    a1f8:	30 41       	ret			

0000a1fa <flash_erase_info_memory>:

void flash_erase_info_memory()
{
    a1fa:	04 12       	push	r4		
    a1fc:	04 41       	mov	r1,	r4	
    a1fe:	24 53       	incd	r4		
	flash_erase_segment((unsigned int *)INFOD_START);
    a200:	3f 40 00 10 	mov	#4096,	r15	;#0x1000
    a204:	b0 12 bc a1 	call	#0xa1bc	
	flash_erase_segment((unsigned int *)INFOC_START);
    a208:	3f 40 40 10 	mov	#4160,	r15	;#0x1040
    a20c:	b0 12 bc a1 	call	#0xa1bc	
	flash_erase_segment((unsigned int *)INFOB_START);
    a210:	3f 40 80 10 	mov	#4224,	r15	;#0x1080
    a214:	b0 12 bc a1 	call	#0xa1bc	
	/* INFOA contains calibration data and is protected by LOCKA */
}
    a218:	34 41       	pop	r4		
    a21a:	30 41       	ret			

0000a21c <watchdog_stop>:
#endif

static int watchdog_backup;

void watchdog_stop()
{
    a21c:	04 12       	push	r4		
    a21e:	04 41       	mov	r1,	r4	
    a220:	24 53       	incd	r4		
	/* the upper 8 bits are a password */
	watchdog_backup = WDTCTL & 0x00FF;
    a222:	1f 42 20 01 	mov	&0x0120,r15	
    a226:	3f f0 ff 00 	and	#255,	r15	;#0x00ff
    a22a:	82 4f 7e 02 	mov	r15,	&0x027e	
	WDTCTL = WDTPW | WDTHOLD;
    a22e:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    a232:	20 01 
}
    a234:	34 41       	pop	r4		
    a236:	30 41       	ret			

0000a238 <watchdog_restore>:

void watchdog_restore()
{
    a238:	04 12       	push	r4		
    a23a:	04 41       	mov	r1,	r4	
    a23c:	24 53       	incd	r4		
	WDTCTL = WDTPW | watchdog_backup;
    a23e:	1f 42 7e 02 	mov	&0x027e,r15	
    a242:	3f d0 00 5a 	bis	#23040,	r15	;#0x5a00
    a246:	82 4f 20 01 	mov	r15,	&0x0120	
}
    a24a:	34 41       	pop	r4		
    a24c:	30 41       	ret			

0000a24e <_fpadd_parts>:
    a24e:	0b 12       	push	r11		
    a250:	0a 12       	push	r10		
    a252:	09 12       	push	r9		
    a254:	08 12       	push	r8		
    a256:	07 12       	push	r7		
    a258:	06 12       	push	r6		
    a25a:	05 12       	push	r5		
    a25c:	04 12       	push	r4		
    a25e:	31 50 fa ff 	add	#-6,	r1	;#0xfffa
    a262:	08 4d       	mov	r13,	r8	
    a264:	6b 4f       	mov.b	@r15,	r11	
    a266:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    a268:	67 28       	jnc	$+208    	;abs 0xa338
    a26a:	6c 4e       	mov.b	@r14,	r12	
    a26c:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    a26e:	e9 28       	jnc	$+468    	;abs 0xa442
    a270:	6b 92       	cmp.b	#4,	r11	;r2 As==10
    a272:	02 20       	jnz	$+6      	;abs 0xa278
    a274:	30 40 ce a4 	br	#0xa4ce	
    a278:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    a27a:	e3 24       	jz	$+456    	;abs 0xa442
    a27c:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    a27e:	bb 24       	jz	$+376    	;abs 0xa3f6
    a280:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    a282:	df 24       	jz	$+448    	;abs 0xa442
    a284:	91 4f 02 00 	mov	2(r15),	0(r1)	;0x0002(r15), 0x0000(r1)
    a288:	00 00 
    a28a:	1b 4e 02 00 	mov	2(r14),	r11	;0x0002(r14)
    a28e:	14 4f 04 00 	mov	4(r15),	r4	;0x0004(r15)
    a292:	15 4f 06 00 	mov	6(r15),	r5	;0x0006(r15)
    a296:	16 4e 04 00 	mov	4(r14),	r6	;0x0004(r14)
    a29a:	17 4e 06 00 	mov	6(r14),	r7	;0x0006(r14)
    a29e:	2c 41       	mov	@r1,	r12	
    a2a0:	0c 8b       	sub	r11,	r12	
    a2a2:	09 4c       	mov	r12,	r9	
    a2a4:	0c 93       	tst	r12		
    a2a6:	bf 38       	jl	$+384    	;abs 0xa426
    a2a8:	39 90 20 00 	cmp	#32,	r9	;#0x0020
    a2ac:	50 34       	jge	$+162    	;abs 0xa34e
    a2ae:	1c 93       	cmp	#1,	r12	;r3 As==01
    a2b0:	d7 38       	jl	$+432    	;abs 0xa460
    a2b2:	81 46 02 00 	mov	r6,	2(r1)	;0x0002(r1)
    a2b6:	81 47 04 00 	mov	r7,	4(r1)	;0x0004(r1)
    a2ba:	4c 49       	mov.b	r9,	r12	
    a2bc:	7c f0 1f 00 	and.b	#31,	r12	;#0x001f
    a2c0:	0b 24       	jz	$+24     	;abs 0xa2d8
    a2c2:	0a 46       	mov	r6,	r10	
    a2c4:	0b 47       	mov	r7,	r11	
    a2c6:	12 c3       	clrc			
    a2c8:	0b 10       	rrc	r11		
    a2ca:	0a 10       	rrc	r10		
    a2cc:	7c 53       	add.b	#-1,	r12	;r3 As==11
    a2ce:	fb 23       	jnz	$-8      	;abs 0xa2c6
    a2d0:	81 4a 02 00 	mov	r10,	2(r1)	;0x0002(r1)
    a2d4:	81 4b 04 00 	mov	r11,	4(r1)	;0x0004(r1)
    a2d8:	1c 43       	mov	#1,	r12	;r3 As==01
    a2da:	0d 43       	clr	r13		
    a2dc:	79 f0 1f 00 	and.b	#31,	r9	;#0x001f
    a2e0:	04 24       	jz	$+10     	;abs 0xa2ea
    a2e2:	0c 5c       	rla	r12		
    a2e4:	0d 6d       	rlc	r13		
    a2e6:	79 53       	add.b	#-1,	r9	;r3 As==11
    a2e8:	fc 23       	jnz	$-6      	;abs 0xa2e2
    a2ea:	3c 53       	add	#-1,	r12	;r3 As==11
    a2ec:	3d 63       	addc	#-1,	r13	;r3 As==11
    a2ee:	0c f6       	and	r6,	r12	
    a2f0:	0d f7       	and	r7,	r13	
    a2f2:	1a 43       	mov	#1,	r10	;r3 As==01
    a2f4:	0b 43       	clr	r11		
    a2f6:	0c 93       	tst	r12		
    a2f8:	02 20       	jnz	$+6      	;abs 0xa2fe
    a2fa:	0d 93       	tst	r13		
    a2fc:	e5 24       	jz	$+460    	;abs 0xa4c8
    a2fe:	16 41 02 00 	mov	2(r1),	r6	;0x0002(r1)
    a302:	17 41 04 00 	mov	4(r1),	r7	;0x0004(r1)
    a306:	06 da       	bis	r10,	r6	
    a308:	07 db       	bis	r11,	r7	
    a30a:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    a30e:	5f 9e 01 00 	cmp.b	1(r14),	r15	;0x0001(r14)
    a312:	28 20       	jnz	$+82     	;abs 0xa364
    a314:	c8 4f 01 00 	mov.b	r15,	1(r8)	;0x0001(r8)
    a318:	a8 41 02 00 	mov	@r1,	2(r8)	;0x0002(r8)
    a31c:	0e 46       	mov	r6,	r14	
    a31e:	0f 47       	mov	r7,	r15	
    a320:	0e 54       	add	r4,	r14	
    a322:	0f 65       	addc	r5,	r15	
    a324:	88 4e 04 00 	mov	r14,	4(r8)	;0x0004(r8)
    a328:	88 4f 06 00 	mov	r15,	6(r8)	;0x0006(r8)
    a32c:	f8 40 03 00 	mov.b	#3,	0(r8)	;#0x0003, 0x0000(r8)
    a330:	00 00 
    a332:	0f 93       	tst	r15		
    a334:	4d 38       	jl	$+156    	;abs 0xa3d0
    a336:	0f 48       	mov	r8,	r15	
    a338:	31 50 06 00 	add	#6,	r1	;#0x0006
    a33c:	34 41       	pop	r4		
    a33e:	35 41       	pop	r5		
    a340:	36 41       	pop	r6		
    a342:	37 41       	pop	r7		
    a344:	38 41       	pop	r8		
    a346:	39 41       	pop	r9		
    a348:	3a 41       	pop	r10		
    a34a:	3b 41       	pop	r11		
    a34c:	30 41       	ret			
    a34e:	2b 91       	cmp	@r1,	r11	
    a350:	67 38       	jl	$+208    	;abs 0xa420
    a352:	81 4b 00 00 	mov	r11,	0(r1)	;0x0000(r1)
    a356:	04 43       	clr	r4		
    a358:	05 43       	clr	r5		
    a35a:	5f 4f 01 00 	mov.b	1(r15),	r15	;0x0001(r15)
    a35e:	5f 9e 01 00 	cmp.b	1(r14),	r15	;0x0001(r14)
    a362:	d8 27       	jz	$-78     	;abs 0xa314
    a364:	4f 93       	tst.b	r15		
    a366:	68 24       	jz	$+210    	;abs 0xa438
    a368:	0e 46       	mov	r6,	r14	
    a36a:	0f 47       	mov	r7,	r15	
    a36c:	0e 84       	sub	r4,	r14	
    a36e:	0f 75       	subc	r5,	r15	
    a370:	0f 93       	tst	r15		
    a372:	69 38       	jl	$+212    	;abs 0xa446
    a374:	c8 43 01 00 	mov.b	#0,	1(r8)	;r3 As==00, 0x0001(r8)
    a378:	a8 41 02 00 	mov	@r1,	2(r8)	;0x0002(r8)
    a37c:	88 4e 04 00 	mov	r14,	4(r8)	;0x0004(r8)
    a380:	88 4f 06 00 	mov	r15,	6(r8)	;0x0006(r8)
    a384:	0c 4e       	mov	r14,	r12	
    a386:	0d 4f       	mov	r15,	r13	
    a388:	3c 53       	add	#-1,	r12	;r3 As==11
    a38a:	3d 63       	addc	#-1,	r13	;r3 As==11
    a38c:	3d 90 ff 3f 	cmp	#16383,	r13	;#0x3fff
    a390:	05 28       	jnc	$+12     	;abs 0xa39c
    a392:	3d 90 00 40 	cmp	#16384,	r13	;#0x4000
    a396:	17 2c       	jc	$+48     	;abs 0xa3c6
    a398:	3c 93       	cmp	#-1,	r12	;r3 As==11
    a39a:	15 2c       	jc	$+44     	;abs 0xa3c6
    a39c:	1b 48 02 00 	mov	2(r8),	r11	;0x0002(r8)
    a3a0:	3b 53       	add	#-1,	r11	;r3 As==11
    a3a2:	0e 5e       	rla	r14		
    a3a4:	0f 6f       	rlc	r15		
    a3a6:	0a 4b       	mov	r11,	r10	
    a3a8:	3b 53       	add	#-1,	r11	;r3 As==11
    a3aa:	0c 4e       	mov	r14,	r12	
    a3ac:	0d 4f       	mov	r15,	r13	
    a3ae:	3c 53       	add	#-1,	r12	;r3 As==11
    a3b0:	3d 63       	addc	#-1,	r13	;r3 As==11
    a3b2:	3d 90 ff 3f 	cmp	#16383,	r13	;#0x3fff
    a3b6:	f5 2b       	jnc	$-20     	;abs 0xa3a2
    a3b8:	3c 24       	jz	$+122    	;abs 0xa432
    a3ba:	88 4e 04 00 	mov	r14,	4(r8)	;0x0004(r8)
    a3be:	88 4f 06 00 	mov	r15,	6(r8)	;0x0006(r8)
    a3c2:	88 4a 02 00 	mov	r10,	2(r8)	;0x0002(r8)
    a3c6:	f8 40 03 00 	mov.b	#3,	0(r8)	;#0x0003, 0x0000(r8)
    a3ca:	00 00 
    a3cc:	0f 93       	tst	r15		
    a3ce:	b3 37       	jge	$-152    	;abs 0xa336
    a3d0:	0c 4e       	mov	r14,	r12	
    a3d2:	0d 4f       	mov	r15,	r13	
    a3d4:	1c f3       	and	#1,	r12	;r3 As==01
    a3d6:	0d f3       	and	#0,	r13	;r3 As==00
    a3d8:	12 c3       	clrc			
    a3da:	0f 10       	rrc	r15		
    a3dc:	0e 10       	rrc	r14		
    a3de:	0a 4c       	mov	r12,	r10	
    a3e0:	0b 4d       	mov	r13,	r11	
    a3e2:	0a de       	bis	r14,	r10	
    a3e4:	0b df       	bis	r15,	r11	
    a3e6:	88 4a 04 00 	mov	r10,	4(r8)	;0x0004(r8)
    a3ea:	88 4b 06 00 	mov	r11,	6(r8)	;0x0006(r8)
    a3ee:	98 53 02 00 	inc	2(r8)		;0x0002(r8)
    a3f2:	0f 48       	mov	r8,	r15	
    a3f4:	a1 3f       	jmp	$-188    	;abs 0xa338
    a3f6:	6b 93       	cmp.b	#2,	r11	;r3 As==10
    a3f8:	9f 23       	jnz	$-192    	;abs 0xa338
    a3fa:	ad 4f 00 00 	mov	@r15,	0(r13)	;0x0000(r13)
    a3fe:	9d 4f 02 00 	mov	2(r15),	2(r13)	;0x0002(r15), 0x0002(r13)
    a402:	02 00 
    a404:	9d 4f 04 00 	mov	4(r15),	4(r13)	;0x0004(r15), 0x0004(r13)
    a408:	04 00 
    a40a:	9d 4f 06 00 	mov	6(r15),	6(r13)	;0x0006(r15), 0x0006(r13)
    a40e:	06 00 
    a410:	5e 4e 01 00 	mov.b	1(r14),	r14	;0x0001(r14)
    a414:	5e ff 01 00 	and.b	1(r15),	r14	;0x0001(r15)
    a418:	cd 4e 01 00 	mov.b	r14,	1(r13)	;0x0001(r13)
    a41c:	0f 4d       	mov	r13,	r15	
    a41e:	8c 3f       	jmp	$-230    	;abs 0xa338
    a420:	06 43       	clr	r6		
    a422:	07 43       	clr	r7		
    a424:	9a 3f       	jmp	$-202    	;abs 0xa35a
    a426:	39 e3       	inv	r9		
    a428:	19 53       	inc	r9		
    a42a:	39 90 20 00 	cmp	#32,	r9	;#0x0020
    a42e:	8f 37       	jge	$-224    	;abs 0xa34e
    a430:	3e 3f       	jmp	$-386    	;abs 0xa2ae
    a432:	3c 93       	cmp	#-1,	r12	;r3 As==11
    a434:	b6 2b       	jnc	$-146    	;abs 0xa3a2
    a436:	c1 3f       	jmp	$-124    	;abs 0xa3ba
    a438:	0e 44       	mov	r4,	r14	
    a43a:	0f 45       	mov	r5,	r15	
    a43c:	0e 86       	sub	r6,	r14	
    a43e:	0f 77       	subc	r7,	r15	
    a440:	97 3f       	jmp	$-208    	;abs 0xa370
    a442:	0f 4e       	mov	r14,	r15	
    a444:	79 3f       	jmp	$-268    	;abs 0xa338
    a446:	d8 43 01 00 	mov.b	#1,	1(r8)	;r3 As==01, 0x0001(r8)
    a44a:	a8 41 02 00 	mov	@r1,	2(r8)	;0x0002(r8)
    a44e:	3e e3       	inv	r14		
    a450:	3f e3       	inv	r15		
    a452:	1e 53       	inc	r14		
    a454:	0f 63       	adc	r15		
    a456:	88 4e 04 00 	mov	r14,	4(r8)	;0x0004(r8)
    a45a:	88 4f 06 00 	mov	r15,	6(r8)	;0x0006(r8)
    a45e:	92 3f       	jmp	$-218    	;abs 0xa384
    a460:	0c 93       	tst	r12		
    a462:	7b 27       	jz	$-264    	;abs 0xa35a
    a464:	81 59 00 00 	add	r9,	0(r1)	;0x0000(r1)
    a468:	81 44 02 00 	mov	r4,	2(r1)	;0x0002(r1)
    a46c:	81 45 04 00 	mov	r5,	4(r1)	;0x0004(r1)
    a470:	4d 49       	mov.b	r9,	r13	
    a472:	7d f0 1f 00 	and.b	#31,	r13	;#0x001f
    a476:	0c 24       	jz	$+26     	;abs 0xa490
    a478:	4b 4d       	mov.b	r13,	r11	
    a47a:	0c 44       	mov	r4,	r12	
    a47c:	0d 45       	mov	r5,	r13	
    a47e:	12 c3       	clrc			
    a480:	0d 10       	rrc	r13		
    a482:	0c 10       	rrc	r12		
    a484:	7b 53       	add.b	#-1,	r11	;r3 As==11
    a486:	fb 23       	jnz	$-8      	;abs 0xa47e
    a488:	81 4c 02 00 	mov	r12,	2(r1)	;0x0002(r1)
    a48c:	81 4d 04 00 	mov	r13,	4(r1)	;0x0004(r1)
    a490:	1c 43       	mov	#1,	r12	;r3 As==01
    a492:	0d 43       	clr	r13		
    a494:	79 f0 1f 00 	and.b	#31,	r9	;#0x001f
    a498:	04 24       	jz	$+10     	;abs 0xa4a2
    a49a:	0c 5c       	rla	r12		
    a49c:	0d 6d       	rlc	r13		
    a49e:	79 53       	add.b	#-1,	r9	;r3 As==11
    a4a0:	fc 23       	jnz	$-6      	;abs 0xa49a
    a4a2:	3c 53       	add	#-1,	r12	;r3 As==11
    a4a4:	3d 63       	addc	#-1,	r13	;r3 As==11
    a4a6:	0c f4       	and	r4,	r12	
    a4a8:	0d f5       	and	r5,	r13	
    a4aa:	1a 43       	mov	#1,	r10	;r3 As==01
    a4ac:	0b 43       	clr	r11		
    a4ae:	0c 93       	tst	r12		
    a4b0:	04 20       	jnz	$+10     	;abs 0xa4ba
    a4b2:	0d 93       	tst	r13		
    a4b4:	02 20       	jnz	$+6      	;abs 0xa4ba
    a4b6:	0a 43       	clr	r10		
    a4b8:	0b 43       	clr	r11		
    a4ba:	14 41 02 00 	mov	2(r1),	r4	;0x0002(r1)
    a4be:	15 41 04 00 	mov	4(r1),	r5	;0x0004(r1)
    a4c2:	04 da       	bis	r10,	r4	
    a4c4:	05 db       	bis	r11,	r5	
    a4c6:	49 3f       	jmp	$-364    	;abs 0xa35a
    a4c8:	0a 43       	clr	r10		
    a4ca:	0b 43       	clr	r11		
    a4cc:	18 3f       	jmp	$-462    	;abs 0xa2fe
    a4ce:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    a4d0:	33 23       	jnz	$-408    	;abs 0xa338
    a4d2:	df 9e 01 00 	cmp.b	1(r14),	1(r15)	;0x0001(r14), 0x0001(r15)
    a4d6:	01 00 
    a4d8:	2f 27       	jz	$-416    	;abs 0xa338
    a4da:	3f 40 06 b9 	mov	#-18170,r15	;#0xb906
    a4de:	2c 3f       	jmp	$-422    	;abs 0xa338

0000a4e0 <__addsf3>:
    a4e0:	31 50 e0 ff 	add	#-32,	r1	;#0xffe0
    a4e4:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    a4e8:	81 4f 06 00 	mov	r15,	6(r1)	;0x0006(r1)
    a4ec:	81 4c 00 00 	mov	r12,	0(r1)	;0x0000(r1)
    a4f0:	81 4d 02 00 	mov	r13,	2(r1)	;0x0002(r1)
    a4f4:	0e 41       	mov	r1,	r14	
    a4f6:	3e 50 18 00 	add	#24,	r14	;#0x0018
    a4fa:	0f 41       	mov	r1,	r15	
    a4fc:	2f 52       	add	#4,	r15	;r2 As==10
    a4fe:	b0 12 76 ac 	call	#0xac76	
    a502:	0e 41       	mov	r1,	r14	
    a504:	3e 50 10 00 	add	#16,	r14	;#0x0010
    a508:	0f 41       	mov	r1,	r15	
    a50a:	b0 12 76 ac 	call	#0xac76	
    a50e:	0d 41       	mov	r1,	r13	
    a510:	3d 52       	add	#8,	r13	;r2 As==11
    a512:	0e 41       	mov	r1,	r14	
    a514:	3e 50 10 00 	add	#16,	r14	;#0x0010
    a518:	0f 41       	mov	r1,	r15	
    a51a:	3f 50 18 00 	add	#24,	r15	;#0x0018
    a51e:	b0 12 4e a2 	call	#0xa24e	
    a522:	b0 12 98 aa 	call	#0xaa98	
    a526:	31 50 20 00 	add	#32,	r1	;#0x0020
    a52a:	30 41       	ret			

0000a52c <__subsf3>:
    a52c:	31 50 e0 ff 	add	#-32,	r1	;#0xffe0
    a530:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    a534:	81 4f 06 00 	mov	r15,	6(r1)	;0x0006(r1)
    a538:	81 4c 00 00 	mov	r12,	0(r1)	;0x0000(r1)
    a53c:	81 4d 02 00 	mov	r13,	2(r1)	;0x0002(r1)
    a540:	0e 41       	mov	r1,	r14	
    a542:	3e 50 18 00 	add	#24,	r14	;#0x0018
    a546:	0f 41       	mov	r1,	r15	
    a548:	2f 52       	add	#4,	r15	;r2 As==10
    a54a:	b0 12 76 ac 	call	#0xac76	
    a54e:	0e 41       	mov	r1,	r14	
    a550:	3e 50 10 00 	add	#16,	r14	;#0x0010
    a554:	0f 41       	mov	r1,	r15	
    a556:	b0 12 76 ac 	call	#0xac76	
    a55a:	d1 e3 11 00 	xor.b	#1,	17(r1)	;r3 As==01, 0x0011(r1)
    a55e:	0d 41       	mov	r1,	r13	
    a560:	3d 52       	add	#8,	r13	;r2 As==11
    a562:	0e 41       	mov	r1,	r14	
    a564:	3e 50 10 00 	add	#16,	r14	;#0x0010
    a568:	0f 41       	mov	r1,	r15	
    a56a:	3f 50 18 00 	add	#24,	r15	;#0x0018
    a56e:	b0 12 4e a2 	call	#0xa24e	
    a572:	b0 12 98 aa 	call	#0xaa98	
    a576:	31 50 20 00 	add	#32,	r1	;#0x0020
    a57a:	30 41       	ret			

0000a57c <__mulsf3>:
    a57c:	0b 12       	push	r11		
    a57e:	0a 12       	push	r10		
    a580:	09 12       	push	r9		
    a582:	08 12       	push	r8		
    a584:	07 12       	push	r7		
    a586:	06 12       	push	r6		
    a588:	05 12       	push	r5		
    a58a:	04 12       	push	r4		
    a58c:	31 50 dc ff 	add	#-36,	r1	;#0xffdc
    a590:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    a594:	81 4f 06 00 	mov	r15,	6(r1)	;0x0006(r1)
    a598:	81 4c 00 00 	mov	r12,	0(r1)	;0x0000(r1)
    a59c:	81 4d 02 00 	mov	r13,	2(r1)	;0x0002(r1)
    a5a0:	0e 41       	mov	r1,	r14	
    a5a2:	3e 50 18 00 	add	#24,	r14	;#0x0018
    a5a6:	0f 41       	mov	r1,	r15	
    a5a8:	2f 52       	add	#4,	r15	;r2 As==10
    a5aa:	b0 12 76 ac 	call	#0xac76	
    a5ae:	0e 41       	mov	r1,	r14	
    a5b0:	3e 50 10 00 	add	#16,	r14	;#0x0010
    a5b4:	0f 41       	mov	r1,	r15	
    a5b6:	b0 12 76 ac 	call	#0xac76	
    a5ba:	5f 41 18 00 	mov.b	24(r1),	r15	;0x0018(r1)
    a5be:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    a5c0:	b6 28       	jnc	$+366    	;abs 0xa72e
    a5c2:	5e 41 10 00 	mov.b	16(r1),	r14	;0x0010(r1)
    a5c6:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    a5c8:	d9 28       	jnc	$+436    	;abs 0xa77c
    a5ca:	6f 92       	cmp.b	#4,	r15	;r2 As==10
    a5cc:	ae 24       	jz	$+350    	;abs 0xa72a
    a5ce:	6e 92       	cmp.b	#4,	r14	;r2 As==10
    a5d0:	e2 24       	jz	$+454    	;abs 0xa796
    a5d2:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    a5d4:	ac 24       	jz	$+346    	;abs 0xa72e
    a5d6:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    a5d8:	d1 24       	jz	$+420    	;abs 0xa77c
    a5da:	14 41 1c 00 	mov	28(r1),	r4	;0x001c(r1)
    a5de:	15 41 1e 00 	mov	30(r1),	r5	;0x001e(r1)
    a5e2:	18 41 14 00 	mov	20(r1),	r8	;0x0014(r1)
    a5e6:	19 41 16 00 	mov	22(r1),	r9	;0x0016(r1)
    a5ea:	3c 40 20 00 	mov	#32,	r12	;#0x0020
    a5ee:	0e 43       	clr	r14		
    a5f0:	0f 43       	clr	r15		
    a5f2:	06 43       	clr	r6		
    a5f4:	07 43       	clr	r7		
    a5f6:	81 43 20 00 	mov	#0,	32(r1)	;r3 As==00, 0x0020(r1)
    a5fa:	81 43 22 00 	mov	#0,	34(r1)	;r3 As==00, 0x0022(r1)
    a5fe:	0a 43       	clr	r10		
    a600:	0b 43       	clr	r11		
    a602:	81 4c 20 00 	mov	r12,	32(r1)	;0x0020(r1)
    a606:	08 3c       	jmp	$+18     	;abs 0xa618
    a608:	08 58       	rla	r8		
    a60a:	09 69       	rlc	r9		
    a60c:	12 c3       	clrc			
    a60e:	05 10       	rrc	r5		
    a610:	04 10       	rrc	r4		
    a612:	b1 53 20 00 	add	#-1,	32(r1)	;r3 As==11, 0x0020(r1)
    a616:	19 24       	jz	$+52     	;abs 0xa64a
    a618:	14 b3       	bit	#1,	r4	;r3 As==01
    a61a:	0d 24       	jz	$+28     	;abs 0xa636
    a61c:	0a 58       	add	r8,	r10	
    a61e:	0b 69       	addc	r9,	r11	
    a620:	0e 56       	add	r6,	r14	
    a622:	0f 67       	addc	r7,	r15	
    a624:	1c 43       	mov	#1,	r12	;r3 As==01
    a626:	0d 43       	clr	r13		
    a628:	0b 99       	cmp	r9,	r11	
    a62a:	03 28       	jnc	$+8      	;abs 0xa632
    a62c:	0b 24       	jz	$+24     	;abs 0xa644
    a62e:	0c 43       	clr	r12		
    a630:	0d 43       	clr	r13		
    a632:	0e 5c       	add	r12,	r14	
    a634:	0f 6d       	addc	r13,	r15	
    a636:	06 56       	rla	r6		
    a638:	07 67       	rlc	r7		
    a63a:	09 93       	tst	r9		
    a63c:	e5 37       	jge	$-52     	;abs 0xa608
    a63e:	16 d3       	bis	#1,	r6	;r3 As==01
    a640:	07 d3       	bis	#0,	r7	;r3 As==00
    a642:	e2 3f       	jmp	$-58     	;abs 0xa608
    a644:	0a 98       	cmp	r8,	r10	
    a646:	f5 2b       	jnc	$-20     	;abs 0xa632
    a648:	f2 3f       	jmp	$-26     	;abs 0xa62e
    a64a:	81 4a 20 00 	mov	r10,	32(r1)	;0x0020(r1)
    a64e:	81 4b 22 00 	mov	r11,	34(r1)	;0x0022(r1)
    a652:	0c 4f       	mov	r15,	r12	
    a654:	1a 41 1a 00 	mov	26(r1),	r10	;0x001a(r1)
    a658:	1a 51 12 00 	add	18(r1),	r10	;0x0012(r1)
    a65c:	06 4a       	mov	r10,	r6	
    a65e:	26 53       	incd	r6		
    a660:	81 46 0a 00 	mov	r6,	10(r1)	;0x000a(r1)
    a664:	5d 43       	mov.b	#1,	r13	;r3 As==01
    a666:	d1 91 11 00 	cmp.b	17(r1),	25(r1)	;0x0011(r1), 0x0019(r1)
    a66a:	19 00 
    a66c:	83 24       	jz	$+264    	;abs 0xa774
    a66e:	c1 4d 09 00 	mov.b	r13,	9(r1)	;0x0009(r1)
    a672:	0c 93       	tst	r12		
    a674:	3c 38       	jl	$+122    	;abs 0xa6ee
    a676:	3f 90 00 40 	cmp	#16384,	r15	;#0x4000
    a67a:	18 2c       	jc	$+50     	;abs 0xa6ac
    a67c:	1d 41 0a 00 	mov	10(r1),	r13	;0x000a(r1)
    a680:	3d 53       	add	#-1,	r13	;r3 As==11
    a682:	1a 41 20 00 	mov	32(r1),	r10	;0x0020(r1)
    a686:	1b 41 22 00 	mov	34(r1),	r11	;0x0022(r1)
    a68a:	0c 4d       	mov	r13,	r12	
    a68c:	0e 5e       	rla	r14		
    a68e:	0f 6f       	rlc	r15		
    a690:	0b 93       	tst	r11		
    a692:	2a 38       	jl	$+86     	;abs 0xa6e8
    a694:	0a 5a       	rla	r10		
    a696:	0b 6b       	rlc	r11		
    a698:	3d 53       	add	#-1,	r13	;r3 As==11
    a69a:	3f 90 00 40 	cmp	#16384,	r15	;#0x4000
    a69e:	f5 2b       	jnc	$-20     	;abs 0xa68a
    a6a0:	81 4a 20 00 	mov	r10,	32(r1)	;0x0020(r1)
    a6a4:	81 4b 22 00 	mov	r11,	34(r1)	;0x0022(r1)
    a6a8:	81 4c 0a 00 	mov	r12,	10(r1)	;0x000a(r1)
    a6ac:	0c 4e       	mov	r14,	r12	
    a6ae:	0d 4f       	mov	r15,	r13	
    a6b0:	3c f0 7f 00 	and	#127,	r12	;#0x007f
    a6b4:	0d f3       	and	#0,	r13	;r3 As==00
    a6b6:	3c 90 40 00 	cmp	#64,	r12	;#0x0040
    a6ba:	44 24       	jz	$+138    	;abs 0xa744
    a6bc:	81 4e 0c 00 	mov	r14,	12(r1)	;0x000c(r1)
    a6c0:	81 4f 0e 00 	mov	r15,	14(r1)	;0x000e(r1)
    a6c4:	f1 40 03 00 	mov.b	#3,	8(r1)	;#0x0003, 0x0008(r1)
    a6c8:	08 00 
    a6ca:	0f 41       	mov	r1,	r15	
    a6cc:	3f 52       	add	#8,	r15	;r2 As==11
    a6ce:	b0 12 98 aa 	call	#0xaa98	
    a6d2:	31 50 24 00 	add	#36,	r1	;#0x0024
    a6d6:	34 41       	pop	r4		
    a6d8:	35 41       	pop	r5		
    a6da:	36 41       	pop	r6		
    a6dc:	37 41       	pop	r7		
    a6de:	38 41       	pop	r8		
    a6e0:	39 41       	pop	r9		
    a6e2:	3a 41       	pop	r10		
    a6e4:	3b 41       	pop	r11		
    a6e6:	30 41       	ret			
    a6e8:	1e d3       	bis	#1,	r14	;r3 As==01
    a6ea:	0f d3       	bis	#0,	r15	;r3 As==00
    a6ec:	d3 3f       	jmp	$-88     	;abs 0xa694
    a6ee:	3a 50 03 00 	add	#3,	r10	;#0x0003
    a6f2:	08 4a       	mov	r10,	r8	
    a6f4:	1e b3       	bit	#1,	r14	;r3 As==01
    a6f6:	10 24       	jz	$+34     	;abs 0xa718
    a6f8:	1c 41 20 00 	mov	32(r1),	r12	;0x0020(r1)
    a6fc:	1d 41 22 00 	mov	34(r1),	r13	;0x0022(r1)
    a700:	12 c3       	clrc			
    a702:	0d 10       	rrc	r13		
    a704:	0c 10       	rrc	r12		
    a706:	06 4c       	mov	r12,	r6	
    a708:	07 4d       	mov	r13,	r7	
    a70a:	06 d3       	bis	#0,	r6	;r3 As==00
    a70c:	37 d0 00 80 	bis	#-32768,r7	;#0x8000
    a710:	81 46 20 00 	mov	r6,	32(r1)	;0x0020(r1)
    a714:	81 47 22 00 	mov	r7,	34(r1)	;0x0022(r1)
    a718:	12 c3       	clrc			
    a71a:	0f 10       	rrc	r15		
    a71c:	0e 10       	rrc	r14		
    a71e:	1a 53       	inc	r10		
    a720:	0f 93       	tst	r15		
    a722:	e7 3b       	jl	$-48     	;abs 0xa6f2
    a724:	81 48 0a 00 	mov	r8,	10(r1)	;0x000a(r1)
    a728:	a6 3f       	jmp	$-178    	;abs 0xa676
    a72a:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    a72c:	36 24       	jz	$+110    	;abs 0xa79a
    a72e:	5f 43       	mov.b	#1,	r15	;r3 As==01
    a730:	d1 91 11 00 	cmp.b	17(r1),	25(r1)	;0x0011(r1), 0x0019(r1)
    a734:	19 00 
    a736:	20 24       	jz	$+66     	;abs 0xa778
    a738:	c1 4f 19 00 	mov.b	r15,	25(r1)	;0x0019(r1)
    a73c:	0f 41       	mov	r1,	r15	
    a73e:	3f 50 18 00 	add	#24,	r15	;#0x0018
    a742:	c5 3f       	jmp	$-116    	;abs 0xa6ce
    a744:	0d 93       	tst	r13		
    a746:	ba 23       	jnz	$-138    	;abs 0xa6bc
    a748:	0c 4e       	mov	r14,	r12	
    a74a:	0d 4f       	mov	r15,	r13	
    a74c:	3c f0 80 00 	and	#128,	r12	;#0x0080
    a750:	0d f3       	and	#0,	r13	;r3 As==00
    a752:	0c 93       	tst	r12		
    a754:	b3 23       	jnz	$-152    	;abs 0xa6bc
    a756:	0d 93       	tst	r13		
    a758:	b1 23       	jnz	$-156    	;abs 0xa6bc
    a75a:	81 93 20 00 	tst	32(r1)		;0x0020(r1)
    a75e:	03 20       	jnz	$+8      	;abs 0xa766
    a760:	81 93 22 00 	tst	34(r1)		;0x0022(r1)
    a764:	ab 27       	jz	$-168    	;abs 0xa6bc
    a766:	3e 50 40 00 	add	#64,	r14	;#0x0040
    a76a:	0f 63       	adc	r15		
    a76c:	3e f0 80 ff 	and	#-128,	r14	;#0xff80
    a770:	3f f3       	and	#-1,	r15	;r3 As==11
    a772:	a4 3f       	jmp	$-182    	;abs 0xa6bc
    a774:	4d 43       	clr.b	r13		
    a776:	7b 3f       	jmp	$-264    	;abs 0xa66e
    a778:	4f 43       	clr.b	r15		
    a77a:	de 3f       	jmp	$-66     	;abs 0xa738
    a77c:	5f 43       	mov.b	#1,	r15	;r3 As==01
    a77e:	d1 91 11 00 	cmp.b	17(r1),	25(r1)	;0x0011(r1), 0x0019(r1)
    a782:	19 00 
    a784:	06 24       	jz	$+14     	;abs 0xa792
    a786:	c1 4f 11 00 	mov.b	r15,	17(r1)	;0x0011(r1)
    a78a:	0f 41       	mov	r1,	r15	
    a78c:	3f 50 10 00 	add	#16,	r15	;#0x0010
    a790:	9e 3f       	jmp	$-194    	;abs 0xa6ce
    a792:	4f 43       	clr.b	r15		
    a794:	f8 3f       	jmp	$-14     	;abs 0xa786
    a796:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    a798:	f1 23       	jnz	$-28     	;abs 0xa77c
    a79a:	3f 40 06 b9 	mov	#-18170,r15	;#0xb906
    a79e:	97 3f       	jmp	$-208    	;abs 0xa6ce

0000a7a0 <__divsf3>:
    a7a0:	0b 12       	push	r11		
    a7a2:	0a 12       	push	r10		
    a7a4:	09 12       	push	r9		
    a7a6:	08 12       	push	r8		
    a7a8:	07 12       	push	r7		
    a7aa:	31 50 e8 ff 	add	#-24,	r1	;#0xffe8
    a7ae:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    a7b2:	81 4f 06 00 	mov	r15,	6(r1)	;0x0006(r1)
    a7b6:	81 4c 00 00 	mov	r12,	0(r1)	;0x0000(r1)
    a7ba:	81 4d 02 00 	mov	r13,	2(r1)	;0x0002(r1)
    a7be:	0e 41       	mov	r1,	r14	
    a7c0:	3e 50 10 00 	add	#16,	r14	;#0x0010
    a7c4:	0f 41       	mov	r1,	r15	
    a7c6:	2f 52       	add	#4,	r15	;r2 As==10
    a7c8:	b0 12 76 ac 	call	#0xac76	
    a7cc:	0e 41       	mov	r1,	r14	
    a7ce:	3e 52       	add	#8,	r14	;r2 As==11
    a7d0:	0f 41       	mov	r1,	r15	
    a7d2:	b0 12 76 ac 	call	#0xac76	
    a7d6:	5f 41 10 00 	mov.b	16(r1),	r15	;0x0010(r1)
    a7da:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    a7dc:	5d 28       	jnc	$+188    	;abs 0xa898
    a7de:	5e 41 08 00 	mov.b	8(r1),	r14	;0x0008(r1)
    a7e2:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    a7e4:	82 28       	jnc	$+262    	;abs 0xa8ea
    a7e6:	d1 e1 09 00 	xor.b	9(r1),	17(r1)	;0x0009(r1), 0x0011(r1)
    a7ea:	11 00 
    a7ec:	6f 92       	cmp.b	#4,	r15	;r2 As==10
    a7ee:	58 24       	jz	$+178    	;abs 0xa8a0
    a7f0:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    a7f2:	56 24       	jz	$+174    	;abs 0xa8a0
    a7f4:	6e 92       	cmp.b	#4,	r14	;r2 As==10
    a7f6:	6f 24       	jz	$+224    	;abs 0xa8d6
    a7f8:	6e 93       	cmp.b	#2,	r14	;r3 As==10
    a7fa:	4c 24       	jz	$+154    	;abs 0xa894
    a7fc:	1d 41 12 00 	mov	18(r1),	r13	;0x0012(r1)
    a800:	1d 81 0a 00 	sub	10(r1),	r13	;0x000a(r1)
    a804:	81 4d 12 00 	mov	r13,	18(r1)	;0x0012(r1)
    a808:	1e 41 14 00 	mov	20(r1),	r14	;0x0014(r1)
    a80c:	1f 41 16 00 	mov	22(r1),	r15	;0x0016(r1)
    a810:	18 41 0c 00 	mov	12(r1),	r8	;0x000c(r1)
    a814:	19 41 0e 00 	mov	14(r1),	r9	;0x000e(r1)
    a818:	0f 99       	cmp	r9,	r15	
    a81a:	1e 2c       	jc	$+62     	;abs 0xa858
    a81c:	0e 5e       	rla	r14		
    a81e:	0f 6f       	rlc	r15		
    a820:	3d 53       	add	#-1,	r13	;r3 As==11
    a822:	81 4d 12 00 	mov	r13,	18(r1)	;0x0012(r1)
    a826:	37 40 1f 00 	mov	#31,	r7	;#0x001f
    a82a:	0c 43       	clr	r12		
    a82c:	3d 40 00 40 	mov	#16384,	r13	;#0x4000
    a830:	0a 43       	clr	r10		
    a832:	0b 43       	clr	r11		
    a834:	0b 3c       	jmp	$+24     	;abs 0xa84c
    a836:	0a dc       	bis	r12,	r10	
    a838:	0b dd       	bis	r13,	r11	
    a83a:	0e 88       	sub	r8,	r14	
    a83c:	0f 79       	subc	r9,	r15	
    a83e:	12 c3       	clrc			
    a840:	0d 10       	rrc	r13		
    a842:	0c 10       	rrc	r12		
    a844:	0e 5e       	rla	r14		
    a846:	0f 6f       	rlc	r15		
    a848:	37 53       	add	#-1,	r7	;r3 As==11
    a84a:	0b 24       	jz	$+24     	;abs 0xa862
    a84c:	0f 99       	cmp	r9,	r15	
    a84e:	f7 2b       	jnc	$-16     	;abs 0xa83e
    a850:	f2 23       	jnz	$-26     	;abs 0xa836
    a852:	0e 98       	cmp	r8,	r14	
    a854:	f4 2b       	jnc	$-22     	;abs 0xa83e
    a856:	ef 3f       	jmp	$-32     	;abs 0xa836
    a858:	09 9f       	cmp	r15,	r9	
    a85a:	e5 2b       	jnc	$-52     	;abs 0xa826
    a85c:	0e 98       	cmp	r8,	r14	
    a85e:	e3 2f       	jc	$-56     	;abs 0xa826
    a860:	dd 3f       	jmp	$-68     	;abs 0xa81c
    a862:	0c 4a       	mov	r10,	r12	
    a864:	0d 4b       	mov	r11,	r13	
    a866:	3c f0 7f 00 	and	#127,	r12	;#0x007f
    a86a:	0d f3       	and	#0,	r13	;r3 As==00
    a86c:	3c 90 40 00 	cmp	#64,	r12	;#0x0040
    a870:	1c 24       	jz	$+58     	;abs 0xa8aa
    a872:	81 4a 14 00 	mov	r10,	20(r1)	;0x0014(r1)
    a876:	81 4b 16 00 	mov	r11,	22(r1)	;0x0016(r1)
    a87a:	0f 41       	mov	r1,	r15	
    a87c:	3f 50 10 00 	add	#16,	r15	;#0x0010
    a880:	b0 12 98 aa 	call	#0xaa98	
    a884:	31 50 18 00 	add	#24,	r1	;#0x0018
    a888:	37 41       	pop	r7		
    a88a:	38 41       	pop	r8		
    a88c:	39 41       	pop	r9		
    a88e:	3a 41       	pop	r10		
    a890:	3b 41       	pop	r11		
    a892:	30 41       	ret			
    a894:	e1 42 10 00 	mov.b	#4,	16(r1)	;r2 As==10, 0x0010(r1)
    a898:	0f 41       	mov	r1,	r15	
    a89a:	3f 50 10 00 	add	#16,	r15	;#0x0010
    a89e:	f0 3f       	jmp	$-30     	;abs 0xa880
    a8a0:	4f 9e       	cmp.b	r14,	r15	
    a8a2:	fa 23       	jnz	$-10     	;abs 0xa898
    a8a4:	3f 40 06 b9 	mov	#-18170,r15	;#0xb906
    a8a8:	eb 3f       	jmp	$-40     	;abs 0xa880
    a8aa:	0d 93       	tst	r13		
    a8ac:	e2 23       	jnz	$-58     	;abs 0xa872
    a8ae:	0c 4a       	mov	r10,	r12	
    a8b0:	0d 4b       	mov	r11,	r13	
    a8b2:	3c f0 80 00 	and	#128,	r12	;#0x0080
    a8b6:	0d f3       	and	#0,	r13	;r3 As==00
    a8b8:	0c 93       	tst	r12		
    a8ba:	db 23       	jnz	$-72     	;abs 0xa872
    a8bc:	0d 93       	tst	r13		
    a8be:	d9 23       	jnz	$-76     	;abs 0xa872
    a8c0:	0e 93       	tst	r14		
    a8c2:	02 20       	jnz	$+6      	;abs 0xa8c8
    a8c4:	0f 93       	tst	r15		
    a8c6:	d5 27       	jz	$-84     	;abs 0xa872
    a8c8:	3a 50 40 00 	add	#64,	r10	;#0x0040
    a8cc:	0b 63       	adc	r11		
    a8ce:	3a f0 80 ff 	and	#-128,	r10	;#0xff80
    a8d2:	3b f3       	and	#-1,	r11	;r3 As==11
    a8d4:	ce 3f       	jmp	$-98     	;abs 0xa872
    a8d6:	81 43 14 00 	mov	#0,	20(r1)	;r3 As==00, 0x0014(r1)
    a8da:	81 43 16 00 	mov	#0,	22(r1)	;r3 As==00, 0x0016(r1)
    a8de:	81 43 12 00 	mov	#0,	18(r1)	;r3 As==00, 0x0012(r1)
    a8e2:	0f 41       	mov	r1,	r15	
    a8e4:	3f 50 10 00 	add	#16,	r15	;#0x0010
    a8e8:	cb 3f       	jmp	$-104    	;abs 0xa880
    a8ea:	0f 41       	mov	r1,	r15	
    a8ec:	3f 52       	add	#8,	r15	;r2 As==11
    a8ee:	c8 3f       	jmp	$-110    	;abs 0xa880

0000a8f0 <__floatsisf>:
    a8f0:	0b 12       	push	r11		
    a8f2:	0a 12       	push	r10		
    a8f4:	31 82       	sub	#8,	r1	;r2 As==11
    a8f6:	f1 40 03 00 	mov.b	#3,	0(r1)	;#0x0003, 0x0000(r1)
    a8fa:	00 00 
    a8fc:	0d 4f       	mov	r15,	r13	
    a8fe:	0d 5d       	rla	r13		
    a900:	0d 43       	clr	r13		
    a902:	0d 6d       	rlc	r13		
    a904:	4c 4d       	mov.b	r13,	r12	
    a906:	c1 4d 01 00 	mov.b	r13,	1(r1)	;0x0001(r1)
    a90a:	0e 93       	tst	r14		
    a90c:	0b 20       	jnz	$+24     	;abs 0xa924
    a90e:	0f 93       	tst	r15		
    a910:	09 20       	jnz	$+20     	;abs 0xa924
    a912:	e1 43 00 00 	mov.b	#2,	0(r1)	;r3 As==10, 0x0000(r1)
    a916:	0f 41       	mov	r1,	r15	
    a918:	b0 12 98 aa 	call	#0xaa98	
    a91c:	31 52       	add	#8,	r1	;r2 As==11
    a91e:	3a 41       	pop	r10		
    a920:	3b 41       	pop	r11		
    a922:	30 41       	ret			
    a924:	b1 40 1e 00 	mov	#30,	2(r1)	;#0x001e, 0x0002(r1)
    a928:	02 00 
    a92a:	4c 93       	tst.b	r12		
    a92c:	1b 20       	jnz	$+56     	;abs 0xa964
    a92e:	0a 4e       	mov	r14,	r10	
    a930:	0b 4f       	mov	r15,	r11	
    a932:	81 4a 04 00 	mov	r10,	4(r1)	;0x0004(r1)
    a936:	81 4b 06 00 	mov	r11,	6(r1)	;0x0006(r1)
    a93a:	0e 4a       	mov	r10,	r14	
    a93c:	0f 4b       	mov	r11,	r15	
    a93e:	b0 12 26 aa 	call	#0xaa26	
    a942:	3f 53       	add	#-1,	r15	;r3 As==11
    a944:	1f 93       	cmp	#1,	r15	;r3 As==01
    a946:	e7 3b       	jl	$-48     	;abs 0xa916
    a948:	81 4a 04 00 	mov	r10,	4(r1)	;0x0004(r1)
    a94c:	81 4b 06 00 	mov	r11,	6(r1)	;0x0006(r1)
    a950:	4e 4f       	mov.b	r15,	r14	
    a952:	7e f0 1f 00 	and.b	#31,	r14	;#0x001f
    a956:	0f 20       	jnz	$+32     	;abs 0xa976
    a958:	3e 40 1e 00 	mov	#30,	r14	;#0x001e
    a95c:	0e 8f       	sub	r15,	r14	
    a95e:	81 4e 02 00 	mov	r14,	2(r1)	;0x0002(r1)
    a962:	d9 3f       	jmp	$-76     	;abs 0xa916
    a964:	0e 93       	tst	r14		
    a966:	10 24       	jz	$+34     	;abs 0xa988
    a968:	0a 4e       	mov	r14,	r10	
    a96a:	0b 4f       	mov	r15,	r11	
    a96c:	3a e3       	inv	r10		
    a96e:	3b e3       	inv	r11		
    a970:	1a 53       	inc	r10		
    a972:	0b 63       	adc	r11		
    a974:	de 3f       	jmp	$-66     	;abs 0xa932
    a976:	91 51 04 00 	rla	4(r1)		;0x0004(r1)
    a97a:	04 00 
    a97c:	91 61 06 00 	rlc	6(r1)		;0x0006(r1)
    a980:	06 00 
    a982:	7e 53       	add.b	#-1,	r14	;r3 As==11
    a984:	f8 23       	jnz	$-14     	;abs 0xa976
    a986:	e8 3f       	jmp	$-46     	;abs 0xa958
    a988:	3f 90 00 80 	cmp	#-32768,r15	;#0x8000
    a98c:	ed 23       	jnz	$-36     	;abs 0xa968
    a98e:	0e 43       	clr	r14		
    a990:	3f 40 00 cf 	mov	#-12544,r15	;#0xcf00
    a994:	c3 3f       	jmp	$-120    	;abs 0xa91c

0000a996 <__fixsfsi>:
    a996:	31 50 f4 ff 	add	#-12,	r1	;#0xfff4
    a99a:	81 4e 00 00 	mov	r14,	0(r1)	;0x0000(r1)
    a99e:	81 4f 02 00 	mov	r15,	2(r1)	;0x0002(r1)
    a9a2:	0e 41       	mov	r1,	r14	
    a9a4:	2e 52       	add	#4,	r14	;r2 As==10
    a9a6:	0f 41       	mov	r1,	r15	
    a9a8:	b0 12 76 ac 	call	#0xac76	
    a9ac:	5f 41 04 00 	mov.b	4(r1),	r15	;0x0004(r1)
    a9b0:	6f 93       	cmp.b	#2,	r15	;r3 As==10
    a9b2:	28 24       	jz	$+82     	;abs 0xaa04
    a9b4:	27 28       	jnc	$+80     	;abs 0xaa04
    a9b6:	6f 92       	cmp.b	#4,	r15	;r2 As==10
    a9b8:	07 24       	jz	$+16     	;abs 0xa9c8
    a9ba:	1d 41 06 00 	mov	6(r1),	r13	;0x0006(r1)
    a9be:	0d 93       	tst	r13		
    a9c0:	21 38       	jl	$+68     	;abs 0xaa04
    a9c2:	3d 90 1f 00 	cmp	#31,	r13	;#0x001f
    a9c6:	09 38       	jl	$+20     	;abs 0xa9da
    a9c8:	c1 93 05 00 	tst.b	5(r1)		;0x0005(r1)
    a9cc:	26 20       	jnz	$+78     	;abs 0xaa1a
    a9ce:	3e 43       	mov	#-1,	r14	;r3 As==11
    a9d0:	3f 40 ff 7f 	mov	#32767,	r15	;#0x7fff
    a9d4:	31 50 0c 00 	add	#12,	r1	;#0x000c
    a9d8:	30 41       	ret			
    a9da:	1e 41 08 00 	mov	8(r1),	r14	;0x0008(r1)
    a9de:	1f 41 0a 00 	mov	10(r1),	r15	;0x000a(r1)
    a9e2:	3c 40 1e 00 	mov	#30,	r12	;#0x001e
    a9e6:	4c 8d       	sub.b	r13,	r12	
    a9e8:	4d 4c       	mov.b	r12,	r13	
    a9ea:	7d f0 1f 00 	and.b	#31,	r13	;#0x001f
    a9ee:	0f 20       	jnz	$+32     	;abs 0xaa0e
    a9f0:	c1 93 05 00 	tst.b	5(r1)		;0x0005(r1)
    a9f4:	ef 27       	jz	$-32     	;abs 0xa9d4
    a9f6:	3e e3       	inv	r14		
    a9f8:	3f e3       	inv	r15		
    a9fa:	1e 53       	inc	r14		
    a9fc:	0f 63       	adc	r15		
    a9fe:	31 50 0c 00 	add	#12,	r1	;#0x000c
    aa02:	30 41       	ret			
    aa04:	0e 43       	clr	r14		
    aa06:	0f 43       	clr	r15		
    aa08:	31 50 0c 00 	add	#12,	r1	;#0x000c
    aa0c:	30 41       	ret			
    aa0e:	12 c3       	clrc			
    aa10:	0f 10       	rrc	r15		
    aa12:	0e 10       	rrc	r14		
    aa14:	7d 53       	add.b	#-1,	r13	;r3 As==11
    aa16:	fb 23       	jnz	$-8      	;abs 0xaa0e
    aa18:	eb 3f       	jmp	$-40     	;abs 0xa9f0
    aa1a:	0e 43       	clr	r14		
    aa1c:	3f 40 00 80 	mov	#-32768,r15	;#0x8000
    aa20:	31 50 0c 00 	add	#12,	r1	;#0x000c
    aa24:	30 41       	ret			

0000aa26 <__clzsi2>:
    aa26:	0b 12       	push	r11		
    aa28:	0a 12       	push	r10		
    aa2a:	09 12       	push	r9		
    aa2c:	1f 93       	cmp	#1,	r15	;r3 As==01
    aa2e:	17 2c       	jc	$+48     	;abs 0xaa5e
    aa30:	3e 90 00 01 	cmp	#256,	r14	;#0x0100
    aa34:	2c 28       	jnc	$+90     	;abs 0xaa8e
    aa36:	3a 40 18 00 	mov	#24,	r10	;#0x0018
    aa3a:	0b 43       	clr	r11		
    aa3c:	39 42       	mov	#8,	r9	;r2 As==11
    aa3e:	0c 4e       	mov	r14,	r12	
    aa40:	0d 4f       	mov	r15,	r13	
    aa42:	4f 49       	mov.b	r9,	r15	
    aa44:	4f 93       	tst.b	r15		
    aa46:	17 20       	jnz	$+48     	;abs 0xaa76
    aa48:	3c 50 0e b9 	add	#-18162,r12	;#0xb90e
    aa4c:	6e 4c       	mov.b	@r12,	r14	
    aa4e:	0f 43       	clr	r15		
    aa50:	0a 8e       	sub	r14,	r10	
    aa52:	0b 7f       	subc	r15,	r11	
    aa54:	0f 4a       	mov	r10,	r15	
    aa56:	39 41       	pop	r9		
    aa58:	3a 41       	pop	r10		
    aa5a:	3b 41       	pop	r11		
    aa5c:	30 41       	ret			
    aa5e:	3f 90 00 01 	cmp	#256,	r15	;#0x0100
    aa62:	0f 28       	jnc	$+32     	;abs 0xaa82
    aa64:	3a 42       	mov	#8,	r10	;r2 As==11
    aa66:	0b 43       	clr	r11		
    aa68:	39 40 18 00 	mov	#24,	r9	;#0x0018
    aa6c:	0c 4e       	mov	r14,	r12	
    aa6e:	0d 4f       	mov	r15,	r13	
    aa70:	4f 49       	mov.b	r9,	r15	
    aa72:	4f 93       	tst.b	r15		
    aa74:	e9 27       	jz	$-44     	;abs 0xaa48
    aa76:	12 c3       	clrc			
    aa78:	0d 10       	rrc	r13		
    aa7a:	0c 10       	rrc	r12		
    aa7c:	7f 53       	add.b	#-1,	r15	;r3 As==11
    aa7e:	fb 23       	jnz	$-8      	;abs 0xaa76
    aa80:	e3 3f       	jmp	$-56     	;abs 0xaa48
    aa82:	3a 40 10 00 	mov	#16,	r10	;#0x0010
    aa86:	0b 43       	clr	r11		
    aa88:	39 40 10 00 	mov	#16,	r9	;#0x0010
    aa8c:	ef 3f       	jmp	$-32     	;abs 0xaa6c
    aa8e:	3a 40 20 00 	mov	#32,	r10	;#0x0020
    aa92:	0b 43       	clr	r11		
    aa94:	09 43       	clr	r9		
    aa96:	ea 3f       	jmp	$-42     	;abs 0xaa6c

0000aa98 <__pack_f>:
    aa98:	0b 12       	push	r11		
    aa9a:	0a 12       	push	r10		
    aa9c:	09 12       	push	r9		
    aa9e:	08 12       	push	r8		
    aaa0:	07 12       	push	r7		
    aaa2:	0d 4f       	mov	r15,	r13	
    aaa4:	1e 4f 04 00 	mov	4(r15),	r14	;0x0004(r15)
    aaa8:	1f 4f 06 00 	mov	6(r15),	r15	;0x0006(r15)
    aaac:	5a 4d 01 00 	mov.b	1(r13),	r10	;0x0001(r13)
    aab0:	6c 4d       	mov.b	@r13,	r12	
    aab2:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    aab4:	70 28       	jnc	$+226    	;abs 0xab96
    aab6:	6c 92       	cmp.b	#4,	r12	;r2 As==10
    aab8:	6a 24       	jz	$+214    	;abs 0xab8e
    aaba:	6c 93       	cmp.b	#2,	r12	;r3 As==10
    aabc:	36 24       	jz	$+110    	;abs 0xab2a
    aabe:	0e 93       	tst	r14		
    aac0:	32 24       	jz	$+102    	;abs 0xab26
    aac2:	1b 4d 02 00 	mov	2(r13),	r11	;0x0002(r13)
    aac6:	3b 90 82 ff 	cmp	#-126,	r11	;#0xff82
    aaca:	6d 38       	jl	$+220    	;abs 0xaba6
    aacc:	3b 90 80 00 	cmp	#128,	r11	;#0x0080
    aad0:	5e 34       	jge	$+190    	;abs 0xab8e
    aad2:	0c 4e       	mov	r14,	r12	
    aad4:	0d 4f       	mov	r15,	r13	
    aad6:	3c f0 7f 00 	and	#127,	r12	;#0x007f
    aada:	0d f3       	and	#0,	r13	;r3 As==00
    aadc:	3c 90 40 00 	cmp	#64,	r12	;#0x0040
    aae0:	40 24       	jz	$+130    	;abs 0xab62
    aae2:	3e 50 3f 00 	add	#63,	r14	;#0x003f
    aae6:	0f 63       	adc	r15		
    aae8:	0f 93       	tst	r15		
    aaea:	4a 38       	jl	$+150    	;abs 0xab80
    aaec:	0d 4b       	mov	r11,	r13	
    aaee:	3d 50 7f 00 	add	#127,	r13	;#0x007f
    aaf2:	12 c3       	clrc			
    aaf4:	0f 10       	rrc	r15		
    aaf6:	0e 10       	rrc	r14		
    aaf8:	12 c3       	clrc			
    aafa:	0f 10       	rrc	r15		
    aafc:	0e 10       	rrc	r14		
    aafe:	12 c3       	clrc			
    ab00:	0f 10       	rrc	r15		
    ab02:	0e 10       	rrc	r14		
    ab04:	12 c3       	clrc			
    ab06:	0f 10       	rrc	r15		
    ab08:	0e 10       	rrc	r14		
    ab0a:	12 c3       	clrc			
    ab0c:	0f 10       	rrc	r15		
    ab0e:	0e 10       	rrc	r14		
    ab10:	12 c3       	clrc			
    ab12:	0f 10       	rrc	r15		
    ab14:	0e 10       	rrc	r14		
    ab16:	12 c3       	clrc			
    ab18:	0f 10       	rrc	r15		
    ab1a:	0e 10       	rrc	r14		
    ab1c:	3e f3       	and	#-1,	r14	;r3 As==11
    ab1e:	3f f0 7f 00 	and	#127,	r15	;#0x007f
    ab22:	4d 4d       	mov.b	r13,	r13	
    ab24:	05 3c       	jmp	$+12     	;abs 0xab30
    ab26:	0f 93       	tst	r15		
    ab28:	cc 23       	jnz	$-102    	;abs 0xaac2
    ab2a:	4d 43       	clr.b	r13		
    ab2c:	0e 43       	clr	r14		
    ab2e:	0f 43       	clr	r15		
    ab30:	4d 4d       	mov.b	r13,	r13	
    ab32:	0d 5d       	rla	r13		
    ab34:	0d 5d       	rla	r13		
    ab36:	0d 5d       	rla	r13		
    ab38:	0d 5d       	rla	r13		
    ab3a:	0d 5d       	rla	r13		
    ab3c:	0d 5d       	rla	r13		
    ab3e:	0d 5d       	rla	r13		
    ab40:	0c 4f       	mov	r15,	r12	
    ab42:	3c f0 7f 00 	and	#127,	r12	;#0x007f
    ab46:	0c dd       	bis	r13,	r12	
    ab48:	4f 4a       	mov.b	r10,	r15	
    ab4a:	0f 11       	rra	r15		
    ab4c:	0f 43       	clr	r15		
    ab4e:	0f 10       	rrc	r15		
    ab50:	0d 4c       	mov	r12,	r13	
    ab52:	0d df       	bis	r15,	r13	
    ab54:	0f 4d       	mov	r13,	r15	
    ab56:	37 41       	pop	r7		
    ab58:	38 41       	pop	r8		
    ab5a:	39 41       	pop	r9		
    ab5c:	3a 41       	pop	r10		
    ab5e:	3b 41       	pop	r11		
    ab60:	30 41       	ret			
    ab62:	0d 93       	tst	r13		
    ab64:	be 23       	jnz	$-130    	;abs 0xaae2
    ab66:	0c 4e       	mov	r14,	r12	
    ab68:	0d 4f       	mov	r15,	r13	
    ab6a:	3c f0 80 00 	and	#128,	r12	;#0x0080
    ab6e:	0d f3       	and	#0,	r13	;r3 As==00
    ab70:	0c 93       	tst	r12		
    ab72:	02 20       	jnz	$+6      	;abs 0xab78
    ab74:	0d 93       	tst	r13		
    ab76:	b8 27       	jz	$-142    	;abs 0xaae8
    ab78:	3e 50 40 00 	add	#64,	r14	;#0x0040
    ab7c:	0f 63       	adc	r15		
    ab7e:	b4 3f       	jmp	$-150    	;abs 0xaae8
    ab80:	12 c3       	clrc			
    ab82:	0f 10       	rrc	r15		
    ab84:	0e 10       	rrc	r14		
    ab86:	0d 4b       	mov	r11,	r13	
    ab88:	3d 50 80 00 	add	#128,	r13	;#0x0080
    ab8c:	b2 3f       	jmp	$-154    	;abs 0xaaf2
    ab8e:	7d 43       	mov.b	#-1,	r13	;r3 As==11
    ab90:	0e 43       	clr	r14		
    ab92:	0f 43       	clr	r15		
    ab94:	cd 3f       	jmp	$-100    	;abs 0xab30
    ab96:	0e d3       	bis	#0,	r14	;r3 As==00
    ab98:	3f d0 10 00 	bis	#16,	r15	;#0x0010
    ab9c:	3e f3       	and	#-1,	r14	;r3 As==11
    ab9e:	3f f0 7f 00 	and	#127,	r15	;#0x007f
    aba2:	7d 43       	mov.b	#-1,	r13	;r3 As==11
    aba4:	c5 3f       	jmp	$-116    	;abs 0xab30
    aba6:	37 40 82 ff 	mov	#-126,	r7	;#0xff82
    abaa:	07 8b       	sub	r11,	r7	
    abac:	37 90 1a 00 	cmp	#26,	r7	;#0x001a
    abb0:	4f 34       	jge	$+160    	;abs 0xac50
    abb2:	0c 4e       	mov	r14,	r12	
    abb4:	0d 4f       	mov	r15,	r13	
    abb6:	4b 47       	mov.b	r7,	r11	
    abb8:	7b f0 1f 00 	and.b	#31,	r11	;#0x001f
    abbc:	05 24       	jz	$+12     	;abs 0xabc8
    abbe:	12 c3       	clrc			
    abc0:	0d 10       	rrc	r13		
    abc2:	0c 10       	rrc	r12		
    abc4:	7b 53       	add.b	#-1,	r11	;r3 As==11
    abc6:	fb 23       	jnz	$-8      	;abs 0xabbe
    abc8:	18 43       	mov	#1,	r8	;r3 As==01
    abca:	09 43       	clr	r9		
    abcc:	77 f0 1f 00 	and.b	#31,	r7	;#0x001f
    abd0:	04 24       	jz	$+10     	;abs 0xabda
    abd2:	08 58       	rla	r8		
    abd4:	09 69       	rlc	r9		
    abd6:	77 53       	add.b	#-1,	r7	;r3 As==11
    abd8:	fc 23       	jnz	$-6      	;abs 0xabd2
    abda:	38 53       	add	#-1,	r8	;r3 As==11
    abdc:	39 63       	addc	#-1,	r9	;r3 As==11
    abde:	08 fe       	and	r14,	r8	
    abe0:	09 ff       	and	r15,	r9	
    abe2:	1e 43       	mov	#1,	r14	;r3 As==01
    abe4:	0f 43       	clr	r15		
    abe6:	08 93       	tst	r8		
    abe8:	04 20       	jnz	$+10     	;abs 0xabf2
    abea:	09 93       	tst	r9		
    abec:	02 20       	jnz	$+6      	;abs 0xabf2
    abee:	0e 43       	clr	r14		
    abf0:	0f 43       	clr	r15		
    abf2:	08 4e       	mov	r14,	r8	
    abf4:	09 4f       	mov	r15,	r9	
    abf6:	08 dc       	bis	r12,	r8	
    abf8:	09 dd       	bis	r13,	r9	
    abfa:	0e 48       	mov	r8,	r14	
    abfc:	0f 49       	mov	r9,	r15	
    abfe:	3e f0 7f 00 	and	#127,	r14	;#0x007f
    ac02:	0f f3       	and	#0,	r15	;r3 As==00
    ac04:	3e 90 40 00 	cmp	#64,	r14	;#0x0040
    ac08:	26 24       	jz	$+78     	;abs 0xac56
    ac0a:	38 50 3f 00 	add	#63,	r8	;#0x003f
    ac0e:	09 63       	adc	r9		
    ac10:	0e 48       	mov	r8,	r14	
    ac12:	0f 49       	mov	r9,	r15	
    ac14:	12 c3       	clrc			
    ac16:	0f 10       	rrc	r15		
    ac18:	0e 10       	rrc	r14		
    ac1a:	12 c3       	clrc			
    ac1c:	0f 10       	rrc	r15		
    ac1e:	0e 10       	rrc	r14		
    ac20:	12 c3       	clrc			
    ac22:	0f 10       	rrc	r15		
    ac24:	0e 10       	rrc	r14		
    ac26:	12 c3       	clrc			
    ac28:	0f 10       	rrc	r15		
    ac2a:	0e 10       	rrc	r14		
    ac2c:	12 c3       	clrc			
    ac2e:	0f 10       	rrc	r15		
    ac30:	0e 10       	rrc	r14		
    ac32:	12 c3       	clrc			
    ac34:	0f 10       	rrc	r15		
    ac36:	0e 10       	rrc	r14		
    ac38:	12 c3       	clrc			
    ac3a:	0f 10       	rrc	r15		
    ac3c:	0e 10       	rrc	r14		
    ac3e:	3e f3       	and	#-1,	r14	;r3 As==11
    ac40:	3f f0 7f 00 	and	#127,	r15	;#0x007f
    ac44:	5d 43       	mov.b	#1,	r13	;r3 As==01
    ac46:	39 90 00 40 	cmp	#16384,	r9	;#0x4000
    ac4a:	72 2f       	jc	$-282    	;abs 0xab30
    ac4c:	4d 43       	clr.b	r13		
    ac4e:	70 3f       	jmp	$-286    	;abs 0xab30
    ac50:	08 43       	clr	r8		
    ac52:	09 43       	clr	r9		
    ac54:	da 3f       	jmp	$-74     	;abs 0xac0a
    ac56:	0f 93       	tst	r15		
    ac58:	d8 23       	jnz	$-78     	;abs 0xac0a
    ac5a:	0e 48       	mov	r8,	r14	
    ac5c:	0f 49       	mov	r9,	r15	
    ac5e:	3e f0 80 00 	and	#128,	r14	;#0x0080
    ac62:	0f f3       	and	#0,	r15	;r3 As==00
    ac64:	0e 93       	tst	r14		
    ac66:	04 24       	jz	$+10     	;abs 0xac70
    ac68:	38 50 40 00 	add	#64,	r8	;#0x0040
    ac6c:	09 63       	adc	r9		
    ac6e:	d0 3f       	jmp	$-94     	;abs 0xac10
    ac70:	0f 93       	tst	r15		
    ac72:	ce 27       	jz	$-98     	;abs 0xac10
    ac74:	f9 3f       	jmp	$-12     	;abs 0xac68

0000ac76 <__unpack_f>:
    ac76:	0b 12       	push	r11		
    ac78:	0a 12       	push	r10		
    ac7a:	2a 4f       	mov	@r15,	r10	
    ac7c:	5b 4f 02 00 	mov.b	2(r15),	r11	;0x0002(r15)
    ac80:	3b f0 7f 00 	and	#127,	r11	;#0x007f
    ac84:	1d 4f 02 00 	mov	2(r15),	r13	;0x0002(r15)
    ac88:	12 c3       	clrc			
    ac8a:	0d 10       	rrc	r13		
    ac8c:	12 c3       	clrc			
    ac8e:	0d 10       	rrc	r13		
    ac90:	12 c3       	clrc			
    ac92:	0d 10       	rrc	r13		
    ac94:	12 c3       	clrc			
    ac96:	0d 10       	rrc	r13		
    ac98:	12 c3       	clrc			
    ac9a:	0d 10       	rrc	r13		
    ac9c:	12 c3       	clrc			
    ac9e:	0d 10       	rrc	r13		
    aca0:	12 c3       	clrc			
    aca2:	0d 10       	rrc	r13		
    aca4:	4d 4d       	mov.b	r13,	r13	
    aca6:	5f 4f 03 00 	mov.b	3(r15),	r15	;0x0003(r15)
    acaa:	3f b0 80 00 	bit	#128,	r15	;#0x0080
    acae:	0f 43       	clr	r15		
    acb0:	0f 6f       	rlc	r15		
    acb2:	ce 4f 01 00 	mov.b	r15,	1(r14)	;0x0001(r14)
    acb6:	0d 93       	tst	r13		
    acb8:	2d 20       	jnz	$+92     	;abs 0xad14
    acba:	0a 93       	tst	r10		
    acbc:	51 24       	jz	$+164    	;abs 0xad60
    acbe:	be 40 82 ff 	mov	#-126,	2(r14)	;#0xff82, 0x0002(r14)
    acc2:	02 00 
    acc4:	0c 4a       	mov	r10,	r12	
    acc6:	0d 4b       	mov	r11,	r13	
    acc8:	0c 5c       	rla	r12		
    acca:	0d 6d       	rlc	r13		
    accc:	0c 5c       	rla	r12		
    acce:	0d 6d       	rlc	r13		
    acd0:	0c 5c       	rla	r12		
    acd2:	0d 6d       	rlc	r13		
    acd4:	0c 5c       	rla	r12		
    acd6:	0d 6d       	rlc	r13		
    acd8:	0c 5c       	rla	r12		
    acda:	0d 6d       	rlc	r13		
    acdc:	0c 5c       	rla	r12		
    acde:	0d 6d       	rlc	r13		
    ace0:	0c 5c       	rla	r12		
    ace2:	0d 6d       	rlc	r13		
    ace4:	fe 40 03 00 	mov.b	#3,	0(r14)	;#0x0003, 0x0000(r14)
    ace8:	00 00 
    acea:	3d 90 00 40 	cmp	#16384,	r13	;#0x4000
    acee:	0b 2c       	jc	$+24     	;abs 0xad06
    acf0:	3f 40 81 ff 	mov	#-127,	r15	;#0xff81
    acf4:	0c 5c       	rla	r12		
    acf6:	0d 6d       	rlc	r13		
    acf8:	0a 4f       	mov	r15,	r10	
    acfa:	3f 53       	add	#-1,	r15	;r3 As==11
    acfc:	3d 90 00 40 	cmp	#16384,	r13	;#0x4000
    ad00:	f9 2b       	jnc	$-12     	;abs 0xacf4
    ad02:	8e 4a 02 00 	mov	r10,	2(r14)	;0x0002(r14)
    ad06:	8e 4c 04 00 	mov	r12,	4(r14)	;0x0004(r14)
    ad0a:	8e 4d 06 00 	mov	r13,	6(r14)	;0x0006(r14)
    ad0e:	3a 41       	pop	r10		
    ad10:	3b 41       	pop	r11		
    ad12:	30 41       	ret			
    ad14:	3d 90 ff 00 	cmp	#255,	r13	;#0x00ff
    ad18:	2a 24       	jz	$+86     	;abs 0xad6e
    ad1a:	3d 50 81 ff 	add	#-127,	r13	;#0xff81
    ad1e:	8e 4d 02 00 	mov	r13,	2(r14)	;0x0002(r14)
    ad22:	fe 40 03 00 	mov.b	#3,	0(r14)	;#0x0003, 0x0000(r14)
    ad26:	00 00 
    ad28:	0c 4a       	mov	r10,	r12	
    ad2a:	0d 4b       	mov	r11,	r13	
    ad2c:	0c 5c       	rla	r12		
    ad2e:	0d 6d       	rlc	r13		
    ad30:	0c 5c       	rla	r12		
    ad32:	0d 6d       	rlc	r13		
    ad34:	0c 5c       	rla	r12		
    ad36:	0d 6d       	rlc	r13		
    ad38:	0c 5c       	rla	r12		
    ad3a:	0d 6d       	rlc	r13		
    ad3c:	0c 5c       	rla	r12		
    ad3e:	0d 6d       	rlc	r13		
    ad40:	0c 5c       	rla	r12		
    ad42:	0d 6d       	rlc	r13		
    ad44:	0c 5c       	rla	r12		
    ad46:	0d 6d       	rlc	r13		
    ad48:	0a 4c       	mov	r12,	r10	
    ad4a:	0b 4d       	mov	r13,	r11	
    ad4c:	0a d3       	bis	#0,	r10	;r3 As==00
    ad4e:	3b d0 00 40 	bis	#16384,	r11	;#0x4000
    ad52:	8e 4a 04 00 	mov	r10,	4(r14)	;0x0004(r14)
    ad56:	8e 4b 06 00 	mov	r11,	6(r14)	;0x0006(r14)
    ad5a:	3a 41       	pop	r10		
    ad5c:	3b 41       	pop	r11		
    ad5e:	30 41       	ret			
    ad60:	0b 93       	tst	r11		
    ad62:	ad 23       	jnz	$-164    	;abs 0xacbe
    ad64:	ee 43 00 00 	mov.b	#2,	0(r14)	;r3 As==10, 0x0000(r14)
    ad68:	3a 41       	pop	r10		
    ad6a:	3b 41       	pop	r11		
    ad6c:	30 41       	ret			
    ad6e:	0a 93       	tst	r10		
    ad70:	0c 24       	jz	$+26     	;abs 0xad8a
    ad72:	0c 4a       	mov	r10,	r12	
    ad74:	0d 4b       	mov	r11,	r13	
    ad76:	0c f3       	and	#0,	r12	;r3 As==00
    ad78:	3d f0 10 00 	and	#16,	r13	;#0x0010
    ad7c:	0c 93       	tst	r12		
    ad7e:	02 20       	jnz	$+6      	;abs 0xad84
    ad80:	0d 93       	tst	r13		
    ad82:	08 24       	jz	$+18     	;abs 0xad94
    ad84:	de 43 00 00 	mov.b	#1,	0(r14)	;r3 As==01, 0x0000(r14)
    ad88:	e4 3f       	jmp	$-54     	;abs 0xad52
    ad8a:	0b 93       	tst	r11		
    ad8c:	f2 23       	jnz	$-26     	;abs 0xad72
    ad8e:	ee 42 00 00 	mov.b	#4,	0(r14)	;r2 As==10, 0x0000(r14)
    ad92:	e3 3f       	jmp	$-56     	;abs 0xad5a
    ad94:	ce 43 00 00 	mov.b	#0,	0(r14)	;r3 As==00, 0x0000(r14)
    ad98:	dc 3f       	jmp	$-70     	;abs 0xad52

0000ad9a <printf>:
    ad9a:	0d 41       	mov	r1,	r13	
    ad9c:	2d 53       	incd	r13		
    ad9e:	3e 4d       	mov	@r13+,	r14	
    ada0:	3f 40 70 9e 	mov	#-24976,r15	;#0x9e70
    ada4:	b0 12 50 af 	call	#0xaf50	
    ada8:	30 41       	ret			

0000adaa <vprintf>:
    adaa:	0d 4e       	mov	r14,	r13	
    adac:	0e 4f       	mov	r15,	r14	
    adae:	3f 40 70 9e 	mov	#-24976,r15	;#0x9e70
    adb2:	b0 12 50 af 	call	#0xaf50	
    adb6:	30 41       	ret			

0000adb8 <print_field>:
    adb8:	0b 12       	push	r11		
    adba:	0a 12       	push	r10		
    adbc:	09 12       	push	r9		
    adbe:	08 12       	push	r8		
    adc0:	07 12       	push	r7		
    adc2:	06 12       	push	r6		
    adc4:	05 12       	push	r5		
    adc6:	04 12       	push	r4		
    adc8:	31 82       	sub	#8,	r1	;r2 As==11
    adca:	08 4f       	mov	r15,	r8	
    adcc:	81 4e 04 00 	mov	r14,	4(r1)	;0x0004(r1)
    add0:	09 4d       	mov	r13,	r9	
    add2:	1f 41 1a 00 	mov	26(r1),	r15	;0x001a(r1)
    add6:	1d 41 1c 00 	mov	28(r1),	r13	;0x001c(r1)
    adda:	4c 4d       	mov.b	r13,	r12	
    addc:	04 4d       	mov	r13,	r4	
    adde:	84 10       	swpb	r4		
    ade0:	45 44       	mov.b	r4,	r5	
    ade2:	4e 4f       	mov.b	r15,	r14	
    ade4:	7e b0 40 00 	bit.b	#64,	r14	;#0x0040
    ade8:	11 24       	jz	$+36     	;abs 0xae0c
    adea:	f1 40 30 00 	mov.b	#48,	0(r1)	;#0x0030, 0x0000(r1)
    adee:	00 00 
    adf0:	0e 4f       	mov	r15,	r14	
    adf2:	8e 10       	swpb	r14		
    adf4:	5e f3       	and.b	#1,	r14	;r3 As==01
    adf6:	03 24       	jz	$+8      	;abs 0xadfe
    adf8:	7e 40 58 00 	mov.b	#88,	r14	;#0x0058
    adfc:	02 3c       	jmp	$+6      	;abs 0xae02
    adfe:	7e 40 78 00 	mov.b	#120,	r14	;#0x0078
    ae02:	c1 4e 01 00 	mov.b	r14,	1(r1)	;0x0001(r1)
    ae06:	0c 41       	mov	r1,	r12	
    ae08:	2c 53       	incd	r12		
    ae0a:	0f 3c       	jmp	$+32     	;abs 0xae2a
    ae0c:	7e f0 20 00 	and.b	#32,	r14	;#0x0020
    ae10:	04 24       	jz	$+10     	;abs 0xae1a
    ae12:	f1 40 30 00 	mov.b	#48,	0(r1)	;#0x0030, 0x0000(r1)
    ae16:	00 00 
    ae18:	04 3c       	jmp	$+10     	;abs 0xae22
    ae1a:	4c 93       	tst.b	r12		
    ae1c:	05 24       	jz	$+12     	;abs 0xae28
    ae1e:	c1 4d 00 00 	mov.b	r13,	0(r1)	;0x0000(r1)
    ae22:	0c 41       	mov	r1,	r12	
    ae24:	1c 53       	inc	r12		
    ae26:	01 3c       	jmp	$+4      	;abs 0xae2a
    ae28:	0c 41       	mov	r1,	r12	
    ae2a:	0a 4c       	mov	r12,	r10	
    ae2c:	8c 10       	swpb	r12		
    ae2e:	8c 11       	sxt	r12		
    ae30:	8c 10       	swpb	r12		
    ae32:	8c 11       	sxt	r12		
    ae34:	0b 4c       	mov	r12,	r11	
    ae36:	06 41       	mov	r1,	r6	
    ae38:	0c 41       	mov	r1,	r12	
    ae3a:	8c 10       	swpb	r12		
    ae3c:	8c 11       	sxt	r12		
    ae3e:	8c 10       	swpb	r12		
    ae40:	8c 11       	sxt	r12		
    ae42:	07 4c       	mov	r12,	r7	
    ae44:	0a 86       	sub	r6,	r10	
    ae46:	0b 77       	subc	r7,	r11	
    ae48:	0e 4f       	mov	r15,	r14	
    ae4a:	8e 10       	swpb	r14		
    ae4c:	c1 4e 02 00 	mov.b	r14,	2(r1)	;0x0002(r1)
    ae50:	6e f2       	and.b	#4,	r14	;r2 As==10
    ae52:	02 24       	jz	$+6      	;abs 0xae58
    ae54:	07 45       	mov	r5,	r7	
    ae56:	01 3c       	jmp	$+4      	;abs 0xae5a
    ae58:	37 43       	mov	#-1,	r7	;r3 As==11
    ae5a:	4f 4f       	mov.b	r15,	r15	
    ae5c:	7f b0 10 00 	bit.b	#16,	r15	;#0x0010
    ae60:	3c 20       	jnz	$+122    	;abs 0xaeda
    ae62:	1d 41 04 00 	mov	4(r1),	r13	;0x0004(r1)
    ae66:	3d 53       	add	#-1,	r13	;r3 As==11
    ae68:	1d 53       	inc	r13		
    ae6a:	cd 93 00 00 	tst.b	0(r13)		;0x0000(r13)
    ae6e:	fc 23       	jnz	$-6      	;abs 0xae68
    ae70:	1d 81 04 00 	sub	4(r1),	r13	;0x0004(r1)
    ae74:	09 9a       	cmp	r10,	r9	
    ae76:	02 28       	jnc	$+6      	;abs 0xae7c
    ae78:	09 8a       	sub	r10,	r9	
    ae7a:	01 3c       	jmp	$+4      	;abs 0xae7e
    ae7c:	09 43       	clr	r9		
    ae7e:	e1 b3 02 00 	bit.b	#2,	2(r1)	;r3 As==10, 0x0002(r1)
    ae82:	05 24       	jz	$+12     	;abs 0xae8e
    ae84:	09 95       	cmp	r5,	r9	
    ae86:	02 28       	jnc	$+6      	;abs 0xae8c
    ae88:	09 85       	sub	r5,	r9	
    ae8a:	01 3c       	jmp	$+4      	;abs 0xae8e
    ae8c:	09 43       	clr	r9		
    ae8e:	05 4d       	mov	r13,	r5	
    ae90:	07 9d       	cmp	r13,	r7	
    ae92:	01 2c       	jc	$+4      	;abs 0xae96
    ae94:	05 47       	mov	r7,	r5	
    ae96:	4f 93       	tst.b	r15		
    ae98:	0d 38       	jl	$+28     	;abs 0xaeb4
    ae9a:	f1 40 20 00 	mov.b	#32,	6(r1)	;#0x0020, 0x0006(r1)
    ae9e:	06 00 
    aea0:	06 43       	clr	r6		
    aea2:	0b 43       	clr	r11		
    aea4:	0e 3c       	jmp	$+30     	;abs 0xaec2
    aea6:	0f 41       	mov	r1,	r15	
    aea8:	0f 56       	add	r6,	r15	
    aeaa:	6f 4f       	mov.b	@r15,	r15	
    aeac:	8f 11       	sxt	r15		
    aeae:	16 53       	inc	r6		
    aeb0:	88 12       	call	r8		
    aeb2:	01 3c       	jmp	$+4      	;abs 0xaeb6
    aeb4:	06 43       	clr	r6		
    aeb6:	06 9a       	cmp	r10,	r6	
    aeb8:	f6 3b       	jl	$-18     	;abs 0xaea6
    aeba:	0b 4a       	mov	r10,	r11	
    aebc:	f1 40 30 00 	mov.b	#48,	6(r1)	;#0x0030, 0x0006(r1)
    aec0:	06 00 
    aec2:	05 8b       	sub	r11,	r5	
    aec4:	05 3c       	jmp	$+12     	;abs 0xaed0
    aec6:	5f 41 06 00 	mov.b	6(r1),	r15	;0x0006(r1)
    aeca:	8f 11       	sxt	r15		
    aecc:	88 12       	call	r8		
    aece:	1b 53       	inc	r11		
    aed0:	0f 45       	mov	r5,	r15	
    aed2:	0f 5b       	add	r11,	r15	
    aed4:	0f 99       	cmp	r9,	r15	
    aed6:	f7 2b       	jnc	$-16     	;abs 0xaec6
    aed8:	0a 3c       	jmp	$+22     	;abs 0xaeee
    aeda:	06 43       	clr	r6		
    aedc:	0b 43       	clr	r11		
    aede:	07 3c       	jmp	$+16     	;abs 0xaeee
    aee0:	1b 53       	inc	r11		
    aee2:	0f 41       	mov	r1,	r15	
    aee4:	0f 56       	add	r6,	r15	
    aee6:	6f 4f       	mov.b	@r15,	r15	
    aee8:	8f 11       	sxt	r15		
    aeea:	16 53       	inc	r6		
    aeec:	88 12       	call	r8		
    aeee:	06 9a       	cmp	r10,	r6	
    aef0:	f7 3b       	jl	$-16     	;abs 0xaee0
    aef2:	e1 b3 02 00 	bit.b	#2,	2(r1)	;r3 As==10, 0x0002(r1)
    aef6:	02 24       	jz	$+6      	;abs 0xaefc
    aef8:	4a 44       	mov.b	r4,	r10	
    aefa:	08 3c       	jmp	$+18     	;abs 0xaf0c
    aefc:	1a 41 04 00 	mov	4(r1),	r10	;0x0004(r1)
    af00:	0a 8b       	sub	r11,	r10	
    af02:	0d 3c       	jmp	$+28     	;abs 0xaf1e
    af04:	3f 40 30 00 	mov	#48,	r15	;#0x0030
    af08:	88 12       	call	r8		
    af0a:	7a 53       	add.b	#-1,	r10	;r3 As==11
    af0c:	4a 93       	tst.b	r10		
    af0e:	fa 23       	jnz	$-10     	;abs 0xaf04
    af10:	44 44       	mov.b	r4,	r4	
    af12:	0b 54       	add	r4,	r11	
    af14:	f3 3f       	jmp	$-24     	;abs 0xaefc
    af16:	37 53       	add	#-1,	r7	;r3 As==11
    af18:	8f 11       	sxt	r15		
    af1a:	88 12       	call	r8		
    af1c:	1b 53       	inc	r11		
    af1e:	0f 4a       	mov	r10,	r15	
    af20:	0f 5b       	add	r11,	r15	
    af22:	6f 4f       	mov.b	@r15,	r15	
    af24:	4f 93       	tst.b	r15		
    af26:	07 24       	jz	$+16     	;abs 0xaf36
    af28:	07 93       	tst	r7		
    af2a:	f5 23       	jnz	$-20     	;abs 0xaf16
    af2c:	04 3c       	jmp	$+10     	;abs 0xaf36
    af2e:	3f 40 20 00 	mov	#32,	r15	;#0x0020
    af32:	88 12       	call	r8		
    af34:	1b 53       	inc	r11		
    af36:	0b 99       	cmp	r9,	r11	
    af38:	fa 2b       	jnc	$-10     	;abs 0xaf2e
    af3a:	0f 4b       	mov	r11,	r15	
    af3c:	31 52       	add	#8,	r1	;r2 As==11
    af3e:	34 41       	pop	r4		
    af40:	35 41       	pop	r5		
    af42:	36 41       	pop	r6		
    af44:	37 41       	pop	r7		
    af46:	38 41       	pop	r8		
    af48:	39 41       	pop	r9		
    af4a:	3a 41       	pop	r10		
    af4c:	3b 41       	pop	r11		
    af4e:	30 41       	ret			

0000af50 <vuprintf>:
    af50:	0b 12       	push	r11		
    af52:	0a 12       	push	r10		
    af54:	09 12       	push	r9		
    af56:	08 12       	push	r8		
    af58:	07 12       	push	r7		
    af5a:	06 12       	push	r6		
    af5c:	05 12       	push	r5		
    af5e:	04 12       	push	r4		
    af60:	31 50 b6 ff 	add	#-74,	r1	;#0xffb6
    af64:	81 4f 3a 00 	mov	r15,	58(r1)	;0x003a(r1)
    af68:	06 4e       	mov	r14,	r6	
    af6a:	05 4d       	mov	r13,	r5	
    af6c:	81 4e 3e 00 	mov	r14,	62(r1)	;0x003e(r1)
    af70:	c1 43 2f 00 	mov.b	#0,	47(r1)	;r3 As==00, 0x002f(r1)
    af74:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    af78:	c1 43 2e 00 	mov.b	#0,	46(r1)	;r3 As==00, 0x002e(r1)
    af7c:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    af80:	81 43 30 00 	mov	#0,	48(r1)	;r3 As==00, 0x0030(r1)
    af84:	81 43 26 00 	mov	#0,	38(r1)	;r3 As==00, 0x0026(r1)
    af88:	07 43       	clr	r7		
    af8a:	81 43 2c 00 	mov	#0,	44(r1)	;r3 As==00, 0x002c(r1)
    af8e:	0e 41       	mov	r1,	r14	
    af90:	3e 50 1c 00 	add	#28,	r14	;#0x001c
    af94:	81 4e 1c 00 	mov	r14,	28(r1)	;0x001c(r1)
    af98:	30 40 ca b5 	br	#0xb5ca	
    af9c:	0f 46       	mov	r6,	r15	
    af9e:	1f 53       	inc	r15		
    afa0:	81 4f 40 00 	mov	r15,	64(r1)	;0x0040(r1)
    afa4:	07 93       	tst	r7		
    afa6:	1e 20       	jnz	$+62     	;abs 0xafe4
    afa8:	7e 90 25 00 	cmp.b	#37,	r14	;#0x0025
    afac:	13 20       	jnz	$+40     	;abs 0xafd4
    afae:	81 43 00 00 	mov	#0,	0(r1)	;r3 As==00, 0x0000(r1)
    afb2:	81 43 02 00 	mov	#0,	2(r1)	;r3 As==00, 0x0002(r1)
    afb6:	81 46 3e 00 	mov	r6,	62(r1)	;0x003e(r1)
    afba:	c1 43 2f 00 	mov.b	#0,	47(r1)	;r3 As==00, 0x002f(r1)
    afbe:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    afc2:	c1 43 2e 00 	mov.b	#0,	46(r1)	;r3 As==00, 0x002e(r1)
    afc6:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    afca:	81 43 30 00 	mov	#0,	48(r1)	;r3 As==00, 0x0030(r1)
    afce:	30 40 c0 b5 	br	#0xb5c0	
    afd2:	05 47       	mov	r7,	r5	
    afd4:	8e 11       	sxt	r14		
    afd6:	0f 4e       	mov	r14,	r15	
    afd8:	91 12 3c 00 	call	60(r1)		;0x003c(r1)
    afdc:	91 53 2c 00 	inc	44(r1)		;0x002c(r1)
    afe0:	30 40 a6 b5 	br	#0xb5a6	
    afe4:	7e 90 63 00 	cmp.b	#99,	r14	;#0x0063
    afe8:	c5 24       	jz	$+396    	;abs 0xb174
    afea:	7e 90 64 00 	cmp.b	#100,	r14	;#0x0064
    afee:	27 34       	jge	$+80     	;abs 0xb03e
    aff0:	7e 90 30 00 	cmp.b	#48,	r14	;#0x0030
    aff4:	94 24       	jz	$+298    	;abs 0xb11e
    aff6:	7e 90 31 00 	cmp.b	#49,	r14	;#0x0031
    affa:	1a 34       	jge	$+54     	;abs 0xb030
    affc:	7e 90 2a 00 	cmp.b	#42,	r14	;#0x002a
    b000:	77 24       	jz	$+240    	;abs 0xb0f0
    b002:	7e 90 2b 00 	cmp.b	#43,	r14	;#0x002b
    b006:	0a 34       	jge	$+22     	;abs 0xb01c
    b008:	7e 90 23 00 	cmp.b	#35,	r14	;#0x0023
    b00c:	42 24       	jz	$+134    	;abs 0xb092
    b00e:	7e 90 25 00 	cmp.b	#37,	r14	;#0x0025
    b012:	e0 27       	jz	$-62     	;abs 0xafd4
    b014:	7e 90 20 00 	cmp.b	#32,	r14	;#0x0020
    b018:	32 20       	jnz	$+102    	;abs 0xb07e
    b01a:	56 3c       	jmp	$+174    	;abs 0xb0c8
    b01c:	7e 90 2d 00 	cmp.b	#45,	r14	;#0x002d
    b020:	49 24       	jz	$+148    	;abs 0xb0b4
    b022:	7e 90 2e 00 	cmp.b	#46,	r14	;#0x002e
    b026:	5b 24       	jz	$+184    	;abs 0xb0de
    b028:	7e 90 2b 00 	cmp.b	#43,	r14	;#0x002b
    b02c:	28 20       	jnz	$+82     	;abs 0xb07e
    b02e:	47 3c       	jmp	$+144    	;abs 0xb0be
    b030:	7e 90 3a 00 	cmp.b	#58,	r14	;#0x003a
    b034:	8c 38       	jl	$+282    	;abs 0xb14e
    b036:	7e 90 58 00 	cmp.b	#88,	r14	;#0x0058
    b03a:	21 20       	jnz	$+68     	;abs 0xb07e
    b03c:	e9 3c       	jmp	$+468    	;abs 0xb210
    b03e:	7e 90 6f 00 	cmp.b	#111,	r14	;#0x006f
    b042:	24 24       	jz	$+74     	;abs 0xb08c
    b044:	7e 90 70 00 	cmp.b	#112,	r14	;#0x0070
    b048:	0a 34       	jge	$+22     	;abs 0xb05e
    b04a:	7e 90 69 00 	cmp.b	#105,	r14	;#0x0069
    b04e:	e3 24       	jz	$+456    	;abs 0xb216
    b050:	7e 90 6c 00 	cmp.b	#108,	r14	;#0x006c
    b054:	22 24       	jz	$+70     	;abs 0xb09a
    b056:	7e 90 64 00 	cmp.b	#100,	r14	;#0x0064
    b05a:	11 20       	jnz	$+36     	;abs 0xb07e
    b05c:	dc 3c       	jmp	$+442    	;abs 0xb216
    b05e:	7e 90 73 00 	cmp.b	#115,	r14	;#0x0073
    b062:	98 24       	jz	$+306    	;abs 0xb194
    b064:	7e 90 74 00 	cmp.b	#116,	r14	;#0x0074
    b068:	04 34       	jge	$+10     	;abs 0xb072
    b06a:	7e 90 70 00 	cmp.b	#112,	r14	;#0x0070
    b06e:	07 20       	jnz	$+16     	;abs 0xb07e
    b070:	b8 3c       	jmp	$+370    	;abs 0xb1e2
    b072:	7e 90 75 00 	cmp.b	#117,	r14	;#0x0075
    b076:	d1 24       	jz	$+420    	;abs 0xb21a
    b078:	7e 90 78 00 	cmp.b	#120,	r14	;#0x0078
    b07c:	d2 24       	jz	$+422    	;abs 0xb222
    b07e:	19 41 3e 00 	mov	62(r1),	r9	;0x003e(r1)
    b082:	18 41 2c 00 	mov	44(r1),	r8	;0x002c(r1)
    b086:	08 89       	sub	r9,	r8	
    b088:	30 40 94 b5 	br	#0xb594	
    b08c:	b1 42 28 00 	mov	#8,	40(r1)	;r2 As==11, 0x0028(r1)
    b090:	cb 3c       	jmp	$+408    	;abs 0xb228
    b092:	f1 d2 00 00 	bis.b	#8,	0(r1)	;r2 As==11, 0x0000(r1)
    b096:	30 40 c4 b5 	br	#0xb5c4	
    b09a:	69 41       	mov.b	@r1,	r9	
    b09c:	59 f3       	and.b	#1,	r9	;r3 As==01
    b09e:	6e 41       	mov.b	@r1,	r14	
    b0a0:	04 24       	jz	$+10     	;abs 0xb0aa
    b0a2:	7e f0 fe ff 	and.b	#-2,	r14	;#0xfffe
    b0a6:	6e d3       	bis.b	#2,	r14	;r3 As==10
    b0a8:	01 3c       	jmp	$+4      	;abs 0xb0ac
    b0aa:	5e d3       	bis.b	#1,	r14	;r3 As==01
    b0ac:	c1 4e 00 00 	mov.b	r14,	0(r1)	;0x0000(r1)
    b0b0:	30 40 c4 b5 	br	#0xb5c4	
    b0b4:	f1 d0 10 00 	bis.b	#16,	0(r1)	;#0x0010, 0x0000(r1)
    b0b8:	00 00 
    b0ba:	30 40 c4 b5 	br	#0xb5c4	
    b0be:	f1 40 2b 00 	mov.b	#43,	2(r1)	;#0x002b, 0x0002(r1)
    b0c2:	02 00 
    b0c4:	30 40 c4 b5 	br	#0xb5c4	
    b0c8:	f1 90 2b 00 	cmp.b	#43,	2(r1)	;#0x002b, 0x0002(r1)
    b0cc:	02 00 
    b0ce:	02 20       	jnz	$+6      	;abs 0xb0d4
    b0d0:	30 40 c4 b5 	br	#0xb5c4	
    b0d4:	f1 40 20 00 	mov.b	#32,	2(r1)	;#0x0020, 0x0002(r1)
    b0d8:	02 00 
    b0da:	30 40 c4 b5 	br	#0xb5c4	
    b0de:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    b0e2:	02 24       	jz	$+6      	;abs 0xb0e8
    b0e4:	30 40 aa b5 	br	#0xb5aa	
    b0e8:	d1 43 2e 00 	mov.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    b0ec:	30 40 c4 b5 	br	#0xb5c4	
    b0f0:	0e 45       	mov	r5,	r14	
    b0f2:	2e 53       	incd	r14		
    b0f4:	2a 45       	mov	@r5,	r10	
    b0f6:	0a 93       	tst	r10		
    b0f8:	03 38       	jl	$+8      	;abs 0xb100
    b0fa:	81 4a 26 00 	mov	r10,	38(r1)	;0x0026(r1)
    b0fe:	0d 3c       	jmp	$+28     	;abs 0xb11a
    b100:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    b104:	02 24       	jz	$+6      	;abs 0xb10a
    b106:	30 40 ba b5 	br	#0xb5ba	
    b10a:	f1 d0 10 00 	bis.b	#16,	0(r1)	;#0x0010, 0x0000(r1)
    b10e:	00 00 
    b110:	3a e3       	inv	r10		
    b112:	81 4a 26 00 	mov	r10,	38(r1)	;0x0026(r1)
    b116:	91 53 26 00 	inc	38(r1)		;0x0026(r1)
    b11a:	05 4e       	mov	r14,	r5	
    b11c:	27 3c       	jmp	$+80     	;abs 0xb16c
    b11e:	81 93 26 00 	tst	38(r1)		;0x0026(r1)
    b122:	15 20       	jnz	$+44     	;abs 0xb14e
    b124:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    b128:	12 20       	jnz	$+38     	;abs 0xb14e
    b12a:	69 41       	mov.b	@r1,	r9	
    b12c:	79 f0 10 00 	and.b	#16,	r9	;#0x0010
    b130:	5e 43       	mov.b	#1,	r14	;r3 As==01
    b132:	01 24       	jz	$+4      	;abs 0xb136
    b134:	4e 43       	clr.b	r14		
    b136:	4e 4e       	mov.b	r14,	r14	
    b138:	0e 11       	rra	r14		
    b13a:	0e 43       	clr	r14		
    b13c:	4e 10       	rrc.b	r14		
    b13e:	6a 41       	mov.b	@r1,	r10	
    b140:	7a f0 7f 00 	and.b	#127,	r10	;#0x007f
    b144:	4a de       	bis.b	r14,	r10	
    b146:	c1 4a 00 00 	mov.b	r10,	0(r1)	;0x0000(r1)
    b14a:	30 40 c4 b5 	br	#0xb5c4	
    b14e:	1a 41 26 00 	mov	38(r1),	r10	;0x0026(r1)
    b152:	0a 5a       	rla	r10		
    b154:	0c 4a       	mov	r10,	r12	
    b156:	0c 5c       	rla	r12		
    b158:	0c 5c       	rla	r12		
    b15a:	0a 5c       	add	r12,	r10	
    b15c:	81 4a 26 00 	mov	r10,	38(r1)	;0x0026(r1)
    b160:	b1 50 d0 ff 	add	#-48,	38(r1)	;#0xffd0, 0x0026(r1)
    b164:	26 00 
    b166:	8e 11       	sxt	r14		
    b168:	81 5e 26 00 	add	r14,	38(r1)	;0x0026(r1)
    b16c:	d1 43 2a 00 	mov.b	#1,	42(r1)	;r3 As==01, 0x002a(r1)
    b170:	30 40 c4 b5 	br	#0xb5c4	
    b174:	07 45       	mov	r5,	r7	
    b176:	27 53       	incd	r7		
    b178:	6e 45       	mov.b	@r5,	r14	
    b17a:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    b17e:	03 20       	jnz	$+8      	;abs 0xb186
    b180:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    b184:	26 27       	jz	$-434    	;abs 0xafd2
    b186:	c1 4e 04 00 	mov.b	r14,	4(r1)	;0x0004(r1)
    b18a:	c1 43 05 00 	mov.b	#0,	5(r1)	;r3 As==00, 0x0005(r1)
    b18e:	0e 41       	mov	r1,	r14	
    b190:	2e 52       	add	#4,	r14	;r2 As==10
    b192:	03 3c       	jmp	$+8      	;abs 0xb19a
    b194:	07 45       	mov	r5,	r7	
    b196:	27 53       	incd	r7		
    b198:	2e 45       	mov	@r5,	r14	
    b19a:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    b19e:	07 24       	jz	$+16     	;abs 0xb1ae
    b1a0:	e1 d2 01 00 	bis.b	#4,	1(r1)	;r2 As==10, 0x0001(r1)
    b1a4:	1f 41 26 00 	mov	38(r1),	r15	;0x0026(r1)
    b1a8:	c1 4f 03 00 	mov.b	r15,	3(r1)	;0x0003(r1)
    b1ac:	06 3c       	jmp	$+14     	;abs 0xb1ba
    b1ae:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    b1b2:	03 24       	jz	$+8      	;abs 0xb1ba
    b1b4:	91 41 26 00 	mov	38(r1),	48(r1)	;0x0026(r1), 0x0030(r1)
    b1b8:	30 00 
    b1ba:	0e 93       	tst	r14		
    b1bc:	02 20       	jnz	$+6      	;abs 0xb1c2
    b1be:	3e 40 0e ba 	mov	#-17906,r14	;#0xba0e
    b1c2:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    b1c6:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    b1ca:	1d 41 34 00 	mov	52(r1),	r13	;0x0034(r1)
    b1ce:	1f 41 3e 00 	mov	62(r1),	r15	;0x003e(r1)
    b1d2:	b0 12 b8 ad 	call	#0xadb8	
    b1d6:	21 52       	add	#4,	r1	;r2 As==10
    b1d8:	81 5f 2c 00 	add	r15,	44(r1)	;0x002c(r1)
    b1dc:	05 47       	mov	r7,	r5	
    b1de:	30 40 a6 b5 	br	#0xb5a6	
    b1e2:	07 45       	mov	r5,	r7	
    b1e4:	27 53       	incd	r7		
    b1e6:	29 45       	mov	@r5,	r9	
    b1e8:	81 49 1e 00 	mov	r9,	30(r1)	;0x001e(r1)
    b1ec:	5e 43       	mov.b	#1,	r14	;r3 As==01
    b1ee:	09 93       	tst	r9		
    b1f0:	01 20       	jnz	$+4      	;abs 0xb1f4
    b1f2:	4e 43       	clr.b	r14		
    b1f4:	4e 5e       	rla.b	r14		
    b1f6:	4e 5e       	rla.b	r14		
    b1f8:	4e 5e       	rla.b	r14		
    b1fa:	6a 41       	mov.b	@r1,	r10	
    b1fc:	7a f0 f7 ff 	and.b	#-9,	r10	;#0xfff7
    b200:	4a de       	bis.b	r14,	r10	
    b202:	c1 4a 00 00 	mov.b	r10,	0(r1)	;0x0000(r1)
    b206:	05 47       	mov	r7,	r5	
    b208:	b1 40 10 00 	mov	#16,	40(r1)	;#0x0010, 0x0028(r1)
    b20c:	28 00 
    b20e:	53 3c       	jmp	$+168    	;abs 0xb2b6
    b210:	d1 d3 01 00 	bis.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    b214:	06 3c       	jmp	$+14     	;abs 0xb222
    b216:	e1 d2 00 00 	bis.b	#4,	0(r1)	;r2 As==10, 0x0000(r1)
    b21a:	b1 40 0a 00 	mov	#10,	40(r1)	;#0x000a, 0x0028(r1)
    b21e:	28 00 
    b220:	03 3c       	jmp	$+8      	;abs 0xb228
    b222:	b1 40 10 00 	mov	#16,	40(r1)	;#0x0010, 0x0028(r1)
    b226:	28 00 
    b228:	6b 41       	mov.b	@r1,	r11	
    b22a:	6b b3       	bit.b	#2,	r11	;r3 As==10
    b22c:	24 24       	jz	$+74     	;abs 0xb276
    b22e:	0c 45       	mov	r5,	r12	
    b230:	3c 52       	add	#8,	r12	;r2 As==11
    b232:	28 45       	mov	@r5,	r8	
    b234:	17 45 02 00 	mov	2(r5),	r7	;0x0002(r5)
    b238:	16 45 04 00 	mov	4(r5),	r6	;0x0004(r5)
    b23c:	1b 45 06 00 	mov	6(r5),	r11	;0x0006(r5)
    b240:	81 48 1e 00 	mov	r8,	30(r1)	;0x001e(r1)
    b244:	81 47 20 00 	mov	r7,	32(r1)	;0x0020(r1)
    b248:	81 46 22 00 	mov	r6,	34(r1)	;0x0022(r1)
    b24c:	81 4b 24 00 	mov	r11,	36(r1)	;0x0024(r1)
    b250:	d1 43 2b 00 	mov.b	#1,	43(r1)	;r3 As==01, 0x002b(r1)
    b254:	08 93       	tst	r8		
    b256:	06 20       	jnz	$+14     	;abs 0xb264
    b258:	07 93       	tst	r7		
    b25a:	04 20       	jnz	$+10     	;abs 0xb264
    b25c:	06 93       	tst	r6		
    b25e:	02 20       	jnz	$+6      	;abs 0xb264
    b260:	0b 93       	tst	r11		
    b262:	02 24       	jz	$+6      	;abs 0xb268
    b264:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    b268:	0b 5b       	rla	r11		
    b26a:	0b 43       	clr	r11		
    b26c:	0b 6b       	rlc	r11		
    b26e:	c1 4b 2f 00 	mov.b	r11,	47(r1)	;0x002f(r1)
    b272:	05 4c       	mov	r12,	r5	
    b274:	20 3c       	jmp	$+66     	;abs 0xb2b6
    b276:	5b f3       	and.b	#1,	r11	;r3 As==01
    b278:	07 45       	mov	r5,	r7	
    b27a:	0d 24       	jz	$+28     	;abs 0xb296
    b27c:	27 52       	add	#4,	r7	;r2 As==10
    b27e:	28 45       	mov	@r5,	r8	
    b280:	1b 45 02 00 	mov	2(r5),	r11	;0x0002(r5)
    b284:	81 48 1e 00 	mov	r8,	30(r1)	;0x001e(r1)
    b288:	81 4b 20 00 	mov	r11,	32(r1)	;0x0020(r1)
    b28c:	d1 43 2b 00 	mov.b	#1,	43(r1)	;r3 As==01, 0x002b(r1)
    b290:	08 93       	tst	r8		
    b292:	09 20       	jnz	$+20     	;abs 0xb2a6
    b294:	06 3c       	jmp	$+14     	;abs 0xb2a2
    b296:	27 53       	incd	r7		
    b298:	2b 45       	mov	@r5,	r11	
    b29a:	81 4b 1e 00 	mov	r11,	30(r1)	;0x001e(r1)
    b29e:	d1 43 2b 00 	mov.b	#1,	43(r1)	;r3 As==01, 0x002b(r1)
    b2a2:	0b 93       	tst	r11		
    b2a4:	02 24       	jz	$+6      	;abs 0xb2aa
    b2a6:	c1 43 2b 00 	mov.b	#0,	43(r1)	;r3 As==00, 0x002b(r1)
    b2aa:	0b 5b       	rla	r11		
    b2ac:	0b 43       	clr	r11		
    b2ae:	0b 6b       	rlc	r11		
    b2b0:	c1 4b 2f 00 	mov.b	r11,	47(r1)	;0x002f(r1)
    b2b4:	05 47       	mov	r7,	r5	
    b2b6:	f1 b2 00 00 	bit.b	#8,	0(r1)	;r2 As==11, 0x0000(r1)
    b2ba:	12 24       	jz	$+38     	;abs 0xb2e0
    b2bc:	c1 93 2b 00 	tst.b	43(r1)		;0x002b(r1)
    b2c0:	0f 20       	jnz	$+32     	;abs 0xb2e0
    b2c2:	68 41       	mov.b	@r1,	r8	
    b2c4:	b1 90 10 00 	cmp	#16,	40(r1)	;#0x0010, 0x0028(r1)
    b2c8:	28 00 
    b2ca:	03 20       	jnz	$+8      	;abs 0xb2d2
    b2cc:	78 d0 40 00 	bis.b	#64,	r8	;#0x0040
    b2d0:	05 3c       	jmp	$+12     	;abs 0xb2dc
    b2d2:	b1 92 28 00 	cmp	#8,	40(r1)	;r2 As==11, 0x0028(r1)
    b2d6:	04 20       	jnz	$+10     	;abs 0xb2e0
    b2d8:	78 d0 20 00 	bis.b	#32,	r8	;#0x0020
    b2dc:	c1 48 00 00 	mov.b	r8,	0(r1)	;0x0000(r1)
    b2e0:	68 41       	mov.b	@r1,	r8	
    b2e2:	68 b2       	bit.b	#4,	r8	;r2 As==10
    b2e4:	30 24       	jz	$+98     	;abs 0xb346
    b2e6:	c1 93 2f 00 	tst.b	47(r1)		;0x002f(r1)
    b2ea:	2d 24       	jz	$+92     	;abs 0xb346
    b2ec:	f1 40 2d 00 	mov.b	#45,	2(r1)	;#0x002d, 0x0002(r1)
    b2f0:	02 00 
    b2f2:	68 b3       	bit.b	#2,	r8	;r3 As==10
    b2f4:	11 24       	jz	$+36     	;abs 0xb318
    b2f6:	b1 e3 1e 00 	xor	#-1,	30(r1)	;r3 As==11, 0x001e(r1)
    b2fa:	b1 e3 20 00 	xor	#-1,	32(r1)	;r3 As==11, 0x0020(r1)
    b2fe:	b1 e3 22 00 	xor	#-1,	34(r1)	;r3 As==11, 0x0022(r1)
    b302:	b1 e3 24 00 	xor	#-1,	36(r1)	;r3 As==11, 0x0024(r1)
    b306:	91 53 1e 00 	inc	30(r1)		;0x001e(r1)
    b30a:	81 63 20 00 	adc	32(r1)		;0x0020(r1)
    b30e:	81 63 22 00 	adc	34(r1)		;0x0022(r1)
    b312:	81 63 24 00 	adc	36(r1)		;0x0024(r1)
    b316:	17 3c       	jmp	$+48     	;abs 0xb346
    b318:	58 b3       	bit.b	#1,	r8	;r3 As==01
    b31a:	0f 24       	jz	$+32     	;abs 0xb33a
    b31c:	1a 41 1e 00 	mov	30(r1),	r10	;0x001e(r1)
    b320:	1b 41 20 00 	mov	32(r1),	r11	;0x0020(r1)
    b324:	3a e3       	inv	r10		
    b326:	3b e3       	inv	r11		
    b328:	0e 4a       	mov	r10,	r14	
    b32a:	0f 4b       	mov	r11,	r15	
    b32c:	1e 53       	inc	r14		
    b32e:	0f 63       	adc	r15		
    b330:	81 4e 1e 00 	mov	r14,	30(r1)	;0x001e(r1)
    b334:	81 4f 20 00 	mov	r15,	32(r1)	;0x0020(r1)
    b338:	06 3c       	jmp	$+14     	;abs 0xb346
    b33a:	1a 41 1e 00 	mov	30(r1),	r10	;0x001e(r1)
    b33e:	3a e3       	inv	r10		
    b340:	1a 53       	inc	r10		
    b342:	81 4a 1e 00 	mov	r10,	30(r1)	;0x001e(r1)
    b346:	c1 43 1b 00 	mov.b	#0,	27(r1)	;r3 As==00, 0x001b(r1)
    b34a:	68 b3       	bit.b	#2,	r8	;r3 As==10
    b34c:	6a 24       	jz	$+214    	;abs 0xb422
    b34e:	16 41 1e 00 	mov	30(r1),	r6	;0x001e(r1)
    b352:	91 41 20 00 	mov	32(r1),	60(r1)	;0x0020(r1), 0x003c(r1)
    b356:	3c 00 
    b358:	18 41 22 00 	mov	34(r1),	r8	;0x0022(r1)
    b35c:	14 41 24 00 	mov	36(r1),	r4	;0x0024(r1)
    b360:	07 41       	mov	r1,	r7	
    b362:	37 50 1a 00 	add	#26,	r7	;#0x001a
    b366:	09 46       	mov	r6,	r9	
    b368:	91 41 28 00 	mov	40(r1),	50(r1)	;0x0028(r1), 0x0032(r1)
    b36c:	32 00 
    b36e:	1b 41 28 00 	mov	40(r1),	r11	;0x0028(r1)
    b372:	8b 10       	swpb	r11		
    b374:	8b 11       	sxt	r11		
    b376:	8b 10       	swpb	r11		
    b378:	8b 11       	sxt	r11		
    b37a:	81 4b 34 00 	mov	r11,	52(r1)	;0x0034(r1)
    b37e:	81 4b 36 00 	mov	r11,	54(r1)	;0x0036(r1)
    b382:	81 4b 38 00 	mov	r11,	56(r1)	;0x0038(r1)
    b386:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    b38a:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    b38e:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    b392:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    b396:	0c 49       	mov	r9,	r12	
    b398:	1d 41 44 00 	mov	68(r1),	r13	;0x0044(r1)
    b39c:	0e 48       	mov	r8,	r14	
    b39e:	0f 44       	mov	r4,	r15	
    b3a0:	b0 12 00 b7 	call	#0xb700	
    b3a4:	31 52       	add	#8,	r1	;r2 As==11
    b3a6:	0b 4c       	mov	r12,	r11	
    b3a8:	3c 90 0a 00 	cmp	#10,	r12	;#0x000a
    b3ac:	05 34       	jge	$+12     	;abs 0xb3b8
    b3ae:	7b 50 30 00 	add.b	#48,	r11	;#0x0030
    b3b2:	c7 4b 00 00 	mov.b	r11,	0(r7)	;0x0000(r7)
    b3b6:	0c 3c       	jmp	$+26     	;abs 0xb3d0
    b3b8:	4b 4c       	mov.b	r12,	r11	
    b3ba:	d1 b3 01 00 	bit.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    b3be:	03 24       	jz	$+8      	;abs 0xb3c6
    b3c0:	7a 40 37 00 	mov.b	#55,	r10	;#0x0037
    b3c4:	02 3c       	jmp	$+6      	;abs 0xb3ca
    b3c6:	7a 40 57 00 	mov.b	#87,	r10	;#0x0057
    b3ca:	4a 5b       	add.b	r11,	r10	
    b3cc:	c7 4a 00 00 	mov.b	r10,	0(r7)	;0x0000(r7)
    b3d0:	06 47       	mov	r7,	r6	
    b3d2:	36 53       	add	#-1,	r6	;r3 As==11
    b3d4:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    b3d8:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    b3dc:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    b3e0:	11 12 3a 00 	push	58(r1)		;0x003a(r1)
    b3e4:	0c 49       	mov	r9,	r12	
    b3e6:	1d 41 44 00 	mov	68(r1),	r13	;0x0044(r1)
    b3ea:	0e 48       	mov	r8,	r14	
    b3ec:	0f 44       	mov	r4,	r15	
    b3ee:	b0 12 da b6 	call	#0xb6da	
    b3f2:	31 52       	add	#8,	r1	;r2 As==11
    b3f4:	09 4c       	mov	r12,	r9	
    b3f6:	81 4d 3c 00 	mov	r13,	60(r1)	;0x003c(r1)
    b3fa:	08 4e       	mov	r14,	r8	
    b3fc:	04 4f       	mov	r15,	r4	
    b3fe:	37 53       	add	#-1,	r7	;r3 As==11
    b400:	0c 93       	tst	r12		
    b402:	b2 23       	jnz	$-154    	;abs 0xb368
    b404:	0d 93       	tst	r13		
    b406:	b0 23       	jnz	$-158    	;abs 0xb368
    b408:	0e 93       	tst	r14		
    b40a:	ae 23       	jnz	$-162    	;abs 0xb368
    b40c:	0f 93       	tst	r15		
    b40e:	ac 23       	jnz	$-166    	;abs 0xb368
    b410:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e(r1)
    b414:	81 43 20 00 	mov	#0,	32(r1)	;r3 As==00, 0x0020(r1)
    b418:	81 43 22 00 	mov	#0,	34(r1)	;r3 As==00, 0x0022(r1)
    b41c:	81 43 24 00 	mov	#0,	36(r1)	;r3 As==00, 0x0024(r1)
    b420:	6c 3c       	jmp	$+218    	;abs 0xb4fa
    b422:	58 b3       	bit.b	#1,	r8	;r3 As==01
    b424:	3e 24       	jz	$+126    	;abs 0xb4a2
    b426:	14 41 1e 00 	mov	30(r1),	r4	;0x001e(r1)
    b42a:	17 41 20 00 	mov	32(r1),	r7	;0x0020(r1)
    b42e:	08 41       	mov	r1,	r8	
    b430:	38 50 1a 00 	add	#26,	r8	;#0x001a
    b434:	19 41 28 00 	mov	40(r1),	r9	;0x0028(r1)
    b438:	89 10       	swpb	r9		
    b43a:	89 11       	sxt	r9		
    b43c:	89 10       	swpb	r9		
    b43e:	89 11       	sxt	r9		
    b440:	1c 41 28 00 	mov	40(r1),	r12	;0x0028(r1)
    b444:	0d 49       	mov	r9,	r13	
    b446:	0e 44       	mov	r4,	r14	
    b448:	0f 47       	mov	r7,	r15	
    b44a:	b0 12 72 b6 	call	#0xb672	
    b44e:	0b 4e       	mov	r14,	r11	
    b450:	3e 90 0a 00 	cmp	#10,	r14	;#0x000a
    b454:	05 34       	jge	$+12     	;abs 0xb460
    b456:	7b 50 30 00 	add.b	#48,	r11	;#0x0030
    b45a:	c8 4b 00 00 	mov.b	r11,	0(r8)	;0x0000(r8)
    b45e:	0c 3c       	jmp	$+26     	;abs 0xb478
    b460:	4b 4e       	mov.b	r14,	r11	
    b462:	d1 b3 01 00 	bit.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    b466:	03 24       	jz	$+8      	;abs 0xb46e
    b468:	7a 40 37 00 	mov.b	#55,	r10	;#0x0037
    b46c:	02 3c       	jmp	$+6      	;abs 0xb472
    b46e:	7a 40 57 00 	mov.b	#87,	r10	;#0x0057
    b472:	4a 5b       	add.b	r11,	r10	
    b474:	c8 4a 00 00 	mov.b	r10,	0(r8)	;0x0000(r8)
    b478:	06 48       	mov	r8,	r6	
    b47a:	36 53       	add	#-1,	r6	;r3 As==11
    b47c:	1c 41 28 00 	mov	40(r1),	r12	;0x0028(r1)
    b480:	0d 49       	mov	r9,	r13	
    b482:	0e 44       	mov	r4,	r14	
    b484:	0f 47       	mov	r7,	r15	
    b486:	b0 12 3c b6 	call	#0xb63c	
    b48a:	04 4e       	mov	r14,	r4	
    b48c:	07 4f       	mov	r15,	r7	
    b48e:	38 53       	add	#-1,	r8	;r3 As==11
    b490:	0e 93       	tst	r14		
    b492:	d0 23       	jnz	$-94     	;abs 0xb434
    b494:	0f 93       	tst	r15		
    b496:	ce 23       	jnz	$-98     	;abs 0xb434
    b498:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e(r1)
    b49c:	81 43 20 00 	mov	#0,	32(r1)	;r3 As==00, 0x0020(r1)
    b4a0:	2c 3c       	jmp	$+90     	;abs 0xb4fa
    b4a2:	17 41 1e 00 	mov	30(r1),	r7	;0x001e(r1)
    b4a6:	08 41       	mov	r1,	r8	
    b4a8:	38 50 1a 00 	add	#26,	r8	;#0x001a
    b4ac:	1e 41 28 00 	mov	40(r1),	r14	;0x0028(r1)
    b4b0:	0f 47       	mov	r7,	r15	
    b4b2:	b0 12 34 b6 	call	#0xb634	
    b4b6:	0d 4f       	mov	r15,	r13	
    b4b8:	3f 90 0a 00 	cmp	#10,	r15	;#0x000a
    b4bc:	05 34       	jge	$+12     	;abs 0xb4c8
    b4be:	7d 50 30 00 	add.b	#48,	r13	;#0x0030
    b4c2:	c8 4d 00 00 	mov.b	r13,	0(r8)	;0x0000(r8)
    b4c6:	0c 3c       	jmp	$+26     	;abs 0xb4e0
    b4c8:	4d 4f       	mov.b	r15,	r13	
    b4ca:	d1 b3 01 00 	bit.b	#1,	1(r1)	;r3 As==01, 0x0001(r1)
    b4ce:	03 24       	jz	$+8      	;abs 0xb4d6
    b4d0:	7c 40 37 00 	mov.b	#55,	r12	;#0x0037
    b4d4:	02 3c       	jmp	$+6      	;abs 0xb4da
    b4d6:	7c 40 57 00 	mov.b	#87,	r12	;#0x0057
    b4da:	4c 5d       	add.b	r13,	r12	
    b4dc:	c8 4c 00 00 	mov.b	r12,	0(r8)	;0x0000(r8)
    b4e0:	06 48       	mov	r8,	r6	
    b4e2:	36 53       	add	#-1,	r6	;r3 As==11
    b4e4:	1e 41 28 00 	mov	40(r1),	r14	;0x0028(r1)
    b4e8:	0f 47       	mov	r7,	r15	
    b4ea:	b0 12 1a b6 	call	#0xb61a	
    b4ee:	07 4f       	mov	r15,	r7	
    b4f0:	38 53       	add	#-1,	r8	;r3 As==11
    b4f2:	0f 93       	tst	r15		
    b4f4:	db 23       	jnz	$-72     	;abs 0xb4ac
    b4f6:	81 43 1e 00 	mov	#0,	30(r1)	;r3 As==00, 0x001e(r1)
    b4fa:	b1 90 0a 00 	cmp	#10,	40(r1)	;#0x000a, 0x0028(r1)
    b4fe:	28 00 
    b500:	02 24       	jz	$+6      	;abs 0xb506
    b502:	c1 43 02 00 	mov.b	#0,	2(r1)	;r3 As==00, 0x0002(r1)
    b506:	c1 93 2e 00 	tst.b	46(r1)		;0x002e(r1)
    b50a:	2a 24       	jz	$+86     	;abs 0xb560
    b50c:	0f 41       	mov	r1,	r15	
    b50e:	3f 50 1c 00 	add	#28,	r15	;#0x001c
    b512:	81 4f 42 00 	mov	r15,	66(r1)	;0x0042(r1)
    b516:	1a 41 1c 00 	mov	28(r1),	r10	;0x001c(r1)
    b51a:	8a 10       	swpb	r10		
    b51c:	8a 11       	sxt	r10		
    b51e:	8a 10       	swpb	r10		
    b520:	8a 11       	sxt	r10		
    b522:	81 4a 44 00 	mov	r10,	68(r1)	;0x0044(r1)
    b526:	81 46 46 00 	mov	r6,	70(r1)	;0x0046(r1)
    b52a:	0a 46       	mov	r6,	r10	
    b52c:	8a 10       	swpb	r10		
    b52e:	8a 11       	sxt	r10		
    b530:	8a 10       	swpb	r10		
    b532:	8a 11       	sxt	r10		
    b534:	81 4a 48 00 	mov	r10,	72(r1)	;0x0048(r1)
    b538:	1c 41 42 00 	mov	66(r1),	r12	;0x0042(r1)
    b53c:	1d 41 44 00 	mov	68(r1),	r13	;0x0044(r1)
    b540:	1c 81 46 00 	sub	70(r1),	r12	;0x0046(r1)
    b544:	1d 71 48 00 	subc	72(r1),	r13	;0x0048(r1)
    b548:	2c 83       	decd	r12		
    b54a:	1c 91 26 00 	cmp	38(r1),	r12	;0x0026(r1)
    b54e:	0e 2c       	jc	$+30     	;abs 0xb56c
    b550:	e1 d3 01 00 	bis.b	#2,	1(r1)	;r3 As==10, 0x0001(r1)
    b554:	5e 41 26 00 	mov.b	38(r1),	r14	;0x0026(r1)
    b558:	4e 8c       	sub.b	r12,	r14	
    b55a:	c1 4e 03 00 	mov.b	r14,	3(r1)	;0x0003(r1)
    b55e:	06 3c       	jmp	$+14     	;abs 0xb56c
    b560:	c1 93 2a 00 	tst.b	42(r1)		;0x002a(r1)
    b564:	03 24       	jz	$+8      	;abs 0xb56c
    b566:	91 41 26 00 	mov	38(r1),	48(r1)	;0x0026(r1), 0x0030(r1)
    b56a:	30 00 
    b56c:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    b570:	11 12 04 00 	push	4(r1)		;0x0004(r1)
    b574:	1d 41 34 00 	mov	52(r1),	r13	;0x0034(r1)
    b578:	0e 46       	mov	r6,	r14	
    b57a:	1e 53       	inc	r14		
    b57c:	1f 41 3e 00 	mov	62(r1),	r15	;0x003e(r1)
    b580:	b0 12 b8 ad 	call	#0xadb8	
    b584:	21 52       	add	#4,	r1	;r2 As==10
    b586:	81 5f 2c 00 	add	r15,	44(r1)	;0x002c(r1)
    b58a:	0d 3c       	jmp	$+28     	;abs 0xb5a6
    b58c:	7f 49       	mov.b	@r9+,	r15	
    b58e:	8f 11       	sxt	r15		
    b590:	91 12 3c 00 	call	60(r1)		;0x003c(r1)
    b594:	0e 49       	mov	r9,	r14	
    b596:	0e 58       	add	r8,	r14	
    b598:	19 91 40 00 	cmp	64(r1),	r9	;0x0040(r1)
    b59c:	f7 2b       	jnc	$-16     	;abs 0xb58c
    b59e:	81 49 3e 00 	mov	r9,	62(r1)	;0x003e(r1)
    b5a2:	81 4e 2c 00 	mov	r14,	44(r1)	;0x002c(r1)
    b5a6:	07 43       	clr	r7		
    b5a8:	0e 3c       	jmp	$+30     	;abs 0xb5c6
    b5aa:	91 41 26 00 	mov	38(r1),	48(r1)	;0x0026(r1), 0x0030(r1)
    b5ae:	30 00 
    b5b0:	d1 43 2e 00 	mov.b	#1,	46(r1)	;r3 As==01, 0x002e(r1)
    b5b4:	c1 43 2a 00 	mov.b	#0,	42(r1)	;r3 As==00, 0x002a(r1)
    b5b8:	03 3c       	jmp	$+8      	;abs 0xb5c0
    b5ba:	05 4e       	mov	r14,	r5	
    b5bc:	d1 43 2a 00 	mov.b	#1,	42(r1)	;r3 As==01, 0x002a(r1)
    b5c0:	81 43 26 00 	mov	#0,	38(r1)	;r3 As==00, 0x0026(r1)
    b5c4:	17 43       	mov	#1,	r7	;r3 As==01
    b5c6:	16 41 40 00 	mov	64(r1),	r6	;0x0040(r1)
    b5ca:	6e 46       	mov.b	@r6,	r14	
    b5cc:	4e 93       	tst.b	r14		
    b5ce:	02 24       	jz	$+6      	;abs 0xb5d4
    b5d0:	30 40 9c af 	br	#0xaf9c	
    b5d4:	1f 41 2c 00 	mov	44(r1),	r15	;0x002c(r1)
    b5d8:	31 50 4a 00 	add	#74,	r1	;#0x004a
    b5dc:	34 41       	pop	r4		
    b5de:	35 41       	pop	r5		
    b5e0:	36 41       	pop	r6		
    b5e2:	37 41       	pop	r7		
    b5e4:	38 41       	pop	r8		
    b5e6:	39 41       	pop	r9		
    b5e8:	3a 41       	pop	r10		
    b5ea:	3b 41       	pop	r11		
    b5ec:	30 41       	ret			

0000b5ee <puts>:
    b5ee:	0b 12       	push	r11		
    b5f0:	0b 4f       	mov	r15,	r11	
    b5f2:	6f 4b       	mov.b	@r11,	r15	
    b5f4:	4f 93       	tst.b	r15		
    b5f6:	06 24       	jz	$+14     	;abs 0xb604
    b5f8:	1b 53       	inc	r11		
    b5fa:	8f 11       	sxt	r15		
    b5fc:	b0 12 70 9e 	call	#0x9e70	
    b600:	0f 93       	tst	r15		
    b602:	f7 37       	jge	$-16     	;abs 0xb5f2
    b604:	cb 93 00 00 	tst.b	0(r11)		;0x0000(r11)
    b608:	05 20       	jnz	$+12     	;abs 0xb614
    b60a:	3f 40 0a 00 	mov	#10,	r15	;#0x000a
    b60e:	b0 12 70 9e 	call	#0x9e70	
    b612:	01 3c       	jmp	$+4      	;abs 0xb616
    b614:	3f 43       	mov	#-1,	r15	;r3 As==11
    b616:	3b 41       	pop	r11		
    b618:	30 41       	ret			

0000b61a <__udivhi3>:
    b61a:	7c 40 10 00 	mov.b	#16,	r12	;#0x0010
    b61e:	0d 4e       	mov	r14,	r13	
    b620:	0e 43       	clr	r14		
    b622:	0f 5f       	rla	r15		
    b624:	0e 6e       	rlc	r14		
    b626:	0e 9d       	cmp	r13,	r14	
    b628:	02 28       	jnc	$+6      	;abs 0xb62e
    b62a:	0e 8d       	sub	r13,	r14	
    b62c:	1f d3       	bis	#1,	r15	;r3 As==01
    b62e:	1c 83       	dec	r12		
    b630:	f8 23       	jnz	$-14     	;abs 0xb622
    b632:	30 41       	ret			

0000b634 <__umodhi3>:
    b634:	b0 12 1a b6 	call	#0xb61a	
    b638:	0f 4e       	mov	r14,	r15	
    b63a:	30 41       	ret			

0000b63c <__udivsi3>:
    b63c:	0b 12       	push	r11		
    b63e:	0a 12       	push	r10		
    b640:	09 12       	push	r9		
    b642:	79 40 20 00 	mov.b	#32,	r9	;#0x0020
    b646:	0a 4c       	mov	r12,	r10	
    b648:	0b 4d       	mov	r13,	r11	
    b64a:	0c 43       	clr	r12		
    b64c:	0d 43       	clr	r13		
    b64e:	0e 5e       	rla	r14		
    b650:	0f 6f       	rlc	r15		
    b652:	0c 6c       	rlc	r12		
    b654:	0d 6d       	rlc	r13		
    b656:	0d 9b       	cmp	r11,	r13	
    b658:	06 28       	jnc	$+14     	;abs 0xb666
    b65a:	02 20       	jnz	$+6      	;abs 0xb660
    b65c:	0c 9a       	cmp	r10,	r12	
    b65e:	03 28       	jnc	$+8      	;abs 0xb666
    b660:	0c 8a       	sub	r10,	r12	
    b662:	0d 7b       	subc	r11,	r13	
    b664:	1e d3       	bis	#1,	r14	;r3 As==01
    b666:	19 83       	dec	r9		
    b668:	f2 23       	jnz	$-26     	;abs 0xb64e
    b66a:	39 41       	pop	r9		
    b66c:	3a 41       	pop	r10		
    b66e:	3b 41       	pop	r11		
    b670:	30 41       	ret			

0000b672 <__umodsi3>:
    b672:	b0 12 3c b6 	call	#0xb63c	
    b676:	0e 4c       	mov	r12,	r14	
    b678:	0f 4d       	mov	r13,	r15	
    b67a:	30 41       	ret			

0000b67c <__xabi_udivmod64>:
    b67c:	07 12       	push	r7		
    b67e:	06 12       	push	r6		
    b680:	05 12       	push	r5		
    b682:	04 12       	push	r4		
    b684:	30 12 40 00 	push	#64		;#0x0040
    b688:	04 48       	mov	r8,	r4	
    b68a:	05 49       	mov	r9,	r5	
    b68c:	06 4a       	mov	r10,	r6	
    b68e:	07 4b       	mov	r11,	r7	
    b690:	08 43       	clr	r8		
    b692:	09 43       	clr	r9		
    b694:	0a 43       	clr	r10		
    b696:	0b 43       	clr	r11		
    b698:	0c 5c       	rla	r12		
    b69a:	0d 6d       	rlc	r13		
    b69c:	0e 6e       	rlc	r14		
    b69e:	0f 6f       	rlc	r15		
    b6a0:	08 68       	rlc	r8		
    b6a2:	09 69       	rlc	r9		
    b6a4:	0a 6a       	rlc	r10		
    b6a6:	0b 6b       	rlc	r11		
    b6a8:	0b 97       	cmp	r7,	r11	
    b6aa:	0e 28       	jnc	$+30     	;abs 0xb6c8
    b6ac:	08 20       	jnz	$+18     	;abs 0xb6be
    b6ae:	0a 96       	cmp	r6,	r10	
    b6b0:	0b 28       	jnc	$+24     	;abs 0xb6c8
    b6b2:	05 20       	jnz	$+12     	;abs 0xb6be
    b6b4:	09 95       	cmp	r5,	r9	
    b6b6:	08 28       	jnc	$+18     	;abs 0xb6c8
    b6b8:	02 20       	jnz	$+6      	;abs 0xb6be
    b6ba:	08 94       	cmp	r4,	r8	
    b6bc:	05 28       	jnc	$+12     	;abs 0xb6c8
    b6be:	08 84       	sub	r4,	r8	
    b6c0:	09 75       	subc	r5,	r9	
    b6c2:	0a 76       	subc	r6,	r10	
    b6c4:	0b 77       	subc	r7,	r11	
    b6c6:	1c d3       	bis	#1,	r12	;r3 As==01
    b6c8:	91 83 00 00 	dec	0(r1)		;0x0000(r1)
    b6cc:	e5 23       	jnz	$-52     	;abs 0xb698
    b6ce:	21 53       	incd	r1		
    b6d0:	34 41       	pop	r4		
    b6d2:	35 41       	pop	r5		
    b6d4:	36 41       	pop	r6		
    b6d6:	37 41       	pop	r7		
    b6d8:	30 41       	ret			

0000b6da <__udivdi3>:
    b6da:	0b 12       	push	r11		
    b6dc:	0a 12       	push	r10		
    b6de:	09 12       	push	r9		
    b6e0:	08 12       	push	r8		
    b6e2:	18 41 0a 00 	mov	10(r1),	r8	;0x000a(r1)
    b6e6:	19 41 0c 00 	mov	12(r1),	r9	;0x000c(r1)
    b6ea:	1a 41 0e 00 	mov	14(r1),	r10	;0x000e(r1)
    b6ee:	1b 41 10 00 	mov	16(r1),	r11	;0x0010(r1)
    b6f2:	b0 12 7c b6 	call	#0xb67c	
    b6f6:	38 41       	pop	r8		
    b6f8:	39 41       	pop	r9		
    b6fa:	3a 41       	pop	r10		
    b6fc:	3b 41       	pop	r11		
    b6fe:	30 41       	ret			

0000b700 <__umoddi3>:
    b700:	0b 12       	push	r11		
    b702:	0a 12       	push	r10		
    b704:	09 12       	push	r9		
    b706:	08 12       	push	r8		
    b708:	18 41 0a 00 	mov	10(r1),	r8	;0x000a(r1)
    b70c:	19 41 0c 00 	mov	12(r1),	r9	;0x000c(r1)
    b710:	1a 41 0e 00 	mov	14(r1),	r10	;0x000e(r1)
    b714:	1b 41 10 00 	mov	16(r1),	r11	;0x0010(r1)
    b718:	b0 12 7c b6 	call	#0xb67c	
    b71c:	0c 48       	mov	r8,	r12	
    b71e:	0d 49       	mov	r9,	r13	
    b720:	0e 4a       	mov	r10,	r14	
    b722:	0f 4b       	mov	r11,	r15	
    b724:	38 41       	pop	r8		
    b726:	39 41       	pop	r9		
    b728:	3a 41       	pop	r10		
    b72a:	3b 41       	pop	r11		
    b72c:	30 41       	ret			

0000b72e <__udivmoddi4>:
    b72e:	0b 12       	push	r11		
    b730:	0a 12       	push	r10		
    b732:	09 12       	push	r9		
    b734:	08 12       	push	r8		
    b736:	07 12       	push	r7		
    b738:	18 41 0c 00 	mov	12(r1),	r8	;0x000c(r1)
    b73c:	19 41 0e 00 	mov	14(r1),	r9	;0x000e(r1)
    b740:	1a 41 10 00 	mov	16(r1),	r10	;0x0010(r1)
    b744:	1b 41 12 00 	mov	18(r1),	r11	;0x0012(r1)
    b748:	b0 12 7c b6 	call	#0xb67c	
    b74c:	17 41 14 00 	mov	20(r1),	r7	;0x0014(r1)
    b750:	87 48 00 00 	mov	r8,	0(r7)	;0x0000(r7)
    b754:	87 49 02 00 	mov	r9,	2(r7)	;0x0002(r7)
    b758:	87 4a 04 00 	mov	r10,	4(r7)	;0x0004(r7)
    b75c:	87 4b 06 00 	mov	r11,	6(r7)	;0x0006(r7)
    b760:	37 41       	pop	r7		
    b762:	38 41       	pop	r8		
    b764:	39 41       	pop	r9		
    b766:	3a 41       	pop	r10		
    b768:	3b 41       	pop	r11		
    b76a:	30 41       	ret			

0000b76c <_unexpected_>:
    b76c:	00 13       	reti			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	26 81 26 81 66 a0 10 96 26 81 3e 88 26 81 12 9f     &.&.f...&.>.&...
    fff0:	26 81 0e 9c 26 81 26 81 26 81 f2 9c 26 81 00 80     &...&.&.&...&...
